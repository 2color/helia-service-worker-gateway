diff --git a/node_modules/ipfs-bitswap/dist/dist/index.min.js b/node_modules/ipfs-bitswap/dist/dist/index.min.js
new file mode 100644
index 0000000..c4eca6f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/index.min.js
@@ -0,0 +1,13 @@
+(function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.IpfsBitswap = factory()}(typeof self !== 'undefined' ? self : this, function () {
+"use strict";var IpfsBitswap=(()=>{var zs=Object.create;var te=Object.defineProperty;var Us=Object.getOwnPropertyDescriptor;var Hs=Object.getOwnPropertyNames;var qs=Object.getPrototypeOf,Ws=Object.prototype.hasOwnProperty;var v=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),z=(r,t)=>{for(var e in t)te(r,e,{get:t[e],enumerable:!0})},Wr=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Hs(t))!Ws.call(r,i)&&i!==e&&te(r,i,{get:()=>t[i],enumerable:!(n=Us(t,i))||n.enumerable});return r};var F=(r,t,e)=>(e=r!=null?zs(qs(r)):{},Wr(t||!r||!r.__esModule?te(e,"default",{value:r,enumerable:!0}):e,r)),$s=r=>Wr(te({},"__esModule",{value:!0}),r);var ln=v((du,un)=>{un.exports=cn;var an=128,To=127,Oo=~To,Po=Math.pow(2,31);function cn(r,t,e){t=t||[],e=e||0;for(var n=e;r>=Po;)t[e++]=r&255|an,r/=128;for(;r&Oo;)t[e++]=r&255|an,r>>>=7;return t[e]=r|0,cn.bytes=e-n+1,t}});var dn=v((pu,fn)=>{fn.exports=Ve;var Do=128,hn=127;function Ve(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a)throw Ve.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&hn)<<i:(o&hn)*Math.pow(2,i),i+=7}while(o>=Do);return Ve.bytes=s-n,e}});var gn=v((gu,pn)=>{var No=Math.pow(2,7),Mo=Math.pow(2,14),Fo=Math.pow(2,21),Ro=Math.pow(2,28),Io=Math.pow(2,35),zo=Math.pow(2,42),Uo=Math.pow(2,49),Ho=Math.pow(2,56),qo=Math.pow(2,63);pn.exports=function(r){return r<No?1:r<Mo?2:r<Fo?3:r<Ro?4:r<Io?5:r<zo?6:r<Uo?7:r<Ho?8:r<qo?9:10}});var yn=v((mu,mn)=>{mn.exports={encode:ln(),decode:dn(),encodingLength:gn()}});var _n=v((yu,bn)=>{"use strict";var wn=yn();bn.exports=r=>{if(!(r instanceof Uint8Array))throw new Error("arg needs to be a Uint8Array");let t=[];for(;r.length>0;){let e=wn.decode(r);t.push(e),r=r.slice(wn.decode.bytes)}return t}});var kn=v((wu,xn)=>{xn.exports=Ge;var vn=128,Wo=127,$o=~Wo,Vo=Math.pow(2,31);function Ge(r,t,e){if(Number.MAX_SAFE_INTEGER&&r>Number.MAX_SAFE_INTEGER)throw Ge.bytes=0,new RangeError("Could not encode varint");t=t||[],e=e||0;for(var n=e;r>=Vo;)t[e++]=r&255|vn,r/=128;for(;r&$o;)t[e++]=r&255|vn,r>>>=7;return t[e]=r|0,Ge.bytes=e-n+1,t}});var Bn=v((bu,En)=>{En.exports=je;var Go=128,Sn=127;function je(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a||i>49)throw je.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&Sn)<<i:(o&Sn)*Math.pow(2,i),i+=7}while(o>=Go);return je.bytes=s-n,e}});var Ln=v((_u,Cn)=>{var jo=Math.pow(2,7),Qo=Math.pow(2,14),Xo=Math.pow(2,21),Jo=Math.pow(2,28),Ko=Math.pow(2,35),Zo=Math.pow(2,42),Yo=Math.pow(2,49),ta=Math.pow(2,56),ea=Math.pow(2,63);Cn.exports=function(r){return r<jo?1:r<Qo?2:r<Xo?3:r<Jo?4:r<Ko?5:r<Zo?6:r<Yo?7:r<ta?8:r<ea?9:10}});var Tn=v((vu,An)=>{An.exports={encode:kn(),decode:Bn(),encodingLength:Ln()}});var Dn=v((ku,Pn)=>{var At=1e3,Tt=At*60,Ot=Tt*60,pt=Ot*24,na=pt*7,ia=pt*365.25;Pn.exports=function(r,t){t=t||{};var e=typeof r;if(e==="string"&&r.length>0)return sa(r);if(e==="number"&&isFinite(r))return t.long?aa(r):oa(r);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(r))};function sa(r){if(r=String(r),!(r.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(r);if(t){var e=parseFloat(t[1]),n=(t[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return e*ia;case"weeks":case"week":case"w":return e*na;case"days":case"day":case"d":return e*pt;case"hours":case"hour":case"hrs":case"hr":case"h":return e*Ot;case"minutes":case"minute":case"mins":case"min":case"m":return e*Tt;case"seconds":case"second":case"secs":case"sec":case"s":return e*At;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return e;default:return}}}}function oa(r){var t=Math.abs(r);return t>=pt?Math.round(r/pt)+"d":t>=Ot?Math.round(r/Ot)+"h":t>=Tt?Math.round(r/Tt)+"m":t>=At?Math.round(r/At)+"s":r+"ms"}function aa(r){var t=Math.abs(r);return t>=pt?re(r,t,pt,"day"):t>=Ot?re(r,t,Ot,"hour"):t>=Tt?re(r,t,Tt,"minute"):t>=At?re(r,t,At,"second"):r+" ms"}function re(r,t,e,n){var i=t>=e*1.5;return Math.round(r/e)+" "+n+(i?"s":"")}});var Mn=v((Su,Nn)=>{function ca(r){e.debug=e,e.default=e,e.coerce=c,e.disable=s,e.enable=i,e.enabled=o,e.humanize=Dn(),e.destroy=u,Object.keys(r).forEach(l=>{e[l]=r[l]}),e.names=[],e.skips=[],e.formatters={};function t(l){let h=0;for(let f=0;f<l.length;f++)h=(h<<5)-h+l.charCodeAt(f),h|=0;return e.colors[Math.abs(h)%e.colors.length]}e.selectColor=t;function e(l){let h,f=null,g,d;function p(...y){if(!p.enabled)return;let S=p,B=Number(new Date),O=B-(h||B);S.diff=O,S.prev=h,S.curr=B,h=B,y[0]=e.coerce(y[0]),typeof y[0]!="string"&&y.unshift("%O");let C=0;y[0]=y[0].replace(/%([a-zA-Z%])/g,(N,P)=>{if(N==="%%")return"%";C++;let R=e.formatters[P];if(typeof R=="function"){let Y=y[C];N=R.call(S,Y),y.splice(C,1),C--}return N}),e.formatArgs.call(S,y),(S.log||e.log).apply(S,y)}return p.namespace=l,p.useColors=e.useColors(),p.color=e.selectColor(l),p.extend=n,p.destroy=e.destroy,Object.defineProperty(p,"enabled",{enumerable:!0,configurable:!1,get:()=>f!==null?f:(g!==e.namespaces&&(g=e.namespaces,d=e.enabled(l)),d),set:y=>{f=y}}),typeof e.init=="function"&&e.init(p),p}function n(l,h){let f=e(this.namespace+(typeof h>"u"?":":h)+l);return f.log=this.log,f}function i(l){e.save(l),e.namespaces=l,e.names=[],e.skips=[];let h,f=(typeof l=="string"?l:"").split(/[\s,]+/),g=f.length;for(h=0;h<g;h++)f[h]&&(l=f[h].replace(/\*/g,".*?"),l[0]==="-"?e.skips.push(new RegExp("^"+l.slice(1)+"$")):e.names.push(new RegExp("^"+l+"$")))}function s(){let l=[...e.names.map(a),...e.skips.map(a).map(h=>"-"+h)].join(",");return e.enable(""),l}function o(l){if(l[l.length-1]==="*")return!0;let h,f;for(h=0,f=e.skips.length;h<f;h++)if(e.skips[h].test(l))return!1;for(h=0,f=e.names.length;h<f;h++)if(e.names[h].test(l))return!0;return!1}function a(l){return l.toString().substring(2,l.toString().length-2).replace(/\.\*\?$/,"*")}function c(l){return l instanceof Error?l.stack||l.message:l}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return e.enable(e.load()),e}Nn.exports=ca});var Fn=v((U,ne)=>{U.formatArgs=la;U.save=ha;U.load=fa;U.useColors=ua;U.storage=da();U.destroy=(()=>{let r=!1;return()=>{r||(r=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();U.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function ua(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function la(r){if(r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+ne.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;r.splice(1,0,t,"color: inherit");let e=0,n=0;r[0].replace(/%[a-zA-Z%]/g,i=>{i!=="%%"&&(e++,i==="%c"&&(n=e))}),r.splice(n,0,t)}U.log=console.debug||console.log||(()=>{});function ha(r){try{r?U.storage.setItem("debug",r):U.storage.removeItem("debug")}catch{}}function fa(){let r;try{r=U.storage.getItem("debug")}catch{}return!r&&typeof process<"u"&&"env"in process&&(r=process.env.DEBUG),r}function da(){try{return localStorage}catch{}}ne.exports=Mn()(U);var{formatters:pa}=ne.exports;pa.j=function(r){try{return JSON.stringify(r)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var zn=v((Uu,In)=>{"use strict";In.exports=ba;function ba(r,t){for(var e=new Array(arguments.length-1),n=0,i=2,s=!0;i<arguments.length;)e[n++]=arguments[i++];return new Promise(function(a,c){e[n]=function(l){if(s)if(s=!1,l)c(l);else{for(var h=new Array(arguments.length-1),f=0;f<h.length;)h[f++]=arguments[f];a.apply(null,h)}};try{r.apply(t||null,e)}catch(u){s&&(s=!1,c(u))}})}});var Wn=v(qn=>{"use strict";var oe=qn;oe.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&t.charAt(e)==="=";)++n;return Math.ceil(t.length*3)/4-n};var Pt=new Array(64),Hn=new Array(123);for(j=0;j<64;)Hn[Pt[j]=j<26?j+65:j<52?j+71:j<62?j-4:j-59|43]=j++;var j;oe.encode=function(t,e,n){for(var i=null,s=[],o=0,a=0,c;e<n;){var u=t[e++];switch(a){case 0:s[o++]=Pt[u>>2],c=(u&3)<<4,a=1;break;case 1:s[o++]=Pt[c|u>>4],c=(u&15)<<2,a=2;break;case 2:s[o++]=Pt[c|u>>6],s[o++]=Pt[u&63],a=0;break}o>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,s)),o=0)}return a&&(s[o++]=Pt[c],s[o++]=61,a===1&&(s[o++]=61)),i?(o&&i.push(String.fromCharCode.apply(String,s.slice(0,o))),i.join("")):String.fromCharCode.apply(String,s.slice(0,o))};var Un="invalid encoding";oe.decode=function(t,e,n){for(var i=n,s=0,o,a=0;a<t.length;){var c=t.charCodeAt(a++);if(c===61&&s>1)break;if((c=Hn[c])===void 0)throw Error(Un);switch(s){case 0:o=c,s=1;break;case 1:e[n++]=o<<2|(c&48)>>4,o=c,s=2;break;case 2:e[n++]=(o&15)<<4|(c&60)>>2,o=c,s=3;break;case 3:e[n++]=(o&3)<<6|c,s=0;break}}if(s===1)throw Error(Un);return n-i};oe.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}});var Vn=v((qu,$n)=>{"use strict";$n.exports=ae;function ae(){this._listeners={}}ae.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this};ae.prototype.off=function(t,e){if(t===void 0)this._listeners={};else if(e===void 0)this._listeners[t]=[];else for(var n=this._listeners[t],i=0;i<n.length;)n[i].fn===e?n.splice(i,1):++i;return this};ae.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],i=1;i<arguments.length;)n.push(arguments[i++]);for(i=0;i<e.length;)e[i].fn.apply(e[i++].ctx,n)}return this}});var Zn=v((Wu,Kn)=>{"use strict";Kn.exports=Gn(Gn);function Gn(r){return typeof Float32Array<"u"?function(){var t=new Float32Array([-0]),e=new Uint8Array(t.buffer),n=e[3]===128;function i(c,u,l){t[0]=c,u[l]=e[0],u[l+1]=e[1],u[l+2]=e[2],u[l+3]=e[3]}function s(c,u,l){t[0]=c,u[l]=e[3],u[l+1]=e[2],u[l+2]=e[1],u[l+3]=e[0]}r.writeFloatLE=n?i:s,r.writeFloatBE=n?s:i;function o(c,u){return e[0]=c[u],e[1]=c[u+1],e[2]=c[u+2],e[3]=c[u+3],t[0]}function a(c,u){return e[3]=c[u],e[2]=c[u+1],e[1]=c[u+2],e[0]=c[u+3],t[0]}r.readFloatLE=n?o:a,r.readFloatBE=n?a:o}():function(){function t(n,i,s,o){var a=i<0?1:0;if(a&&(i=-i),i===0)n(1/i>0?0:2147483648,s,o);else if(isNaN(i))n(2143289344,s,o);else if(i>34028234663852886e22)n((a<<31|2139095040)>>>0,s,o);else if(i<11754943508222875e-54)n((a<<31|Math.round(i/1401298464324817e-60))>>>0,s,o);else{var c=Math.floor(Math.log(i)/Math.LN2),u=Math.round(i*Math.pow(2,-c)*8388608)&8388607;n((a<<31|c+127<<23|u)>>>0,s,o)}}r.writeFloatLE=t.bind(null,jn),r.writeFloatBE=t.bind(null,Qn);function e(n,i,s){var o=n(i,s),a=(o>>31)*2+1,c=o>>>23&255,u=o&8388607;return c===255?u?NaN:a*(1/0):c===0?a*1401298464324817e-60*u:a*Math.pow(2,c-150)*(u+8388608)}r.readFloatLE=e.bind(null,Xn),r.readFloatBE=e.bind(null,Jn)}(),typeof Float64Array<"u"?function(){var t=new Float64Array([-0]),e=new Uint8Array(t.buffer),n=e[7]===128;function i(c,u,l){t[0]=c,u[l]=e[0],u[l+1]=e[1],u[l+2]=e[2],u[l+3]=e[3],u[l+4]=e[4],u[l+5]=e[5],u[l+6]=e[6],u[l+7]=e[7]}function s(c,u,l){t[0]=c,u[l]=e[7],u[l+1]=e[6],u[l+2]=e[5],u[l+3]=e[4],u[l+4]=e[3],u[l+5]=e[2],u[l+6]=e[1],u[l+7]=e[0]}r.writeDoubleLE=n?i:s,r.writeDoubleBE=n?s:i;function o(c,u){return e[0]=c[u],e[1]=c[u+1],e[2]=c[u+2],e[3]=c[u+3],e[4]=c[u+4],e[5]=c[u+5],e[6]=c[u+6],e[7]=c[u+7],t[0]}function a(c,u){return e[7]=c[u],e[6]=c[u+1],e[5]=c[u+2],e[4]=c[u+3],e[3]=c[u+4],e[2]=c[u+5],e[1]=c[u+6],e[0]=c[u+7],t[0]}r.readDoubleLE=n?o:a,r.readDoubleBE=n?a:o}():function(){function t(n,i,s,o,a,c){var u=o<0?1:0;if(u&&(o=-o),o===0)n(0,a,c+i),n(1/o>0?0:2147483648,a,c+s);else if(isNaN(o))n(0,a,c+i),n(2146959360,a,c+s);else if(o>17976931348623157e292)n(0,a,c+i),n((u<<31|2146435072)>>>0,a,c+s);else{var l;if(o<22250738585072014e-324)l=o/5e-324,n(l>>>0,a,c+i),n((u<<31|l/4294967296)>>>0,a,c+s);else{var h=Math.floor(Math.log(o)/Math.LN2);h===1024&&(h=1023),l=o*Math.pow(2,-h),n(l*4503599627370496>>>0,a,c+i),n((u<<31|h+1023<<20|l*1048576&1048575)>>>0,a,c+s)}}}r.writeDoubleLE=t.bind(null,jn,0,4),r.writeDoubleBE=t.bind(null,Qn,4,0);function e(n,i,s,o,a){var c=n(o,a+i),u=n(o,a+s),l=(u>>31)*2+1,h=u>>>20&2047,f=4294967296*(u&1048575)+c;return h===2047?f?NaN:l*(1/0):h===0?l*5e-324*f:l*Math.pow(2,h-1075)*(f+4503599627370496)}r.readDoubleLE=e.bind(null,Xn,0,4),r.readDoubleBE=e.bind(null,Jn,4,0)}(),r}function jn(r,t,e){t[e]=r&255,t[e+1]=r>>>8&255,t[e+2]=r>>>16&255,t[e+3]=r>>>24}function Qn(r,t,e){t[e]=r>>>24,t[e+1]=r>>>16&255,t[e+2]=r>>>8&255,t[e+3]=r&255}function Xn(r,t){return(r[t]|r[t+1]<<8|r[t+2]<<16|r[t+3]<<24)>>>0}function Jn(r,t){return(r[t]<<24|r[t+1]<<16|r[t+2]<<8|r[t+3])>>>0}});var Yn=v((exports,module)=>{"use strict";module.exports=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(r){}return null}});var ei=v(ti=>{"use strict";var Je=ti;Je.length=function(t){for(var e=0,n=0,i=0;i<t.length;++i)n=t.charCodeAt(i),n<128?e+=1:n<2048?e+=2:(n&64512)===55296&&(t.charCodeAt(i+1)&64512)===56320?(++i,e+=4):e+=3;return e};Je.read=function(t,e,n){var i=n-e;if(i<1)return"";for(var s=null,o=[],a=0,c;e<n;)c=t[e++],c<128?o[a++]=c:c>191&&c<224?o[a++]=(c&31)<<6|t[e++]&63:c>239&&c<365?(c=((c&7)<<18|(t[e++]&63)<<12|(t[e++]&63)<<6|t[e++]&63)-65536,o[a++]=55296+(c>>10),o[a++]=56320+(c&1023)):o[a++]=(c&15)<<12|(t[e++]&63)<<6|t[e++]&63,a>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,o)),a=0);return s?(a&&s.push(String.fromCharCode.apply(String,o.slice(0,a))),s.join("")):String.fromCharCode.apply(String,o.slice(0,a))};Je.write=function(t,e,n){for(var i=n,s,o,a=0;a<t.length;++a)s=t.charCodeAt(a),s<128?e[n++]=s:s<2048?(e[n++]=s>>6|192,e[n++]=s&63|128):(s&64512)===55296&&((o=t.charCodeAt(a+1))&64512)===56320?(s=65536+((s&1023)<<10)+(o&1023),++a,e[n++]=s>>18|240,e[n++]=s>>12&63|128,e[n++]=s>>6&63|128,e[n++]=s&63|128):(e[n++]=s>>12|224,e[n++]=s>>6&63|128,e[n++]=s&63|128);return n-i}});var ni=v((Vu,ri)=>{"use strict";ri.exports=_a;function _a(r,t,e){var n=e||8192,i=n>>>1,s=null,o=n;return function(c){if(c<1||c>i)return r(c);o+c>n&&(s=r(n),o=0);var u=t.call(s,o,o+=c);return o&7&&(o=(o|7)+1),u}}});var si=v((Gu,ii)=>{"use strict";ii.exports=D;var $t=yt();function D(r,t){this.lo=r>>>0,this.hi=t>>>0}var mt=D.zero=new D(0,0);mt.toNumber=function(){return 0};mt.zzEncode=mt.zzDecode=function(){return this};mt.length=function(){return 1};var va=D.zeroHash="\0\0\0\0\0\0\0\0";D.fromNumber=function(t){if(t===0)return mt;var e=t<0;e&&(t=-t);var n=t>>>0,i=(t-n)/4294967296>>>0;return e&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new D(n,i)};D.from=function(t){if(typeof t=="number")return D.fromNumber(t);if($t.isString(t))if($t.Long)t=$t.Long.fromString(t);else return D.fromNumber(parseInt(t,10));return t.low||t.high?new D(t.low>>>0,t.high>>>0):mt};D.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=~this.lo+1>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+n*4294967296)}return this.lo+this.hi*4294967296};D.prototype.toLong=function(t){return $t.Long?new $t.Long(this.lo|0,this.hi|0,!!t):{low:this.lo|0,high:this.hi|0,unsigned:!!t}};var at=String.prototype.charCodeAt;D.fromHash=function(t){return t===va?mt:new D((at.call(t,0)|at.call(t,1)<<8|at.call(t,2)<<16|at.call(t,3)<<24)>>>0,(at.call(t,4)|at.call(t,5)<<8|at.call(t,6)<<16|at.call(t,7)<<24)>>>0)};D.prototype.toHash=function(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};D.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this};D.prototype.zzDecode=function(){var t=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this};D.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return n===0?e===0?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10}});var yt=v(Ke=>{"use strict";var m=Ke;m.asPromise=zn();m.base64=Wn();m.EventEmitter=Vn();m.float=Zn();m.inquire=Yn();m.utf8=ei();m.pool=ni();m.LongBits=si();m.isNode=!!(typeof globalThis<"u"&&globalThis&&globalThis.process&&globalThis.process.versions&&globalThis.process.versions.node);m.global=m.isNode&&globalThis||typeof window<"u"&&window||typeof self<"u"&&self||Ke;m.emptyArray=Object.freeze?Object.freeze([]):[];m.emptyObject=Object.freeze?Object.freeze({}):{};m.isInteger=Number.isInteger||function(t){return typeof t=="number"&&isFinite(t)&&Math.floor(t)===t};m.isString=function(t){return typeof t=="string"||t instanceof String};m.isObject=function(t){return t&&typeof t=="object"};m.isset=m.isSet=function(t,e){var n=t[e];return n!=null&&t.hasOwnProperty(e)?typeof n!="object"||(Array.isArray(n)?n.length:Object.keys(n).length)>0:!1};m.Buffer=function(){try{var r=m.inquire("buffer").Buffer;return r.prototype.utf8Write?r:null}catch{return null}}();m._Buffer_from=null;m._Buffer_allocUnsafe=null;m.newBuffer=function(t){return typeof t=="number"?m.Buffer?m._Buffer_allocUnsafe(t):new m.Array(t):m.Buffer?m._Buffer_from(t):typeof Uint8Array>"u"?t:new Uint8Array(t)};m.Array=typeof Uint8Array<"u"?Uint8Array:Array;m.Long=m.global.dcodeIO&&m.global.dcodeIO.Long||m.global.Long||m.inquire("long");m.key2Re=/^true|false|0|1$/;m.key32Re=/^-?(?:0|[1-9][0-9]*)$/;m.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;m.longToHash=function(t){return t?m.LongBits.from(t).toHash():m.LongBits.zeroHash};m.longFromHash=function(t,e){var n=m.LongBits.fromHash(t);return m.Long?m.Long.fromBits(n.lo,n.hi,e):n.toNumber(!!e)};function oi(r,t,e){for(var n=Object.keys(t),i=0;i<n.length;++i)(r[n[i]]===void 0||!e)&&(r[n[i]]=t[n[i]]);return r}m.merge=oi;m.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)};function ai(r){function t(e,n){if(!(this instanceof t))return new t(e,n);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:new Error().stack||""}),n&&oi(this,n)}return t.prototype=Object.create(Error.prototype,{constructor:{value:t,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return r},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),t}m.newError=ai;m.ProtocolError=ai("ProtocolError");m.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var i=Object.keys(this),s=i.length-1;s>-1;--s)if(e[i[s]]===1&&this[i[s]]!==void 0&&this[i[s]]!==null)return i[s]}};m.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}};m.toJSONOptions={longs:String,enums:String,bytes:String,json:!0};m._configure=function(){var r=m.Buffer;if(!r){m._Buffer_from=m._Buffer_allocUnsafe=null;return}m._Buffer_from=r.from!==Uint8Array.from&&r.from||function(e,n){return new r(e,n)},m._Buffer_allocUnsafe=r.allocUnsafe||function(e){return new r(e)}}});var tr=v((Qu,fi)=>{"use strict";fi.exports=T;var K=yt(),Ye,li=K.LongBits,xa=K.utf8;function Q(r,t){return RangeError("index out of range: "+r.pos+" + "+(t||1)+" > "+r.len)}function T(r){this.buf=r,this.pos=0,this.len=r.length}var ci=typeof Uint8Array<"u"?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new T(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new T(t);throw Error("illegal buffer")},hi=function(){return K.Buffer?function(e){return(T.create=function(i){return K.Buffer.isBuffer(i)?new Ye(i):ci(i)})(e)}:ci};T.create=hi();T.prototype._slice=K.Array.prototype.subarray||K.Array.prototype.slice;T.prototype.uint32=function(){var t=4294967295;return function(){if(t=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(t=(t|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return t;if((this.pos+=5)>this.len)throw this.pos=this.len,Q(this,10);return t}}();T.prototype.int32=function(){return this.uint32()|0};T.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(t&1)|0};function Ze(){var r=new li(0,0),t=0;if(this.len-this.pos>4){for(;t<4;++t)if(r.lo=(r.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return r;if(r.lo=(r.lo|(this.buf[this.pos]&127)<<28)>>>0,r.hi=(r.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return r;t=0}else{for(;t<3;++t){if(this.pos>=this.len)throw Q(this);if(r.lo=(r.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return r}return r.lo=(r.lo|(this.buf[this.pos++]&127)<<t*7)>>>0,r}if(this.len-this.pos>4){for(;t<5;++t)if(r.hi=(r.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return r}else for(;t<5;++t){if(this.pos>=this.len)throw Q(this);if(r.hi=(r.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return r}throw Error("invalid varint encoding")}T.prototype.bool=function(){return this.uint32()!==0};function ce(r,t){return(r[t-4]|r[t-3]<<8|r[t-2]<<16|r[t-1]<<24)>>>0}T.prototype.fixed32=function(){if(this.pos+4>this.len)throw Q(this,4);return ce(this.buf,this.pos+=4)};T.prototype.sfixed32=function(){if(this.pos+4>this.len)throw Q(this,4);return ce(this.buf,this.pos+=4)|0};function ui(){if(this.pos+8>this.len)throw Q(this,8);return new li(ce(this.buf,this.pos+=4),ce(this.buf,this.pos+=4))}T.prototype.float=function(){if(this.pos+4>this.len)throw Q(this,4);var t=K.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t};T.prototype.double=function(){if(this.pos+8>this.len)throw Q(this,4);var t=K.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t};T.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw Q(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)};T.prototype.string=function(){var t=this.bytes();return xa.read(t,0,t.length)};T.prototype.skip=function(t){if(typeof t=="number"){if(this.pos+t>this.len)throw Q(this,t);this.pos+=t}else do if(this.pos>=this.len)throw Q(this);while(this.buf[this.pos++]&128);return this};T.prototype.skipType=function(r){switch(r){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(r=this.uint32()&7)!==4;)this.skipType(r);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+r+" at offset "+this.pos)}return this};T._configure=function(r){Ye=r,T.create=hi(),Ye._configure();var t=K.Long?"toLong":"toNumber";K.merge(T.prototype,{int64:function(){return Ze.call(this)[t](!1)},uint64:function(){return Ze.call(this)[t](!0)},sint64:function(){return Ze.call(this).zzDecode()[t](!1)},fixed64:function(){return ui.call(this)[t](!0)},sfixed64:function(){return ui.call(this)[t](!1)}})}});var mi=v((Xu,gi)=>{"use strict";gi.exports=wt;var pi=tr();(wt.prototype=Object.create(pi.prototype)).constructor=wt;var di=yt();function wt(r){pi.call(this,r)}wt._configure=function(){di.Buffer&&(wt.prototype._slice=di.Buffer.prototype.slice)};wt.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))};wt._configure()});var ar=v((Ju,_i)=>{"use strict";_i.exports=_;var $=yt(),er,ue=$.LongBits,yi=$.base64,wi=$.utf8;function Vt(r,t,e){this.fn=r,this.len=t,this.next=void 0,this.val=e}function nr(){}function ka(r){this.head=r.head,this.tail=r.tail,this.len=r.len,this.next=r.states}function _(){this.len=0,this.head=new Vt(nr,0,0),this.tail=this.head,this.states=null}var bi=function(){return $.Buffer?function(){return(_.create=function(){return new er})()}:function(){return new _}};_.create=bi();_.alloc=function(t){return new $.Array(t)};$.Array!==Array&&(_.alloc=$.pool(_.alloc,$.Array.prototype.subarray));_.prototype._push=function(t,e,n){return this.tail=this.tail.next=new Vt(t,e,n),this.len+=e,this};function ir(r,t,e){t[e]=r&255}function Sa(r,t,e){for(;r>127;)t[e++]=r&127|128,r>>>=7;t[e]=r}function sr(r,t){this.len=r,this.next=void 0,this.val=t}sr.prototype=Object.create(Vt.prototype);sr.prototype.fn=Sa;_.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new sr((t=t>>>0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this};_.prototype.int32=function(t){return t<0?this._push(or,10,ue.fromNumber(t)):this.uint32(t)};_.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)};function or(r,t,e){for(;r.hi;)t[e++]=r.lo&127|128,r.lo=(r.lo>>>7|r.hi<<25)>>>0,r.hi>>>=7;for(;r.lo>127;)t[e++]=r.lo&127|128,r.lo=r.lo>>>7;t[e++]=r.lo}_.prototype.uint64=function(t){var e=ue.from(t);return this._push(or,e.length(),e)};_.prototype.int64=_.prototype.uint64;_.prototype.sint64=function(t){var e=ue.from(t).zzEncode();return this._push(or,e.length(),e)};_.prototype.bool=function(t){return this._push(ir,1,t?1:0)};function rr(r,t,e){t[e]=r&255,t[e+1]=r>>>8&255,t[e+2]=r>>>16&255,t[e+3]=r>>>24}_.prototype.fixed32=function(t){return this._push(rr,4,t>>>0)};_.prototype.sfixed32=_.prototype.fixed32;_.prototype.fixed64=function(t){var e=ue.from(t);return this._push(rr,4,e.lo)._push(rr,4,e.hi)};_.prototype.sfixed64=_.prototype.fixed64;_.prototype.float=function(t){return this._push($.float.writeFloatLE,4,t)};_.prototype.double=function(t){return this._push($.float.writeDoubleLE,8,t)};var Ea=$.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var i=0;i<t.length;++i)e[n+i]=t[i]};_.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(ir,1,0);if($.isString(t)){var n=_.alloc(e=yi.length(t));yi.decode(t,n,0),t=n}return this.uint32(e)._push(Ea,e,t)};_.prototype.string=function(t){var e=wi.length(t);return e?this.uint32(e)._push(wi.write,e,t):this._push(ir,1,0)};_.prototype.fork=function(){return this.states=new ka(this),this.head=this.tail=new Vt(nr,0,0),this.len=0,this};_.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Vt(nr,0,0),this.len=0),this};_.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this};_.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e};_._configure=function(r){er=r,_.create=bi(),er._configure()}});var ki=v((Ku,xi)=>{"use strict";xi.exports=Z;var vi=ar();(Z.prototype=Object.create(vi.prototype)).constructor=Z;var ct=yt();function Z(){vi.call(this)}Z._configure=function(){Z.alloc=ct._Buffer_allocUnsafe,Z.writeBytesBuffer=ct.Buffer&&ct.Buffer.prototype instanceof Uint8Array&&ct.Buffer.prototype.set.name==="set"?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var i=0;i<t.length;)e[n++]=t[i++]}};Z.prototype.bytes=function(t){ct.isString(t)&&(t=ct._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(Z.writeBytesBuffer,e,t),this};function Ba(r,t,e){r.length<40?ct.utf8.write(r,t,e):t.utf8Write?t.utf8Write(r,e):t.write(r,e)}Z.prototype.string=function(t){var e=ct.Buffer.byteLength(t);return this.uint32(e),e&&this._push(Ba,e,t),this};Z._configure()});var zi=v((dh,Ii)=>{"use strict";function Ri(r,t){for(let e in t)Object.defineProperty(r,e,{value:t[e],enumerable:!0,configurable:!0});return r}function qa(r,t,e){if(!r||typeof r=="string")throw new TypeError("Please pass an Error to err-code");e||(e={}),typeof t=="object"&&(e=t,t=""),t&&(e.code=t);try{return Ri(r,e)}catch{e.message=r.message,e.stack=r.stack;let i=function(){};return i.prototype=Object.create(Object.getPrototypeOf(r)),Ri(new i,e)}}Ii.exports=qa});var Gi=v((Oh,Vi)=>{"use strict";Vi.exports=function(){return Date.now()}});var Qi=v((Ph,ji)=>{"use strict";var ve=Gi(),_r=class{constructor(t,e,n){let i=this;this._started=ve(),this._rescheduled=0,this._scheduled=e,this._args=n,this._triggered=!1,this._timerWrapper=()=>{i._rescheduled>0?(i._scheduled=i._rescheduled-(ve()-i._started),i._schedule(i._scheduled)):(i._triggered=!0,t.apply(null,i._args))},this._timer=setTimeout(this._timerWrapper,e)}reschedule(t){t||(t=this._scheduled);let e=ve();e+t-(this._started+this._scheduled)<0?(clearTimeout(this._timer),this._schedule(t)):this._triggered?this._schedule(t):(this._started=e,this._rescheduled=t)}_schedule(t){this._triggered=!1,this._started=ve(),this._rescheduled=0,this._scheduled=t,this._timer=setTimeout(this._timerWrapper,t)}clear(){clearTimeout(this._timer)}};function Ka(){if(typeof arguments[0]!="function")throw new Error("callback needed");if(typeof arguments[1]!="number")throw new Error("timeout needed");let r;if(arguments.length>0){r=new Array(arguments.length-2);for(var t=0;t<r.length;t++)r[t]=arguments[t+2]}return new _r(arguments[0],arguments[1],r)}ji.exports=Ka});var Ki=v((Dh,Ji)=>{"use strict";var{AbortController:Za}=globalThis,Xi=Qi(),Qt=class extends Za{constructor(t){super(),this._ms=t,this._timer=Xi(()=>this.abort(),t),Object.setPrototypeOf(this,Qt.prototype)}abort(){return this._timer.clear(),super.abort()}clear(){this._timer.clear()}reset(){this._timer.clear(),this._timer=Xi(()=>this.abort(),this._ms)}};Ji.exports={TimeoutController:Qt}});var Te=v((wf,Er)=>{"use strict";var Rt=typeof Reflect=="object"?Reflect:null,os=Rt&&typeof Rt.apply=="function"?Rt.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)},Le;Rt&&typeof Rt.ownKeys=="function"?Le=Rt.ownKeys:Object.getOwnPropertySymbols?Le=function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Le=function(t){return Object.getOwnPropertyNames(t)};function dc(r){console&&console.warn&&console.warn(r)}var cs=Number.isNaN||function(t){return t!==t};function k(){k.init.call(this)}Er.exports=k;Er.exports.once=yc;k.EventEmitter=k;k.prototype._events=void 0;k.prototype._eventsCount=0;k.prototype._maxListeners=void 0;var as=10;function Ae(r){if(typeof r!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r)}Object.defineProperty(k,"defaultMaxListeners",{enumerable:!0,get:function(){return as},set:function(r){if(typeof r!="number"||r<0||cs(r))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+r+".");as=r}});k.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};k.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||cs(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this};function us(r){return r._maxListeners===void 0?k.defaultMaxListeners:r._maxListeners}k.prototype.getMaxListeners=function(){return us(this)};k.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var i=t==="error",s=this._events;if(s!==void 0)i=i&&s.error===void 0;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=s[t];if(c===void 0)return!1;if(typeof c=="function")os(c,this,e);else for(var u=c.length,l=ps(c,u),n=0;n<u;++n)os(l[n],this,e);return!0};function ls(r,t,e,n){var i,s,o;if(Ae(e),s=r._events,s===void 0?(s=r._events=Object.create(null),r._eventsCount=0):(s.newListener!==void 0&&(r.emit("newListener",t,e.listener?e.listener:e),s=r._events),o=s[t]),o===void 0)o=s[t]=e,++r._eventsCount;else if(typeof o=="function"?o=s[t]=n?[e,o]:[o,e]:n?o.unshift(e):o.push(e),i=us(r),i>0&&o.length>i&&!o.warned){o.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=r,a.type=t,a.count=o.length,dc(a)}return r}k.prototype.addListener=function(t,e){return ls(this,t,e,!1)};k.prototype.on=k.prototype.addListener;k.prototype.prependListener=function(t,e){return ls(this,t,e,!0)};function pc(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function hs(r,t,e){var n={fired:!1,wrapFn:void 0,target:r,type:t,listener:e},i=pc.bind(n);return i.listener=e,n.wrapFn=i,i}k.prototype.once=function(t,e){return Ae(e),this.on(t,hs(this,t,e)),this};k.prototype.prependOnceListener=function(t,e){return Ae(e),this.prependListener(t,hs(this,t,e)),this};k.prototype.removeListener=function(t,e){var n,i,s,o,a;if(Ae(e),i=this._events,i===void 0)return this;if(n=i[t],n===void 0)return this;if(n===e||n.listener===e)--this._eventsCount===0?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,n.listener||e));else if(typeof n!="function"){for(s=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,s=o;break}if(s<0)return this;s===0?n.shift():gc(n,s),n.length===1&&(i[t]=n[0]),i.removeListener!==void 0&&this.emit("removeListener",t,a||e)}return this};k.prototype.off=k.prototype.removeListener;k.prototype.removeAllListeners=function(t){var e,n,i;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[t]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[t]),this;if(arguments.length===0){var s=Object.keys(n),o;for(i=0;i<s.length;++i)o=s[i],o!=="removeListener"&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(e=n[t],typeof e=="function")this.removeListener(t,e);else if(e!==void 0)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this};function fs(r,t,e){var n=r._events;if(n===void 0)return[];var i=n[t];return i===void 0?[]:typeof i=="function"?e?[i.listener||i]:[i]:e?mc(i):ps(i,i.length)}k.prototype.listeners=function(t){return fs(this,t,!0)};k.prototype.rawListeners=function(t){return fs(this,t,!1)};k.listenerCount=function(r,t){return typeof r.listenerCount=="function"?r.listenerCount(t):ds.call(r,t)};k.prototype.listenerCount=ds;function ds(r){var t=this._events;if(t!==void 0){var e=t[r];if(typeof e=="function")return 1;if(e!==void 0)return e.length}return 0}k.prototype.eventNames=function(){return this._eventsCount>0?Le(this._events):[]};function ps(r,t){for(var e=new Array(t),n=0;n<t;++n)e[n]=r[n];return e}function gc(r,t){for(;t+1<r.length;t++)r[t]=r[t+1];r.pop()}function mc(r){for(var t=new Array(r.length),e=0;e<t.length;++e)t[e]=r[e].listener||r[e];return t}function yc(r,t){return new Promise(function(e,n){function i(o){r.removeListener(t,s),n(o)}function s(){typeof r.removeListener=="function"&&r.removeListener("error",i),e([].slice.call(arguments))}gs(r,t,s,{once:!0}),t!=="error"&&wc(r,i,{once:!0})})}function wc(r,t,e){typeof r.on=="function"&&gs(r,"error",t,e)}function gs(r,t,e,n){if(typeof r.on=="function")n.once?r.once(t,e):r.on(t,e);else if(typeof r.addEventListener=="function")r.addEventListener(t,function i(s){n.once&&r.removeEventListener(t,i),e(s)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof r)}});var Cs=v((Es,Bs)=>{"use strict";var Ic=Math.exp;Es=Bs.exports=function(t){if(typeof t!="number")throw new Error("must provide a timespan to the moving average constructor");if(t<=0)throw new Error("must provide a timespan > 0 to the moving average constructor");let e,n=0,i=0,s=0,o,a={};function c(u,l){return 1-Ic(-(u-l)/t)}return a.push=function(l,h){if(o){let f=c(l,o),g=h-e,d=f*g;e=f*h+(1-f)*e,n=(1-f)*(n+g*d),i=Math.sqrt(n),s=e+f*g}else e=h;o=l},a.movingAverage=function(){return e},a.variance=function(){return n},a.deviation=function(){return i},a.forecast=function(){return s},a}});var Ps=v((Jf,Ir)=>{function Os(r){let t=new globalThis.AbortController;function e(){t.abort();for(let n of r)!n||!n.removeEventListener||n.removeEventListener("abort",e)}for(let n of r)if(!(!n||!n.addEventListener)){if(n.aborted){e();break}n.addEventListener("abort",e)}return t.signal}Ir.exports=Os;Ir.exports.anySignal=Os});var Qc={};z(Qc,{createBitswap:()=>Gc,createBitswapWithHTTP:()=>jc});var Vs=Gr,$r=128,Gs=127,js=~Gs,Qs=Math.pow(2,31);function Gr(r,t,e){t=t||[],e=e||0;for(var n=e;r>=Qs;)t[e++]=r&255|$r,r/=128;for(;r&js;)t[e++]=r&255|$r,r>>>=7;return t[e]=r|0,Gr.bytes=e-n+1,t}var Xs=Ne,Js=128,Vr=127;function Ne(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a)throw Ne.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&Vr)<<i:(o&Vr)*Math.pow(2,i),i+=7}while(o>=Js);return Ne.bytes=s-n,e}var Ks=Math.pow(2,7),Zs=Math.pow(2,14),Ys=Math.pow(2,21),to=Math.pow(2,28),eo=Math.pow(2,35),ro=Math.pow(2,42),no=Math.pow(2,49),io=Math.pow(2,56),so=Math.pow(2,63),oo=function(r){return r<Ks?1:r<Zs?2:r<Ys?3:r<to?4:r<eo?5:r<ro?6:r<no?7:r<io?8:r<so?9:10},ao={encode:Vs,decode:Xs,encodingLength:oo},co=ao,It=co;var zt=(r,t=0)=>[It.decode(r,t),It.decode.bytes],Et=(r,t,e=0)=>(It.encode(r,t,e),t),Bt=r=>It.encodingLength(r);var Yc=new Uint8Array(0);var jr=(r,t)=>{if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let e=0;e<r.byteLength;e++)if(r[e]!==t[e])return!1;return!0},et=r=>{if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")};var Qr=r=>new TextEncoder().encode(r),Xr=r=>new TextDecoder().decode(r);var dt=(r,t)=>{let e=t.byteLength,n=Bt(r),i=n+Bt(e),s=new Uint8Array(i+e);return Et(r,s,0),Et(e,s,n),s.set(t,i),new Ct(r,e,t,s)},Kr=r=>{let t=et(r),[e,n]=zt(t),[i,s]=zt(t.subarray(n)),o=t.subarray(n+s);if(o.byteLength!==i)throw new Error("Incorrect length");return new Ct(e,i,o,t)},Zr=(r,t)=>{if(r===t)return!0;{let e=t;return r.code===e.code&&r.size===e.size&&e.bytes instanceof Uint8Array&&jr(r.bytes,e.bytes)}},Ct=class{constructor(t,e,n,i){this.code=t,this.size=e,this.digest=n,this.bytes=i}};var ze={};z(ze,{base58btc:()=>w,base58flickr:()=>go});function uo(r,t){if(r.length>=255)throw new TypeError("Alphabet too long");for(var e=new Uint8Array(256),n=0;n<e.length;n++)e[n]=255;for(var i=0;i<r.length;i++){var s=r.charAt(i),o=s.charCodeAt(0);if(e[o]!==255)throw new TypeError(s+" is ambiguous");e[o]=i}var a=r.length,c=r.charAt(0),u=Math.log(a)/Math.log(256),l=Math.log(256)/Math.log(a);function h(d){if(d instanceof Uint8Array||(ArrayBuffer.isView(d)?d=new Uint8Array(d.buffer,d.byteOffset,d.byteLength):Array.isArray(d)&&(d=Uint8Array.from(d))),!(d instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(d.length===0)return"";for(var p=0,y=0,S=0,B=d.length;S!==B&&d[S]===0;)S++,p++;for(var O=(B-S)*l+1>>>0,C=new Uint8Array(O);S!==B;){for(var E=d[S],N=0,P=O-1;(E!==0||N<y)&&P!==-1;P--,N++)E+=256*C[P]>>>0,C[P]=E%a>>>0,E=E/a>>>0;if(E!==0)throw new Error("Non-zero carry");y=N,S++}for(var R=O-y;R!==O&&C[R]===0;)R++;for(var Y=c.repeat(p);R<O;++R)Y+=r.charAt(C[R]);return Y}function f(d){if(typeof d!="string")throw new TypeError("Expected String");if(d.length===0)return new Uint8Array;var p=0;if(d[p]!==" "){for(var y=0,S=0;d[p]===c;)y++,p++;for(var B=(d.length-p)*u+1>>>0,O=new Uint8Array(B);d[p];){var C=e[d.charCodeAt(p)];if(C===255)return;for(var E=0,N=B-1;(C!==0||E<S)&&N!==-1;N--,E++)C+=a*O[N]>>>0,O[N]=C%256>>>0,C=C/256>>>0;if(C!==0)throw new Error("Non-zero carry");S=E,p++}if(d[p]!==" "){for(var P=B-S;P!==B&&O[P]===0;)P++;for(var R=new Uint8Array(y+(B-P)),Y=y;P!==B;)R[Y++]=O[P++];return R}}}function g(d){var p=f(d);if(p)return p;throw new Error(`Non-${t} character`)}return{encode:h,decodeUnsafe:f,decode:g}}var lo=uo,ho=lo,Yr=ho;var Me=class{constructor(t,e,n){this.name=t,this.prefix=e,this.baseEncode=n}encode(t){if(t instanceof Uint8Array)return`${this.prefix}${this.baseEncode(t)}`;throw Error("Unknown type, must be binary type")}},Fe=class{constructor(t,e,n){if(this.name=t,this.prefix=e,e.codePointAt(0)===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=e.codePointAt(0),this.baseDecode=n}decode(t){if(typeof t=="string"){if(t.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(t)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(t.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(t){return tn(this,t)}},Re=class{constructor(t){this.decoders=t}or(t){return tn(this,t)}decode(t){let e=t[0],n=this.decoders[e];if(n)return n.decode(t);throw RangeError(`Unable to decode multibase string ${JSON.stringify(t)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}},tn=(r,t)=>new Re({...r.decoders||{[r.prefix]:r},...t.decoders||{[t.prefix]:t}}),Ie=class{constructor(t,e,n,i){this.name=t,this.prefix=e,this.baseEncode=n,this.baseDecode=i,this.encoder=new Me(t,e,n),this.decoder=new Fe(t,e,i)}encode(t){return this.encoder.encode(t)}decode(t){return this.decoder.decode(t)}},Lt=({name:r,prefix:t,encode:e,decode:n})=>new Ie(r,t,e,n),it=({prefix:r,name:t,alphabet:e})=>{let{encode:n,decode:i}=Yr(e,t);return Lt({prefix:r,name:t,encode:n,decode:s=>et(i(s))})},fo=(r,t,e,n)=>{let i={};for(let l=0;l<t.length;++l)i[t[l]]=l;let s=r.length;for(;r[s-1]==="=";)--s;let o=new Uint8Array(s*e/8|0),a=0,c=0,u=0;for(let l=0;l<s;++l){let h=i[r[l]];if(h===void 0)throw new SyntaxError(`Non-${n} character`);c=c<<e|h,a+=e,a>=8&&(a-=8,o[u++]=255&c>>a)}if(a>=e||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o},po=(r,t,e)=>{let n=t[t.length-1]==="=",i=(1<<e)-1,s="",o=0,a=0;for(let c=0;c<r.length;++c)for(a=a<<8|r[c],o+=8;o>e;)o-=e,s+=t[i&a>>o];if(o&&(s+=t[i&a<<e-o]),n)for(;s.length*e&7;)s+="=";return s},A=({name:r,prefix:t,bitsPerChar:e,alphabet:n})=>Lt({prefix:t,name:r,encode(i){return po(i,n,e)},decode(i){return fo(i,n,e,r)}});var w=it({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),go=it({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Ue={};z(Ue,{base32:()=>st,base32hex:()=>bo,base32hexpad:()=>vo,base32hexpadupper:()=>xo,base32hexupper:()=>_o,base32pad:()=>yo,base32padupper:()=>wo,base32upper:()=>mo,base32z:()=>ko});var st=A({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),mo=A({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),yo=A({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),wo=A({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),bo=A({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),_o=A({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),vo=A({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),xo=A({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),ko=A({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var en=(r,t)=>{let{bytes:e,version:n}=r;switch(n){case 0:return Eo(e,He(r),t||w.encoder);default:return Bo(e,He(r),t||st.encoder)}};var rn=new WeakMap,He=r=>{let t=rn.get(r);if(t==null){let e=new Map;return rn.set(r,e),e}return t},b=class{constructor(t,e,n,i){this.code=e,this.version=t,this.multihash=n,this.bytes=i,this["/"]=i}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{let{code:t,multihash:e}=this;if(t!==Ht)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(e.code!==Co)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return b.createV0(e)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{let{code:t,digest:e}=this.multihash,n=dt(t,e);return b.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(t){return b.equals(this,t)}static equals(t,e){let n=e;return n&&t.code===n.code&&t.version===n.version&&Zr(t.multihash,n.multihash)}toString(t){return en(this,t)}toJSON(){return{"/":en(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(t){if(t==null)return null;let e=t;if(e instanceof b)return e;if(e["/"]!=null&&e["/"]===e.bytes||e.asCID===e){let{version:n,code:i,multihash:s,bytes:o}=e;return new b(n,i,s,o||nn(n,i,s.bytes))}else if(e[Lo]===!0){let{version:n,multihash:i,code:s}=e,o=Kr(i);return b.create(n,s,o)}else return null}static create(t,e,n){if(typeof e!="number")throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(t){case 0:{if(e!==Ht)throw new Error(`Version 0 CID must use dag-pb (code: ${Ht}) block encoding`);return new b(t,e,n,n.bytes)}case 1:{let i=nn(t,e,n.bytes);return new b(t,e,n,i)}default:throw new Error("Invalid version")}}static createV0(t){return b.create(0,Ht,t)}static createV1(t,e){return b.create(1,t,e)}static decode(t){let[e,n]=b.decodeFirst(t);if(n.length)throw new Error("Incorrect length");return e}static decodeFirst(t){let e=b.inspectBytes(t),n=e.size-e.multihashSize,i=et(t.subarray(n,n+e.multihashSize));if(i.byteLength!==e.multihashSize)throw new Error("Incorrect length");let s=i.subarray(e.multihashSize-e.digestSize),o=new Ct(e.multihashCode,e.digestSize,s,i);return[e.version===0?b.createV0(o):b.createV1(e.codec,o),t.subarray(e.size)]}static inspectBytes(t){let e=0,n=()=>{let[h,f]=zt(t.subarray(e));return e+=f,h},i=n(),s=Ht;if(i===18?(i=0,e=0):s=n(),i!==0&&i!==1)throw new RangeError(`Invalid CID version ${i}`);let o=e,a=n(),c=n(),u=e+c,l=u-o;return{version:i,codec:s,multihashCode:a,digestSize:c,multihashSize:l,size:u}}static parse(t,e){let[n,i]=So(t,e),s=b.decode(i);if(s.version===0&&t[0]!=="Q")throw Error("Version 0 CID string must not include multibase prefix");return He(s).set(n,t),s}},So=(r,t)=>{switch(r[0]){case"Q":{let e=t||w;return[w.prefix,e.decode(`${w.prefix}${r}`)]}case w.prefix:{let e=t||w;return[w.prefix,e.decode(r)]}case st.prefix:{let e=t||st;return[st.prefix,e.decode(r)]}default:{if(t==null)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[r[0],t.decode(r)]}}},Eo=(r,t,e)=>{let{prefix:n}=e;if(n!==w.prefix)throw Error(`Cannot string encode V0 in ${e.name} encoding`);let i=t.get(n);if(i==null){let s=e.encode(r).slice(1);return t.set(n,s),s}else return i},Bo=(r,t,e)=>{let{prefix:n}=e,i=t.get(n);if(i==null){let s=e.encode(r);return t.set(n,s),s}else return i},Ht=112,Co=18,nn=(r,t,e)=>{let n=Bt(r),i=n+Bt(t),s=new Uint8Array(i+e.byteLength);return Et(r,s,0),Et(t,s,n),s.set(e,i),s},Lo=Symbol.for("@ipld/js-cid/CID");var $e={};z($e,{sha256:()=>qt,sha512:()=>Ao});var We=({name:r,code:t,encode:e})=>new qe(r,t,e),qe=class{constructor(t,e,n){this.name=t,this.code=e,this.encode=n}digest(t){if(t instanceof Uint8Array){let e=this.encode(t);return e instanceof Uint8Array?dt(this.code,e):e.then(n=>dt(this.code,n))}else throw Error("Unknown type, must be binary type")}};var on=r=>async t=>new Uint8Array(await crypto.subtle.digest(r,t)),qt=We({name:"sha2-256",code:18,encode:on("SHA-256")}),Ao=We({name:"sha2-512",code:19,encode:on("SHA-512")});var Li=F(_n(),1);var Wt=F(Tn(),1);function ra(r){let t=new Uint8Array(r.reduce((n,i)=>n+Wt.default.encodingLength(i),0)),e=0;for(let n of r)t=Wt.encode(n,t,e),e+=Wt.default.encodingLength(n);return t}var On=ra;var q=F(Fn(),1);var Xe={};z(Xe,{base64:()=>Qe,base64pad:()=>ga,base64url:()=>ma,base64urlpad:()=>ya});var Qe=A({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),ga=A({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),ma=A({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),ya=A({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});q.default.formatters.b=r=>r==null?"undefined":w.baseEncode(r);q.default.formatters.t=r=>r==null?"undefined":st.baseEncode(r);q.default.formatters.m=r=>r==null?"undefined":Qe.baseEncode(r);q.default.formatters.p=r=>r==null?"undefined":r.toString();q.default.formatters.c=r=>r==null?"undefined":r.toString();q.default.formatters.k=r=>r==null?"undefined":r.toString();function wa(r){let t=()=>{};return t.enabled=!1,t.color="",t.diff=0,t.log=()=>{},t.namespace=r,t.destroy=()=>!0,t.extend=()=>t,t}function Rn(r){let t=wa(`${r}:trace`);return q.default.enabled(`${r}:trace`)&&q.default.names.map(e=>e.toString()).find(e=>e.includes(":trace"))!=null&&(t=(0,q.default)(`${r}:trace`)),Object.assign((0,q.default)(r),{error:(0,q.default)(`${r}:error`),trace:t})}function ie(r,t){if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let e=0;e<r.byteLength;e++)if(r[e]!==t[e])return!1;return!0}var gt=class{constructor(t,e,n){this._refCounter=1,this.cid=t,this.priority=e??1,this.wantType=n}inc(){this._refCounter+=1}dec(){this._refCounter=Math.max(0,this._refCounter-1)}hasRefs(){return this._refCounter>0}get[Symbol.toStringTag](){return`WantlistEntry <key: ${this.cid.toString(w)}, priority: ${this.priority}, refs: ${this._refCounter}>`}equals(t){return this._refCounter===t._refCounter&&this.cid.equals(t.cid)&&this.priority===t.priority&&this.wantType===t.wantType}};var ot=class{constructor(t,e,n,i,s){this.entry=new gt(t,e,n),this.cancel=!!i,this.sendDontHave=!!s}get cid(){return this.entry.cid}set cid(t){this.entry.cid=t}get priority(){return this.entry.priority}set priority(t){this.entry.priority=t}get wantType(){return this.entry.wantType}set wantType(t){this.entry.wantType=t}get[Symbol.toStringTag](){return`BitswapMessageEntry ${this.cid.toString(w)} <cancel: ${this.cancel}, priority: ${this.priority}>`}equals(t){return this.cancel===t.cancel&&this.sendDontHave===t.sendDontHave&&this.wantType===t.wantType&&this.entry.equals(t.entry)}};var W=(r,t)=>{let e=["bitswap"];return t!=null&&e.push(t),r!=null&&e.push(`${r.toString().slice(0,8)}`),Rn(e.join(":"))};var se=(r,t)=>{if(r.size!==t.size)return!1;for(let[e,n]of r){let i=t.get(e);if(i===void 0||n instanceof Uint8Array&&i instanceof Uint8Array&&!ie(n,i)||n instanceof ot&&i instanceof ot&&!n.equals(i))return!1}return!0};var cr=F(tr(),1),Si=F(mi(),1),Ei=F(yt(),1),ur=F(ar(),1),Bi=F(ki(),1);function Ca(){Ei.default._configure(),cr.default._configure(Si.default),ur.default._configure(Bi.default)}Ca();var Ci=["uint64","int64","sint64","fixed64","sfixed64"];function La(r){for(let t of Ci){if(r[t]==null)continue;let e=r[t];r[t]=function(){return BigInt(e.call(this).toString())}}return r}function lr(r){return La(new cr.default(r))}function Aa(r){for(let t of Ci){if(r[t]==null)continue;let e=r[t];r[t]=function(n){return e.call(this,n.toString())}}return r}function hr(){return Aa(ur.default.create())}function bt(r,t){let e=lr(r instanceof Uint8Array?r:r.subarray());return t.decode(e)}function _t(r,t){let e=hr();return t.encode(r,e,{lengthDelimited:!1}),e.finish()}var Dt;(function(r){r[r.VARINT=0]="VARINT",r[r.BIT64=1]="BIT64",r[r.LENGTH_DELIMITED=2]="LENGTH_DELIMITED",r[r.START_GROUP=3]="START_GROUP",r[r.END_GROUP=4]="END_GROUP",r[r.BIT32=5]="BIT32"})(Dt||(Dt={}));function le(r,t,e,n){return{name:r,type:t,encode:e,decode:n}}function he(r){function t(i){if(r[i.toString()]==null)throw new Error("Invalid enum value");return r[i]}let e=function(s,o){let a=t(s);o.int32(a)},n=function(s){let o=s.int32();return t(o)};return le("enum",Dt.VARINT,e,n)}function vt(r,t){return le("message",Dt.LENGTH_DELIMITED,r,t)}var I;(function(r){let t;(function(a){let c;(function(f){f.Block="Block",f.Have="Have"})(c=a.WantType||(a.WantType={}));let u;(function(f){f[f.Block=0]="Block",f[f.Have=1]="Have"})(u||(u={})),function(f){f.codec=()=>he(u)}(c=a.WantType||(a.WantType={}));let l;(function(f){let g;f.codec=()=>(g==null&&(g=vt((d,p,y={})=>{y.lengthDelimited!==!1&&p.fork(),d.block!=null&&d.block.byteLength>0&&(p.uint32(10),p.bytes(d.block)),d.priority!=null&&d.priority!==0&&(p.uint32(16),p.int32(d.priority)),d.cancel!=null&&d.cancel!==!1&&(p.uint32(24),p.bool(d.cancel)),d.wantType!=null&&u[d.wantType]!==0&&(p.uint32(32),r.Wantlist.WantType.codec().encode(d.wantType,p)),d.sendDontHave!=null&&d.sendDontHave!==!1&&(p.uint32(40),p.bool(d.sendDontHave)),y.lengthDelimited!==!1&&p.ldelim()},(d,p)=>{let y={block:new Uint8Array(0),priority:0,cancel:!1,wantType:c.Block,sendDontHave:!1},S=p==null?d.len:d.pos+p;for(;d.pos<S;){let B=d.uint32();switch(B>>>3){case 1:y.block=d.bytes();break;case 2:y.priority=d.int32();break;case 3:y.cancel=d.bool();break;case 4:y.wantType=r.Wantlist.WantType.codec().decode(d);break;case 5:y.sendDontHave=d.bool();break;default:d.skipType(B&7);break}}return y})),g),f.encode=d=>_t(d,f.codec()),f.decode=d=>bt(d,f.codec())})(l=a.Entry||(a.Entry={}));let h;a.codec=()=>(h==null&&(h=vt((f,g,d={})=>{if(d.lengthDelimited!==!1&&g.fork(),f.entries!=null)for(let p of f.entries)g.uint32(10),r.Wantlist.Entry.codec().encode(p,g);f.full!=null&&f.full!==!1&&(g.uint32(16),g.bool(f.full)),d.lengthDelimited!==!1&&g.ldelim()},(f,g)=>{let d={entries:[],full:!1},p=g==null?f.len:f.pos+g;for(;f.pos<p;){let y=f.uint32();switch(y>>>3){case 1:d.entries.push(r.Wantlist.Entry.codec().decode(f,f.uint32()));break;case 2:d.full=f.bool();break;default:f.skipType(y&7);break}}return d})),h),a.encode=f=>_t(f,a.codec()),a.decode=f=>bt(f,a.codec())})(t=r.Wantlist||(r.Wantlist={}));let e;(function(a){let c;a.codec=()=>(c==null&&(c=vt((u,l,h={})=>{h.lengthDelimited!==!1&&l.fork(),u.prefix!=null&&u.prefix.byteLength>0&&(l.uint32(10),l.bytes(u.prefix)),u.data!=null&&u.data.byteLength>0&&(l.uint32(18),l.bytes(u.data)),h.lengthDelimited!==!1&&l.ldelim()},(u,l)=>{let h={prefix:new Uint8Array(0),data:new Uint8Array(0)},f=l==null?u.len:u.pos+l;for(;u.pos<f;){let g=u.uint32();switch(g>>>3){case 1:h.prefix=u.bytes();break;case 2:h.data=u.bytes();break;default:u.skipType(g&7);break}}return h})),c),a.encode=u=>_t(u,a.codec()),a.decode=u=>bt(u,a.codec())})(e=r.Block||(r.Block={}));let n;(function(a){a.Have="Have",a.DontHave="DontHave"})(n=r.BlockPresenceType||(r.BlockPresenceType={}));let i;(function(a){a[a.Have=0]="Have",a[a.DontHave=1]="DontHave"})(i||(i={})),function(a){a.codec=()=>he(i)}(n=r.BlockPresenceType||(r.BlockPresenceType={}));let s;(function(a){let c;a.codec=()=>(c==null&&(c=vt((u,l,h={})=>{h.lengthDelimited!==!1&&l.fork(),u.cid!=null&&u.cid.byteLength>0&&(l.uint32(10),l.bytes(u.cid)),u.type!=null&&i[u.type]!==0&&(l.uint32(16),r.BlockPresenceType.codec().encode(u.type,l)),h.lengthDelimited!==!1&&l.ldelim()},(u,l)=>{let h={cid:new Uint8Array(0),type:n.Have},f=l==null?u.len:u.pos+l;for(;u.pos<f;){let g=u.uint32();switch(g>>>3){case 1:h.cid=u.bytes();break;case 2:h.type=r.BlockPresenceType.codec().decode(u);break;default:u.skipType(g&7);break}}return h})),c),a.encode=u=>_t(u,a.codec()),a.decode=u=>bt(u,a.codec())})(s=r.BlockPresence||(r.BlockPresence={}));let o;r.codec=()=>(o==null&&(o=vt((a,c,u={})=>{if(u.lengthDelimited!==!1&&c.fork(),a.wantlist!=null&&(c.uint32(10),r.Wantlist.codec().encode(a.wantlist,c)),a.blocks!=null)for(let l of a.blocks)c.uint32(18),c.bytes(l);if(a.payload!=null)for(let l of a.payload)c.uint32(26),r.Block.codec().encode(l,c);if(a.blockPresences!=null)for(let l of a.blockPresences)c.uint32(34),r.BlockPresence.codec().encode(l,c);a.pendingBytes!=null&&a.pendingBytes!==0&&(c.uint32(40),c.int32(a.pendingBytes)),u.lengthDelimited!==!1&&c.ldelim()},(a,c)=>{let u={blocks:[],payload:[],blockPresences:[],pendingBytes:0},l=c==null?a.len:a.pos+c;for(;a.pos<l;){let h=a.uint32();switch(h>>>3){case 1:u.wantlist=r.Wantlist.codec().decode(a,a.uint32());break;case 2:u.blocks.push(a.bytes());break;case 3:u.payload.push(r.Block.codec().decode(a,a.uint32()));break;case 4:u.blockPresences.push(r.BlockPresence.codec().decode(a,a.uint32()));break;case 5:u.pendingBytes=a.int32();break;default:a.skipType(h&7);break}}return u})),o),r.encode=a=>_t(a,r.codec()),r.decode=a=>bt(a,r.codec())})(I||(I={}));var fe=class extends Error{constructor(t,e,n){super(t),this.code=e,this.name=n?.name??"CodeError",this.props=n??{}}};var Ta,x=class{constructor(t){this.full=t,this.wantlist=new Map,this.blocks=new Map,this.blockPresences=new Map,this.pendingBytes=0}get empty(){return this.blocks.size===0&&this.wantlist.size===0&&this.blockPresences.size===0}addEntry(t,e,n,i,s){n==null&&(n=x.WantType.Block);let o=t.toString(w),a=this.wantlist.get(o);a!=null?(a.wantType===n&&(a.priority=e),i===!0&&(a.cancel=!!i),s===!0&&(a.sendDontHave=!!s),n===x.WantType.Block&&a.wantType===x.WantType.Have&&(a.wantType=n)):this.wantlist.set(o,new ot(t,e,n,i,s))}addBlock(t,e){let n=t.toString(w);this.blocks.set(n,e)}addHave(t){let e=t.toString(w);this.blockPresences.has(e)||this.blockPresences.set(e,x.BlockPresenceType.Have)}addDontHave(t){let e=t.toString(w);this.blockPresences.has(e)||this.blockPresences.set(e,x.BlockPresenceType.DontHave)}cancel(t){let e=t.toString(w);this.wantlist.delete(e),this.addEntry(t,0,x.WantType.Block,!0,!1)}setPendingBytes(t){this.pendingBytes=t}serializeToBitswap100(){return I.encode({wantlist:{entries:Array.from(this.wantlist.values()).map(t=>({block:t.cid.bytes,priority:Number(t.priority),cancel:!!t.cancel,wantType:I.Wantlist.WantType.Block,sendDontHave:!1})),full:!!this.full},blocks:Array.from(this.blocks.values())})}serializeToBitswap110(){let t={wantlist:{entries:Array.from(this.wantlist.values()).map(e=>({block:e.cid.bytes,priority:Number(e.priority),wantType:e.wantType,cancel:!!e.cancel,sendDontHave:!!e.sendDontHave})),full:!!this.full},blockPresences:[],payload:[],pendingBytes:this.pendingBytes,blocks:[]};for(let[e,n]of this.blocks.entries()){let i=b.parse(e),s=i.version,o=i.code,a=i.multihash.code,c=i.multihash.digest.length,u=On([s,o,a,c]);t.payload.push({prefix:u,data:n})}for(let[e,n]of this.blockPresences)t.blockPresences.push({cid:b.parse(e).bytes,type:n});return this.pendingBytes>0&&(t.pendingBytes=this.pendingBytes),I.encode(t)}equals(t){return!(this.full!==t.full||this.pendingBytes!==t.pendingBytes||!se(this.wantlist,t.wantlist)||!se(this.blocks,t.blocks)||!se(this.blockPresences,t.blockPresences))}get[Symbol.toStringTag](){let t=Array.from(this.wantlist.keys()),e=Array.from(this.blocks.keys());return`BitswapMessage <full: ${this.full}, list: ${t}, blocks: ${e}>`}};Ta=x;x.Entry=ot;x.WantType={Block:I.Wantlist.WantType.Block,Have:I.Wantlist.WantType.Have};x.BlockPresenceType={Have:I.BlockPresenceType.Have,DontHave:I.BlockPresenceType.DontHave};x.deserialize=async(r,t)=>{let e=I.decode(r),n=e.wantlist?.full===!0,i=new x(n);return e.wantlist?.entries.forEach(s=>{if(s.block==null)return;let o=b.decode(s.block);i.addEntry(o,s.priority??0,s.wantType,!!s.cancel,!!s.sendDontHave)}),e.blockPresences.forEach(s=>{if(s.cid==null)return;let o=b.decode(s.cid);s.type===x.BlockPresenceType.Have?i.addHave(o):i.addDontHave(o)}),e.blocks.length>0?(await Promise.all(e.blocks.map(async s=>{let o=await qt.digest(s),a=b.createV0(o);i.addBlock(a,s)})),i):(e.payload.length>0&&(await Promise.all(e.payload.map(async s=>{if(s.prefix==null||s.data==null)return;let o=(0,Li.default)(s.prefix),a=o[0],c=o[1],u=o[2],l=u===qt.code?qt:await t?.getHasher(u);if(l==null)throw new fe("Unknown hash algorithm","ERR_UNKNOWN_HASH_ALG");let h=await l.digest(s.data),f=b.create(a,c,h);i.addBlock(f,s.data)})),i.setPendingBytes(e.pendingBytes)),i)};x.blockPresenceSize=r=>r.bytes.length+1;var fr=class extends Map{constructor(t){super();let{name:e,metrics:n}=t;this.metric=n.registerMetric(e),this.updateComponentMetric()}set(t,e){return super.set(t,e),this.updateComponentMetric(),this}delete(t){let e=super.delete(t);return this.updateComponentMetric(),e}clear(){super.clear(),this.updateComponentMetric()}updateComponentMetric(){this.metric.update(this.size)}};function ut(r){let{name:t,metrics:e}=r,n;return e!=null?n=new fr({name:t,metrics:e}):n=new Map,n}var Ai={Block:I.Wantlist.WantType.Block,Have:I.Wantlist.WantType.Have},Oa=(r,t)=>Array.prototype.slice.call(t,0).sort((e,n)=>{let i=r(e),s=r(n);return i<s?-1:i>s?1:0}),rt=class{constructor(t,e){this.set=e!=null?ut({name:"ipfs_bitswap_wantlist",metrics:e.metrics}):new Map,this._stats=t}get length(){return this.set.size}add(t,e,n){let i=t.toString(w),s=this.set.get(i);s!=null?(s.inc(),s.priority=e,s.wantType===Ai.Have&&n===Ai.Block&&(s.wantType=n)):(this.set.set(i,new gt(t,e,n)),this._stats!=null&&this._stats.push(void 0,"wantListSize",1))}remove(t){let e=t.toString(w),n=this.set.get(e);n!=null&&(n.dec(),!n.hasRefs()&&(this.set.delete(e),this._stats!=null&&this._stats.push(void 0,"wantListSize",-1)))}removeForce(t){this.set.has(t)&&this.set.delete(t)}forEach(t){this.set.forEach(t)}entries(){return this.set.entries()}sortedEntries(){return new Map(Oa(t=>t[1].key,Array.from(this.set.entries())))}contains(t){let e=t.toString(w);return this.set.has(e)}get(t){let e=t.toString(w);return this.set.get(e)}};rt.Entry=gt;var Ti=Math.pow(2,31)-1,Oi=1e3,Pi=1;var Di=Pa;function Pa(r,t,e){var n=null,i=null,s=function(){n&&(clearTimeout(n),i=null,n=null)},o=function(){var c=i;s(),c&&c()},a=function(){if(!t)return r.apply(this,arguments);var c=this,u=arguments,l=e&&!n;if(s(),i=function(){r.apply(c,u)},n=setTimeout(function(){if(n=null,!l){var h=i;return i=null,h()}},t),l)return i()};return a.cancel=s,a.flush=o,a}var de=class{constructor(t,e,n){this.peerId=e,this.network=n,this.refcnt=1,this._entries=[],this._log=W(t,"msgqueue"),this.sendEntries=Di(this.sendEntries.bind(this),Pi)}addMessage(t,e={}){t.empty||this.send(t,e)}addEntries(t,e={}){this._entries=this._entries.concat(t),this.sendEntries(e)}sendEntries(t={}){if(this._entries.length===0)return;let e=new x(!1);this._entries.forEach(n=>{n.cancel===!0?e.cancel(n.cid):e.addEntry(n.cid,n.priority)}),this._entries=[],this.addMessage(e,t)}async send(t,e={}){try{await this.network.connectTo(this.peerId,e)}catch(n){this._log.error("cant connect to peer %p: %s",this.peerId,n.message);return}this._log("sending message to peer %p",this.peerId),this.network.sendMessage(this.peerId,t,e).catch(n=>{this._log.error("send error",n)})}};var pe=class{constructor(t,e,n,i){this.peers=ut({name:"ipfs_bitswap_want_manager_peers",metrics:i.metrics}),this.wantlist=new rt(n,i),this.network=e,this._peerId=t,this._log=W(t,"want")}_addEntries(t,e,n,i={}){let s=t.map((o,a)=>new x.Entry(o,Ti-a,x.WantType.Block,e));s.forEach(o=>{o.cancel?n===!0?this.wantlist.removeForce(o.cid.toString(w)):this.wantlist.remove(o.cid):(this._log("adding to wantlist"),this.wantlist.add(o.cid,o.priority))});for(let o of this.peers.values())o.addEntries(s,i)}_startPeerHandler(t){let e=this.peers.get(t.toString());if(e!=null){e.refcnt++;return}e=new de(this._peerId,t,this.network);let n=new x(!0);for(let i of this.wantlist.entries())n.addEntry(i[1].cid,i[1].priority);return e.addMessage(n),this.peers.set(t.toString(),e),e}_stopPeerHandler(t){let e=this.peers.get(t.toString());e!=null&&(e.refcnt--,!(e.refcnt>0)&&this.peers.delete(t.toString()))}wantBlocks(t,e={}){this._addEntries(t,!1,!1,e),e.signal?.addEventListener("abort",()=>{this.cancelWants(t)})}unwantBlocks(t){this._log("unwant blocks: %s",t.length),this._addEntries(t,!0,!0)}cancelWants(t){this._log("cancel wants: %s",t.length),this._addEntries(t,!0)}connectedPeers(){return Array.from(this.peers.keys())}connected(t){this._startPeerHandler(t)}disconnected(t){this._stopPeerHandler(t)}start(){}stop(){this.peers.forEach(t=>{this.disconnected(t.peerId)})}};function Gt(r){return globalThis.Buffer!=null?new Uint8Array(r.buffer,r.byteOffset,r.byteLength):r}function nt(r=0){return globalThis.Buffer?.alloc!=null?Gt(globalThis.Buffer.alloc(r)):new Uint8Array(r)}function X(r=0){return globalThis.Buffer?.allocUnsafe!=null?Gt(globalThis.Buffer.allocUnsafe(r)):new Uint8Array(r)}function pr(r,t){t==null&&(t=r.reduce((i,s)=>i+s.length,0));let e=X(t),n=0;for(let i of r)e.set(i,n),n+=i.length;return Gt(e)}var Mi=Symbol.for("@achingbrain/uint8arraylist");function Ni(r,t){if(t==null||t<0)throw new RangeError("index is out of bounds");let e=0;for(let n of r){let i=e+n.byteLength;if(t<i)return{buf:n,index:t-e};e=i}throw new RangeError("index is out of bounds")}function Nt(r){return!!r?.[Mi]}var V=class{constructor(...t){Object.defineProperty(this,Mi,{value:!0}),this.bufs=[],this.length=0,t.length>0&&this.appendAll(t)}*[Symbol.iterator](){yield*this.bufs}get byteLength(){return this.length}append(...t){this.appendAll(t)}appendAll(t){let e=0;for(let n of t)if(n instanceof Uint8Array)e+=n.byteLength,this.bufs.push(n);else if(Nt(n))e+=n.byteLength,this.bufs.push(...n.bufs);else throw new Error("Could not append value, must be an Uint8Array or a Uint8ArrayList");this.length+=e}prepend(...t){this.prependAll(t)}prependAll(t){let e=0;for(let n of t.reverse())if(n instanceof Uint8Array)e+=n.byteLength,this.bufs.unshift(n);else if(Nt(n))e+=n.byteLength,this.bufs.unshift(...n.bufs);else throw new Error("Could not prepend value, must be an Uint8Array or a Uint8ArrayList");this.length+=e}get(t){let e=Ni(this.bufs,t);return e.buf[e.index]}set(t,e){let n=Ni(this.bufs,t);n.buf[n.index]=e}write(t,e=0){if(t instanceof Uint8Array)for(let n=0;n<t.length;n++)this.set(e+n,t[n]);else if(Nt(t))for(let n=0;n<t.length;n++)this.set(e+n,t.get(n));else throw new Error("Could not write value, must be an Uint8Array or a Uint8ArrayList")}consume(t){if(t=Math.trunc(t),!(Number.isNaN(t)||t<=0)){if(t===this.byteLength){this.bufs=[],this.length=0;return}for(;this.bufs.length>0;)if(t>=this.bufs[0].byteLength)t-=this.bufs[0].byteLength,this.length-=this.bufs[0].byteLength,this.bufs.shift();else{this.bufs[0]=this.bufs[0].subarray(t),this.length-=t;break}}}slice(t,e){let{bufs:n,length:i}=this._subList(t,e);return pr(n,i)}subarray(t,e){let{bufs:n,length:i}=this._subList(t,e);return n.length===1?n[0]:pr(n,i)}sublist(t,e){let{bufs:n,length:i}=this._subList(t,e),s=new V;return s.length=i,s.bufs=n,s}_subList(t,e){if(t=t??0,e=e??this.length,t<0&&(t=this.length+t),e<0&&(e=this.length+e),t<0||e>this.length)throw new RangeError("index is out of bounds");if(t===e)return{bufs:[],length:0};if(t===0&&e===this.length)return{bufs:[...this.bufs],length:this.length};let n=[],i=0;for(let s=0;s<this.bufs.length;s++){let o=this.bufs[s],a=i,c=a+o.byteLength;if(i=c,t>=c)continue;let u=t>=a&&t<c,l=e>a&&e<=c;if(u&&l){if(t===a&&e===c){n.push(o);break}let h=t-a;n.push(o.subarray(h,h+(e-t)));break}if(u){if(t===0){n.push(o);continue}n.push(o.subarray(t-a));continue}if(l){if(e===c){n.push(o);break}n.push(o.subarray(0,e-a));break}n.push(o)}return{bufs:n,length:e-t}}indexOf(t,e=0){if(!Nt(t)&&!(t instanceof Uint8Array))throw new TypeError('The "value" argument must be a Uint8ArrayList or Uint8Array');let n=t instanceof Uint8Array?t:t.subarray();if(e=Number(e??0),isNaN(e)&&(e=0),e<0&&(e=this.length+e),e<0&&(e=0),t.length===0)return e>this.length?this.length:e;let i=n.byteLength;if(i===0)throw new TypeError("search must be at least 1 byte long");let s=256,o=new Int32Array(s);for(let h=0;h<s;h++)o[h]=-1;for(let h=0;h<i;h++)o[n[h]]=h;let a=o,c=this.byteLength-n.byteLength,u=n.byteLength-1,l;for(let h=e;h<=c;h+=l){l=0;for(let f=u;f>=0;f--){let g=this.get(h+f);if(n[f]!==g){l=Math.max(1,f-a[g]);break}}if(l===0)return h}return-1}getInt8(t){let e=this.subarray(t,t+1);return new DataView(e.buffer,e.byteOffset,e.byteLength).getInt8(0)}setInt8(t,e){let n=X(1);new DataView(n.buffer,n.byteOffset,n.byteLength).setInt8(0,e),this.write(n,t)}getInt16(t,e){let n=this.subarray(t,t+2);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt16(0,e)}setInt16(t,e,n){let i=nt(2);new DataView(i.buffer,i.byteOffset,i.byteLength).setInt16(0,e,n),this.write(i,t)}getInt32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt32(0,e)}setInt32(t,e,n){let i=nt(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setInt32(0,e,n),this.write(i,t)}getBigInt64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getBigInt64(0,e)}setBigInt64(t,e,n){let i=nt(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setBigInt64(0,e,n),this.write(i,t)}getUint8(t){let e=this.subarray(t,t+1);return new DataView(e.buffer,e.byteOffset,e.byteLength).getUint8(0)}setUint8(t,e){let n=X(1);new DataView(n.buffer,n.byteOffset,n.byteLength).setUint8(0,e),this.write(n,t)}getUint16(t,e){let n=this.subarray(t,t+2);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint16(0,e)}setUint16(t,e,n){let i=nt(2);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint16(0,e,n),this.write(i,t)}getUint32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint32(0,e)}setUint32(t,e,n){let i=nt(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint32(0,e,n),this.write(i,t)}getBigUint64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getBigUint64(0,e)}setBigUint64(t,e,n){let i=nt(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setBigUint64(0,e,n),this.write(i,t)}getFloat32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getFloat32(0,e)}setFloat32(t,e,n){let i=nt(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setFloat32(0,e,n),this.write(i,t)}getFloat64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getFloat64(0,e)}setFloat64(t,e,n){let i=nt(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setFloat64(0,e,n),this.write(i,t)}equals(t){if(t==null||!(t instanceof V)||t.bufs.length!==this.bufs.length)return!1;for(let e=0;e<this.bufs.length;e++)if(!ie(this.bufs[e],t.bufs[e]))return!1;return!0}static fromUint8Arrays(t,e){let n=new V;return n.bufs=t,e==null&&(e=t.reduce((i,s)=>i+s.byteLength,0)),n.length=e,n}};function ge(r){return r instanceof Uint8Array?{get(t){return r[t]},set(t,e){r[t]=e}}:{get(t){return r.get(t)},set(t,e){r.set(t,e)}}}var Fi=4294967296,H=class{constructor(t=0,e=0){this.hi=t,this.lo=e}toBigInt(t){if(t===!0)return BigInt(this.lo>>>0)+(BigInt(this.hi>>>0)<<32n);if(this.hi>>>31){let e=~this.lo+1>>>0,n=~this.hi>>>0;return e===0&&(n=n+1>>>0),-(BigInt(e)+(BigInt(n)<<32n))}return BigInt(this.lo>>>0)+(BigInt(this.hi>>>0)<<32n)}toNumber(t){return Number(this.toBigInt(t))}zzDecode(){let t=-(this.lo&1),e=((this.lo>>>1|this.hi<<31)^t)>>>0,n=(this.hi>>>1^t)>>>0;return new H(n,e)}zzEncode(){let t=this.hi>>31,e=((this.hi<<1|this.lo>>>31)^t)>>>0,n=(this.lo<<1^t)>>>0;return new H(e,n)}toBytes(t,e=0){let n=ge(t);for(;this.hi>0;)n.set(e++,this.lo&127|128),this.lo=(this.lo>>>7|this.hi<<25)>>>0,this.hi>>>=7;for(;this.lo>127;)n.set(e++,this.lo&127|128),this.lo=this.lo>>>7;n.set(e++,this.lo)}static fromBigInt(t){if(t===0n)return new H;let e=t<0;e&&(t=-t);let n=Number(t>>32n)|0,i=Number(t-(BigInt(n)<<32n))|0;return e&&(n=~n>>>0,i=~i>>>0,++i>Fi&&(i=0,++n>Fi&&(n=0))),new H(n,i)}static fromNumber(t){if(t===0)return new H;let e=t<0;e&&(t=-t);let n=t>>>0,i=(t-n)/4294967296>>>0;return e&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new H(i,n)}static fromBytes(t,e=0){let n=ge(t),i=new H,s=0;if(t.length-e>4){for(;s<4;++s)if(i.lo=(i.lo|(n.get(e)&127)<<s*7)>>>0,n.get(e++)<128)return i;if(i.lo=(i.lo|(n.get(e)&127)<<28)>>>0,i.hi=(i.hi|(n.get(e)&127)>>4)>>>0,n.get(e++)<128)return i;s=0}else for(;s<4;++s){if(e>=t.length)throw RangeError(`index out of range: ${e} > ${t.length}`);if(i.lo=(i.lo|(n.get(e)&127)<<s*7)>>>0,n.get(e++)<128)return i}if(t.length-e>4){for(;s<5;++s)if(i.hi=(i.hi|(n.get(e)&127)<<s*7+3)>>>0,n.get(e++)<128)return i}else if(e<t.byteLength)for(;s<5;++s){if(e>=t.length)throw RangeError(`index out of range: ${e} > ${t.length}`);if(i.hi=(i.hi|(n.get(e)&127)<<s*7+3)>>>0,n.get(e++)<128)return i}throw RangeError("invalid varint encoding")}};var Da=Math.pow(2,7),Na=Math.pow(2,14),Ma=Math.pow(2,21),Fa=Math.pow(2,28),Ra=Math.pow(2,35),Ia=Math.pow(2,42),za=Math.pow(2,49),Ua=Math.pow(2,56),Ha=Math.pow(2,63),xt={encodingLength(r){return r<Da?1:r<Na?2:r<Ma?3:r<Fa?4:r<Ra?5:r<Ia?6:r<za?7:r<Ua?8:r<Ha?9:10},encode(r,t,e=0){if(Number.MAX_SAFE_INTEGER!=null&&r>Number.MAX_SAFE_INTEGER)throw new RangeError("Could not encode varint");return t==null&&(t=X(xt.encodingLength(r))),H.fromNumber(r).toBytes(t,e),t},decode(r,t=0){return H.fromBytes(r,t).toNumber(!0)}};function me(r){return r[Symbol.asyncIterator]!=null}var ye=r=>{let t=xt.encodingLength(r),e=X(t);return xt.encode(r,e),ye.bytes=t,e};ye.bytes=0;function we(r,t){t=t??{};let e=t.lengthEncoder??ye;function*n(i){let s=e(i.byteLength);s instanceof Uint8Array?yield s:yield*s,i instanceof Uint8Array?yield i:yield*i}return me(r)?async function*(){for await(let i of r)yield*n(i)}():function*(){for(let i of r)yield*n(i)}()}we.single=(r,t)=>{t=t??{};let e=t.lengthEncoder??ye;return new V(e(r.byteLength),r)};var Mt=F(zi(),1);var Wa=8,$a=1024*1024*4,kt;(function(r){r[r.LENGTH=0]="LENGTH",r[r.DATA=1]="DATA"})(kt||(kt={}));var gr=r=>{let t=xt.decode(r);return gr.bytes=xt.encodingLength(t),t};gr.bytes=0;function jt(r,t){let e=new V,n=kt.LENGTH,i=-1,s=t?.lengthDecoder??gr,o=t?.maxLengthLength??Wa,a=t?.maxDataLength??$a;function*c(){for(;e.byteLength>0;){if(n===kt.LENGTH)try{if(i=s(e),i<0)throw(0,Mt.default)(new Error("invalid message length"),"ERR_INVALID_MSG_LENGTH");if(i>a)throw(0,Mt.default)(new Error("message length too long"),"ERR_MSG_DATA_TOO_LONG");let u=s.bytes;e.consume(u),t?.onLength!=null&&t.onLength(i),n=kt.DATA}catch(u){if(u instanceof RangeError){if(e.byteLength>o)throw(0,Mt.default)(new Error("message length length too long"),"ERR_MSG_LENGTH_TOO_LONG");break}throw u}if(n===kt.DATA){if(e.byteLength<i)break;let u=e.sublist(0,i);e.consume(i),t?.onData!=null&&t.onData(u),yield u,n=kt.LENGTH}}}return me(r)?async function*(){for await(let u of r)e.append(u),yield*c();if(e.byteLength>0)throw(0,Mt.default)(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}():function*(){for(let u of r)e.append(u),yield*c();if(e.byteLength>0)throw(0,Mt.default)(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}()}jt.fromReader=(r,t)=>{let e=1,n=async function*(){for(;;)try{let{done:s,value:o}=await r.next(e);if(s===!0)return;o!=null&&(yield o)}catch(s){if(s.code==="ERR_UNDER_READ")return{done:!0,value:null};throw s}finally{e=1}}();return jt(n,{...t??{},onLength:s=>{e=s}})};var be=class{constructor(t){if(!(t>0)||t-1&t)throw new Error("Max size for a FixedFIFO should be a power of two");this.buffer=new Array(t),this.mask=t-1,this.top=0,this.btm=0,this.next=null}push(t){return this.buffer[this.top]!==void 0?!1:(this.buffer[this.top]=t,this.top=this.top+1&this.mask,!0)}shift(){let t=this.buffer[this.btm];if(t!==void 0)return this.buffer[this.btm]=void 0,this.btm=this.btm+1&this.mask,t}isEmpty(){return this.buffer[this.btm]===void 0}},Ft=class{constructor(t={}){this.hwm=t.splitLimit??16,this.head=new be(this.hwm),this.tail=this.head,this.size=0}calculateSize(t){return t?.byteLength!=null?t.byteLength:1}push(t){if(t?.value!=null&&(this.size+=this.calculateSize(t.value)),!this.head.push(t)){let e=this.head;this.head=e.next=new be(2*this.head.buffer.length),this.head.push(t)}}shift(){let t=this.tail.shift();if(t===void 0&&this.tail.next!=null){let e=this.tail.next;this.tail.next=null,this.tail=e,t=this.tail.shift()}return t?.value!=null&&(this.size-=this.calculateSize(t.value)),t}isEmpty(){return this.head.isEmpty()}};function _e(r={}){return Ga(e=>{let n=e.shift();if(n==null)return{done:!0};if(n.error!=null)throw n.error;return{done:n.done===!0,value:n.value}},r)}function Ga(r,t){t=t??{};let e=t.onEnd,n=new Ft,i,s,o,a=async()=>n.isEmpty()?o?{done:!0}:await new Promise((p,y)=>{s=S=>{s=null,n.push(S);try{p(r(n))}catch(B){y(B)}return i}}):r(n),c=p=>s!=null?s(p):(n.push(p),i),u=p=>(n=new Ft,s!=null?s({error:p}):(n.push({error:p}),i)),l=p=>{if(o)return i;if(t?.objectMode!==!0&&p?.byteLength==null)throw new Error("objectMode was not true but tried to push non-Uint8Array value");return c({done:!1,value:p})},h=p=>o?i:(o=!0,p!=null?u(p):c({done:!0})),f=()=>(n=new Ft,h(),{done:!0}),g=p=>(h(p),{done:!0});if(i={[Symbol.asyncIterator](){return this},next:a,return:f,throw:g,push:l,end:h,get readableLength(){return n.size}},e==null)return i;let d=i;return i={[Symbol.asyncIterator](){return this},next(){return d.next()},throw(p){return d.throw(p),e!=null&&(e(p),e=void 0),{done:!0}},return(){return d.return(),e!=null&&(e(),e=void 0),{done:!0}},push:l,end(p){return d.end(p),e!=null&&(e(p),e=void 0),i},get readableLength(){return d.readableLength}},i}function ja(r){return r[Symbol.asyncIterator]!=null}function Qa(...r){let t=[];for(let e of r)ja(e)||t.push(e);return t.length===r.length?function*(){for(let e of t)yield*e}():async function*(){let e=_e({objectMode:!0});Promise.resolve().then(async()=>{try{await Promise.all(r.map(async n=>{for await(let i of n)e.push(i)})),e.end()}catch(n){e.end(n)}}),yield*e}()}var Ui=Qa;function yr(r,...t){if(r==null)throw new Error("Empty pipeline");if(mr(r)){let n=r;r=()=>n.source}else if(qi(r)||Hi(r)){let n=r;r=()=>n}let e=[r,...t];if(e.length>1&&mr(e[e.length-1])&&(e[e.length-1]=e[e.length-1].sink),e.length>2)for(let n=1;n<e.length-1;n++)mr(e[n])&&(e[n]=Ja(e[n]));return Xa(...e)}var Xa=(...r)=>{let t;for(;r.length>0;)t=r.shift()(t);return t},Hi=r=>r?.[Symbol.asyncIterator]!=null,qi=r=>r?.[Symbol.iterator]!=null,mr=r=>r==null?!1:r.sink!=null&&r.source!=null,Ja=r=>t=>{let e=r.sink(t);if(e?.then!=null){let n=_e({objectMode:!0});e.then(()=>{n.end()},o=>{n.end(o)});let i,s=r.source;if(Hi(s))i=async function*(){yield*s,n.end()};else if(qi(s))i=function*(){yield*s,n.end()};else throw new Error("Unknown duplex source type - must be Iterable or AsyncIterable");return Ui(n,i())}return r.source};var wr=Symbol.for("@libp2p/topology");var Wi=()=>{},br=class{constructor(t){this.min=t.min??0,this.max=t.max??1/0,this.peers=new Set,this.onConnect=t.onConnect??Wi,this.onDisconnect=t.onDisconnect??Wi}get[Symbol.toStringTag](){return wr.toString()}get[wr](){return!0}async setRegistrar(t){this.registrar=t}disconnect(t){this.onDisconnect(t)}};function $i(r){return new br(r)}var ns=F(Ki(),1);var Xt=class extends Error{constructor(t,e){super(t??"The operation was aborted"),this.type="aborted",this.code=e??"ABORT_ERR"}};function Zi(r){if(r!=null){if(typeof r[Symbol.iterator]=="function")return r[Symbol.iterator]();if(typeof r[Symbol.asyncIterator]=="function")return r[Symbol.asyncIterator]();if(typeof r.next=="function")return r}throw new Error("argument is not an iterator or iterable")}function Yi(r,t,e){let n=e??{},i=Zi(r);async function*s(){let o,a=()=>{o?.()};for(t.addEventListener("abort",a);;){let c;try{if(t.aborted){let{abortMessage:l,abortCode:h}=n;throw new Xt(l,h)}let u=new Promise((l,h)=>{o=()=>{let{abortMessage:f,abortCode:g}=n;h(new Xt(f,g))}});c=await Promise.race([u,i.next()]),o=null}catch(u){t.removeEventListener("abort",a);let l=u.type==="aborted"&&t.aborted;if(l&&n.onAbort!=null&&await n.onAbort(r),typeof i.return=="function")try{let h=i.return();h instanceof Promise&&h.catch(f=>{n.onReturnError!=null&&n.onReturnError(f)})}catch(h){n.onReturnError!=null&&n.onReturnError(h)}if(l&&n.returnOnAbort===!0)return;throw u}if(c.done===!0)break;yield c.value}t.removeEventListener("abort",a)}return s()}var J=class extends Event{constructor(t,e){super(t),this.detail=e}};function Ya(r){return r[Symbol.asyncIterator]!=null}function tc(r,t){return Ya(r)?async function*(){let e=0;if(!(t<1)){for await(let n of r)if(yield n,e++,e===t)return}}():function*(){let e=0;if(!(t<1)){for(let n of r)if(yield n,e++,e===t)return}}()}var ts=tc;function ec(r){return r[Symbol.asyncIterator]!=null}function rc(r){if(ec(r))return(async()=>{for await(let t of r);})();for(let t of r);}var es=rc;function nc(r){let[t,e]=r[Symbol.asyncIterator]!=null?[r[Symbol.asyncIterator](),Symbol.asyncIterator]:[r[Symbol.iterator](),Symbol.iterator],n=[];return{peek:()=>t.next(),push:i=>{n.push(i)},next:()=>n.length>0?{done:!1,value:n.shift()}:t.next(),[e](){return this}}}var xe=nc;function ic(r){return r[Symbol.asyncIterator]!=null}function sc(r,t){if(ic(r))return async function*(){for await(let a of r)yield t(a)}();let e=xe(r),{value:n,done:i}=e.next();if(i===!0)return function*(){}();let s=t(n);if(typeof s.then=="function")return async function*(){yield await s;for await(let a of e)yield t(a)}();let o=t;return function*(){yield s;for(let a of e)yield o(a)}()}var rs=sc;var vr="/ipfs/bitswap/1.0.0",xr="/ipfs/bitswap/1.1.0",kr="/ipfs/bitswap/1.2.0",ac=32,cc=128,uc=3e4,ke=class{constructor(t,e,n,i={}){this._log=W(t.peerId,"network"),this._libp2p=t,this._bitswap=e,this._protocols=[vr],i.b100Only!==!0&&(this._protocols.unshift(xr),this._protocols.unshift(kr)),this._stats=n,this._running=!1,this._onPeerConnect=this._onPeerConnect.bind(this),this._onPeerDisconnect=this._onPeerDisconnect.bind(this),this._onConnection=this._onConnection.bind(this),this._hashLoader=i.hashLoader??{async getHasher(){throw new Error("Not implemented")}},this._maxInboundStreams=i.maxInboundStreams??ac,this._maxOutboundStreams=i.maxOutboundStreams??cc,this._incomingStreamTimeout=i.incomingStreamTimeout??uc}async start(){this._running=!0,await this._libp2p.handle(this._protocols,this._onConnection,{maxInboundStreams:this._maxInboundStreams,maxOutboundStreams:this._maxOutboundStreams});let t=$i({onConnect:this._onPeerConnect,onDisconnect:this._onPeerDisconnect});this._registrarIds=[];for(let e of this._protocols)this._registrarIds.push(await this._libp2p.register(e,t));this._libp2p.getConnections().forEach(e=>{this._onPeerConnect(e.remotePeer)})}async stop(){if(this._running=!1,await this._libp2p.unhandle(this._protocols),this._registrarIds!=null){for(let t of this._registrarIds)this._libp2p.unregister(t);this._registrarIds=[]}}_onConnection(t){if(!this._running)return;let{stream:e,connection:n}=t,i=new ns.TimeoutController(this._incomingStreamTimeout);Promise.resolve().then(async()=>{this._log("incoming new bitswap %s connection from %p",e.stat.protocol,n.remotePeer),await yr(Yi(e.source,i.signal),s=>jt(s),async s=>{for await(let o of s){try{let a=await x.deserialize(o.subarray(),this._hashLoader);await this._bitswap._receiveMessage(n.remotePeer,a)}catch(a){this._bitswap._receiveError(a);break}i.reset()}})}).catch(s=>{this._log(s),e.abort(s)}).finally(()=>{i.clear(),e.close()})}_onPeerConnect(t){this._bitswap._onPeerConnected(t)}_onPeerDisconnect(t){this._bitswap._onPeerDisconnected(t)}findProviders(t,e={}){return e.onProgress?.(new J("bitswap:network:find-providers",t)),this._libp2p.contentRouting.findProviders(t,e)}async findAndConnect(t,e){await es(ts(rs(this.findProviders(t,e),async n=>await this.connectTo(n.id,e).catch(i=>{this._log.error(i)})),3)).catch(n=>{this._log.error(n)})}async provide(t,e={}){e.onProgress?.(new J("bitswap:network:provide",t)),await this._libp2p.contentRouting.provide(t,e)}async sendMessage(t,e,n={}){if(!this._running)throw new Error("network isn't running");let i=t.toString();this._log("sendMessage to %s",i,e),n.onProgress?.(new J("bitswap:network:send-wantlist",t)),await this._writeMessage(t,e,n),this._updateSentStats(t,e.blocks)}async connectTo(t,e={}){if(!this._running)throw new Error("network isn't running");return e.onProgress?.(new J("bitswap:network:dial",t)),await this._libp2p.dial(t,e)}_updateSentStats(t,e){let n=t.toString();if(this._stats!=null){for(let i of e.values())this._stats.push(n,"dataSent",i.length);this._stats.push(n,"blocksSent",e.size)}}async _writeMessage(t,e,n={}){let i=await this._libp2p.dialProtocol(t,[kr,xr,vr]);try{let s;switch(i.stat.protocol){case vr:s=e.serializeToBitswap100();break;case xr:case kr:s=e.serializeToBitswap110();break;default:throw new Error(`Unknown protocol: ${i.stat.protocol}`)}await yr([s],o=>we(o),i)}catch(s){n.onProgress?.(new J("bitswap:network:send-wantlist:error",{peer:t,error:s})),this._log(s)}finally{i.close()}}};var Se=class{constructor(t){this.partner=t,this.wantlist=new rt,this.exchangeCount=0,this.accounting={bytesSent:0,bytesRecv:0}}sentBytes(t){this.exchangeCount++,this.lastExchange=new Date().getTime(),this.accounting.bytesSent+=t}receivedBytes(t){this.exchangeCount++,this.lastExchange=new Date().getTime(),this.accounting.bytesRecv+=t}wants(t,e,n){this.wantlist.add(t,e,n)}cancelWant(t){this.wantlist.remove(t)}wantlistContains(t){return this.wantlist.get(t)}debtRatio(){return this.accounting.bytesSent/(this.accounting.bytesRecv+1)}};var Jt=class extends Map{constructor(t,e){super(),this._cmp=e??this._defaultSort,this._keys=[];for(let[n,i]of t??[])this.set(n,i)}update(t){if(t<0||t>=this._keys.length)return;let e=this._keys[t];this._keys.splice(t,1);let n=this._find(e);this._keys.splice(n,0,e)}set(t,e){if(this.has(t)){let i=this.indexOf(t);this._keys.splice(i,1)}super.set(t,e);let n=this._find(t);return this._keys.splice(n,0,t),this}clear(){super.clear(),this._keys=[]}delete(t){if(!this.has(t))return!1;let e=this.indexOf(t);return this._keys.splice(e,1),super.delete(t)}indexOf(t){if(!this.has(t))return-1;let e=this._find(t);if(this._keys[e]===t)return e;for(let n=1;n<this._keys.length;n++){if(this._keys[e+n]===t)return e+n;if(this._keys[e-n]===t)return e-n}return-1}_find(t){let e=0,n=this._keys.length;for(;e<n;){let i=e+n>>>1,s=this._kCmp(this._keys[i],t);if(s<0)e=i+1;else if(s>0)n=i;else return i}return e}*keys(){for(let t of this._keys)yield t}*values(){for(let t of this._keys)yield this.get(t)}*entries(){for(let t of this._keys)yield[t,this.get(t)]}*[Symbol.iterator](){yield*this.entries()}forEach(t,e=this){if(t!=null)for(let n of this._keys){let i=this.get(n);if(i==null)throw new Error("Value cannot be undefined");t.apply(e,[[n,i]])}}_defaultSort(t,e){return t[0]<e[0]?-1:e[0]<t[0]?1:0}_kCmp(t,e){return this._cmp([t,this.get(t)],[e,this.get(e)])}};var lc={hasNewInfo(){return!1},merge(){}},Ee=class{constructor(t=lc){this._taskMerger=t,this._byPeer=new Jt([],Be.compare)}pushTasks(t,e){let n=this._byPeer.get(t.toString());n==null&&(n=new Be(t,this._taskMerger)),n.pushTasks(e),this._byPeer.set(t.toString(),n)}popTasks(t){let e=this._head();if(e===void 0)return{tasks:[],pendingSize:0};let{tasks:n,pendingSize:i}=e.popTasks(t);if(n.length===0)return{tasks:n,pendingSize:i};let s=e.peerId;return e.isIdle()?this._byPeer.delete(s.toString()):this._byPeer.update(0),{peerId:s,tasks:n,pendingSize:i}}_head(){if(this._byPeer.size!==0)for(let[,t]of this._byPeer)return t}remove(t,e){this._byPeer.get(e.toString())?.remove(t)}tasksDone(t,e){let n=this._byPeer.get(t.toString());if(n==null)return;let i=this._byPeer.indexOf(t.toString());for(let s of e)n.taskDone(s);this._byPeer.update(i)}},Be=class{constructor(t,e){this.peerId=t,this._taskMerger=e,this._activeTotalSize=0,this._pending=new Sr,this._active=new Set}pushTasks(t){for(let e of t)this._pushTask(e)}_pushTask(t){if(!this._taskHasMoreInfoThanActiveTasks(t))return;let e=this._pending.get(t.topic);if(e!=null){t.priority>e.priority&&this._pending.updatePriority(t.topic,t.priority),this._taskMerger.merge(t,e);return}this._pending.add(t)}_taskHasMoreInfoThanActiveTasks(t){let e=[];for(let n of this._active)n.topic===t.topic&&e.push(n);return e.length===0?!0:this._taskMerger.hasNewInfo(t,e)}popTasks(t){let e=0,n=[],i=this._pending.tasks();for(let s=0;s<i.length&&e<t;s++){let o=i[s];n.push(o),e+=o.size,this._pending.delete(o.topic),this._activeTotalSize+=o.size,this._active.add(o)}return{tasks:n,pendingSize:this._pending.totalSize}}taskDone(t){this._active.has(t)&&(this._activeTotalSize-=t.size,this._active.delete(t))}remove(t){this._pending.delete(t)}isIdle(){return this._pending.length===0&&this._active.size===0}static compare(t,e){return t[1]._pending.length===0?1:e[1]._pending.length===0?-1:t[1]._activeTotalSize===e[1]._activeTotalSize?e[1]._pending.length-t[1]._pending.length:t[1]._activeTotalSize-e[1]._activeTotalSize}},Sr=class{constructor(){this._tasks=new Jt([],this._compare)}get length(){return this._tasks.size}get totalSize(){return[...this._tasks.values()].reduce((t,e)=>t+e.task.size,0)}get(t){return this._tasks?.get(t)?.task}add(t){this._tasks.set(t.topic,{created:Date.now(),task:t})}delete(t){this._tasks.delete(t)}tasks(){return[...this._tasks.values()].map(t=>t.task)}updatePriority(t,e){let n=this._tasks.get(t);if(n==null)return;let i=this._tasks.indexOf(t);n.task.priority=e,this._tasks.update(i)}_compare(t,e){return t[1].task.priority===e[1].task.priority?t[1].created-e[1].created:e[1].task.priority-t[1].task.priority}};var is={hasNewInfo(r,t){let e=!1,n=!1;for(let i of t)i.data.haveBlock&&(e=!0),i.data.isWantBlock&&(n=!0);return!!(!n&&r.data.isWantBlock||!e&&r.data.haveBlock)},merge(r,t){let e=r.data,n=t.data;!n.haveBlock&&e.haveBlock&&(n.haveBlock=e.haveBlock,n.blockSize=e.blockSize),!n.isWantBlock&&e.isWantBlock&&(n.isWantBlock=!0,(!n.haveBlock||e.haveBlock)&&(n.haveBlock=e.haveBlock,t.size=r.size)),n.isWantBlock&&n.haveBlock&&(t.size=n.blockSize)}};var ss=x.WantType,hc=16*1024,fc=1024,Ce=class{constructor(t,e,n,i,s,o={}){this._log=W(t,"engine"),this.blockstore=e,this.network=n,this._stats=i,this._opts=this._processOpts(o),this.ledgerMap=ut({name:"ipfs_bitswap_ledger_map",metrics:s.metrics}),this._running=!1,this._requestQueue=new Ee(is)}_processOpts(t){return{maxSizeReplaceHasWithBlock:fc,targetMessageSize:hc,...t}}_scheduleProcessTasks(){setTimeout(()=>{this._processTasks().catch(t=>{this._log.error("error processing stats",t)})})}async _processTasks(){if(!this._running)return;let{peerId:t,tasks:e,pendingSize:n}=this._requestQueue.popTasks(this._opts.targetMessageSize);if(e.length===0)return;let i=new x(!1);i.setPendingBytes(n);let s=[],o=new Map;for(let c of e){let u=b.parse(c.topic);c.data.haveBlock?c.data.isWantBlock?(s.push(u),o.set(c.topic,c.data)):i.addHave(u):i.addDontHave(u)}let a=await this._getBlocks(s);for(let[c,u]of o){let l=b.parse(c),h=a.get(c);h!=null?i.addBlock(l,h):u.sendDontHave&&i.addDontHave(l)}if(i.empty){t!=null&&this._requestQueue.tasksDone(t,e),this._scheduleProcessTasks();return}try{t!=null&&await this.network.sendMessage(t,i);for(let[c,u]of a.entries())t!=null&&this.messageSent(t,b.parse(c),u)}catch(c){this._log.error(c)}t!=null&&this._requestQueue.tasksDone(t,e),this._scheduleProcessTasks()}wantlistForPeer(t){let e=t.toString(),n=this.ledgerMap.get(e);return n!=null?n.wantlist.sortedEntries():new Map}ledgerForPeer(t){let e=t.toString(),n=this.ledgerMap.get(e);if(n!=null)return{peer:n.partner,value:n.debtRatio(),sent:n.accounting.bytesSent,recv:n.accounting.bytesRecv,exchanged:n.exchangeCount}}peers(){return Array.from(this.ledgerMap.values()).map(t=>t.partner)}receivedBlocks(t){if(t.length!==0){for(let e of this.ledgerMap.values())for(let{cid:n,block:i}of t){let s=e.wantlistContains(n);if(s==null)continue;let o=i.length,a=this._sendAsBlock(s.wantType,o),c=o;a||(c=x.blockPresenceSize(s.cid)),this._requestQueue.pushTasks(e.partner,[{topic:s.cid.toString(w),priority:s.priority,size:c,data:{blockSize:o,isWantBlock:a,haveBlock:!0,sendDontHave:!1}}])}this._scheduleProcessTasks()}}async messageReceived(t,e){let n=this._findOrCreate(t);if(e.empty)return;if(e.full&&(n.wantlist=new rt),this._updateBlockAccounting(e.blocks,n),e.wantlist.size===0){this._scheduleProcessTasks();return}let i=[],s=[];e.wantlist.forEach(o=>{o.cancel?(n.cancelWant(o.cid),i.push(o.cid)):(n.wants(o.cid,o.priority,o.wantType),s.push(o))}),this._cancelWants(t,i),await this._addWants(t,s),this._scheduleProcessTasks()}_cancelWants(t,e){for(let n of e)this._requestQueue.remove(n.toString(w),t)}async _addWants(t,e){let n=await this._getBlockSizes(e.map(s=>s.cid)),i=[];for(let s of e){let o=s.cid.toString(w),a=n.get(o);if(a==null)s.sendDontHave&&i.push({topic:o,priority:s.priority,size:x.blockPresenceSize(s.cid),data:{isWantBlock:s.wantType===ss.Block,blockSize:0,haveBlock:!1,sendDontHave:s.sendDontHave}});else{let c=this._sendAsBlock(s.wantType,a),u=a;c||(u=x.blockPresenceSize(s.cid)),i.push({topic:o,priority:s.priority,size:u,data:{isWantBlock:c,blockSize:a,haveBlock:!0,sendDontHave:s.sendDontHave}})}this._requestQueue.pushTasks(t,i)}}_sendAsBlock(t,e){return t===ss.Block||e<=this._opts.maxSizeReplaceHasWithBlock}async _getBlockSizes(t){let e=await this._getBlocks(t);return new Map([...e].map(([n,i])=>[n,i.length]))}async _getBlocks(t){let e=new Map;return await Promise.all(t.map(async n=>{try{let i=await this.blockstore.get(n);e.set(n.toString(w),i)}catch(i){i.code!=="ERR_NOT_FOUND"&&this._log.error("failed to query blockstore for %s: %s",n,i)}})),e}_updateBlockAccounting(t,e){for(let n of t.values())this._log("got block (%s bytes)",n.length),e.receivedBytes(n.length)}messageSent(t,e,n){let i=this._findOrCreate(t);i.sentBytes(n.length),i.wantlist.remove(e)}numBytesSentTo(t){return this._findOrCreate(t).accounting.bytesSent}numBytesReceivedFrom(t){return this._findOrCreate(t).accounting.bytesRecv}peerDisconnected(t){this.ledgerMap.delete(t.toString())}_findOrCreate(t){let e=t.toString(),n=this.ledgerMap.get(e);if(n!=null)return n;let i=new Se(t);return this.ledgerMap.set(e,i),this._stats!=null&&this._stats.push(e,"peerCount",1),i}start(){this._running=!0}stop(){this._running=!1}};var Ss=F(Te(),1);var Br={};z(Br,{identity:()=>bc});var bc=Lt({prefix:"\0",name:"identity",encode:r=>Xr(r),decode:r=>Qr(r)});var Cr={};z(Cr,{base2:()=>_c});var _c=A({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var Lr={};z(Lr,{base8:()=>vc});var vc=A({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var Ar={};z(Ar,{base10:()=>xc});var xc=it({prefix:"9",name:"base10",alphabet:"0123456789"});var Tr={};z(Tr,{base16:()=>kc,base16upper:()=>Sc});var kc=A({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),Sc=A({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var Or={};z(Or,{base36:()=>Ec,base36upper:()=>Bc});var Ec=it({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Bc=it({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var Pr={};z(Pr,{base256emoji:()=>Oc});var ms=Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"),Cc=ms.reduce((r,t,e)=>(r[e]=t,r),[]),Lc=ms.reduce((r,t,e)=>(r[t.codePointAt(0)]=e,r),[]);function Ac(r){return r.reduce((t,e)=>(t+=Cc[e],t),"")}function Tc(r){let t=[];for(let e of r){let n=Lc[e.codePointAt(0)];if(n===void 0)throw new Error(`Non-base256emoji character: ${e}`);t.push(n)}return new Uint8Array(t)}var Oc=Lt({prefix:"\u{1F680}",name:"base256emoji",encode:Ac,decode:Tc});var Dr={};z(Dr,{identity:()=>Nc});var ys=0,Pc="identity",ws=et,Dc=r=>dt(ys,ws(r)),Nc={code:ys,name:Pc,encode:ws,digest:Dc};var Af=new TextEncoder,Tf=new TextDecoder;var Nr={...Br,...Cr,...Lr,...Ar,...Tr,...Ue,...Or,...ze,...Xe,...Pr},Mf={...$e,...Dr};function _s(r,t,e,n){return{name:r,prefix:t,encoder:{name:r,prefix:t,encode:e},decoder:{decode:n}}}var bs=_s("utf8","u",r=>"u"+new TextDecoder("utf8").decode(r),r=>new TextEncoder().encode(r.substring(1))),Mr=_s("ascii","a",r=>{let t="a";for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return t},r=>{r=r.substring(1);let t=X(r.length);for(let e=0;e<r.length;e++)t[e]=r.charCodeAt(e);return t}),Rc={utf8:bs,"utf-8":bs,hex:Nr.base16,latin1:Mr,ascii:Mr,binary:Mr,...Nr},vs=Rc;function Fr(r,t="utf8"){let e=vs[t];if(e==null)throw new Error(`Unsupported encoding "${t}"`);return(t==="utf8"||t==="utf-8")&&globalThis.Buffer!=null&&globalThis.Buffer.from!=null?globalThis.Buffer.from(r.buffer,r.byteOffset,r.byteLength).toString("utf8"):e.encoder.encode(r).substring(1)}var xs=r=>`unwant:${Fr(r.multihash.bytes,"base64")}`,ks=r=>`block:${Fr(r.multihash.bytes,"base64")}`,Oe=class extends Ss.EventEmitter{constructor(t){super(),this.setMaxListeners(Oi),this._log=W(t,"notif")}hasBlock(t,e){let n=ks(t);this._log(n),this.emit(n,e)}async wantBlock(t,e={}){if(t==null)throw new Error("Not a valid cid");let n=ks(t),i=xs(t);return this._log(`wantBlock:${t}`),await new Promise((s,o)=>{let a=()=>{this.removeListener(n,c),e.onProgress?.(new J("bitswap:want-block:unwant",t)),o(new Error(`Block for ${t} unwanted`))},c=u=>{this.removeListener(i,a),e.onProgress?.(new J("bitswap:want-block:block",t)),s(u)};this.once(i,a),this.once(n,c),e.signal?.addEventListener("abort",()=>{this.removeListener(n,c),this.removeListener(i,a),o(new Error(`Want for ${t} aborted`))})})}unwantBlock(t){let e=xs(t);this._log(e),this.emit(e)}};var Ts=F(Te(),1);var Ls=F(Te(),1),Rr=F(Cs(),1),Kt=class extends Ls.EventEmitter{constructor(t,e){super(),this._options=e,this._queue=[],this._stats={},this._frequencyLastTime=Date.now(),this._frequencyAccumulators={},this._movingAverages={},this._update=this._update.bind(this),t.forEach(n=>{this._stats[n]=BigInt(0),this._movingAverages[n]={},this._options.movingAverageIntervals.forEach(i=>{(this._movingAverages[n][i]=(0,Rr.default)(i)).push(this._frequencyLastTime,0)})}),this._enabled=this._options.enabled}enable(){this._enabled=!0}disable(){this._enabled=!1}stop(){this._timeout!=null&&clearTimeout(this._timeout)}get snapshot(){return Object.assign({},this._stats)}get movingAverages(){return Object.assign({},this._movingAverages)}push(t,e){this._enabled&&(this._queue.push([t,e,Date.now()]),this._resetComputeTimeout())}_resetComputeTimeout(){this._timeout!=null&&clearTimeout(this._timeout),this._timeout=setTimeout(this._update,this._nextTimeout())}_nextTimeout(){let t=this._queue.length/this._options.computeThrottleMaxQueueSize;return Math.max(this._options.computeThrottleTimeout*(1-t),0)}_update(){if(this._timeout=void 0,this._queue.length>0){let t;for(;this._queue.length>0;){let e=t=this._queue.shift();e!=null&&this._applyOp(e)}t!=null&&this._updateFrequency(t[2]),this.emit("update",this._stats)}}_updateFrequency(t){let e=t-this._frequencyLastTime;e>0&&Object.keys(this._stats).forEach(n=>{this._updateFrequencyFor(n,e,t)}),this._frequencyLastTime=t}_updateFrequencyFor(t,e,n){let i=this._frequencyAccumulators[t]??0;this._frequencyAccumulators[t]=0;let s=i/e*1e3,o=this._movingAverages[t];o==null&&(o=this._movingAverages[t]={}),this._options.movingAverageIntervals.forEach(a=>{let c=o[a];c==null&&(c=o[a]=(0,Rr.default)(a)),c.push(n,s)})}_applyOp(t){let e=t[0],n=t[1];if(typeof n!="number")throw new Error(`invalid increment number: ${n}`);Object.prototype.hasOwnProperty.call(this._stats,e)||(this._stats[e]=BigInt(0)),this._stats[e]=BigInt(this._stats[e])+BigInt(n),this._frequencyAccumulators[e]==null&&(this._frequencyAccumulators[e]=0),this._frequencyAccumulators[e]+=n}};var As={enabled:!1,computeThrottleTimeout:1e3,computeThrottleMaxQueueSize:1e3,movingAverageIntervals:[60*1e3,5*60*1e3,15*60*1e3]},Pe=class extends Ts.EventEmitter{constructor(t,e=[],n=As){super();let i=Object.assign({},As,n);if(typeof i.computeThrottleTimeout!="number")throw new Error("need computeThrottleTimeout");if(typeof i.computeThrottleMaxQueueSize!="number")throw new Error("need computeThrottleMaxQueueSize");this._initialCounters=e,this._options=i,this._enabled=this._options.enabled,this._global=new Kt(e,i),this._global.on("update",s=>this.emit("update",s)),this._peers=ut({name:"ipfs_bitswap_stats_peers",metrics:t.metrics})}enable(){this._enabled=!0,this._options.enabled=!0,this._global.enable()}disable(){this._enabled=!1,this._options.enabled=!1,this._global.disable()}stop(){this._enabled=!1,this._global.stop();for(let t of this._peers)t[1].stop()}get snapshot(){return this._global.snapshot}get movingAverages(){return this._global.movingAverages}forPeer(t){let e=t.toString();return this._peers.get(e)}push(t,e,n){if(this._enabled&&(this._global.push(e,n),t!=null)){let i=this._peers.get(t);i==null&&(i=new Kt(this._initialCounters,this._options),this._peers.set(t,i)),i.push(e,n)}}disconnected(t){let e=t.toString(),n=this._peers.get(e);n!=null&&(n.stop(),this._peers.delete(e))}};var Ns=F(Ps(),1);function zc(r){return r[Symbol.asyncIterator]!=null}function Uc(r,t){if(zc(r))return async function*(){for await(let a of r)await t(a),yield a}();let e=xe(r),{value:n,done:i}=e.next();if(i===!0)return function*(){}();if(typeof t(n)?.then=="function")return async function*(){yield n;for await(let a of e)await t(a),yield a}();let o=t;return function*(){yield n;for(let a of e)o(a),yield a}()}var Ds=Uc;var Hc={async getHasher(){throw new Error("Not implemented")}},qc={maxInboundStreams:32,maxOutboundStreams:128,incomingStreamTimeout:3e4,hashLoader:Hc,statsEnabled:!1,statsComputeThrottleTimeout:1e3,statsComputeThrottleMaxQueueSize:1e3},Wc=["blocksReceived","dataReceived","dupBlksReceived","dupDataReceived","blocksSent","dataSent","providesBufferLength","wantListLength","peerCount"],Zt=class{constructor(t,e,n={}){this._libp2p=t,this._log=W(this.peerId),this._options=Object.assign({},qc,n),this.stats=new Pe(t,Wc,{enabled:this._options.statsEnabled,computeThrottleTimeout:this._options.statsComputeThrottleTimeout,computeThrottleMaxQueueSize:this._options.statsComputeThrottleMaxQueueSize}),this.network=new ke(t,this,this.stats,{hashLoader:n.hashLoader,maxInboundStreams:n.maxInboundStreams,maxOutboundStreams:n.maxOutboundStreams,incomingStreamTimeout:n.incomingStreamTimeout}),this.blockstore=e,this.engine=new Ce(this.peerId,e,this.network,this.stats,t),this.wm=new pe(this.peerId,this.network,this.stats,t),this.notifications=new Oe(this.peerId),this.started=!1}isStarted(){return this.started}get peerId(){return this._libp2p.peerId}async _receiveMessage(t,e){try{await this.engine.messageReceived(t,e)}catch{this._log("failed to receive message",e)}if(e.blocks.size===0)return;let n=[];for(let[i,s]of e.blocks.entries()){let o=b.parse(i);n.push({wasWanted:this.wm.wantlist.contains(o),cid:o,data:s})}this.wm.cancelWants(n.filter(({wasWanted:i})=>i).map(({cid:i})=>i)),await Promise.all(n.map(async({cid:i,wasWanted:s,data:o})=>{await this._handleReceivedBlock(t,i,o,s)}))}async _handleReceivedBlock(t,e,n,i){this._log("received block");let s=await this.blockstore.has(e);this._updateReceiveCounters(t.toString(),e,n,s),i&&await this.put(e,n)}_updateReceiveCounters(t,e,n,i){this.stats.push(t,"blocksReceived",1),this.stats.push(t,"dataReceived",n.length),i&&(this.stats.push(t,"dupBlksReceived",1),this.stats.push(t,"dupDataReceived",n.length))}_receiveError(t){this._log.error("ReceiveError",t)}_onPeerConnected(t){this.wm.connected(t)}_onPeerDisconnected(t){this.wm.disconnected(t),this.engine.peerDisconnected(t),this.stats.disconnected(t)}enableStats(){this.stats.enable()}disableStats(){this.stats.disable()}wantlistForPeer(t,e){return this.engine.wantlistForPeer(t)}ledgerForPeer(t){return this.engine.ledgerForPeer(t)}async want(t,e={}){let n=async(c,u)=>(this.wm.wantBlocks([c],u),await this.notifications.wantBlock(c,u)),i=!1,s=async(c,u)=>{try{return await this.blockstore.get(c,u)}catch(l){if(l.code!=="ERR_NOT_FOUND")throw l;return i||(i=!0,this.network.findAndConnect(c,u).catch(h=>{this._log.error(h)})),await n(c,u)}},o=new AbortController,a=e.signal!=null?(0,Ns.anySignal)([e.signal,o.signal]):o.signal;try{return await Promise.race([this.notifications.wantBlock(t,{...e,signal:a}),s(t,{...e,signal:a})])}finally{o.abort()}}unwant(t){let e=Array.isArray(t)?t:[t];this.wm.unwantBlocks(e),e.forEach(n=>{this.notifications.unwantBlock(n)})}cancelWants(t){this.wm.cancelWants(Array.isArray(t)?t:[t])}async put(t,e,n){await this.blockstore.put(t,e),this.notify(t,e)}async*putMany(t,e){yield*this.blockstore.putMany(Ds(t,({cid:n,block:i})=>{this.notify(n,i)}),e)}notify(t,e,n={}){this.notifications.hasBlock(t,e),this.engine.receivedBlocks([{cid:t,block:e}]),this.network.provide(t,n).catch(i=>{this._log.error("Failed to provide: %s",i.message)})}getWantlist(){return this.wm.wantlist.entries()}get peers(){return this.engine.peers()}async start(){this.wm.start(),await this.network.start(),this.engine.start(),this.started=!0}async stop(){this.stats.stop(),this.wm.stop(),await this.network.stop(),this.engine.stop(),this.started=!1}};var Rs=`\r
+`,Ms=new TextEncoder().encode(Rs);function zr(r){return async t=>{let e=t.method,n=new URL(t.url),i=t.headers,s=n.pathname,o=n.search,a=`${e} ${s}${o} HTTP/1.1${Rs}`;i.forEach((St,Hr)=>{a+=`${Hr}: ${St}\r
+`}),i.has("Host")||(a+=`Host: ${n.host}\r
+`);let c=null;(t.method==="POST"||t.method==="PUT"||t.method==="PATCH")&&t.body!==null&&(c=await t.arrayBuffer(),a+=`Content-Length: ${c.byteLength}\r
+`),a+=`\r
+`,r.sink(async function*(){yield new TextEncoder().encode(a),c!=null&&(yield new Uint8Array(c))}());let u=r.source,l="",h=!1,f="",g=!1,d=new Headers,p=!1,y="",S=new TextDecoder,B=$c(),O=B.writableStream.getWriter(),C=new ArrayBuffer(4<<10),E=new Uint8Array(C,0,0);await new Promise((St,Hr)=>{(async()=>{for await(let lt of u){Nt(lt)||(lt=new V(lt));for(let ht of lt){let Yt=0;if(!h||!g){let L=S.decode(ht);if(y!==""&&(L=y+L,y=""),!h){let M=L.indexOf(`\r
+`);M!==-1?(h=!0,l=L.substring(0,M),L=L.substring(M+2),Yt+=M+2):y=L}if(h&&!g){let M=L.indexOf(`\r
+`);if(M===0){if(g=!0,St(),L=L.substring(M+2),Yt+=M+2,L!==""){let G=new TextEncoder().encode(L);await O.write(G)}continue}let tt=L.indexOf(`\r
+\r
+`);if(tt!==-1){if(f=L.substring(0,tt),g=!0,f!==""&&f.split(`\r
+`).forEach(G=>{let[ft,qr]=G.split(": ");try{d.set(ft,qr)}catch(Is){console.warn("Couldn't set header",ft,qr,Is)}}),d.get("Transfer-Encoding")==="chunked"&&(p=!0),St(),L=L.substring(tt+4),Yt+=tt+4,L!==""){let G=ht.subarray(Yt);if(p){if(G=await Fs(G,O),G.byteLength>0){E=new Uint8Array(C,0,G.byteLength);for(let ft=0;ft<G.byteLength;ft++)E[ft]=G[ft]}}else await O.write(G)}}else y=L}}else if(p){if(E.length>0){let M=E.length;E=new Uint8Array(C,0,E.length+ht.length);for(let tt=0;tt<ht.length;tt++)E[M+tt]=ht[tt]}else E=ht;let L=await Fs(E,O);if(L.byteLength>0){E=new Uint8Array(C,0,L.byteLength);for(let M=0;M<L.byteLength;M++)E[M]=L[M]}else E=new Uint8Array(C,0,0)}else await O.write(ht)}}g||(g=!0,St()),await O.close()})().catch(async lt=>{console.error("Consumer errored:",lt),await O.abort(lt)})});let N=l.split(" ");if(N.length<2)throw new Error("Invalid status line");if(N.shift()!=="HTTP/1.1")throw new Error("Invalid HTTP version");let P=parseInt(N.shift(),10),R=N.join(" "),Y=B.readableStream;return(P===204||P===205||P===304)&&(Y=null),new Response(Y,{status:P,statusText:R,headers:d})}}function $c(){let r=new ByteLengthQueuingStrategy({highWaterMark:1}),t=16<<10,e=[],n=[],i=!1,s=new WritableStream({async write(c){let u=0,l;for(c instanceof Uint8Array?l=c:l=new Uint8Array(c.buffer,c.byteOffset,c.byteLength);l.length>0;){for(;e.length===0;)await new Promise((g,d)=>{n.push({resolve:g,reject:d})});let h=e.pop();if(i){h.reject(new Error("Writer closed"));return}let f;h.buf instanceof Uint8Array?f=h.buf:f=new Uint8Array(h.buf.buffer,h.buf.byteOffset,h.buf.byteLength),u=Math.min(f.length,l.length);for(let g=0;g<u;g++)f[g]=l[g];l=l.slice(u),h.resolve(u)}},close(){i=!0,e.length>0&&e.forEach(c=>{c.reject(new Error("Writer closed"))})},abort(c){i=!0,e.length>0&&e.forEach(u=>{u.reject(new Error("Writer closed"))}),console.error("Writer aborted",c)}},r),o=typeof ReadableByteStreamController<"u";return{readableStream:new ReadableStream({type:o?"bytes":void 0,autoAllocateChunkSize:o?t:void 0,start(c){},async pull(c){if(i){c.close();return}if(c.byobRequest?.view!=null){let u=c.byobRequest,l=new Promise((h,f)=>{e.push({buf:u.view,resolve:h,reject:f})});n.length>0&&n.pop()?.resolve(void 0);try{let h=await l;u.respond(h)}catch(h){if(i){c.close();return}c.error(h)}}else{let u=new ArrayBuffer(t),l=new Uint8Array(u),h=new Promise((f,g)=>{e.push({buf:l,resolve:f,reject:g})});n.length>0&&n.pop()?.resolve(void 0);try{let f=await h;c.enqueue(new Uint8Array(u,0,f))}catch(f){if(i){c.close();return}c.error(f)}}}}),writableStream:s}}async function Fs(r,t){let e;(function(o){o[o.ReadingChunkSize=1]="ReadingChunkSize",o[o.ReadingContent=2]="ReadingContent"})(e||(e={}));let n=e.ReadingChunkSize,i=0,s=0;for(;r.length>0;)if(n===e.ReadingChunkSize){let o=r.indexOf(Ms[0]);if(o===-1||r[o+1]!==Ms[1])return r;n=e.ReadingContent,i=parseInt(new TextDecoder().decode(r.slice(0,o)),16),s=o}else{let o=r.subarray(s+2);if(o.length<i+2)return r;await t.write(o.subarray(0,i)),r=o.subarray(i+2),n=e.ReadingChunkSize}return r}var Vc="/libp2p-http",Ur={httpOverLibp2pPeersLimit:5,bootstrapHttpOnlyPeers:[],bitswapOptions:{}},De=class{constructor(t,e,n,i=Ur){this.libp2p=t,this.innerBitswap=e,this.blockstore=n,this.stats=this.innerBitswap.stats,this.peers=this.innerBitswap.peers,this.httpOverLibp2pPeers=[],this.httpOnlyPeers=[],this.httpOverLibp2pPeersLimit=i.httpOverLibp2pPeersLimit??Ur.httpOverLibp2pPeersLimit;let s=i.bootstrapHttpOnlyPeers??Ur.bootstrapHttpOnlyPeers;t.peerStore.addEventListener("change:protocols",o=>{let{peerId:a,protocols:c}=o.detail;c.includes(Vc)&&this.newHttpOverLibp2pPeer(a)}),this.httpOnlyPeers=[...s]}newHttpOnlyPeer(t){this.httpOnlyPeers.push(t)}newHttpOverLibp2pPeer(t){if(this.httpOverLibp2pPeers.length<this.httpOverLibp2pPeersLimit){this.httpOverLibp2pPeers.push({val:t,timestamp:Date.now()});return}let e=0,n=this.httpOverLibp2pPeers[0].timestamp,i=0;for(let{timestamp:s,val:o}of this.httpOverLibp2pPeers){if(o===t)return;s<n&&(n=s,i=e),e++}this.httpOverLibp2pPeers[i]={val:t,timestamp:Date.now()}}wantlistForPeer(t){return this.innerBitswap.wantlistForPeer(t)}ledgerForPeer(t){return this.innerBitswap.ledgerForPeer(t)}unwant(t){this.innerBitswap.unwant(t)}cancelWants(t){this.innerBitswap.cancelWants(t)}getWantlist(){return this.innerBitswap.getWantlist()}notify(t,e,n){this.innerBitswap.notify(t,e,n)}async want(t,e){let n=new AbortController;e?.signal!=null&&e.signal.addEventListener("abort",()=>{n.abort()});let i=this.innerBitswap.want(t,{...e,signal:n.signal}),s=this.httpOverLibp2pPeers.map(async({val:c})=>{try{let u=await this.libp2p.dial(c,{signal:e?.signal});{let g=await u.newStream("/libp2p-http",{signal:e?.signal});if(!(await zr(g)(new Request(`https://example.com/ipfs/${t.toString()}/`,{method:"HEAD",headers:{"Cache-Control":"only-if-cached"}}))).ok)throw new Error("Not found")}let l=await u.newStream("/libp2p-http",{signal:e?.signal}),f=await zr(l)(new Request(`https://example.com/ipfs/${t.toString()}/?format=raw`));if(f.ok){let g=new Uint8Array(await f.arrayBuffer());return await this.blockstore.put(t,g),g}throw new Error("Not found")}catch(u){throw await new Promise(l=>{e?.signal?.addEventListener("abort",l)}),u}}),o=this.httpOnlyPeers.map(async c=>{try{if(!(await fetch(new Request(`${c}/ipfs/${t.toString()}/`,{method:"HEAD"}),{signal:e?.signal})).ok)throw new Error("Not found");let u=await fetch(new Request(`${c}/ipfs/${t.toString()}/?format=raw`),{signal:e?.signal});if(u.ok){let l=new Uint8Array(await u.arrayBuffer());return await this.blockstore.put(t,l),l}throw new Error("Not found")}catch(u){throw await new Promise(l=>{e?.signal?.addEventListener("abort",l)}),u}}),a=await Promise.race([i,...s,...o]);return this.innerBitswap.notify(t,a),n.abort(),a}isStarted(){return this.innerBitswap.isStarted()}beforeStart(){return this.innerBitswap.beforeStart?.()}start(){return this.innerBitswap.start()}afterStart(){return this.innerBitswap.afterStart?.()}beforeStop(){return this.innerBitswap.beforeStop?.()}stop(){return this.innerBitswap.stop()}afterStop(){return this.innerBitswap.afterStop?.()}};var Gc=(r,t,e={})=>new Zt(r,t,e),jc=(r,t,e={})=>{let n=new Zt(r,t,e.bitswapOptions);return new De(r,n,t,e)};return $s(Qc);})();
+return IpfsBitswap}));
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/bitswap.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.d.ts
new file mode 100644
index 0000000..9ad4235
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.d.ts
@@ -0,0 +1,112 @@
+import { WantManager } from './want-manager/index.js';
+import { Network } from './network.js';
+import { DecisionEngine, PeerLedger } from './decision-engine/index.js';
+import { Notifications } from './notifications.js';
+import { Stats } from './stats/index.js';
+import { CID } from 'multiformats/cid';
+import type { BitswapOptions, Bitswap, WantListEntry, BitswapWantProgressEvents, BitswapNotifyProgressEvents } from './index.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { Blockstore, Pair } from 'interface-blockstore';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { BitswapMessage } from './message/index.js';
+import type { AbortOptions } from '@multiformats/multiaddr';
+import type { ProgressOptions } from 'progress-events';
+import type { AwaitIterable } from 'interface-store';
+/**
+ * JavaScript implementation of the Bitswap 'data exchange' protocol
+ * used by IPFS.
+ */
+export declare class DefaultBitswap implements Bitswap {
+    private readonly _libp2p;
+    private readonly _log;
+    private readonly _options;
+    readonly stats: Stats;
+    network: Network;
+    blockstore: Blockstore;
+    engine: DecisionEngine;
+    wm: WantManager;
+    notifications: Notifications;
+    private started;
+    constructor(libp2p: Libp2p, blockstore: Blockstore, options?: BitswapOptions);
+    isStarted(): boolean;
+    get peerId(): PeerId;
+    /**
+     * handle messages received through the network
+     */
+    _receiveMessage(peerId: PeerId, incoming: BitswapMessage): Promise<void>;
+    _handleReceivedBlock(peerId: PeerId, cid: CID, data: Uint8Array, wasWanted: boolean): Promise<void>;
+    _updateReceiveCounters(peerIdStr: string, cid: CID, data: Uint8Array, exists: boolean): void;
+    /**
+     * handle errors on the receiving channel
+     */
+    _receiveError(err: Error): void;
+    /**
+     * handle new peers
+     */
+    _onPeerConnected(peerId: PeerId): void;
+    /**
+     * handle peers being disconnected
+     */
+    _onPeerDisconnected(peerId: PeerId): void;
+    enableStats(): void;
+    disableStats(): void;
+    /**
+     * Return the current wantlist for a given `peerId`
+     */
+    wantlistForPeer(peerId: PeerId, _options?: any): Map<string, WantListEntry>;
+    /**
+     * Return ledger information for a given `peerId`
+     */
+    ledgerForPeer(peerId: PeerId): PeerLedger | undefined;
+    /**
+     * Fetch a given block by cid. If the block is in the local
+     * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.
+     */
+    want(cid: CID, options?: AbortOptions & ProgressOptions<BitswapWantProgressEvents>): Promise<Uint8Array>;
+    /**
+     * Removes the given CIDs from the wantlist independent of any ref counts.
+     *
+     * This will cause all outstanding promises for a given block to reject.
+     *
+     * If you want to cancel the want for a block without doing that, pass an
+     * AbortSignal in to `.get` or `.getMany` and abort it.
+     */
+    unwant(cids: CID[] | CID): void;
+    /**
+     * Removes the given keys from the want list. This may cause pending promises
+     * for blocks to never resolve.  If you wish these promises to abort instead
+     * call `unwant(cids)` instead.
+     */
+    cancelWants(cids: CID[] | CID): void;
+    /**
+     * Put the given block to the underlying blockstore and
+     * send it to nodes that have it in their wantlist.
+     */
+    put(cid: CID, block: Uint8Array, _options?: any): Promise<void>;
+    /**
+     * Put the given blocks to the underlying blockstore and
+     * send it to nodes that have it them their wantlist.
+     */
+    putMany(source: Iterable<Pair> | AsyncIterable<Pair>, options?: AbortOptions): AwaitIterable<CID>;
+    /**
+     * Sends notifications about the arrival of a block
+     */
+    notify(cid: CID, block: Uint8Array, options?: ProgressOptions<BitswapNotifyProgressEvents>): void;
+    /**
+     * Get the current list of wants
+     */
+    getWantlist(): IterableIterator<[string, WantListEntry]>;
+    /**
+     * Get the current list of partners
+     */
+    get peers(): PeerId[];
+    /**
+     * Start the bitswap node
+     */
+    start(): Promise<void>;
+    /**
+     * Stop the bitswap node
+     */
+    stop(): Promise<void>;
+}
+//# sourceMappingURL=bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.d.ts.map
new file mode 100644
index 0000000..06bca7e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap.d.ts","sourceRoot":"","sources":["../../src/bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/bitswap.js b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.js
new file mode 100644
index 0000000..21cc1f9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.js
@@ -0,0 +1,300 @@
+import { WantManager } from './want-manager/index.js';
+import { Network } from './network.js';
+import { DecisionEngine } from './decision-engine/index.js';
+import { Notifications } from './notifications.js';
+import { logger } from './utils/index.js';
+import { Stats } from './stats/index.js';
+import { anySignal } from 'any-signal';
+import { CID } from 'multiformats/cid';
+import forEach from 'it-foreach';
+const hashLoader = {
+    async getHasher() {
+        throw new Error('Not implemented');
+    }
+};
+const defaultOptions = {
+    maxInboundStreams: 32,
+    maxOutboundStreams: 128,
+    incomingStreamTimeout: 30000,
+    hashLoader,
+    statsEnabled: false,
+    statsComputeThrottleTimeout: 1000,
+    statsComputeThrottleMaxQueueSize: 1000
+};
+const statsKeys = [
+    'blocksReceived',
+    'dataReceived',
+    'dupBlksReceived',
+    'dupDataReceived',
+    'blocksSent',
+    'dataSent',
+    'providesBufferLength',
+    'wantListLength',
+    'peerCount'
+];
+/**
+ * JavaScript implementation of the Bitswap 'data exchange' protocol
+ * used by IPFS.
+ */
+export class DefaultBitswap {
+    constructor(libp2p, blockstore, options = {}) {
+        this._libp2p = libp2p;
+        this._log = logger(this.peerId);
+        this._options = Object.assign({}, defaultOptions, options);
+        // stats
+        this.stats = new Stats(libp2p, statsKeys, {
+            enabled: this._options.statsEnabled,
+            computeThrottleTimeout: this._options.statsComputeThrottleTimeout,
+            computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize
+        });
+        // the network delivers a messages
+        this.network = new Network(libp2p, this, this.stats, {
+            hashLoader: options.hashLoader,
+            maxInboundStreams: options.maxInboundStreams,
+            maxOutboundStreams: options.maxOutboundStreams,
+            incomingStreamTimeout: options.incomingStreamTimeout
+        });
+        // local database
+        this.blockstore = blockstore;
+        this.engine = new DecisionEngine(this.peerId, blockstore, this.network, this.stats, libp2p);
+        // handle message sending
+        this.wm = new WantManager(this.peerId, this.network, this.stats, libp2p);
+        this.notifications = new Notifications(this.peerId);
+        this.started = false;
+    }
+    isStarted() {
+        return this.started;
+    }
+    get peerId() {
+        return this._libp2p.peerId;
+    }
+    /**
+     * handle messages received through the network
+     */
+    async _receiveMessage(peerId, incoming) {
+        try {
+            // Note: this allows the engine to respond to any wants in the message.
+            // Processing of the blocks in the message happens below, after the
+            // blocks have been added to the blockstore.
+            await this.engine.messageReceived(peerId, incoming);
+        }
+        catch (err) {
+            // Log instead of throwing an error so as to process as much as
+            // possible of the message. Currently `messageReceived` does not
+            // throw any errors, but this could change in the future.
+            this._log('failed to receive message', incoming);
+        }
+        if (incoming.blocks.size === 0) {
+            return;
+        }
+        /** @type { { cid: CID, wasWanted: boolean, data: Uint8Array }[] } */
+        const received = [];
+        for (const [cidStr, data] of incoming.blocks.entries()) {
+            const cid = CID.parse(cidStr);
+            received.push({
+                wasWanted: this.wm.wantlist.contains(cid),
+                cid,
+                data
+            });
+        }
+        // quickly send out cancels, reduces chances of duplicate block receives
+        this.wm.cancelWants(received
+            .filter(({ wasWanted }) => wasWanted)
+            .map(({ cid }) => cid));
+        await Promise.all(received.map(async ({ cid, wasWanted, data }) => { await this._handleReceivedBlock(peerId, cid, data, wasWanted); }));
+    }
+    async _handleReceivedBlock(peerId, cid, data, wasWanted) {
+        this._log('received block');
+        const has = await this.blockstore.has(cid);
+        this._updateReceiveCounters(peerId.toString(), cid, data, has);
+        if (!wasWanted) {
+            return;
+        }
+        await this.put(cid, data);
+    }
+    _updateReceiveCounters(peerIdStr, cid, data, exists) {
+        this.stats.push(peerIdStr, 'blocksReceived', 1);
+        this.stats.push(peerIdStr, 'dataReceived', data.length);
+        if (exists) {
+            this.stats.push(peerIdStr, 'dupBlksReceived', 1);
+            this.stats.push(peerIdStr, 'dupDataReceived', data.length);
+        }
+    }
+    /**
+     * handle errors on the receiving channel
+     */
+    _receiveError(err) {
+        this._log.error('ReceiveError', err);
+    }
+    /**
+     * handle new peers
+     */
+    _onPeerConnected(peerId) {
+        this.wm.connected(peerId);
+    }
+    /**
+     * handle peers being disconnected
+     */
+    _onPeerDisconnected(peerId) {
+        this.wm.disconnected(peerId);
+        this.engine.peerDisconnected(peerId);
+        this.stats.disconnected(peerId);
+    }
+    enableStats() {
+        this.stats.enable();
+    }
+    disableStats() {
+        this.stats.disable();
+    }
+    /**
+     * Return the current wantlist for a given `peerId`
+     */
+    wantlistForPeer(peerId, _options) {
+        return this.engine.wantlistForPeer(peerId);
+    }
+    /**
+     * Return ledger information for a given `peerId`
+     */
+    ledgerForPeer(peerId) {
+        return this.engine.ledgerForPeer(peerId);
+    }
+    /**
+     * Fetch a given block by cid. If the block is in the local
+     * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.
+     */
+    async want(cid, options = {}) {
+        const fetchFromNetwork = async (cid, options) => {
+            // add it to the want list - n.b. later we will abort the AbortSignal
+            // so no need to remove the blocks from the wantlist after we have it
+            this.wm.wantBlocks([cid], options);
+            return await this.notifications.wantBlock(cid, options);
+        };
+        let promptedNetwork = false;
+        const loadOrFetchFromNetwork = async (cid, options) => {
+            try {
+                // have to await here as we want to handle ERR_NOT_FOUND
+                const block = await this.blockstore.get(cid, options);
+                return block;
+            }
+            catch (err) {
+                if (err.code !== 'ERR_NOT_FOUND') {
+                    throw err;
+                }
+                if (!promptedNetwork) {
+                    promptedNetwork = true;
+                    this.network.findAndConnect(cid, options)
+                        .catch((err) => { this._log.error(err); });
+                }
+                // we don't have the block locally so fetch it from the network
+                return await fetchFromNetwork(cid, options);
+            }
+        };
+        // depending on implementation it's possible for blocks to come in while
+        // we do the async operations to get them from the blockstore leading to
+        // a race condition, so register for incoming block notifications as well
+        // as trying to get it from the datastore
+        const controller = new AbortController();
+        const signal = (options.signal != null)
+            ? anySignal([options.signal, controller.signal])
+            : controller.signal;
+        try {
+            const block = await Promise.race([
+                this.notifications.wantBlock(cid, {
+                    ...options,
+                    signal
+                }),
+                loadOrFetchFromNetwork(cid, {
+                    ...options,
+                    signal
+                })
+            ]);
+            return block;
+        }
+        finally {
+            // since we have the block we can now abort any outstanding attempts to
+            // fetch it
+            controller.abort();
+        }
+    }
+    /**
+     * Removes the given CIDs from the wantlist independent of any ref counts.
+     *
+     * This will cause all outstanding promises for a given block to reject.
+     *
+     * If you want to cancel the want for a block without doing that, pass an
+     * AbortSignal in to `.get` or `.getMany` and abort it.
+     */
+    unwant(cids) {
+        const cidsArray = Array.isArray(cids) ? cids : [cids];
+        this.wm.unwantBlocks(cidsArray);
+        cidsArray.forEach((cid) => { this.notifications.unwantBlock(cid); });
+    }
+    /**
+     * Removes the given keys from the want list. This may cause pending promises
+     * for blocks to never resolve.  If you wish these promises to abort instead
+     * call `unwant(cids)` instead.
+     */
+    cancelWants(cids) {
+        this.wm.cancelWants(Array.isArray(cids) ? cids : [cids]);
+    }
+    /**
+     * Put the given block to the underlying blockstore and
+     * send it to nodes that have it in their wantlist.
+     */
+    async put(cid, block, _options) {
+        await this.blockstore.put(cid, block);
+        this.notify(cid, block);
+    }
+    /**
+     * Put the given blocks to the underlying blockstore and
+     * send it to nodes that have it them their wantlist.
+     */
+    async *putMany(source, options) {
+        yield* this.blockstore.putMany(forEach(source, ({ cid, block }) => {
+            this.notify(cid, block);
+        }), options);
+    }
+    /**
+     * Sends notifications about the arrival of a block
+     */
+    notify(cid, block, options = {}) {
+        this.notifications.hasBlock(cid, block);
+        this.engine.receivedBlocks([{ cid, block }]);
+        // Note: Don't wait for provide to finish before returning
+        this.network.provide(cid, options).catch((err) => {
+            this._log.error('Failed to provide: %s', err.message);
+        });
+    }
+    /**
+     * Get the current list of wants
+     */
+    getWantlist() {
+        return this.wm.wantlist.entries();
+    }
+    /**
+     * Get the current list of partners
+     */
+    get peers() {
+        return this.engine.peers();
+    }
+    /**
+     * Start the bitswap node
+     */
+    async start() {
+        this.wm.start();
+        await this.network.start();
+        this.engine.start();
+        this.started = true;
+    }
+    /**
+     * Stop the bitswap node
+     */
+    async stop() {
+        this.stats.stop();
+        this.wm.stop();
+        await this.network.stop();
+        this.engine.stop();
+        this.started = false;
+    }
+}
+//# sourceMappingURL=bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/bitswap.js.map b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.js.map
new file mode 100644
index 0000000..f3040dc
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap.js","sourceRoot":"","sources":["../../src/bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/constants.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/constants.d.ts
new file mode 100644
index 0000000..ada65e6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/constants.d.ts
@@ -0,0 +1,8 @@
+export declare const maxProvidersPerRequest = 3;
+export declare const providerRequestTimeout: number;
+export declare const hasBlockTimeout: number;
+export declare const provideTimeout: number;
+export declare const kMaxPriority: number;
+export declare const maxListeners = 1000;
+export declare const wantlistSendDebounceMs = 1;
+//# sourceMappingURL=constants.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/constants.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/constants.d.ts.map
new file mode 100644
index 0000000..a3cc20a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/constants.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"constants.d.ts","sourceRoot":"","sources":["../../src/constants.ts"],"names":[],"mappings":"AAEA,eAAO,MAAM,sBAAsB,IAAI,CAAA;AACvC,eAAO,MAAM,sBAAsB,QAAc,CAAA;AACjD,eAAO,MAAM,eAAe,QAAc,CAAA;AAC1C,eAAO,MAAM,cAAc,QAAc,CAAA;AACzC,eAAO,MAAM,YAAY,QAAsB,CAAA;AAC/C,eAAO,MAAM,YAAY,OAAO,CAAA;AAChC,eAAO,MAAM,sBAAsB,IAAI,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/constants.js b/node_modules/ipfs-bitswap/dist/dist/src/constants.js
new file mode 100644
index 0000000..c1bcc02
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/constants.js
@@ -0,0 +1,9 @@
+const SECOND = 1000;
+export const maxProvidersPerRequest = 3;
+export const providerRequestTimeout = 10 * SECOND;
+export const hasBlockTimeout = 15 * SECOND;
+export const provideTimeout = 15 * SECOND;
+export const kMaxPriority = Math.pow(2, 31) - 1;
+export const maxListeners = 1000;
+export const wantlistSendDebounceMs = 1;
+//# sourceMappingURL=constants.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/constants.js.map b/node_modules/ipfs-bitswap/dist/dist/src/constants.js.map
new file mode 100644
index 0000000..403b708
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/constants.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../src/constants.ts"],"names":[],"mappings":"AAAA,MAAM,MAAM,GAAG,IAAI,CAAA;AAEnB,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAA;AACvC,MAAM,CAAC,MAAM,sBAAsB,GAAG,EAAE,GAAG,MAAM,CAAA;AACjD,MAAM,CAAC,MAAM,eAAe,GAAG,EAAE,GAAG,MAAM,CAAA;AAC1C,MAAM,CAAC,MAAM,cAAc,GAAG,EAAE,GAAG,MAAM,CAAA;AACzC,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA;AAC/C,MAAM,CAAC,MAAM,YAAY,GAAG,IAAI,CAAA;AAChC,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.d.ts
new file mode 100644
index 0000000..71bbe59
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.d.ts
@@ -0,0 +1,120 @@
+import { CID } from 'multiformats/cid';
+import { BitswapMessage as Message } from '../message/index.js';
+import { Ledger } from './ledger.js';
+import { RequestQueue } from './req-queue.js';
+import type { Message as PBMessage } from '../message/message.js';
+import type { BitswapMessageEntry } from '../message/entry.js';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { Blockstore } from 'interface-blockstore';
+import type { Network } from '../network.js';
+import type { Stats } from '../stats/index.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { WantListEntry } from '../wantlist/entry.js';
+export interface TaskMerger {
+    /**
+     * Given the existing tasks with the same topic, does the task add some new
+     * information? Used to decide whether to merge the task or ignore it.
+     */
+    hasNewInfo: (task: Task, tasksWithTopic: Task[]) => boolean;
+    /**
+     * Merge the information from the task into the existing pending task.
+     */
+    merge: (newTask: Task, existingTask: Task) => void;
+}
+export interface Task {
+    /**
+     * A name for the Task (like an id but not necessarily unique)
+     */
+    topic: string;
+    /**
+     * Priority for the Task (tasks are ordered by priority per peer).
+     */
+    priority: number;
+    /**
+     * The size of the task, e.g. the number of bytes in a block.
+     */
+    size: number;
+    data: TaskData;
+}
+export interface TaskData {
+    /**
+     * The size of the block, if known (if we don't have the block this is zero)
+     */
+    blockSize: number;
+    /**
+     * Indicates if the request is for a block or for a HAVE.
+     */
+    isWantBlock: boolean;
+    /**
+     * Indicates if we have the block.
+     */
+    haveBlock: boolean;
+    /**
+     * Indicates whether to send a DONT_HAVE response if we don't have the block.
+     * If this is `false` and we don't have the block, we just ignore the
+     * want-block request (useful for discovery where we query lots of peers but
+     * don't want a response unless the peer has the block).
+     */
+    sendDontHave: boolean;
+}
+export interface DecisionEngineOptions {
+    targetMessageSize?: number;
+    maxSizeReplaceHasWithBlock?: number;
+}
+export interface PeerLedger {
+    peer: PeerId;
+    value: number;
+    sent: number;
+    recv: number;
+    exchanged: number;
+}
+export declare class DecisionEngine {
+    private readonly _log;
+    blockstore: Blockstore;
+    network: Network;
+    private readonly _stats;
+    private readonly _opts;
+    ledgerMap: Map<string, Ledger>;
+    private _running;
+    _requestQueue: RequestQueue;
+    constructor(peerId: PeerId, blockstore: Blockstore, network: Network, stats: Stats, libp2p: Libp2p, opts?: DecisionEngineOptions);
+    _processOpts(opts: DecisionEngineOptions): Required<DecisionEngineOptions>;
+    _scheduleProcessTasks(): void;
+    /**
+     * Pull tasks off the request queue and send a message to the corresponding
+     * peer
+     */
+    _processTasks(): Promise<void>;
+    wantlistForPeer(peerId: PeerId): Map<string, WantListEntry>;
+    ledgerForPeer(peerId: PeerId): PeerLedger | undefined;
+    peers(): PeerId[];
+    /**
+     * Receive blocks either from an incoming message from the network, or from
+     * blocks being added by the client on the localhost (eg IPFS add)
+     */
+    receivedBlocks(blocks: Array<{
+        cid: CID;
+        block: Uint8Array;
+    }>): void;
+    /**
+     * Handle incoming messages
+     */
+    messageReceived(peerId: PeerId, msg: Message): Promise<void>;
+    _cancelWants(peerId: PeerId, cids: CID[]): void;
+    _addWants(peerId: PeerId, wants: BitswapMessageEntry[]): Promise<void>;
+    _sendAsBlock(wantType: PBMessage.Wantlist.WantType, blockSize: number): boolean;
+    _getBlockSizes(cids: CID[]): Promise<Map<string, number>>;
+    _getBlocks(cids: CID[]): Promise<Map<string, Uint8Array>>;
+    _updateBlockAccounting(blocksMap: Map<string, Uint8Array>, ledger: Ledger): void;
+    /**
+     * Clear up all accounting things after message was sent
+     */
+    messageSent(peerId: PeerId, cid: CID, block: Uint8Array): void;
+    numBytesSentTo(peerId: PeerId): number;
+    numBytesReceivedFrom(peerId: PeerId): number;
+    peerDisconnected(peerId: PeerId): void;
+    _findOrCreate(peerId: PeerId): Ledger;
+    start(): void;
+    stop(): void;
+}
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.d.ts.map
new file mode 100644
index 0000000..aecb774
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/decision-engine/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.js b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.js
new file mode 100644
index 0000000..a504255
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.js
@@ -0,0 +1,349 @@
+import { CID } from 'multiformats/cid';
+import { base58btc } from 'multiformats/bases/base58';
+import { BitswapMessage as Message } from '../message/index.js';
+import { Wantlist } from '../wantlist/index.js';
+import { Ledger } from './ledger.js';
+import { RequestQueue } from './req-queue.js';
+import { DefaultTaskMerger } from './task-merger.js';
+import { logger } from '../utils/index.js';
+import { trackedMap } from '@libp2p/tracked-map';
+const WantType = Message.WantType;
+// The ideal size of the batched payload. We try to pop this much data off the
+// request queue, but
+// - if there isn't any more data in the queue we send whatever we have
+// - if there are several small items in the queue (eg HAVE response) followed
+//   by one big item (eg a block) that would exceed this target size, we
+//   include the big item in the message
+const TARGET_MESSAGE_SIZE = 16 * 1024;
+// If the client sends a want-have, and the engine has the corresponding block,
+// we check the size of the block and if it's small enough we send the block
+// itself, rather than sending a HAVE.
+// This constant defines the maximum size up to which we replace a HAVE with
+// a block.
+const MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;
+export class DecisionEngine {
+    constructor(peerId, blockstore, network, stats, libp2p, opts = {}) {
+        this._log = logger(peerId, 'engine');
+        this.blockstore = blockstore;
+        this.network = network;
+        this._stats = stats;
+        this._opts = this._processOpts(opts);
+        // A list of of ledgers by their partner id
+        this.ledgerMap = trackedMap({
+            name: 'ipfs_bitswap_ledger_map',
+            metrics: libp2p.metrics
+        });
+        this._running = false;
+        // Queue of want-have / want-block per peer
+        this._requestQueue = new RequestQueue(DefaultTaskMerger);
+    }
+    _processOpts(opts) {
+        return {
+            maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,
+            targetMessageSize: TARGET_MESSAGE_SIZE,
+            ...opts
+        };
+    }
+    _scheduleProcessTasks() {
+        setTimeout(() => {
+            this._processTasks().catch(err => {
+                this._log.error('error processing stats', err);
+            });
+        });
+    }
+    /**
+     * Pull tasks off the request queue and send a message to the corresponding
+     * peer
+     */
+    async _processTasks() {
+        if (!this._running) {
+            return;
+        }
+        const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize);
+        if (tasks.length === 0) {
+            return;
+        }
+        // Create a new message
+        const msg = new Message(false);
+        // Amount of data in the request queue still waiting to be popped
+        msg.setPendingBytes(pendingSize);
+        // Split out want-blocks, want-haves and DONT_HAVEs
+        const blockCids = [];
+        const blockTasks = new Map();
+        for (const task of tasks) {
+            const cid = CID.parse(task.topic);
+            if (task.data.haveBlock) {
+                if (task.data.isWantBlock) {
+                    blockCids.push(cid);
+                    blockTasks.set(task.topic, task.data);
+                }
+                else {
+                    // Add HAVES to the message
+                    msg.addHave(cid);
+                }
+            }
+            else {
+                // Add DONT_HAVEs to the message
+                msg.addDontHave(cid);
+            }
+        }
+        const blocks = await this._getBlocks(blockCids);
+        for (const [topic, taskData] of blockTasks) {
+            const cid = CID.parse(topic);
+            const blk = blocks.get(topic);
+            // If the block was found (it has not been removed)
+            if (blk != null) {
+                // Add the block to the message
+                msg.addBlock(cid, blk);
+            }
+            else {
+                // The block was not found. If the client requested DONT_HAVE,
+                // add DONT_HAVE to the message.
+                if (taskData.sendDontHave) {
+                    msg.addDontHave(cid);
+                }
+            }
+        }
+        // If there's nothing in the message, bail out
+        if (msg.empty) {
+            (peerId != null) && this._requestQueue.tasksDone(peerId, tasks);
+            // Trigger the next round of task processing
+            this._scheduleProcessTasks();
+            return;
+        }
+        try {
+            // Send the message
+            (peerId != null) && await this.network.sendMessage(peerId, msg);
+            // Peform sent message accounting
+            for (const [cidStr, block] of blocks.entries()) {
+                (peerId != null) && this.messageSent(peerId, CID.parse(cidStr), block);
+            }
+        }
+        catch (err) {
+            this._log.error(err);
+        }
+        // Free the tasks up from the request queue
+        (peerId != null) && this._requestQueue.tasksDone(peerId, tasks);
+        // Trigger the next round of task processing
+        this._scheduleProcessTasks();
+    }
+    wantlistForPeer(peerId) {
+        const peerIdStr = peerId.toString();
+        const ledger = this.ledgerMap.get(peerIdStr);
+        return (ledger != null) ? ledger.wantlist.sortedEntries() : new Map();
+    }
+    ledgerForPeer(peerId) {
+        const peerIdStr = peerId.toString();
+        const ledger = this.ledgerMap.get(peerIdStr);
+        if (ledger == null) {
+            return undefined;
+        }
+        return {
+            peer: ledger.partner,
+            value: ledger.debtRatio(),
+            sent: ledger.accounting.bytesSent,
+            recv: ledger.accounting.bytesRecv,
+            exchanged: ledger.exchangeCount
+        };
+    }
+    peers() {
+        return Array.from(this.ledgerMap.values()).map((l) => l.partner);
+    }
+    /**
+     * Receive blocks either from an incoming message from the network, or from
+     * blocks being added by the client on the localhost (eg IPFS add)
+     */
+    receivedBlocks(blocks) {
+        if (blocks.length === 0) {
+            return;
+        }
+        // For each connected peer, check if it wants the block we received
+        for (const ledger of this.ledgerMap.values()) {
+            for (const { cid, block } of blocks) {
+                // Filter out blocks that we don't want
+                const want = ledger.wantlistContains(cid);
+                if (want == null) {
+                    continue;
+                }
+                // If the block is small enough, just send the block, even if the
+                // client asked for a HAVE
+                const blockSize = block.length;
+                const isWantBlock = this._sendAsBlock(want.wantType, blockSize);
+                let entrySize = blockSize;
+                if (!isWantBlock) {
+                    entrySize = Message.blockPresenceSize(want.cid);
+                }
+                this._requestQueue.pushTasks(ledger.partner, [{
+                        topic: want.cid.toString(base58btc),
+                        priority: want.priority,
+                        size: entrySize,
+                        data: {
+                            blockSize,
+                            isWantBlock,
+                            haveBlock: true,
+                            sendDontHave: false
+                        }
+                    }]);
+            }
+        }
+        this._scheduleProcessTasks();
+    }
+    /**
+     * Handle incoming messages
+     */
+    async messageReceived(peerId, msg) {
+        const ledger = this._findOrCreate(peerId);
+        if (msg.empty) {
+            return;
+        }
+        // If the message has a full wantlist, clear the current wantlist
+        if (msg.full) {
+            ledger.wantlist = new Wantlist();
+        }
+        // Record the amount of block data received
+        this._updateBlockAccounting(msg.blocks, ledger);
+        if (msg.wantlist.size === 0) {
+            this._scheduleProcessTasks();
+            return;
+        }
+        // Clear cancelled wants and add new wants to the ledger
+        const cancels = [];
+        const wants = [];
+        msg.wantlist.forEach((entry) => {
+            if (entry.cancel) {
+                ledger.cancelWant(entry.cid);
+                cancels.push(entry.cid);
+            }
+            else {
+                ledger.wants(entry.cid, entry.priority, entry.wantType);
+                wants.push(entry);
+            }
+        });
+        this._cancelWants(peerId, cancels);
+        await this._addWants(peerId, wants);
+        this._scheduleProcessTasks();
+    }
+    _cancelWants(peerId, cids) {
+        for (const c of cids) {
+            this._requestQueue.remove(c.toString(base58btc), peerId);
+        }
+    }
+    async _addWants(peerId, wants) {
+        // Get the size of each wanted block
+        const blockSizes = await this._getBlockSizes(wants.map(w => w.cid));
+        const tasks = [];
+        for (const want of wants) {
+            const id = want.cid.toString(base58btc);
+            const blockSize = blockSizes.get(id);
+            // If the block was not found
+            if (blockSize == null) {
+                // Only add the task to the queue if the requester wants a DONT_HAVE
+                if (want.sendDontHave) {
+                    tasks.push({
+                        topic: id,
+                        priority: want.priority,
+                        size: Message.blockPresenceSize(want.cid),
+                        data: {
+                            isWantBlock: want.wantType === WantType.Block,
+                            blockSize: 0,
+                            haveBlock: false,
+                            sendDontHave: want.sendDontHave
+                        }
+                    });
+                }
+            }
+            else {
+                // The block was found, add it to the queue
+                // If the block is small enough, just send the block, even if the
+                // client asked for a HAVE
+                const isWantBlock = this._sendAsBlock(want.wantType, blockSize);
+                // entrySize is the amount of space the entry takes up in the
+                // message we send to the recipient. If we're sending a block, the
+                // entrySize is the size of the block. Otherwise it's the size of
+                // a block presence entry.
+                let entrySize = blockSize;
+                if (!isWantBlock) {
+                    entrySize = Message.blockPresenceSize(want.cid);
+                }
+                tasks.push({
+                    topic: id,
+                    priority: want.priority,
+                    size: entrySize,
+                    data: {
+                        isWantBlock,
+                        blockSize,
+                        haveBlock: true,
+                        sendDontHave: want.sendDontHave
+                    }
+                });
+            }
+            this._requestQueue.pushTasks(peerId, tasks);
+        }
+    }
+    _sendAsBlock(wantType, blockSize) {
+        return wantType === WantType.Block ||
+            blockSize <= this._opts.maxSizeReplaceHasWithBlock;
+    }
+    async _getBlockSizes(cids) {
+        const blocks = await this._getBlocks(cids);
+        return new Map([...blocks].map(([k, v]) => [k, v.length]));
+    }
+    async _getBlocks(cids) {
+        const res = new Map();
+        await Promise.all(cids.map(async (cid) => {
+            try {
+                const block = await this.blockstore.get(cid);
+                res.set(cid.toString(base58btc), block);
+            }
+            catch (err) {
+                if (err.code !== 'ERR_NOT_FOUND') {
+                    this._log.error('failed to query blockstore for %s: %s', cid, err);
+                }
+            }
+        }));
+        return res;
+    }
+    _updateBlockAccounting(blocksMap, ledger) {
+        for (const block of blocksMap.values()) {
+            this._log('got block (%s bytes)', block.length);
+            ledger.receivedBytes(block.length);
+        }
+    }
+    /**
+     * Clear up all accounting things after message was sent
+     */
+    messageSent(peerId, cid, block) {
+        const ledger = this._findOrCreate(peerId);
+        ledger.sentBytes(block.length);
+        ledger.wantlist.remove(cid);
+    }
+    numBytesSentTo(peerId) {
+        return this._findOrCreate(peerId).accounting.bytesSent;
+    }
+    numBytesReceivedFrom(peerId) {
+        return this._findOrCreate(peerId).accounting.bytesRecv;
+    }
+    peerDisconnected(peerId) {
+        this.ledgerMap.delete(peerId.toString());
+    }
+    _findOrCreate(peerId) {
+        const peerIdStr = peerId.toString();
+        const ledger = this.ledgerMap.get(peerIdStr);
+        if (ledger != null) {
+            return ledger;
+        }
+        const l = new Ledger(peerId);
+        this.ledgerMap.set(peerIdStr, l);
+        if (this._stats != null) {
+            this._stats.push(peerIdStr, 'peerCount', 1);
+        }
+        return l;
+    }
+    start() {
+        this._running = true;
+    }
+    stop() {
+        this._running = false;
+    }
+}
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.js.map
new file mode 100644
index 0000000..0dcf2a8
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/decision-engine/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.d.ts
new file mode 100644
index 0000000..e7d6a6e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.d.ts
@@ -0,0 +1,27 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { CID } from 'multiformats/cid';
+import type { Message } from '../message/message.js';
+import type { WantListEntry } from '../wantlist/entry.js';
+import { Wantlist } from '../wantlist/index.js';
+export declare class Ledger {
+    partner: PeerId;
+    wantlist: Wantlist;
+    exchangeCount: number;
+    accounting: {
+        bytesSent: number;
+        bytesRecv: number;
+    };
+    lastExchange?: number;
+    constructor(peerId: PeerId);
+    sentBytes(n: number): void;
+    receivedBytes(n: number): void;
+    wants(cid: CID, priority: number, wantType: Message.Wantlist.WantType): void;
+    /**
+     * @param {CID} cid
+     * @returns {void}
+     */
+    cancelWant(cid: CID): void;
+    wantlistContains(cid: CID): WantListEntry | undefined;
+    debtRatio(): number;
+}
+//# sourceMappingURL=ledger.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.d.ts.map
new file mode 100644
index 0000000..53fa57d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ledger.d.ts","sourceRoot":"","sources":["../../../src/decision-engine/ledger.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAC3C,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAA;AACpD,OAAO,KAAK,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAE/C,qBAAa,MAAM;IACV,OAAO,EAAE,MAAM,CAAA;IACf,QAAQ,EAAE,QAAQ,CAAA;IAClB,aAAa,EAAE,MAAM,CAAA;IACrB,UAAU,EAAE;QAAE,SAAS,EAAE,MAAM,CAAC;QAAC,SAAS,EAAE,MAAM,CAAA;KAAE,CAAA;IACpD,YAAY,CAAC,EAAE,MAAM,CAAA;gBAEf,MAAM,EAAE,MAAM;IAY3B,SAAS,CAAE,CAAC,EAAE,MAAM,GAAG,IAAI;IAM3B,aAAa,CAAE,CAAC,EAAE,MAAM,GAAG,IAAI;IAM/B,KAAK,CAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI;IAI7E;;;OAGG;IAEH,UAAU,CAAE,GAAG,EAAE,GAAG,GAAG,IAAI;IAI3B,gBAAgB,CAAE,GAAG,EAAE,GAAG,GAAG,aAAa,GAAG,SAAS;IAItD,SAAS,IAAK,MAAM;CAGrB"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.js b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.js
new file mode 100644
index 0000000..0b9e324
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.js
@@ -0,0 +1,39 @@
+import { Wantlist } from '../wantlist/index.js';
+export class Ledger {
+    constructor(peerId) {
+        this.partner = peerId;
+        this.wantlist = new Wantlist();
+        this.exchangeCount = 0;
+        this.accounting = {
+            bytesSent: 0,
+            bytesRecv: 0
+        };
+    }
+    sentBytes(n) {
+        this.exchangeCount++;
+        this.lastExchange = (new Date()).getTime();
+        this.accounting.bytesSent += n;
+    }
+    receivedBytes(n) {
+        this.exchangeCount++;
+        this.lastExchange = (new Date()).getTime();
+        this.accounting.bytesRecv += n;
+    }
+    wants(cid, priority, wantType) {
+        this.wantlist.add(cid, priority, wantType);
+    }
+    /**
+     * @param {CID} cid
+     * @returns {void}
+     */
+    cancelWant(cid) {
+        this.wantlist.remove(cid);
+    }
+    wantlistContains(cid) {
+        return this.wantlist.get(cid);
+    }
+    debtRatio() {
+        return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)); // +1 is to prevent division by zero
+    }
+}
+//# sourceMappingURL=ledger.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.js.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.js.map
new file mode 100644
index 0000000..3dcfa84
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/ledger.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ledger.js","sourceRoot":"","sources":["../../../src/decision-engine/ledger.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAE/C,MAAM,OAAO,MAAM;IAOjB,YAAa,MAAc;QACzB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAA;QAE9B,IAAI,CAAC,aAAa,GAAG,CAAC,CAAA;QAEtB,IAAI,CAAC,UAAU,GAAG;YAChB,SAAS,EAAE,CAAC;YACZ,SAAS,EAAE,CAAC;SACb,CAAA;IACH,CAAC;IAED,SAAS,CAAE,CAAS;QAClB,IAAI,CAAC,aAAa,EAAE,CAAA;QACpB,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAA;QAC1C,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,CAAA;IAChC,CAAC;IAED,aAAa,CAAE,CAAS;QACtB,IAAI,CAAC,aAAa,EAAE,CAAA;QACpB,IAAI,CAAC,YAAY,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAA;QAC1C,IAAI,CAAC,UAAU,CAAC,SAAS,IAAI,CAAC,CAAA;IAChC,CAAC;IAED,KAAK,CAAE,GAAQ,EAAE,QAAgB,EAAE,QAAmC;QACpE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;IAC5C,CAAC;IAED;;;OAGG;IAEH,UAAU,CAAE,GAAQ;QAClB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC;IAED,gBAAgB,CAAE,GAAQ;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;IAC/B,CAAC;IAED,SAAS;QACP,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAA,CAAC,oCAAoC;IAC3G,CAAC;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.d.ts
new file mode 100644
index 0000000..6e758ff
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.d.ts
@@ -0,0 +1,89 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+import { SortedMap } from '../utils/sorted-map.js';
+import type { Task, TaskMerger } from './index.js';
+export interface PopTaskResult {
+    peerId?: PeerId;
+    tasks: Task[];
+    pendingSize: number;
+}
+export interface PendingTask {
+    created: number;
+    task: Task;
+}
+/**
+ * Queue of requests to be processed by the engine.
+ * The requests from each peer are added to the peer's queue, sorted by
+ * priority.
+ * Tasks are popped in priority order from the best peer - see popTasks()
+ * for more details.
+ */
+export declare class RequestQueue {
+    private readonly _taskMerger;
+    _byPeer: SortedMap<string, PeerTasks>;
+    constructor(taskMerger?: TaskMerger);
+    /**
+     * Push tasks onto the queue for the given peer
+     */
+    pushTasks(peerId: PeerId, tasks: Task[]): void;
+    /**
+     * Choose the peer with the least active work (or if all have the same active
+     * work, the most pending tasks) and pop off the highest priority tasks until
+     * the total size is at least targetMinBytes.
+     * This puts the popped tasks into the "active" state, meaning they are
+     * actively being processed (and cannot be modified).
+     */
+    popTasks(targetMinBytes: number): PopTaskResult;
+    _head(): PeerTasks | undefined;
+    /**
+     * Remove the task with the given topic for the given peer.
+     */
+    remove(topic: string, peerId: PeerId): void;
+    /**
+     * Called when the tasks for the given peer complete.
+     */
+    tasksDone(peerId: PeerId, tasks: Task[]): void;
+}
+/**
+ * Queue of tasks for a particular peer, sorted by priority.
+ */
+declare class PeerTasks {
+    peerId: PeerId;
+    private readonly _taskMerger;
+    private _activeTotalSize;
+    private readonly _pending;
+    private readonly _active;
+    constructor(peerId: PeerId, taskMerger: TaskMerger);
+    /**
+     * Push tasks onto the queue
+     */
+    pushTasks(tasks: Task[]): void;
+    _pushTask(task: Task): void;
+    /**
+     * Indicates whether the new task adds any more information over tasks that are
+     * already in the active task queue
+     */
+    _taskHasMoreInfoThanActiveTasks(task: Task): boolean;
+    /**
+     * Pop tasks off the queue such that the total size is at least targetMinBytes
+     */
+    popTasks(targetMinBytes: number): PopTaskResult;
+    /**
+     * Called when a task completes.
+     * Note: must be the same reference as returned from popTasks.
+     */
+    taskDone(task: Task): void;
+    /**
+     * Remove pending tasks with the given topic
+     */
+    remove(topic: string): void;
+    /**
+     * No work to be done, this PeerTasks object can be freed.
+     */
+    isIdle(): boolean;
+    /**
+     * Compare PeerTasks
+     */
+    static compare<Key>(a: [Key, PeerTasks], b: [Key, PeerTasks]): number;
+}
+export {};
+//# sourceMappingURL=req-queue.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.d.ts.map
new file mode 100644
index 0000000..de21f82
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"req-queue.d.ts","sourceRoot":"","sources":["../../../src/decision-engine/req-queue.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAA;AAClD,OAAO,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,MAAM,YAAY,CAAA;AAElD,MAAM,WAAW,aAAa;IAC5B,MAAM,CAAC,EAAE,MAAM,CAAA;IACf,KAAK,EAAE,IAAI,EAAE,CAAA;IACb,WAAW,EAAE,MAAM,CAAA;CACpB;AAED,MAAM,WAAW,WAAW;IAC1B,OAAO,EAAE,MAAM,CAAA;IACf,IAAI,EAAE,IAAI,CAAA;CACX;AAeD;;;;;;GAMG;AACH,qBAAa,YAAY;IACvB,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAY;IACjC,OAAO,EAAE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,CAAA;gBAE/B,UAAU,GAAE,UAA8B;IAKvD;;OAEG;IACH,SAAS,CAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI;IAW/C;;;;;;OAMG;IACH,QAAQ,CAAE,cAAc,EAAE,MAAM,GAAG,aAAa;IA4BhD,KAAK,IAAK,SAAS,GAAG,SAAS;IAc/B;;OAEG;IACH,MAAM,CAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,IAAI;IAK5C;;OAEG;IACH,SAAS,CAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI;CAgBhD;AAED;;GAEG;AACH,cAAM,SAAS;IACN,MAAM,EAAE,MAAM,CAAA;IACrB,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAY;IACxC,OAAO,CAAC,gBAAgB,CAAQ;IAChC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAc;IACvC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAW;gBAEtB,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU;IAQnD;;OAEG;IACH,SAAS,CAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI;IAM/B,SAAS,CAAE,IAAI,EAAE,IAAI,GAAG,IAAI;IA4B5B;;;OAGG;IACH,+BAA+B,CAAE,IAAI,EAAE,IAAI,GAAG,OAAO;IAgBrD;;OAEG;IACH,QAAQ,CAAE,cAAc,EAAE,MAAM,GAAG,aAAa;IAuBhD;;;OAGG;IACH,QAAQ,CAAE,IAAI,EAAE,IAAI,GAAG,IAAI;IAO3B;;OAEG;IACH,MAAM,CAAE,KAAK,EAAE,MAAM,GAAG,IAAI;IAI5B;;OAEG;IACH,MAAM,IAAK,OAAO;IAIlB;;OAEG;IACH,MAAM,CAAC,OAAO,CAAE,GAAG,EAAG,CAAC,EAAE,CAAC,GAAG,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,MAAM;CAkBxE"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.js b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.js
new file mode 100644
index 0000000..3c17f94
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.js
@@ -0,0 +1,283 @@
+import { SortedMap } from '../utils/sorted-map.js';
+/**
+ * The task merger that is used by default.
+ * Assumes that new tasks do not add any information over existing tasks,
+ * and doesn't try to merge.
+ */
+const DefaultTaskMerger = {
+    hasNewInfo() {
+        return false;
+    },
+    merge() { }
+};
+/**
+ * Queue of requests to be processed by the engine.
+ * The requests from each peer are added to the peer's queue, sorted by
+ * priority.
+ * Tasks are popped in priority order from the best peer - see popTasks()
+ * for more details.
+ */
+export class RequestQueue {
+    constructor(taskMerger = DefaultTaskMerger) {
+        this._taskMerger = taskMerger;
+        this._byPeer = new SortedMap([], PeerTasks.compare);
+    }
+    /**
+     * Push tasks onto the queue for the given peer
+     */
+    pushTasks(peerId, tasks) {
+        let peerTasks = this._byPeer.get(peerId.toString());
+        if (peerTasks == null) {
+            peerTasks = new PeerTasks(peerId, this._taskMerger);
+        }
+        peerTasks.pushTasks(tasks);
+        this._byPeer.set(peerId.toString(), peerTasks);
+    }
+    /**
+     * Choose the peer with the least active work (or if all have the same active
+     * work, the most pending tasks) and pop off the highest priority tasks until
+     * the total size is at least targetMinBytes.
+     * This puts the popped tasks into the "active" state, meaning they are
+     * actively being processed (and cannot be modified).
+     */
+    popTasks(targetMinBytes) {
+        // Get the queue of tasks for the best peer and pop off tasks up to
+        // targetMinBytes
+        const peerTasks = this._head();
+        if (peerTasks === undefined) {
+            return { tasks: [], pendingSize: 0 };
+        }
+        const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes);
+        if (tasks.length === 0) {
+            return { tasks, pendingSize };
+        }
+        const peerId = peerTasks.peerId;
+        if (peerTasks.isIdle()) {
+            // If there are no more tasks for the peer, free up its memory
+            this._byPeer.delete(peerId.toString());
+        }
+        else {
+            // If there are still tasks remaining, update the sort order of peerTasks
+            // (because it depends on the number of pending tasks)
+            this._byPeer.update(0);
+        }
+        return {
+            peerId, tasks, pendingSize
+        };
+    }
+    _head() {
+        // Shortcut
+        if (this._byPeer.size === 0) {
+            return undefined;
+        }
+        // eslint-disable-next-line no-unreachable-loop
+        for (const [, v] of this._byPeer) {
+            return v;
+        }
+        return undefined;
+    }
+    /**
+     * Remove the task with the given topic for the given peer.
+     */
+    remove(topic, peerId) {
+        const peerTasks = this._byPeer.get(peerId.toString());
+        peerTasks?.remove(topic);
+    }
+    /**
+     * Called when the tasks for the given peer complete.
+     */
+    tasksDone(peerId, tasks) {
+        const peerTasks = this._byPeer.get(peerId.toString());
+        if (peerTasks == null) {
+            return;
+        }
+        const i = this._byPeer.indexOf(peerId.toString());
+        for (const task of tasks) {
+            peerTasks.taskDone(task);
+        }
+        // Marking the tasks as done takes them out of the "active" state, and the
+        // sort order depends on the size of the active tasks, so we need to update
+        // the order.
+        this._byPeer.update(i);
+    }
+}
+/**
+ * Queue of tasks for a particular peer, sorted by priority.
+ */
+class PeerTasks {
+    constructor(peerId, taskMerger) {
+        this.peerId = peerId;
+        this._taskMerger = taskMerger;
+        this._activeTotalSize = 0;
+        this._pending = new PendingTasks();
+        this._active = new Set();
+    }
+    /**
+     * Push tasks onto the queue
+     */
+    pushTasks(tasks) {
+        for (const t of tasks) {
+            this._pushTask(t);
+        }
+    }
+    _pushTask(task) {
+        // If the new task doesn't add any more information over what we
+        // already have in the active queue, then we can skip the new task
+        if (!this._taskHasMoreInfoThanActiveTasks(task)) {
+            return;
+        }
+        // If there is already a non-active (pending) task with this topic
+        const existingTask = this._pending.get(task.topic);
+        if (existingTask != null) {
+            // If the new task has a higher priority than the old task,
+            if (task.priority > existingTask.priority) {
+                // Update the priority and the task's position in the queue
+                this._pending.updatePriority(task.topic, task.priority);
+            }
+            // Merge the information from the new task into the existing task
+            this._taskMerger.merge(task, existingTask);
+            // A task with the topic exists, so we don't need to add
+            // the new task to the queue
+            return;
+        }
+        // Push the new task onto the queue
+        this._pending.add(task);
+    }
+    /**
+     * Indicates whether the new task adds any more information over tasks that are
+     * already in the active task queue
+     */
+    _taskHasMoreInfoThanActiveTasks(task) {
+        const tasksWithTopic = [];
+        for (const activeTask of this._active) {
+            if (activeTask.topic === task.topic) {
+                tasksWithTopic.push(activeTask);
+            }
+        }
+        // No tasks with that topic, so the new task adds information
+        if (tasksWithTopic.length === 0) {
+            return true;
+        }
+        return this._taskMerger.hasNewInfo(task, tasksWithTopic);
+    }
+    /**
+     * Pop tasks off the queue such that the total size is at least targetMinBytes
+     */
+    popTasks(targetMinBytes) {
+        let size = 0;
+        const tasks = [];
+        // Keep popping tasks until we get up to targetMinBytes (or one item over
+        // targetMinBytes)
+        const pendingTasks = this._pending.tasks();
+        for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {
+            const task = pendingTasks[i];
+            tasks.push(task);
+            size += task.size;
+            // Move tasks from pending to active
+            this._pending.delete(task.topic);
+            this._activeTotalSize += task.size;
+            this._active.add(task);
+        }
+        return {
+            tasks, pendingSize: this._pending.totalSize
+        };
+    }
+    /**
+     * Called when a task completes.
+     * Note: must be the same reference as returned from popTasks.
+     */
+    taskDone(task) {
+        if (this._active.has(task)) {
+            this._activeTotalSize -= task.size;
+            this._active.delete(task);
+        }
+    }
+    /**
+     * Remove pending tasks with the given topic
+     */
+    remove(topic) {
+        this._pending.delete(topic);
+    }
+    /**
+     * No work to be done, this PeerTasks object can be freed.
+     */
+    isIdle() {
+        return this._pending.length === 0 && this._active.size === 0;
+    }
+    /**
+     * Compare PeerTasks
+     */
+    static compare(a, b) {
+        // Move peers with no pending tasks to the back of the queue
+        if (a[1]._pending.length === 0) {
+            return 1;
+        }
+        if (b[1]._pending.length === 0) {
+            return -1;
+        }
+        // If the amount of active work is the same
+        if (a[1]._activeTotalSize === b[1]._activeTotalSize) {
+            // Choose the peer with the most pending work
+            return b[1]._pending.length - a[1]._pending.length;
+        }
+        // Choose the peer with the least amount of active work ("keep peers busy")
+        return a[1]._activeTotalSize - b[1]._activeTotalSize;
+    }
+}
+/**
+ * Queue of pending tasks for a particular peer, sorted by priority.
+ */
+class PendingTasks {
+    constructor() {
+        this._tasks = new SortedMap([], this._compare);
+    }
+    get length() {
+        return this._tasks.size;
+    }
+    /**
+     * Sum of the size of all pending tasks
+     **/
+    get totalSize() {
+        return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0);
+    }
+    get(topic) {
+        return this._tasks?.get(topic)?.task;
+    }
+    add(task) {
+        this._tasks.set(task.topic, {
+            created: Date.now(),
+            task
+        });
+    }
+    delete(topic) {
+        this._tasks.delete(topic);
+    }
+    // All pending tasks, in priority order
+    tasks() {
+        return [...this._tasks.values()].map(i => i.task);
+    }
+    /**
+     * Update the priority of the task with the given topic, and update the order
+     **/
+    updatePriority(topic, priority) {
+        const obj = this._tasks.get(topic);
+        if (obj == null) {
+            return;
+        }
+        const i = this._tasks.indexOf(topic);
+        obj.task.priority = priority;
+        this._tasks.update(i);
+    }
+    /**
+     * Sort by priority desc then FIFO
+     */
+    _compare(a, b) {
+        if (a[1].task.priority === b[1].task.priority) {
+            // FIFO
+            return a[1].created - b[1].created;
+        }
+        // Priority high -> low
+        return b[1].task.priority - a[1].task.priority;
+    }
+}
+//# sourceMappingURL=req-queue.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.js.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.js.map
new file mode 100644
index 0000000..8901abf
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/req-queue.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"req-queue.js","sourceRoot":"","sources":["../../../src/decision-engine/req-queue.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.d.ts
new file mode 100644
index 0000000..ccf3d34
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.d.ts
@@ -0,0 +1,18 @@
+import type { Task } from './index.js';
+export declare const DefaultTaskMerger: {
+    /**
+     * Indicates whether the given task has newer information than the active
+     * tasks with the same topic.
+     *
+     * @param {Task} task
+     * @param {Task[]} tasksWithTopic
+     * @returns {boolean}
+     */
+    hasNewInfo(task: Task, tasksWithTopic: Task[]): boolean;
+    /**
+     * Merge the information from the given task into the existing task (with the
+     * same topic)
+     */
+    merge(newTask: Task, existingTask: Task): void;
+};
+//# sourceMappingURL=task-merger.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.d.ts.map
new file mode 100644
index 0000000..918ccaf
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"task-merger.d.ts","sourceRoot":"","sources":["../../../src/decision-engine/task-merger.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,IAAI,EAAE,MAAM,YAAY,CAAA;AAEtC,eAAO,MAAM,iBAAiB;IAC5B;;;;;;;OAOG;qBACe,IAAI,kBAAkB,IAAI,EAAE,GAAG,OAAO;IA6BxD;;;OAGG;mBACa,IAAI,gBAAgB,IAAI;CA+CzC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.js b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.js
new file mode 100644
index 0000000..4602624
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.js
@@ -0,0 +1,83 @@
+export const DefaultTaskMerger = {
+    /**
+     * Indicates whether the given task has newer information than the active
+     * tasks with the same topic.
+     *
+     * @param {Task} task
+     * @param {Task[]} tasksWithTopic
+     * @returns {boolean}
+     */
+    hasNewInfo(task, tasksWithTopic) {
+        let haveBlock = false;
+        let isWantBlock = false;
+        for (const existing of tasksWithTopic) {
+            if (existing.data.haveBlock) {
+                haveBlock = true;
+            }
+            if (existing.data.isWantBlock) {
+                isWantBlock = true;
+            }
+        }
+        // If there is no active want-block and the new task is a want-block,
+        // the new task is better
+        if (!isWantBlock && task.data.isWantBlock) {
+            return true;
+        }
+        // If we didn't have the block, and the new task indicates that we now
+        // do have the block, then we must also have size information for the
+        // block, so the new task has new information.
+        if (!haveBlock && task.data.haveBlock) {
+            return true;
+        }
+        return false;
+    },
+    /**
+     * Merge the information from the given task into the existing task (with the
+     * same topic)
+     */
+    merge(newTask, existingTask) {
+        // The merge function ignores the topic and priority as these don't change.
+        //
+        // We may receive new information about a want before the want has been
+        // popped from the queue in the following scenarios:
+        //
+        // - Replace want type:
+        //   1. Client sends want-have CID1
+        //   2. Client sends want-block CID1
+        //   In this case we should replace want-have with want-block, including
+        //   updating the task size to be the block size.
+        //
+        // - Replace DONT_HAVE with want:
+        //   1. Client sends want-have CID1 or want-block CID1
+        //   2. Local node doesn't have block for CID1
+        //   3. Local node receives block for CID1 from peer
+        //   In this case we should replace DONT_HAVE with the want, including
+        //   updating the task size and block size.
+        const taskData = newTask.data;
+        const existingData = existingTask.data;
+        // If we didn't have block size information (because we didn't have the
+        // block) and we receive the block from a peer, update the task with the
+        // new block size
+        if (!existingData.haveBlock && taskData.haveBlock) {
+            existingData.haveBlock = taskData.haveBlock;
+            existingData.blockSize = taskData.blockSize;
+        }
+        // If replacing a want-have with a want-block
+        if (!existingData.isWantBlock && taskData.isWantBlock) {
+            // Change the type from want-have to want-block
+            existingData.isWantBlock = true;
+            // If the want-have was a DONT_HAVE, or the want-block has a size
+            if (!existingData.haveBlock || taskData.haveBlock) {
+                // Update the entry size
+                existingData.haveBlock = taskData.haveBlock;
+                existingTask.size = newTask.size;
+            }
+        }
+        // If the task is a want-block, make sure the entry size is equal
+        // to the block size (because we will send the whole block)
+        if (existingData.isWantBlock && existingData.haveBlock) {
+            existingTask.size = existingData.blockSize;
+        }
+    }
+};
+//# sourceMappingURL=task-merger.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.js.map b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.js.map
new file mode 100644
index 0000000..b19a938
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/decision-engine/task-merger.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"task-merger.js","sourceRoot":"","sources":["../../../src/decision-engine/task-merger.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,iBAAiB,GAAG;IAC/B;;;;;;;OAOG;IACH,UAAU,CAAE,IAAU,EAAE,cAAsB;QAC5C,IAAI,SAAS,GAAG,KAAK,CAAA;QACrB,IAAI,WAAW,GAAG,KAAK,CAAA;QACvB,KAAK,MAAM,QAAQ,IAAI,cAAc,EAAE;YACrC,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE;gBAC3B,SAAS,GAAG,IAAI,CAAA;aACjB;YAED,IAAI,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE;gBAC7B,WAAW,GAAG,IAAI,CAAA;aACnB;SACF;QAED,qEAAqE;QACrE,yBAAyB;QACzB,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;YACzC,OAAO,IAAI,CAAA;SACZ;QAED,sEAAsE;QACtE,qEAAqE;QACrE,8CAA8C;QAC9C,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACrC,OAAO,IAAI,CAAA;SACZ;QAED,OAAO,KAAK,CAAA;IACd,CAAC;IAED;;;OAGG;IACH,KAAK,CAAE,OAAa,EAAE,YAAkB;QACtC,2EAA2E;QAC3E,EAAE;QACF,uEAAuE;QACvE,oDAAoD;QACpD,EAAE;QACF,uBAAuB;QACvB,mCAAmC;QACnC,oCAAoC;QACpC,wEAAwE;QACxE,iDAAiD;QACjD,EAAE;QACF,iCAAiC;QACjC,sDAAsD;QACtD,8CAA8C;QAC9C,oDAAoD;QACpD,sEAAsE;QACtE,2CAA2C;QAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAA;QAC7B,MAAM,YAAY,GAAG,YAAY,CAAC,IAAI,CAAA;QAEtC,uEAAuE;QACvE,wEAAwE;QACxE,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,SAAS,IAAI,QAAQ,CAAC,SAAS,EAAE;YACjD,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAA;YAC3C,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAA;SAC5C;QAED,6CAA6C;QAC7C,IAAI,CAAC,YAAY,CAAC,WAAW,IAAI,QAAQ,CAAC,WAAW,EAAE;YACrD,+CAA+C;YAC/C,YAAY,CAAC,WAAW,GAAG,IAAI,CAAA;YAC/B,iEAAiE;YACjE,IAAI,CAAC,YAAY,CAAC,SAAS,IAAI,QAAQ,CAAC,SAAS,EAAE;gBACjD,wBAAwB;gBACxB,YAAY,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAA;gBAC3C,YAAY,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;aACjC;SACF;QAED,iEAAiE;QACjE,2DAA2D;QAC3D,IAAI,YAAY,CAAC,WAAW,IAAI,YAAY,CAAC,SAAS,EAAE;YACtD,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,SAAS,CAAA;SAC3C;IACH,CAAC;CACF,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.d.ts
new file mode 100644
index 0000000..da3af29
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.d.ts
@@ -0,0 +1,51 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { AbortOptions } from '@libp2p/interfaces';
+import type { CID, Version } from 'multiformats';
+import type { ProgressOptions } from 'progress-events';
+import type { Bitswap, WantListEntry, BitswapWantBlockProgressEvents, Ledger, Stats, BitswapOptions } from './index.js';
+import type { Blockstore } from 'interface-blockstore';
+import type { BitswapNetworkNotifyProgressEvents } from './network.js';
+import type { Libp2p } from 'libp2p';
+interface WithTimestamp<T> {
+    val: T;
+    timestamp: number;
+}
+export interface HttpBitswapOptions {
+    httpOverLibp2pPeersLimit?: number;
+    bootstrapHttpOnlyPeers?: string[];
+    bitswapOptions?: BitswapOptions;
+}
+export declare const defaultOptions: {
+    httpOverLibp2pPeersLimit: number;
+    bootstrapHttpOnlyPeers: never[];
+    bitswapOptions: {};
+};
+export declare class HttpBitswap implements Bitswap {
+    private readonly libp2p;
+    private readonly innerBitswap;
+    private readonly blockstore;
+    stats: Stats;
+    peers: PeerId[];
+    httpOverLibp2pPeersLimit: number;
+    httpOverLibp2pPeers: Array<WithTimestamp<PeerId>>;
+    httpOnlyPeers: string[];
+    constructor(libp2p: Libp2p, innerBitswap: Bitswap, blockstore: Blockstore, options?: HttpBitswapOptions);
+    newHttpOnlyPeer(url: string): void;
+    private newHttpOverLibp2pPeer;
+    wantlistForPeer(peerId: PeerId): Map<string, WantListEntry>;
+    ledgerForPeer(peerId: PeerId): Ledger | undefined;
+    unwant(cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void;
+    cancelWants(cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void;
+    getWantlist(): IterableIterator<[string, WantListEntry]>;
+    notify(cid: CID<unknown, number, number, Version>, block: Uint8Array, options?: ProgressOptions<BitswapNetworkNotifyProgressEvents>): void;
+    want(cid: CID<unknown, number, number, Version>, options?: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents>): Promise<Uint8Array>;
+    isStarted(): boolean;
+    beforeStart?(): void | Promise<void>;
+    start(): void | Promise<void>;
+    afterStart?(): void | Promise<void>;
+    beforeStop?(): void | Promise<void>;
+    stop(): void | Promise<void>;
+    afterStop?(): void | Promise<void>;
+}
+export {};
+//# sourceMappingURL=http-bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.d.ts.map
new file mode 100644
index 0000000..87783c7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"http-bitswap.d.ts","sourceRoot":"","sources":["../../src/http-bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.js b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.js
new file mode 100644
index 0000000..4bf69cb
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.js
@@ -0,0 +1,162 @@
+import { fetchViaDuplex } from '@marcopolo_/libp2p-fetch';
+// TODO: this should be a different protocol id
+const IPFS_GATEWAY_PROTOCOL = '/libp2p-http';
+export const defaultOptions = {
+    httpOverLibp2pPeersLimit: 5,
+    bootstrapHttpOnlyPeers: [],
+    bitswapOptions: {}
+};
+export class HttpBitswap {
+    constructor(libp2p, innerBitswap, blockstore, options = defaultOptions) {
+        this.libp2p = libp2p;
+        this.innerBitswap = innerBitswap;
+        this.blockstore = blockstore;
+        this.stats = this.innerBitswap.stats;
+        this.peers = this.innerBitswap.peers;
+        this.httpOverLibp2pPeers = [];
+        this.httpOnlyPeers = [];
+        this.httpOverLibp2pPeersLimit = options.httpOverLibp2pPeersLimit ?? defaultOptions.httpOverLibp2pPeersLimit;
+        const bootstrapHttpOnlyPeers = options.bootstrapHttpOnlyPeers ?? defaultOptions.bootstrapHttpOnlyPeers;
+        libp2p.peerStore.addEventListener('change:protocols', (event) => {
+            const { peerId, protocols } = event.detail;
+            if (protocols.includes(IPFS_GATEWAY_PROTOCOL)) {
+                this.newHttpOverLibp2pPeer(peerId);
+            }
+        });
+        this.httpOnlyPeers = [...bootstrapHttpOnlyPeers];
+    }
+    newHttpOnlyPeer(url) {
+        this.httpOnlyPeers.push(url);
+    }
+    newHttpOverLibp2pPeer(peerId) {
+        if (this.httpOverLibp2pPeers.length < this.httpOverLibp2pPeersLimit) {
+            this.httpOverLibp2pPeers.push({ val: peerId, timestamp: Date.now() });
+            return;
+        }
+        let i = 0;
+        let minTimestamp = this.httpOverLibp2pPeers[0].timestamp;
+        let minIndex = 0;
+        for (const { timestamp, val } of this.httpOverLibp2pPeers) {
+            if (val === peerId) {
+                return; // Already have this peer
+            }
+            if (timestamp < minTimestamp) {
+                minTimestamp = timestamp;
+                minIndex = i;
+            }
+            i++;
+        }
+        this.httpOverLibp2pPeers[minIndex] = { val: peerId, timestamp: Date.now() };
+    }
+    wantlistForPeer(peerId) {
+        return this.innerBitswap.wantlistForPeer(peerId);
+    }
+    ledgerForPeer(peerId) {
+        return this.innerBitswap.ledgerForPeer(peerId);
+    }
+    unwant(cids) {
+        this.innerBitswap.unwant(cids);
+    }
+    cancelWants(cids) {
+        this.innerBitswap.cancelWants(cids);
+    }
+    getWantlist() {
+        return this.innerBitswap.getWantlist();
+    }
+    notify(cid, block, options) {
+        this.innerBitswap.notify(cid, block, options);
+    }
+    async want(cid, options) {
+        // Start a bitswap req
+        const abortController = new AbortController();
+        if ((options?.signal) != null) {
+            options.signal.addEventListener('abort', () => { abortController.abort(); });
+        }
+        const bitswapWantPromise = this.innerBitswap.want(cid, { ...options, signal: abortController.signal });
+        // Start a http req over libp2p
+        const httpOverLibp2pReqs = this.httpOverLibp2pPeers.map(async ({ val: peerId }) => {
+            try {
+                const conn = await this.libp2p.dial(peerId, { signal: options?.signal });
+                {
+                    const s = await conn.newStream('/libp2p-http', { signal: options?.signal });
+                    const fetch = fetchViaDuplex(s);
+                    const resp = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }));
+                    if (!resp.ok) {
+                        // We don't have the block here, block on the abort signal
+                        throw new Error('Not found');
+                    }
+                }
+                const s = await conn.newStream('/libp2p-http', { signal: options?.signal });
+                const fetch = fetchViaDuplex(s);
+                const resp = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/?format=raw`));
+                if (resp.ok) {
+                    const block = new Uint8Array(await resp.arrayBuffer());
+                    await this.blockstore.put(cid, block);
+                    return block;
+                }
+                // Otherwise, do nothing and block on the abort signal
+                throw new Error('Not found');
+            }
+            catch (err) {
+                // Wait for the abort so others can provide
+                await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve); });
+                throw err;
+            }
+        });
+        const httpOnlyReqs = this.httpOnlyPeers.map(async (url) => {
+            try {
+                {
+                    // We should be using the Cache-Control header, but this is not a CORS allowed header on some gateways
+                    // const resp: Response = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }), { signal: options?.signal })
+                    const resp = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD' }), { signal: options?.signal });
+                    if (!resp.ok) {
+                        throw new Error('Not found');
+                    }
+                }
+                const resp = await fetch(new Request(`${url}/ipfs/${cid.toString()}/?format=raw`), { signal: options?.signal });
+                if (resp.ok) {
+                    const block = new Uint8Array(await resp.arrayBuffer());
+                    await this.blockstore.put(cid, block);
+                    return block;
+                }
+                throw new Error('Not found');
+            }
+            catch (err) {
+                // Wait for the abort so others can provide the block
+                await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve); });
+                throw err;
+            }
+        });
+        // Wait for the first to finish
+        const block = await Promise.race([
+            bitswapWantPromise,
+            ...httpOverLibp2pReqs,
+            ...httpOnlyReqs
+        ]);
+        this.innerBitswap.notify(cid, block);
+        abortController.abort();
+        return block;
+    }
+    isStarted() {
+        return this.innerBitswap.isStarted();
+    }
+    beforeStart() {
+        return this.innerBitswap.beforeStart?.();
+    }
+    start() {
+        return this.innerBitswap.start();
+    }
+    afterStart() {
+        return this.innerBitswap.afterStart?.();
+    }
+    beforeStop() {
+        return this.innerBitswap.beforeStop?.();
+    }
+    stop() {
+        return this.innerBitswap.stop();
+    }
+    afterStop() {
+        return this.innerBitswap.afterStop?.();
+    }
+}
+//# sourceMappingURL=http-bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.js.map b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.js.map
new file mode 100644
index 0000000..9c3e6b4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/http-bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"http-bitswap.js","sourceRoot":"","sources":["../../src/http-bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/index.d.ts
new file mode 100644
index 0000000..80a7e3b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/index.d.ts
@@ -0,0 +1,116 @@
+import type { Blockstore } from 'interface-blockstore';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { CID } from 'multiformats/cid';
+import type { Message } from './message/message';
+import type { IMovingAverage } from '@vascosantos/moving-average';
+import type { MultihashHasher } from 'multiformats/hashes/interface';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { AbortOptions } from '@libp2p/interfaces';
+import type { Startable } from '@libp2p/interfaces/startable';
+import type { ProgressEvent, ProgressOptions } from 'progress-events';
+import type { BitswapNetworkNotifyProgressEvents, BitswapNetworkWantProgressEvents } from './network.js';
+import { HttpBitswapOptions } from './http-bitswap.js';
+export interface WantListEntry {
+    cid: CID;
+    priority: number;
+    wantType: Message.Wantlist.WantType;
+    inc: () => void;
+    dec: () => void;
+    hasRefs: () => boolean;
+}
+export interface Wantlist {
+    length: number;
+    add: (cid: CID, priority: number, wantType: Message.Wantlist.WantType) => void;
+    remove: (cid: CID) => void;
+    removeForce: (cid: string) => void;
+    forEach: (fn: (entry: WantListEntry, key: string) => void) => void;
+    sortedEntries: () => Map<string, WantListEntry>;
+    contains: (cid: CID) => boolean;
+    get: (cid: CID) => WantListEntry;
+}
+export interface Ledger {
+    peer: PeerId;
+    value: number;
+    sent: number;
+    recv: number;
+    exchanged: number;
+}
+export interface Stat {
+    enable: () => void;
+    disable: () => void;
+    stop: () => void;
+    snapshot: Record<string, bigint>;
+    movingAverages: Record<string, Record<number, IMovingAverage>>;
+    push: (counter: string, inc: number) => void;
+}
+export interface Stats {
+    snapshot: Record<string, bigint>;
+    movingAverages: Record<string, Record<number, IMovingAverage>>;
+    enable: () => void;
+    disable: () => void;
+    stop: () => void;
+    forPeer: (peerId: PeerId | string) => Stat | undefined;
+    push: (peer: string, counter: string, inc: number) => void;
+}
+export type BitswapWantProgressEvents = BitswapWantBlockProgressEvents;
+export type BitswapNotifyProgressEvents = BitswapNetworkNotifyProgressEvents;
+export type BitswapWantBlockProgressEvents = ProgressEvent<'bitswap:want-block:unwant', CID> | ProgressEvent<'bitswap:want-block:block', CID> | BitswapNetworkWantProgressEvents;
+export interface Bitswap extends Startable {
+    /**
+     * Bitswap statistics
+     */
+    stats: Stats;
+    /**
+     * The peers that we are tracking a ledger for
+     */
+    peers: PeerId[];
+    wantlistForPeer: (peerId: PeerId) => Map<string, WantListEntry>;
+    ledgerForPeer: (peerId: PeerId) => Ledger | undefined;
+    unwant: (cids: CID | CID[]) => void;
+    cancelWants: (cids: CID | CID[]) => void;
+    getWantlist: () => IterableIterator<[string, WantListEntry]>;
+    /**
+     * Notify bitswap that a new block is available
+     */
+    notify: (cid: CID, block: Uint8Array, options?: ProgressOptions<BitswapNotifyProgressEvents>) => void;
+    /**
+     * Retrieve a block from the network
+     */
+    want: (cid: CID, options?: AbortOptions & ProgressOptions<BitswapWantProgressEvents>) => Promise<Uint8Array>;
+}
+export interface MultihashHasherLoader {
+    getHasher: (codeOrName: number | string) => Promise<MultihashHasher>;
+}
+export interface BitswapOptions {
+    /**
+     * Whether stats are enabled. Default: false
+     */
+    statsEnabled?: boolean;
+    /**
+     * Default: 1000
+     */
+    statsComputeThrottleTimeout?: number;
+    /**
+     * Default: 1000
+     */
+    statsComputeThrottleMaxQueueSize?: number;
+    /**
+     * Default: 32
+     */
+    maxInboundStreams?: number;
+    /**
+     * Default: 128
+     */
+    maxOutboundStreams?: number;
+    /**
+     * Default: 30000
+     */
+    incomingStreamTimeout?: number;
+    /**
+     * Enables loading esoteric hash functions
+     */
+    hashLoader?: MultihashHasherLoader;
+}
+export declare const createBitswap: (libp2p: Libp2p, blockstore: Blockstore, options?: BitswapOptions) => Bitswap;
+export declare const createBitswapWithHTTP: (libp2p: Libp2p, blockstore: Blockstore, options?: HttpBitswapOptions) => Bitswap;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/index.d.ts.map
new file mode 100644
index 0000000..9aecaa6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAA;AACtD,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAC3C,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAA;AAChD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAA;AACjE,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAA;AACpE,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AACtD,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAA;AACtD,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAA;AAC7D,OAAO,KAAK,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AACrE,OAAO,KAAK,EAAE,kCAAkC,EAAE,gCAAgC,EAAE,MAAM,cAAc,CAAA;AACxG,OAAO,EAAe,kBAAkB,EAAE,MAAM,mBAAmB,CAAA;AAEnE,MAAM,WAAW,aAAa;IAC5B,GAAG,EAAE,GAAG,CAAA;IACR,QAAQ,EAAE,MAAM,CAAA;IAChB,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAA;IACnC,GAAG,EAAE,MAAM,IAAI,CAAA;IACf,GAAG,EAAE,MAAM,IAAI,CAAA;IACf,OAAO,EAAE,MAAM,OAAO,CAAA;CACvB;AAED,MAAM,WAAW,QAAQ;IACvB,MAAM,EAAE,MAAM,CAAA;IACd,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,KAAK,IAAI,CAAA;IAC9E,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,IAAI,CAAA;IAC1B,WAAW,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK,IAAI,CAAA;IAClC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,aAAa,EAAE,GAAG,EAAE,MAAM,KAAK,IAAI,KAAK,IAAI,CAAA;IAClE,aAAa,EAAE,MAAM,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;IAC/C,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,OAAO,CAAA;IAC/B,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,aAAa,CAAA;CACjC;AAED,MAAM,WAAW,MAAM;IACrB,IAAI,EAAE,MAAM,CAAA;IACZ,KAAK,EAAE,MAAM,CAAA;IACb,IAAI,EAAE,MAAM,CAAA;IACZ,IAAI,EAAE,MAAM,CAAA;IACZ,SAAS,EAAE,MAAM,CAAA;CAClB;AAED,MAAM,WAAW,IAAI;IACnB,MAAM,EAAE,MAAM,IAAI,CAAA;IAClB,OAAO,EAAE,MAAM,IAAI,CAAA;IACnB,IAAI,EAAE,MAAM,IAAI,CAAA;IAChB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;IAChC,cAAc,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAA;IAC9D,IAAI,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,KAAK,IAAI,CAAA;CAC7C;AAED,MAAM,WAAW,KAAK;IACpB,QAAQ,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;IAChC,cAAc,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAA;IAC9D,MAAM,EAAE,MAAM,IAAI,CAAA;IAClB,OAAO,EAAE,MAAM,IAAI,CAAA;IACnB,IAAI,EAAE,MAAM,IAAI,CAAA;IAChB,OAAO,EAAE,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,KAAK,IAAI,GAAG,SAAS,CAAA;IACtD,IAAI,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,KAAK,IAAI,CAAA;CAC3D;AAED,MAAM,MAAM,yBAAyB,GACnC,8BAA8B,CAAA;AAEhC,MAAM,MAAM,2BAA2B,GACrC,kCAAkC,CAAA;AAEpC,MAAM,MAAM,8BAA8B,GACxC,aAAa,CAAC,2BAA2B,EAAE,GAAG,CAAC,GAC/C,aAAa,CAAC,0BAA0B,EAAE,GAAG,CAAC,GAC9C,gCAAgC,CAAA;AAElC,MAAM,WAAW,OAAQ,SAAQ,SAAS;IACxC;;OAEG;IACH,KAAK,EAAE,KAAK,CAAA;IAEZ;;OAEG;IACH,KAAK,EAAE,MAAM,EAAE,CAAA;IAEf,eAAe,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;IAC/D,aAAa,EAAE,CAAC,MAAM,EAAE,MAAM,KAAK,MAAM,GAAG,SAAS,CAAA;IACrD,MAAM,EAAE,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,KAAK,IAAI,CAAA;IACnC,WAAW,EAAE,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,KAAK,IAAI,CAAA;IACxC,WAAW,EAAE,MAAM,gBAAgB,CAAC,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC,CAAA;IAE5D;;OAEG;IACH,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,EAAE,eAAe,CAAC,2BAA2B,CAAC,KAAK,IAAI,CAAA;IAErG;;OAEG;IACH,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,CAAC,EAAE,YAAY,GAAG,eAAe,CAAC,yBAAyB,CAAC,KAAK,OAAO,CAAC,UAAU,CAAC,CAAA;CAC7G;AAED,MAAM,WAAW,qBAAqB;IACpC,SAAS,EAAE,CAAC,UAAU,EAAE,MAAM,GAAG,MAAM,KAAK,OAAO,CAAC,eAAe,CAAC,CAAA;CACrE;AAED,MAAM,WAAW,cAAc;IAC7B;;OAEG;IACH,YAAY,CAAC,EAAE,OAAO,CAAA;IAEtB;;OAEG;IACH,2BAA2B,CAAC,EAAE,MAAM,CAAA;IAEpC;;OAEG;IACH,gCAAgC,CAAC,EAAE,MAAM,CAAA;IAEzC;;OAEG;IACH,iBAAiB,CAAC,EAAE,MAAM,CAAA;IAE1B;;OAEG;IACH,kBAAkB,CAAC,EAAE,MAAM,CAAA;IAE3B;;OAEG;IACH,qBAAqB,CAAC,EAAE,MAAM,CAAA;IAE9B;;OAEG;IACH,UAAU,CAAC,EAAE,qBAAqB,CAAA;CACnC;AAED,eAAO,MAAM,aAAa,WAAY,MAAM,cAAc,UAAU,YAAW,cAAc,KAAQ,OAEpG,CAAA;AAED,eAAO,MAAM,qBAAqB,WAAY,MAAM,cAAc,UAAU,YAAW,kBAAkB,KAAQ,OAGhH,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/index.js b/node_modules/ipfs-bitswap/dist/dist/src/index.js
new file mode 100644
index 0000000..80679c7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/index.js
@@ -0,0 +1,10 @@
+import { DefaultBitswap } from './bitswap.js';
+import { HttpBitswap } from './http-bitswap.js';
+export const createBitswap = (libp2p, blockstore, options = {}) => {
+    return new DefaultBitswap(libp2p, blockstore, options);
+};
+export const createBitswapWithHTTP = (libp2p, blockstore, options = {}) => {
+    const inner = new DefaultBitswap(libp2p, blockstore, options.bitswapOptions);
+    return new HttpBitswap(libp2p, inner, blockstore, options);
+};
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/index.js.map
new file mode 100644
index 0000000..c0e1dc9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAA;AAY7C,OAAO,EAAE,WAAW,EAAsB,MAAM,mBAAmB,CAAA;AAiInE,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,UAAsB,EAAE,UAA0B,EAAE,EAAW,EAAE;IAC7G,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,UAAsB,EAAE,UAA8B,EAAE,EAAW,EAAE;IACzH,MAAM,KAAK,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,cAAc,CAAC,CAAA;IAC5E,OAAO,IAAI,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;AAC5D,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/entry.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.d.ts
new file mode 100644
index 0000000..18ac3cc
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.d.ts
@@ -0,0 +1,18 @@
+import type { CID } from 'multiformats/cid';
+import type { Message } from './message.js';
+import { WantListEntry } from '../wantlist/entry.js';
+export declare class BitswapMessageEntry {
+    entry: WantListEntry;
+    cancel: boolean;
+    sendDontHave: boolean;
+    constructor(cid: CID, priority: number, wantType: Message.Wantlist.WantType, cancel?: boolean, sendDontHave?: boolean);
+    get cid(): CID;
+    set cid(cid: CID);
+    get priority(): number;
+    set priority(val: number);
+    get wantType(): Message.Wantlist.WantType;
+    set wantType(val: Message.Wantlist.WantType);
+    get [Symbol.toStringTag](): string;
+    equals(other: BitswapMessageEntry): boolean;
+}
+//# sourceMappingURL=entry.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/entry.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.d.ts.map
new file mode 100644
index 0000000..5ad155a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"entry.d.ts","sourceRoot":"","sources":["../../../src/message/entry.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAC3C,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,cAAc,CAAA;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAEpD,qBAAa,mBAAmB;IACvB,KAAK,EAAE,aAAa,CAAA;IACpB,MAAM,EAAE,OAAO,CAAA;IACf,YAAY,EAAE,OAAO,CAAA;gBAEf,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,YAAY,CAAC,EAAE,OAAO;IAMtH,IAAI,GAAG,IAAK,GAAG,CAEd;IAED,IAAI,GAAG,CAAE,GAAG,EAJA,GAIA,EAEX;IAED,IAAI,QAAQ,IAAK,MAAM,CAEtB;IAED,IAAI,QAAQ,CAAE,GAAG,EAJA,MAIA,EAEhB;IAED,IAAI,QAAQ,IAAK,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAEzC;IAED,IAAI,QAAQ,CAAE,GAAG,EAJA,OAAO,CAAC,QAAQ,CAAC,QAIjB,EAEhB;IAED,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAK,MAAM,CAGlC;IAED,MAAM,CAAE,KAAK,EAAE,mBAAmB,GAAG,OAAO;CAM7C"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/entry.js b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.js
new file mode 100644
index 0000000..637e1d2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.js
@@ -0,0 +1,38 @@
+import { base58btc } from 'multiformats/bases/base58';
+import { WantListEntry } from '../wantlist/entry.js';
+export class BitswapMessageEntry {
+    constructor(cid, priority, wantType, cancel, sendDontHave) {
+        this.entry = new WantListEntry(cid, priority, wantType);
+        this.cancel = Boolean(cancel);
+        this.sendDontHave = Boolean(sendDontHave);
+    }
+    get cid() {
+        return this.entry.cid;
+    }
+    set cid(cid) {
+        this.entry.cid = cid;
+    }
+    get priority() {
+        return this.entry.priority;
+    }
+    set priority(val) {
+        this.entry.priority = val;
+    }
+    get wantType() {
+        return this.entry.wantType;
+    }
+    set wantType(val) {
+        this.entry.wantType = val;
+    }
+    get [Symbol.toStringTag]() {
+        const cidStr = this.cid.toString(base58btc);
+        return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`;
+    }
+    equals(other) {
+        return (this.cancel === other.cancel) &&
+            (this.sendDontHave === other.sendDontHave) &&
+            (this.wantType === other.wantType) &&
+            this.entry.equals(other.entry);
+    }
+}
+//# sourceMappingURL=entry.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/entry.js.map b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.js.map
new file mode 100644
index 0000000..27ecd07
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/entry.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"entry.js","sourceRoot":"","sources":["../../../src/message/entry.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAA;AAGrD,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAA;AAEpD,MAAM,OAAO,mBAAmB;IAK9B,YAAa,GAAQ,EAAE,QAAgB,EAAE,QAAmC,EAAE,MAAgB,EAAE,YAAsB;QACpH,IAAI,CAAC,KAAK,GAAG,IAAI,aAAa,CAAC,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAA;QACvD,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;QAC7B,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,CAAA;IAC3C,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAA;IACvB,CAAC;IAED,IAAI,GAAG,CAAE,GAAG;QACV,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAA;IACtB,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA;IAC5B,CAAC;IAED,IAAI,QAAQ,CAAE,GAAG;QACf,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAA;IAC3B,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA;IAC5B,CAAC;IAED,IAAI,QAAQ,CAAE,GAAG;QACf,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,GAAG,CAAA;IAC3B,CAAC;IAED,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QACtB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;QAC3C,OAAO,uBAAuB,MAAM,aAAa,IAAI,CAAC,MAAM,eAAe,IAAI,CAAC,QAAQ,GAAG,CAAA;IAC7F,CAAC;IAED,MAAM,CAAE,KAA0B;QAChC,OAAO,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC;YAC9B,CAAC,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,CAAC;YAC1C,CAAC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;IACvC,CAAC;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/message/index.d.ts
new file mode 100644
index 0000000..8a56126
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/index.d.ts
@@ -0,0 +1,43 @@
+import { CID } from 'multiformats/cid';
+import { Message } from './message.js';
+import { BitswapMessageEntry as Entry } from './entry.js';
+import type { MultihashHasherLoader } from '../index.js';
+export declare class BitswapMessage {
+    static Entry: typeof Entry;
+    static WantType: {
+        Block: Message.Wantlist.WantType;
+        Have: Message.Wantlist.WantType;
+    };
+    static BlockPresenceType: {
+        Have: Message.BlockPresenceType;
+        DontHave: Message.BlockPresenceType;
+    };
+    static deserialize: (raw: Uint8Array, hashLoader?: MultihashHasherLoader) => Promise<BitswapMessage>;
+    static blockPresenceSize: (cid: CID) => number;
+    full: boolean;
+    wantlist: Map<string, Entry>;
+    blocks: Map<string, Uint8Array>;
+    blockPresences: Map<string, Message.BlockPresenceType>;
+    pendingBytes: number;
+    constructor(full: boolean);
+    get empty(): boolean;
+    addEntry(cid: CID, priority: number, wantType?: Message.Wantlist.WantType, cancel?: boolean, sendDontHave?: boolean): void;
+    addBlock(cid: CID, block: Uint8Array): void;
+    addHave(cid: CID): void;
+    addDontHave(cid: CID): void;
+    cancel(cid: CID): void;
+    setPendingBytes(size: number): void;
+    /**
+     * Serializes to Bitswap Message protobuf of
+     * version 1.0.0
+     */
+    serializeToBitswap100(): Uint8Array;
+    /**
+     * Serializes to Bitswap Message protobuf of
+     * version 1.1.0
+     */
+    serializeToBitswap110(): Uint8Array;
+    equals(other: BitswapMessage): boolean;
+    get [Symbol.toStringTag](): string;
+}
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/message/index.d.ts.map
new file mode 100644
index 0000000..bfdf317
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/message/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAOtC,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAA;AACtC,OAAO,EAAE,mBAAmB,IAAI,KAAK,EAAE,MAAM,YAAY,CAAA;AAEzD,OAAO,KAAK,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAA;AAExD,qBAAa,cAAc;IACzB,MAAM,CAAC,KAAK,eAAQ;IAEpB,MAAM,CAAC,QAAQ;;;MAGd;IAED,MAAM,CAAC,iBAAiB;;;MAGvB;IAED,MAAM,CAAC,WAAW,QAAe,UAAU,eAAe,qBAAqB,KAAG,QAAQ,cAAc,CAAC,CAkExG;IAED,MAAM,CAAC,iBAAiB,QAAS,GAAG,KAAG,MAAM,CAM5C;IAEM,IAAI,EAAE,OAAO,CAAA;IACb,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;IAC5B,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;IAC/B,cAAc,EAAE,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,iBAAiB,CAAC,CAAA;IACtD,YAAY,EAAE,MAAM,CAAA;gBAEd,IAAI,EAAE,OAAO;IAQ1B,IAAI,KAAK,IAAK,OAAO,CAIpB;IAED,QAAQ,CAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,YAAY,CAAC,EAAE,OAAO,GAAG,IAAI;IA6B3H,QAAQ,CAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,UAAU,GAAG,IAAI;IAK5C,OAAO,CAAE,GAAG,EAAE,GAAG,GAAG,IAAI;IAOxB,WAAW,CAAE,GAAG,EAAE,GAAG,GAAG,IAAI;IAO5B,MAAM,CAAE,GAAG,EAAE,GAAG,GAAG,IAAI;IAMvB,eAAe,CAAE,IAAI,EAAE,MAAM,GAAG,IAAI;IAIpC;;;OAGG;IACH,qBAAqB,IAAK,UAAU;IAkBpC;;;OAGG;IACH,qBAAqB,IAAK,UAAU;IAkDpC,MAAM,CAAE,KAAK,EAAE,cAAc,GAAG,OAAO;IAevC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAK,MAAM,CAIlC;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/index.js b/node_modules/ipfs-bitswap/dist/dist/src/message/index.js
new file mode 100644
index 0000000..241e6c7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/index.js
@@ -0,0 +1,239 @@
+var _a;
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { base58btc } from 'multiformats/bases/base58';
+// @ts-expect-error no types
+import vd from 'varint-decoder';
+import ve from '../utils/varint-encoder.js';
+import { isMapEqual } from '../utils/index.js';
+import { Message } from './message.js';
+import { BitswapMessageEntry as Entry } from './entry.js';
+import { CodeError } from '@libp2p/interfaces/errors';
+export class BitswapMessage {
+    constructor(full) {
+        this.full = full;
+        this.wantlist = new Map();
+        this.blocks = new Map();
+        this.blockPresences = new Map();
+        this.pendingBytes = 0;
+    }
+    get empty() {
+        return this.blocks.size === 0 &&
+            this.wantlist.size === 0 &&
+            this.blockPresences.size === 0;
+    }
+    addEntry(cid, priority, wantType, cancel, sendDontHave) {
+        if (wantType == null) {
+            wantType = BitswapMessage.WantType.Block;
+        }
+        const cidStr = cid.toString(base58btc);
+        const entry = this.wantlist.get(cidStr);
+        if (entry != null) {
+            // Only change priority if want is of the same type
+            if (entry.wantType === wantType) {
+                entry.priority = priority;
+            }
+            // Only change from "dont cancel" to "do cancel"
+            if (cancel === true) {
+                entry.cancel = Boolean(cancel);
+            }
+            // Only change from "dont send" to "do send" DONT_HAVE
+            if (sendDontHave === true) {
+                entry.sendDontHave = Boolean(sendDontHave);
+            }
+            // want-block overrides existing want-have
+            if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {
+                entry.wantType = wantType;
+            }
+        }
+        else {
+            this.wantlist.set(cidStr, new Entry(cid, priority, wantType, cancel, sendDontHave));
+        }
+    }
+    addBlock(cid, block) {
+        const cidStr = cid.toString(base58btc);
+        this.blocks.set(cidStr, block);
+    }
+    addHave(cid) {
+        const cidStr = cid.toString(base58btc);
+        if (!this.blockPresences.has(cidStr)) {
+            this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have);
+        }
+    }
+    addDontHave(cid) {
+        const cidStr = cid.toString(base58btc);
+        if (!this.blockPresences.has(cidStr)) {
+            this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave);
+        }
+    }
+    cancel(cid) {
+        const cidStr = cid.toString(base58btc);
+        this.wantlist.delete(cidStr);
+        this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false);
+    }
+    setPendingBytes(size) {
+        this.pendingBytes = size;
+    }
+    /**
+     * Serializes to Bitswap Message protobuf of
+     * version 1.0.0
+     */
+    serializeToBitswap100() {
+        return Message.encode({
+            wantlist: {
+                entries: Array.from(this.wantlist.values()).map((entry) => {
+                    return {
+                        block: entry.cid.bytes,
+                        priority: Number(entry.priority),
+                        cancel: Boolean(entry.cancel),
+                        wantType: Message.Wantlist.WantType.Block,
+                        sendDontHave: false
+                    };
+                }),
+                full: Boolean(this.full)
+            },
+            blocks: Array.from(this.blocks.values())
+        });
+    }
+    /**
+     * Serializes to Bitswap Message protobuf of
+     * version 1.1.0
+     */
+    serializeToBitswap110() {
+        const msg = {
+            wantlist: {
+                entries: Array.from(this.wantlist.values()).map((entry) => {
+                    return {
+                        block: entry.cid.bytes,
+                        priority: Number(entry.priority),
+                        wantType: entry.wantType,
+                        cancel: Boolean(entry.cancel),
+                        sendDontHave: Boolean(entry.sendDontHave)
+                    };
+                }),
+                full: Boolean(this.full)
+            },
+            blockPresences: [],
+            payload: [],
+            pendingBytes: this.pendingBytes,
+            blocks: []
+        };
+        for (const [cidStr, data] of this.blocks.entries()) {
+            const cid = CID.parse(cidStr);
+            const version = cid.version;
+            const codec = cid.code;
+            const multihash = cid.multihash.code;
+            const digestLength = cid.multihash.digest.length;
+            const prefix = ve([
+                version, codec, multihash, digestLength
+            ]);
+            msg.payload.push({
+                prefix,
+                data
+            });
+        }
+        for (const [cidStr, bpType] of this.blockPresences) {
+            msg.blockPresences.push({
+                cid: CID.parse(cidStr).bytes,
+                type: bpType
+            });
+        }
+        if (this.pendingBytes > 0) {
+            msg.pendingBytes = this.pendingBytes;
+        }
+        return Message.encode(msg);
+    }
+    equals(other) {
+        if (this.full !== other.full ||
+            this.pendingBytes !== other.pendingBytes ||
+            !isMapEqual(this.wantlist, other.wantlist) ||
+            !isMapEqual(this.blocks, other.blocks) ||
+            // @TODO - Is this a bug ?
+            // @ts-expect-error - isMap equals map values to be objects not numbers
+            !isMapEqual(this.blockPresences, other.blockPresences)) {
+            return false;
+        }
+        return true;
+    }
+    get [Symbol.toStringTag]() {
+        const list = Array.from(this.wantlist.keys());
+        const blocks = Array.from(this.blocks.keys());
+        return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`;
+    }
+}
+_a = BitswapMessage;
+BitswapMessage.Entry = Entry;
+BitswapMessage.WantType = {
+    Block: Message.Wantlist.WantType.Block,
+    Have: Message.Wantlist.WantType.Have
+};
+BitswapMessage.BlockPresenceType = {
+    Have: Message.BlockPresenceType.Have,
+    DontHave: Message.BlockPresenceType.DontHave
+};
+BitswapMessage.deserialize = async (raw, hashLoader) => {
+    const decoded = Message.decode(raw);
+    const isFull = decoded.wantlist?.full === true;
+    const msg = new BitswapMessage(isFull);
+    decoded.wantlist?.entries.forEach((entry) => {
+        if (entry.block == null) {
+            return;
+        }
+        // note: entry.block is the CID here
+        const cid = CID.decode(entry.block);
+        msg.addEntry(cid, entry.priority ?? 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave));
+    });
+    decoded.blockPresences.forEach((blockPresence) => {
+        if (blockPresence.cid == null) {
+            return;
+        }
+        const cid = CID.decode(blockPresence.cid);
+        if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {
+            msg.addHave(cid);
+        }
+        else {
+            msg.addDontHave(cid);
+        }
+    });
+    // Bitswap 1.0.0
+    // decoded.blocks are just the byte arrays
+    if (decoded.blocks.length > 0) {
+        await Promise.all(decoded.blocks.map(async (b) => {
+            const hash = await sha256.digest(b);
+            const cid = CID.createV0(hash);
+            msg.addBlock(cid, b);
+        }));
+        return msg;
+    }
+    // Bitswap 1.1.0
+    if (decoded.payload.length > 0) {
+        await Promise.all(decoded.payload.map(async (p) => {
+            if (p.prefix == null || p.data == null) {
+                return;
+            }
+            const values = vd(p.prefix);
+            const cidVersion = values[0];
+            const multicodec = values[1];
+            const hashAlg = values[2];
+            const hasher = hashAlg === sha256.code ? sha256 : await hashLoader?.getHasher(hashAlg);
+            if (hasher == null) {
+                throw new CodeError('Unknown hash algorithm', 'ERR_UNKNOWN_HASH_ALG');
+            }
+            // const hashLen = values[3] // We haven't need to use this so far
+            const hash = await hasher.digest(p.data);
+            const cid = CID.create(cidVersion, multicodec, hash);
+            msg.addBlock(cid, p.data);
+        }));
+        msg.setPendingBytes(decoded.pendingBytes);
+        return msg;
+    }
+    return msg;
+};
+BitswapMessage.blockPresenceSize = (cid) => {
+    // It's ok if this is not exactly right: it's used to estimate the size of
+    // the HAVE / DONT_HAVE on the wire, but when doing that calculation we leave
+    // plenty of padding under the maximum message size.
+    // (It's more important for this to be fast).
+    return cid.bytes.length + 1;
+};
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/message/index.js.map
new file mode 100644
index 0000000..a82bda9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/message/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/message.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/message/message.d.ts
new file mode 100644
index 0000000..3f76751
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/message.d.ts
@@ -0,0 +1,68 @@
+import type { Codec } from 'protons-runtime';
+import type { Uint8ArrayList } from 'uint8arraylist';
+export interface Message {
+    wantlist?: Message.Wantlist;
+    blocks: Uint8Array[];
+    payload: Message.Block[];
+    blockPresences: Message.BlockPresence[];
+    pendingBytes: number;
+}
+export declare namespace Message {
+    interface Wantlist {
+        entries: Message.Wantlist.Entry[];
+        full: boolean;
+    }
+    namespace Wantlist {
+        enum WantType {
+            Block = "Block",
+            Have = "Have"
+        }
+        namespace WantType {
+            const codec: () => Codec<WantType>;
+        }
+        interface Entry {
+            block: Uint8Array;
+            priority: number;
+            cancel: boolean;
+            wantType: Message.Wantlist.WantType;
+            sendDontHave: boolean;
+        }
+        namespace Entry {
+            const codec: () => Codec<Entry>;
+            const encode: (obj: Partial<Entry>) => Uint8Array;
+            const decode: (buf: Uint8Array | Uint8ArrayList) => Entry;
+        }
+        const codec: () => Codec<Wantlist>;
+        const encode: (obj: Partial<Wantlist>) => Uint8Array;
+        const decode: (buf: Uint8Array | Uint8ArrayList) => Wantlist;
+    }
+    interface Block {
+        prefix: Uint8Array;
+        data: Uint8Array;
+    }
+    namespace Block {
+        const codec: () => Codec<Block>;
+        const encode: (obj: Partial<Block>) => Uint8Array;
+        const decode: (buf: Uint8Array | Uint8ArrayList) => Block;
+    }
+    enum BlockPresenceType {
+        Have = "Have",
+        DontHave = "DontHave"
+    }
+    namespace BlockPresenceType {
+        const codec: () => Codec<BlockPresenceType>;
+    }
+    interface BlockPresence {
+        cid: Uint8Array;
+        type: Message.BlockPresenceType;
+    }
+    namespace BlockPresence {
+        const codec: () => Codec<BlockPresence>;
+        const encode: (obj: Partial<BlockPresence>) => Uint8Array;
+        const decode: (buf: Uint8Array | Uint8ArrayList) => BlockPresence;
+    }
+    const codec: () => Codec<Message>;
+    const encode: (obj: Partial<Message>) => Uint8Array;
+    const decode: (buf: Uint8Array | Uint8ArrayList) => Message;
+}
+//# sourceMappingURL=message.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/message.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/message/message.d.ts.map
new file mode 100644
index 0000000..3f739c4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/message.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"message.d.ts","sourceRoot":"","sources":["../../../src/message/message.ts"],"names":[],"mappings":"AAOA,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAA;AAC5C,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAA;AAEpD,MAAM,WAAW,OAAO;IACtB,QAAQ,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAA;IAC3B,MAAM,EAAE,UAAU,EAAE,CAAA;IACpB,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,CAAA;IACxB,cAAc,EAAE,OAAO,CAAC,aAAa,EAAE,CAAA;IACvC,YAAY,EAAE,MAAM,CAAA;CACrB;AAED,yBAAiB,OAAO,CAAC;IACvB,UAAiB,QAAQ;QACvB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAA;QACjC,IAAI,EAAE,OAAO,CAAA;KACd;IAED,UAAiB,QAAQ,CAAC;QACxB,KAAY,QAAQ;YAClB,KAAK,UAAU;YACf,IAAI,SAAS;SACd;QAOD,UAAiB,QAAQ,CAAC;YACjB,MAAM,KAAK,QAAO,MAAM,QAAQ,CAEtC,CAAA;SACF;QAED,UAAiB,KAAK;YACpB,KAAK,EAAE,UAAU,CAAA;YACjB,QAAQ,EAAE,MAAM,CAAA;YAChB,MAAM,EAAE,OAAO,CAAA;YACf,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAA;YACnC,YAAY,EAAE,OAAO,CAAA;SACtB;QAED,UAAiB,KAAK,CAAC;YAGd,MAAM,KAAK,QAAO,MAAM,KAAK,CA4EnC,CAAA;YAEM,MAAM,MAAM,QAAS,QAAQ,KAAK,CAAC,KAAG,UAE5C,CAAA;YAEM,MAAM,MAAM,QAAS,UAAU,GAAG,cAAc,KAAG,KAEzD,CAAA;SACF;QAIM,MAAM,KAAK,QAAO,MAAM,QAAQ,CAmDtC,CAAA;QAEM,MAAM,MAAM,QAAS,QAAQ,QAAQ,CAAC,KAAG,UAE/C,CAAA;QAEM,MAAM,MAAM,QAAS,UAAU,GAAG,cAAc,KAAG,QAEzD,CAAA;KACF;IAED,UAAiB,KAAK;QACpB,MAAM,EAAE,UAAU,CAAA;QAClB,IAAI,EAAE,UAAU,CAAA;KACjB;IAED,UAAiB,KAAK,CAAC;QAGd,MAAM,KAAK,QAAO,MAAM,KAAK,CAiDnC,CAAA;QAEM,MAAM,MAAM,QAAS,QAAQ,KAAK,CAAC,KAAG,UAE5C,CAAA;QAEM,MAAM,MAAM,QAAS,UAAU,GAAG,cAAc,KAAG,KAEzD,CAAA;KACF;IAED,KAAY,iBAAiB;QAC3B,IAAI,SAAS;QACb,QAAQ,aAAa;KACtB;IAOD,UAAiB,iBAAiB,CAAC;QAC1B,MAAM,KAAK,QAAO,MAAM,iBAAiB,CAE/C,CAAA;KACF;IAED,UAAiB,aAAa;QAC5B,GAAG,EAAE,UAAU,CAAA;QACf,IAAI,EAAE,OAAO,CAAC,iBAAiB,CAAA;KAChC;IAED,UAAiB,aAAa,CAAC;QAGtB,MAAM,KAAK,QAAO,MAAM,aAAa,CAiD3C,CAAA;QAEM,MAAM,MAAM,QAAS,QAAQ,aAAa,CAAC,KAAG,UAEpD,CAAA;QAEM,MAAM,MAAM,QAAS,UAAU,GAAG,cAAc,KAAG,aAEzD,CAAA;KACF;IAIM,MAAM,KAAK,QAAO,MAAM,OAAO,CAiFrC,CAAA;IAEM,MAAM,MAAM,QAAS,QAAQ,OAAO,CAAC,KAAG,UAE9C,CAAA;IAEM,MAAM,MAAM,QAAS,UAAU,GAAG,cAAc,KAAG,OAEzD,CAAA;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/message.js b/node_modules/ipfs-bitswap/dist/dist/src/message/message.js
new file mode 100644
index 0000000..e8b6274
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/message.js
@@ -0,0 +1,352 @@
+/* eslint-disable import/export */
+/* eslint-disable complexity */
+/* eslint-disable @typescript-eslint/no-namespace */
+/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
+/* eslint-disable @typescript-eslint/no-empty-interface */
+import { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';
+export var Message;
+(function (Message) {
+    let Wantlist;
+    (function (Wantlist) {
+        let WantType;
+        (function (WantType) {
+            WantType["Block"] = "Block";
+            WantType["Have"] = "Have";
+        })(WantType = Wantlist.WantType || (Wantlist.WantType = {}));
+        let __WantTypeValues;
+        (function (__WantTypeValues) {
+            __WantTypeValues[__WantTypeValues["Block"] = 0] = "Block";
+            __WantTypeValues[__WantTypeValues["Have"] = 1] = "Have";
+        })(__WantTypeValues || (__WantTypeValues = {}));
+        (function (WantType) {
+            WantType.codec = () => {
+                return enumeration(__WantTypeValues);
+            };
+        })(WantType = Wantlist.WantType || (Wantlist.WantType = {}));
+        let Entry;
+        (function (Entry) {
+            let _codec;
+            Entry.codec = () => {
+                if (_codec == null) {
+                    _codec = message((obj, w, opts = {}) => {
+                        if (opts.lengthDelimited !== false) {
+                            w.fork();
+                        }
+                        if ((obj.block != null && obj.block.byteLength > 0)) {
+                            w.uint32(10);
+                            w.bytes(obj.block);
+                        }
+                        if ((obj.priority != null && obj.priority !== 0)) {
+                            w.uint32(16);
+                            w.int32(obj.priority);
+                        }
+                        if ((obj.cancel != null && obj.cancel !== false)) {
+                            w.uint32(24);
+                            w.bool(obj.cancel);
+                        }
+                        if (obj.wantType != null && __WantTypeValues[obj.wantType] !== 0) {
+                            w.uint32(32);
+                            Message.Wantlist.WantType.codec().encode(obj.wantType, w);
+                        }
+                        if ((obj.sendDontHave != null && obj.sendDontHave !== false)) {
+                            w.uint32(40);
+                            w.bool(obj.sendDontHave);
+                        }
+                        if (opts.lengthDelimited !== false) {
+                            w.ldelim();
+                        }
+                    }, (reader, length) => {
+                        const obj = {
+                            block: new Uint8Array(0),
+                            priority: 0,
+                            cancel: false,
+                            wantType: WantType.Block,
+                            sendDontHave: false
+                        };
+                        const end = length == null ? reader.len : reader.pos + length;
+                        while (reader.pos < end) {
+                            const tag = reader.uint32();
+                            switch (tag >>> 3) {
+                                case 1:
+                                    obj.block = reader.bytes();
+                                    break;
+                                case 2:
+                                    obj.priority = reader.int32();
+                                    break;
+                                case 3:
+                                    obj.cancel = reader.bool();
+                                    break;
+                                case 4:
+                                    obj.wantType = Message.Wantlist.WantType.codec().decode(reader);
+                                    break;
+                                case 5:
+                                    obj.sendDontHave = reader.bool();
+                                    break;
+                                default:
+                                    reader.skipType(tag & 7);
+                                    break;
+                            }
+                        }
+                        return obj;
+                    });
+                }
+                return _codec;
+            };
+            Entry.encode = (obj) => {
+                return encodeMessage(obj, Entry.codec());
+            };
+            Entry.decode = (buf) => {
+                return decodeMessage(buf, Entry.codec());
+            };
+        })(Entry = Wantlist.Entry || (Wantlist.Entry = {}));
+        let _codec;
+        Wantlist.codec = () => {
+            if (_codec == null) {
+                _codec = message((obj, w, opts = {}) => {
+                    if (opts.lengthDelimited !== false) {
+                        w.fork();
+                    }
+                    if (obj.entries != null) {
+                        for (const value of obj.entries) {
+                            w.uint32(10);
+                            Message.Wantlist.Entry.codec().encode(value, w);
+                        }
+                    }
+                    if ((obj.full != null && obj.full !== false)) {
+                        w.uint32(16);
+                        w.bool(obj.full);
+                    }
+                    if (opts.lengthDelimited !== false) {
+                        w.ldelim();
+                    }
+                }, (reader, length) => {
+                    const obj = {
+                        entries: [],
+                        full: false
+                    };
+                    const end = length == null ? reader.len : reader.pos + length;
+                    while (reader.pos < end) {
+                        const tag = reader.uint32();
+                        switch (tag >>> 3) {
+                            case 1:
+                                obj.entries.push(Message.Wantlist.Entry.codec().decode(reader, reader.uint32()));
+                                break;
+                            case 2:
+                                obj.full = reader.bool();
+                                break;
+                            default:
+                                reader.skipType(tag & 7);
+                                break;
+                        }
+                    }
+                    return obj;
+                });
+            }
+            return _codec;
+        };
+        Wantlist.encode = (obj) => {
+            return encodeMessage(obj, Wantlist.codec());
+        };
+        Wantlist.decode = (buf) => {
+            return decodeMessage(buf, Wantlist.codec());
+        };
+    })(Wantlist = Message.Wantlist || (Message.Wantlist = {}));
+    let Block;
+    (function (Block) {
+        let _codec;
+        Block.codec = () => {
+            if (_codec == null) {
+                _codec = message((obj, w, opts = {}) => {
+                    if (opts.lengthDelimited !== false) {
+                        w.fork();
+                    }
+                    if ((obj.prefix != null && obj.prefix.byteLength > 0)) {
+                        w.uint32(10);
+                        w.bytes(obj.prefix);
+                    }
+                    if ((obj.data != null && obj.data.byteLength > 0)) {
+                        w.uint32(18);
+                        w.bytes(obj.data);
+                    }
+                    if (opts.lengthDelimited !== false) {
+                        w.ldelim();
+                    }
+                }, (reader, length) => {
+                    const obj = {
+                        prefix: new Uint8Array(0),
+                        data: new Uint8Array(0)
+                    };
+                    const end = length == null ? reader.len : reader.pos + length;
+                    while (reader.pos < end) {
+                        const tag = reader.uint32();
+                        switch (tag >>> 3) {
+                            case 1:
+                                obj.prefix = reader.bytes();
+                                break;
+                            case 2:
+                                obj.data = reader.bytes();
+                                break;
+                            default:
+                                reader.skipType(tag & 7);
+                                break;
+                        }
+                    }
+                    return obj;
+                });
+            }
+            return _codec;
+        };
+        Block.encode = (obj) => {
+            return encodeMessage(obj, Block.codec());
+        };
+        Block.decode = (buf) => {
+            return decodeMessage(buf, Block.codec());
+        };
+    })(Block = Message.Block || (Message.Block = {}));
+    let BlockPresenceType;
+    (function (BlockPresenceType) {
+        BlockPresenceType["Have"] = "Have";
+        BlockPresenceType["DontHave"] = "DontHave";
+    })(BlockPresenceType = Message.BlockPresenceType || (Message.BlockPresenceType = {}));
+    let __BlockPresenceTypeValues;
+    (function (__BlockPresenceTypeValues) {
+        __BlockPresenceTypeValues[__BlockPresenceTypeValues["Have"] = 0] = "Have";
+        __BlockPresenceTypeValues[__BlockPresenceTypeValues["DontHave"] = 1] = "DontHave";
+    })(__BlockPresenceTypeValues || (__BlockPresenceTypeValues = {}));
+    (function (BlockPresenceType) {
+        BlockPresenceType.codec = () => {
+            return enumeration(__BlockPresenceTypeValues);
+        };
+    })(BlockPresenceType = Message.BlockPresenceType || (Message.BlockPresenceType = {}));
+    let BlockPresence;
+    (function (BlockPresence) {
+        let _codec;
+        BlockPresence.codec = () => {
+            if (_codec == null) {
+                _codec = message((obj, w, opts = {}) => {
+                    if (opts.lengthDelimited !== false) {
+                        w.fork();
+                    }
+                    if ((obj.cid != null && obj.cid.byteLength > 0)) {
+                        w.uint32(10);
+                        w.bytes(obj.cid);
+                    }
+                    if (obj.type != null && __BlockPresenceTypeValues[obj.type] !== 0) {
+                        w.uint32(16);
+                        Message.BlockPresenceType.codec().encode(obj.type, w);
+                    }
+                    if (opts.lengthDelimited !== false) {
+                        w.ldelim();
+                    }
+                }, (reader, length) => {
+                    const obj = {
+                        cid: new Uint8Array(0),
+                        type: BlockPresenceType.Have
+                    };
+                    const end = length == null ? reader.len : reader.pos + length;
+                    while (reader.pos < end) {
+                        const tag = reader.uint32();
+                        switch (tag >>> 3) {
+                            case 1:
+                                obj.cid = reader.bytes();
+                                break;
+                            case 2:
+                                obj.type = Message.BlockPresenceType.codec().decode(reader);
+                                break;
+                            default:
+                                reader.skipType(tag & 7);
+                                break;
+                        }
+                    }
+                    return obj;
+                });
+            }
+            return _codec;
+        };
+        BlockPresence.encode = (obj) => {
+            return encodeMessage(obj, BlockPresence.codec());
+        };
+        BlockPresence.decode = (buf) => {
+            return decodeMessage(buf, BlockPresence.codec());
+        };
+    })(BlockPresence = Message.BlockPresence || (Message.BlockPresence = {}));
+    let _codec;
+    Message.codec = () => {
+        if (_codec == null) {
+            _codec = message((obj, w, opts = {}) => {
+                if (opts.lengthDelimited !== false) {
+                    w.fork();
+                }
+                if (obj.wantlist != null) {
+                    w.uint32(10);
+                    Message.Wantlist.codec().encode(obj.wantlist, w);
+                }
+                if (obj.blocks != null) {
+                    for (const value of obj.blocks) {
+                        w.uint32(18);
+                        w.bytes(value);
+                    }
+                }
+                if (obj.payload != null) {
+                    for (const value of obj.payload) {
+                        w.uint32(26);
+                        Message.Block.codec().encode(value, w);
+                    }
+                }
+                if (obj.blockPresences != null) {
+                    for (const value of obj.blockPresences) {
+                        w.uint32(34);
+                        Message.BlockPresence.codec().encode(value, w);
+                    }
+                }
+                if ((obj.pendingBytes != null && obj.pendingBytes !== 0)) {
+                    w.uint32(40);
+                    w.int32(obj.pendingBytes);
+                }
+                if (opts.lengthDelimited !== false) {
+                    w.ldelim();
+                }
+            }, (reader, length) => {
+                const obj = {
+                    blocks: [],
+                    payload: [],
+                    blockPresences: [],
+                    pendingBytes: 0
+                };
+                const end = length == null ? reader.len : reader.pos + length;
+                while (reader.pos < end) {
+                    const tag = reader.uint32();
+                    switch (tag >>> 3) {
+                        case 1:
+                            obj.wantlist = Message.Wantlist.codec().decode(reader, reader.uint32());
+                            break;
+                        case 2:
+                            obj.blocks.push(reader.bytes());
+                            break;
+                        case 3:
+                            obj.payload.push(Message.Block.codec().decode(reader, reader.uint32()));
+                            break;
+                        case 4:
+                            obj.blockPresences.push(Message.BlockPresence.codec().decode(reader, reader.uint32()));
+                            break;
+                        case 5:
+                            obj.pendingBytes = reader.int32();
+                            break;
+                        default:
+                            reader.skipType(tag & 7);
+                            break;
+                    }
+                }
+                return obj;
+            });
+        }
+        return _codec;
+    };
+    Message.encode = (obj) => {
+        return encodeMessage(obj, Message.codec());
+    };
+    Message.decode = (buf) => {
+        return decodeMessage(buf, Message.codec());
+    };
+})(Message || (Message = {}));
+//# sourceMappingURL=message.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/message/message.js.map b/node_modules/ipfs-bitswap/dist/dist/src/message/message.js.map
new file mode 100644
index 0000000..5a1446d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/message/message.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"message.js","sourceRoot":"","sources":["../../../src/message/message.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/network.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/network.d.ts
new file mode 100644
index 0000000..49a8cab
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/network.d.ts
@@ -0,0 +1,76 @@
+import { BitswapMessage as Message } from './message/index.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { Multiaddr } from '@multiformats/multiaddr';
+import type { MultihashHasherLoader } from './index.js';
+import type { DefaultBitswap } from './bitswap.js';
+import type { Stats } from './stats/index.js';
+import type { IncomingStreamData } from '@libp2p/interface-registrar';
+import type { CID } from 'multiformats/cid';
+import type { AbortOptions } from '@libp2p/interfaces';
+import type { Connection } from '@libp2p/interface-connection';
+import type { PeerInfo } from '@libp2p/interface-peer-info';
+import { ProgressEvent, ProgressOptions } from 'progress-events';
+export interface Provider {
+    id: PeerId;
+    multiaddrs: Multiaddr[];
+}
+export type BitswapNetworkProgressEvents = ProgressEvent<'bitswap:network:dial', PeerId>;
+export type BitswapNetworkWantProgressEvents = ProgressEvent<'bitswap:network:send-wantlist', PeerId> | ProgressEvent<'bitswap:network:send-wantlist:error', {
+    peer: PeerId;
+    error: Error;
+}> | ProgressEvent<'bitswap:network:find-providers', CID> | BitswapNetworkProgressEvents;
+export type BitswapNetworkNotifyProgressEvents = ProgressEvent<'bitswap:network:provide', CID> | BitswapNetworkProgressEvents;
+export interface NetworkOptions {
+    b100Only?: boolean;
+    hashLoader?: MultihashHasherLoader;
+    maxInboundStreams?: number;
+    maxOutboundStreams?: number;
+    incomingStreamTimeout?: number;
+}
+export declare class Network {
+    private readonly _log;
+    private readonly _libp2p;
+    private readonly _bitswap;
+    _protocols: string[];
+    private readonly _stats;
+    private _running;
+    private readonly _hashLoader;
+    private readonly _maxInboundStreams;
+    private readonly _maxOutboundStreams;
+    private readonly _incomingStreamTimeout;
+    private _registrarIds?;
+    constructor(libp2p: Libp2p, bitswap: DefaultBitswap, stats: Stats, options?: NetworkOptions);
+    start(): Promise<void>;
+    stop(): Promise<void>;
+    /**
+     * Handles both types of incoming bitswap messages
+     */
+    _onConnection(info: IncomingStreamData): void;
+    _onPeerConnect(peerId: PeerId): void;
+    _onPeerDisconnect(peerId: PeerId): void;
+    /**
+     * Find providers given a `cid`.
+     */
+    findProviders(cid: CID, options?: AbortOptions & ProgressOptions<BitswapNetworkWantProgressEvents>): AsyncIterable<PeerInfo>;
+    /**
+     * Find the providers of a given `cid` and connect to them.
+     */
+    findAndConnect(cid: CID, options?: AbortOptions & ProgressOptions<BitswapNetworkWantProgressEvents>): Promise<void>;
+    /**
+     * Tell the network we can provide content for the passed CID
+     */
+    provide(cid: CID, options?: AbortOptions & ProgressOptions<BitswapNetworkNotifyProgressEvents>): Promise<void>;
+    /**
+     * Connect to the given peer
+     * Send the given msg (instance of Message) to the given peer
+     */
+    sendMessage(peer: PeerId, msg: Message, options?: ProgressOptions<BitswapNetworkWantProgressEvents>): Promise<void>;
+    /**
+     * Connects to another peer
+     */
+    connectTo(peer: PeerId, options?: AbortOptions & ProgressOptions<BitswapNetworkProgressEvents>): Promise<Connection>;
+    _updateSentStats(peer: PeerId, blocks: Map<string, Uint8Array>): void;
+    _writeMessage(peerId: PeerId, msg: Message, options?: ProgressOptions<BitswapNetworkWantProgressEvents>): Promise<void>;
+}
+//# sourceMappingURL=network.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/network.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/network.d.ts.map
new file mode 100644
index 0000000..67a0920
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/network.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"network.d.ts","sourceRoot":"","sources":["../../src/network.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/network.js b/node_modules/ipfs-bitswap/dist/dist/src/network.js
new file mode 100644
index 0000000..d6c904b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/network.js
@@ -0,0 +1,205 @@
+import * as lp from 'it-length-prefixed';
+import { pipe } from 'it-pipe';
+import { createTopology } from '@libp2p/topology';
+import { BitswapMessage as Message } from './message/index.js';
+import * as CONSTANTS from './constants.js';
+import { logger } from './utils/index.js';
+import { TimeoutController } from 'timeout-abort-controller';
+import { abortableSource } from 'abortable-iterator';
+import { CustomProgressEvent } from 'progress-events';
+import take from 'it-take';
+import drain from 'it-drain';
+import map from 'it-map';
+const BITSWAP100 = '/ipfs/bitswap/1.0.0';
+const BITSWAP110 = '/ipfs/bitswap/1.1.0';
+const BITSWAP120 = '/ipfs/bitswap/1.2.0';
+const DEFAULT_MAX_INBOUND_STREAMS = 32;
+const DEFAULT_MAX_OUTBOUND_STREAMS = 128;
+const DEFAULT_INCOMING_STREAM_TIMEOUT = 30000;
+export class Network {
+    constructor(libp2p, bitswap, stats, options = {}) {
+        this._log = logger(libp2p.peerId, 'network');
+        this._libp2p = libp2p;
+        this._bitswap = bitswap;
+        this._protocols = [BITSWAP100];
+        if (options.b100Only !== true) {
+            // Latest bitswap first
+            this._protocols.unshift(BITSWAP110);
+            this._protocols.unshift(BITSWAP120);
+        }
+        this._stats = stats;
+        this._running = false;
+        // bind event listeners
+        this._onPeerConnect = this._onPeerConnect.bind(this);
+        this._onPeerDisconnect = this._onPeerDisconnect.bind(this);
+        this._onConnection = this._onConnection.bind(this);
+        this._hashLoader = options.hashLoader ?? {
+            async getHasher() {
+                throw new Error('Not implemented');
+            }
+        };
+        this._maxInboundStreams = options.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;
+        this._maxOutboundStreams = options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;
+        this._incomingStreamTimeout = options.incomingStreamTimeout ?? DEFAULT_INCOMING_STREAM_TIMEOUT;
+    }
+    async start() {
+        this._running = true;
+        await this._libp2p.handle(this._protocols, this._onConnection, {
+            maxInboundStreams: this._maxInboundStreams,
+            maxOutboundStreams: this._maxOutboundStreams
+        });
+        // register protocol with topology
+        const topology = createTopology({
+            onConnect: this._onPeerConnect,
+            onDisconnect: this._onPeerDisconnect
+        });
+        /** @type {string[]} */
+        this._registrarIds = [];
+        for (const protocol of this._protocols) {
+            this._registrarIds.push(await this._libp2p.register(protocol, topology));
+        }
+        // All existing connections are like new ones for us
+        this._libp2p.getConnections().forEach(conn => {
+            this._onPeerConnect(conn.remotePeer);
+        });
+    }
+    async stop() {
+        this._running = false;
+        // Unhandle both, libp2p doesn't care if it's not already handled
+        await this._libp2p.unhandle(this._protocols);
+        // unregister protocol and handlers
+        if (this._registrarIds != null) {
+            for (const id of this._registrarIds) {
+                this._libp2p.unregister(id);
+            }
+            this._registrarIds = [];
+        }
+    }
+    /**
+     * Handles both types of incoming bitswap messages
+     */
+    _onConnection(info) {
+        if (!this._running) {
+            return;
+        }
+        const { stream, connection } = info;
+        const controller = new TimeoutController(this._incomingStreamTimeout);
+        Promise.resolve().then(async () => {
+            this._log('incoming new bitswap %s connection from %p', stream.stat.protocol, connection.remotePeer);
+            await pipe(abortableSource(stream.source, controller.signal), (source) => lp.decode(source), async (source) => {
+                for await (const data of source) {
+                    try {
+                        const message = await Message.deserialize(data.subarray(), this._hashLoader);
+                        await this._bitswap._receiveMessage(connection.remotePeer, message);
+                    }
+                    catch (err) {
+                        this._bitswap._receiveError(err);
+                        break;
+                    }
+                    // we have received some data so reset the timeout controller
+                    controller.reset();
+                }
+            });
+        })
+            .catch(err => {
+            this._log(err);
+            stream.abort(err);
+        })
+            .finally(() => {
+            controller.clear();
+            stream.close();
+        });
+    }
+    _onPeerConnect(peerId) {
+        this._bitswap._onPeerConnected(peerId);
+    }
+    _onPeerDisconnect(peerId) {
+        this._bitswap._onPeerDisconnected(peerId);
+    }
+    /**
+     * Find providers given a `cid`.
+     */
+    findProviders(cid, options = {}) {
+        options.onProgress?.(new CustomProgressEvent('bitswap:network:find-providers', cid));
+        return this._libp2p.contentRouting.findProviders(cid, options);
+    }
+    /**
+     * Find the providers of a given `cid` and connect to them.
+     */
+    async findAndConnect(cid, options) {
+        await drain(take(map(this.findProviders(cid, options), async (provider) => await this.connectTo(provider.id, options)
+            .catch(err => {
+            // Prevent unhandled promise rejection
+            this._log.error(err);
+        })), CONSTANTS.maxProvidersPerRequest))
+            .catch(err => {
+            this._log.error(err);
+        });
+    }
+    /**
+     * Tell the network we can provide content for the passed CID
+     */
+    async provide(cid, options = {}) {
+        options.onProgress?.(new CustomProgressEvent('bitswap:network:provide', cid));
+        await this._libp2p.contentRouting.provide(cid, options);
+    }
+    /**
+     * Connect to the given peer
+     * Send the given msg (instance of Message) to the given peer
+     */
+    async sendMessage(peer, msg, options = {}) {
+        if (!this._running)
+            throw new Error('network isn\'t running');
+        const stringId = peer.toString();
+        this._log('sendMessage to %s', stringId, msg);
+        options.onProgress?.(new CustomProgressEvent('bitswap:network:send-wantlist', peer));
+        await this._writeMessage(peer, msg, options);
+        this._updateSentStats(peer, msg.blocks);
+    }
+    /**
+     * Connects to another peer
+     */
+    async connectTo(peer, options = {}) {
+        if (!this._running) {
+            throw new Error('network isn\'t running');
+        }
+        options.onProgress?.(new CustomProgressEvent('bitswap:network:dial', peer));
+        return await this._libp2p.dial(peer, options);
+    }
+    _updateSentStats(peer, blocks) {
+        const peerId = peer.toString();
+        if (this._stats != null) {
+            for (const block of blocks.values()) {
+                this._stats.push(peerId, 'dataSent', block.length);
+            }
+            this._stats.push(peerId, 'blocksSent', blocks.size);
+        }
+    }
+    async _writeMessage(peerId, msg, options = {}) {
+        const stream = await this._libp2p.dialProtocol(peerId, [BITSWAP120, BITSWAP110, BITSWAP100]);
+        try {
+            /** @type {Uint8Array} */
+            let serialized;
+            switch (stream.stat.protocol) {
+                case BITSWAP100:
+                    serialized = msg.serializeToBitswap100();
+                    break;
+                case BITSWAP110:
+                case BITSWAP120:
+                    serialized = msg.serializeToBitswap110();
+                    break;
+                default:
+                    throw new Error(`Unknown protocol: ${stream.stat.protocol}`);
+            }
+            await pipe([serialized], (source) => lp.encode(source), stream);
+        }
+        catch (err) {
+            options.onProgress?.(new CustomProgressEvent('bitswap:network:send-wantlist:error', { peer: peerId, error: err }));
+            this._log(err);
+        }
+        finally {
+            stream.close();
+        }
+    }
+}
+//# sourceMappingURL=network.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/network.js.map b/node_modules/ipfs-bitswap/dist/dist/src/network.js.map
new file mode 100644
index 0000000..616e55f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/network.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"network.js","sourceRoot":"","sources":["../../src/network.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/notifications.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/notifications.d.ts
new file mode 100644
index 0000000..e08a179
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/notifications.d.ts
@@ -0,0 +1,31 @@
+/// <reference types="node" />
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { AbortOptions } from '@libp2p/interfaces';
+import { EventEmitter } from 'events';
+import type { CID } from 'multiformats/cid';
+import { ProgressOptions } from 'progress-events';
+import type { BitswapWantBlockProgressEvents } from './index.js';
+export declare class Notifications extends EventEmitter {
+    private readonly _log;
+    /**
+     * Internal module used to track events about incoming blocks,
+     * wants and unwants.
+     */
+    constructor(peerId: PeerId);
+    /**
+     * Signal the system that we received `block`.
+     */
+    hasBlock(cid: CID, block: Uint8Array): void;
+    /**
+     * Signal the system that we are waiting to receive the
+     * block associated with the given `cid`.
+     * Returns a Promise that resolves to the block when it is received,
+     * or undefined when the block is unwanted.
+     */
+    wantBlock(cid: CID, options?: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents>): Promise<Uint8Array>;
+    /**
+     * Signal that the block is not wanted anymore
+     */
+    unwantBlock(cid: CID): void;
+}
+//# sourceMappingURL=notifications.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/notifications.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/notifications.d.ts.map
new file mode 100644
index 0000000..006101c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/notifications.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"notifications.d.ts","sourceRoot":"","sources":["../../src/notifications.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,oBAAoB,CAAA;AAEtD,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AACrC,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAC3C,OAAO,EAAuB,eAAe,EAAE,MAAM,iBAAiB,CAAA;AAGtE,OAAO,KAAK,EAAE,8BAA8B,EAAE,MAAM,YAAY,CAAA;AAOhE,qBAAa,aAAc,SAAQ,YAAY;IAC7C,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAQ;IAE7B;;;OAGG;gBACU,MAAM,EAAE,MAAM;IAQ3B;;OAEG;IACH,QAAQ,CAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,UAAU,GAAG,IAAI;IAM5C;;;;;OAKG;IACG,SAAS,CAAE,GAAG,EAAE,GAAG,EAAE,OAAO,GAAE,YAAY,GAAG,eAAe,CAAC,8BAA8B,CAAM,GAAG,OAAO,CAAC,UAAU,CAAC;IAqC7H;;OAEG;IACH,WAAW,CAAE,GAAG,EAAE,GAAG,GAAG,IAAI;CAK7B"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/notifications.js b/node_modules/ipfs-bitswap/dist/dist/src/notifications.js
new file mode 100644
index 0000000..4b3ae44
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/notifications.js
@@ -0,0 +1,68 @@
+import { EventEmitter } from 'events';
+import { CustomProgressEvent } from 'progress-events';
+import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
+import * as CONSTANTS from './constants.js';
+import { logger } from './utils/index.js';
+const unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;
+const blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;
+export class Notifications extends EventEmitter {
+    /**
+     * Internal module used to track events about incoming blocks,
+     * wants and unwants.
+     */
+    constructor(peerId) {
+        super();
+        this.setMaxListeners(CONSTANTS.maxListeners);
+        this._log = logger(peerId, 'notif');
+    }
+    /**
+     * Signal the system that we received `block`.
+     */
+    hasBlock(cid, block) {
+        const event = blockEvent(cid);
+        this._log(event);
+        this.emit(event, block);
+    }
+    /**
+     * Signal the system that we are waiting to receive the
+     * block associated with the given `cid`.
+     * Returns a Promise that resolves to the block when it is received,
+     * or undefined when the block is unwanted.
+     */
+    async wantBlock(cid, options = {}) {
+        if (cid == null) {
+            throw new Error('Not a valid cid');
+        }
+        const blockEvt = blockEvent(cid);
+        const unwantEvt = unwantEvent(cid);
+        this._log(`wantBlock:${cid}`);
+        return await new Promise((resolve, reject) => {
+            const onUnwant = () => {
+                this.removeListener(blockEvt, onBlock);
+                options.onProgress?.(new CustomProgressEvent('bitswap:want-block:unwant', cid));
+                reject(new Error(`Block for ${cid} unwanted`));
+            };
+            const onBlock = (data) => {
+                this.removeListener(unwantEvt, onUnwant);
+                options.onProgress?.(new CustomProgressEvent('bitswap:want-block:block', cid));
+                resolve(data);
+            };
+            this.once(unwantEvt, onUnwant);
+            this.once(blockEvt, onBlock);
+            options.signal?.addEventListener('abort', () => {
+                this.removeListener(blockEvt, onBlock);
+                this.removeListener(unwantEvt, onUnwant);
+                reject(new Error(`Want for ${cid} aborted`));
+            });
+        });
+    }
+    /**
+     * Signal that the block is not wanted anymore
+     */
+    unwantBlock(cid) {
+        const event = unwantEvent(cid);
+        this._log(event);
+        this.emit(event);
+    }
+}
+//# sourceMappingURL=notifications.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/notifications.js.map b/node_modules/ipfs-bitswap/dist/dist/src/notifications.js.map
new file mode 100644
index 0000000..65dfaf4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/notifications.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"notifications.js","sourceRoot":"","sources":["../../src/notifications.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.d.ts
new file mode 100644
index 0000000..d1230d2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.d.ts
@@ -0,0 +1,33 @@
+/// <reference types="node" />
+import { EventEmitter } from 'events';
+import { Stat } from './stat.js';
+import type { Libp2p } from 'libp2p';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { IMovingAverage } from '@vascosantos/moving-average';
+/**
+ * @typedef {import('multiformats').CID} CID
+ * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId
+ */
+export interface StatsOptions {
+    enabled?: boolean;
+    computeThrottleTimeout?: number;
+    computeThrottleMaxQueueSize?: number;
+    movingAverageIntervals?: number[];
+}
+export declare class Stats extends EventEmitter {
+    private readonly _initialCounters;
+    private readonly _options;
+    private _enabled;
+    private readonly _global;
+    private readonly _peers;
+    constructor(libp2p: Libp2p, initialCounters?: string[], _options?: StatsOptions);
+    enable(): void;
+    disable(): void;
+    stop(): void;
+    get snapshot(): Record<string, bigint>;
+    get movingAverages(): Record<string, Record<number, IMovingAverage>>;
+    forPeer(peerId: PeerId | string): Stat | undefined;
+    push(peer: string | undefined, counter: string, inc: number): void;
+    disconnected(peer: PeerId): void;
+}
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.d.ts.map
new file mode 100644
index 0000000..0928d40
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/stats/index.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AACrC,OAAO,EAAE,IAAI,EAAE,MAAM,WAAW,CAAA;AAEhC,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAA;AACpC,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAA;AAEjE;;;GAGG;AAEH,MAAM,WAAW,YAAY;IAC3B,OAAO,CAAC,EAAE,OAAO,CAAA;IACjB,sBAAsB,CAAC,EAAE,MAAM,CAAA;IAC/B,2BAA2B,CAAC,EAAE,MAAM,CAAA;IACpC,sBAAsB,CAAC,EAAE,MAAM,EAAE,CAAA;CAClC;AAaD,qBAAa,KAAM,SAAQ,YAAY;IACrC,OAAO,CAAC,QAAQ,CAAC,gBAAgB,CAAU;IAC3C,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAwB;IACjD,OAAO,CAAC,QAAQ,CAAS;IACzB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAM;IAC9B,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAmB;gBAE7B,MAAM,EAAE,MAAM,EAAE,eAAe,GAAE,MAAM,EAAO,EAAE,QAAQ,GAAE,YAA6B;IA0BpG,MAAM,IAAK,IAAI;IAMf,OAAO,IAAK,IAAI;IAMhB,IAAI,IAAK,IAAI;IAQb,IAAI,QAAQ,IAAK,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAEtC;IAED,IAAI,cAAc,IAAK,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAEpE;IAED,OAAO,CAAE,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,IAAI,GAAG,SAAS;IAMnD,IAAI,CAAE,IAAI,EAAE,MAAM,GAAG,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAgBnE,YAAY,CAAE,IAAI,EAAE,MAAM,GAAG,IAAI;CAQlC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/index.js b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.js
new file mode 100644
index 0000000..608f757
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.js
@@ -0,0 +1,83 @@
+import { EventEmitter } from 'events';
+import { Stat } from './stat.js';
+import { trackedMap } from '@libp2p/tracked-map';
+const defaultOptions = {
+    enabled: false,
+    computeThrottleTimeout: 1000,
+    computeThrottleMaxQueueSize: 1000,
+    movingAverageIntervals: [
+        60 * 1000,
+        5 * 60 * 1000,
+        15 * 60 * 1000 // 15 minutes
+    ]
+};
+export class Stats extends EventEmitter {
+    constructor(libp2p, initialCounters = [], _options = defaultOptions) {
+        super();
+        const options = Object.assign({}, defaultOptions, _options);
+        if (typeof options.computeThrottleTimeout !== 'number') {
+            throw new Error('need computeThrottleTimeout');
+        }
+        if (typeof options.computeThrottleMaxQueueSize !== 'number') {
+            throw new Error('need computeThrottleMaxQueueSize');
+        }
+        this._initialCounters = initialCounters;
+        this._options = options;
+        this._enabled = this._options.enabled;
+        this._global = new Stat(initialCounters, options);
+        this._global.on('update', (stats) => this.emit('update', stats));
+        this._peers = trackedMap({
+            name: 'ipfs_bitswap_stats_peers',
+            metrics: libp2p.metrics
+        });
+    }
+    enable() {
+        this._enabled = true;
+        this._options.enabled = true;
+        this._global.enable();
+    }
+    disable() {
+        this._enabled = false;
+        this._options.enabled = false;
+        this._global.disable();
+    }
+    stop() {
+        this._enabled = false;
+        this._global.stop();
+        for (const peerStat of this._peers) {
+            peerStat[1].stop();
+        }
+    }
+    get snapshot() {
+        return this._global.snapshot;
+    }
+    get movingAverages() {
+        return this._global.movingAverages;
+    }
+    forPeer(peerId) {
+        const peerIdStr = peerId.toString();
+        return this._peers.get(peerIdStr);
+    }
+    push(peer, counter, inc) {
+        if (this._enabled) {
+            this._global.push(counter, inc);
+            if (peer != null) {
+                let peerStats = this._peers.get(peer);
+                if (peerStats == null) {
+                    peerStats = new Stat(this._initialCounters, this._options);
+                    this._peers.set(peer, peerStats);
+                }
+                peerStats.push(counter, inc);
+            }
+        }
+    }
+    disconnected(peer) {
+        const peerId = peer.toString();
+        const peerStats = this._peers.get(peerId);
+        if (peerStats != null) {
+            peerStats.stop();
+            this._peers.delete(peerId);
+        }
+    }
+}
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.js.map
new file mode 100644
index 0000000..a7af895
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/stats/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.d.ts
new file mode 100644
index 0000000..6d51900
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.d.ts
@@ -0,0 +1,34 @@
+/// <reference types="node" />
+import { EventEmitter } from 'events';
+import { IMovingAverage } from '@vascosantos/moving-average';
+export type Op = [string, number, number];
+export interface StatOptions {
+    enabled: boolean;
+    computeThrottleTimeout: number;
+    computeThrottleMaxQueueSize: number;
+    movingAverageIntervals: number[];
+}
+export declare class Stat extends EventEmitter {
+    private readonly _options;
+    private readonly _queue;
+    private _stats;
+    private _frequencyLastTime;
+    private _frequencyAccumulators;
+    private _movingAverages;
+    private _enabled;
+    private _timeout?;
+    constructor(initialCounters: string[], options: StatOptions);
+    enable(): void;
+    disable(): void;
+    stop(): void;
+    get snapshot(): Record<string, bigint>;
+    get movingAverages(): Record<string, Record<number, IMovingAverage>>;
+    push(counter: string, inc: number): void;
+    _resetComputeTimeout(): void;
+    _nextTimeout(): number;
+    _update(): void;
+    _updateFrequency(latestTime: number): void;
+    _updateFrequencyFor(key: string, timeDiffMS: number, latestTime: number): void;
+    _applyOp(op: Op): void;
+}
+//# sourceMappingURL=stat.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.d.ts.map
new file mode 100644
index 0000000..aa3a409
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"stat.d.ts","sourceRoot":"","sources":["../../../src/stats/stat.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AACrC,OAAsB,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAA;AAE3E,MAAM,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;AAEzC,MAAM,WAAW,WAAW;IAC1B,OAAO,EAAE,OAAO,CAAA;IAChB,sBAAsB,EAAE,MAAM,CAAA;IAC9B,2BAA2B,EAAE,MAAM,CAAA;IACnC,sBAAsB,EAAE,MAAM,EAAE,CAAA;CACjC;AAED,qBAAa,IAAK,SAAQ,YAAY;IACpC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAa;IACtC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAM;IAC7B,OAAO,CAAC,MAAM,CAAwB;IACtC,OAAO,CAAC,kBAAkB,CAAQ;IAClC,OAAO,CAAC,sBAAsB,CAAwB;IACtD,OAAO,CAAC,eAAe,CAAgD;IACvE,OAAO,CAAC,QAAQ,CAAS;IACzB,OAAO,CAAC,QAAQ,CAAC,CAA+B;gBAEnC,eAAe,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,WAAW;IAwB5D,MAAM,IAAK,IAAI;IAIf,OAAO,IAAK,IAAI;IAIhB,IAAI,IAAK,IAAI;IAMb,IAAI,QAAQ,IAAK,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAEtC;IAED,IAAI,cAAc,IAAK,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAEpE;IAED,IAAI,CAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,GAAG,IAAI;IAOzC,oBAAoB,IAAK,IAAI;IAO7B,YAAY,IAAK,MAAM;IAMvB,OAAO,IAAK,IAAI;IAgBhB,gBAAgB,CAAE,UAAU,EAAE,MAAM,GAAG,IAAI;IAY3C,mBAAmB,CAAE,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,GAAG,IAAI;IAkB/E,QAAQ,CAAE,EAAE,EAAE,EAAE,GAAG,IAAI;CAmBxB"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.js b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.js
new file mode 100644
index 0000000..a88eb2a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.js
@@ -0,0 +1,110 @@
+import { EventEmitter } from 'events';
+import MovingAverage from '@vascosantos/moving-average';
+export class Stat extends EventEmitter {
+    constructor(initialCounters, options) {
+        super();
+        this._options = options;
+        this._queue = [];
+        this._stats = {};
+        this._frequencyLastTime = Date.now();
+        this._frequencyAccumulators = {};
+        this._movingAverages = {};
+        this._update = this._update.bind(this);
+        initialCounters.forEach((key) => {
+            this._stats[key] = BigInt(0);
+            this._movingAverages[key] = {};
+            this._options.movingAverageIntervals.forEach((interval) => {
+                const ma = this._movingAverages[key][interval] = MovingAverage(interval);
+                ma.push(this._frequencyLastTime, 0);
+            });
+        });
+        this._enabled = this._options.enabled;
+    }
+    enable() {
+        this._enabled = true;
+    }
+    disable() {
+        this._enabled = false;
+    }
+    stop() {
+        if (this._timeout != null) {
+            clearTimeout(this._timeout);
+        }
+    }
+    get snapshot() {
+        return Object.assign({}, this._stats);
+    }
+    get movingAverages() {
+        return Object.assign({}, this._movingAverages);
+    }
+    push(counter, inc) {
+        if (this._enabled) {
+            this._queue.push([counter, inc, Date.now()]);
+            this._resetComputeTimeout();
+        }
+    }
+    _resetComputeTimeout() {
+        if (this._timeout != null) {
+            clearTimeout(this._timeout);
+        }
+        this._timeout = setTimeout(this._update, this._nextTimeout());
+    }
+    _nextTimeout() {
+        // calculate the need for an update, depending on the queue length
+        const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize;
+        return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0);
+    }
+    _update() {
+        this._timeout = undefined;
+        if (this._queue.length > 0) {
+            let last;
+            while (this._queue.length > 0) {
+                const op = last = this._queue.shift();
+                (op != null) && this._applyOp(op);
+            }
+            (last != null) && this._updateFrequency(last[2]); // contains timestamp of last op
+            this.emit('update', this._stats);
+        }
+    }
+    _updateFrequency(latestTime) {
+        const timeDiff = latestTime - this._frequencyLastTime;
+        if (timeDiff > 0) {
+            Object.keys(this._stats).forEach((key) => {
+                this._updateFrequencyFor(key, timeDiff, latestTime);
+            });
+        }
+        this._frequencyLastTime = latestTime;
+    }
+    _updateFrequencyFor(key, timeDiffMS, latestTime) {
+        const count = this._frequencyAccumulators[key] ?? 0;
+        this._frequencyAccumulators[key] = 0;
+        const hz = (count / timeDiffMS) * 1000;
+        let movingAverages = this._movingAverages[key];
+        if (movingAverages == null) {
+            movingAverages = this._movingAverages[key] = {};
+        }
+        this._options.movingAverageIntervals.forEach((movingAverageInterval) => {
+            let movingAverage = movingAverages[movingAverageInterval];
+            if (movingAverage == null) {
+                movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval);
+            }
+            movingAverage.push(latestTime, hz);
+        });
+    }
+    _applyOp(op) {
+        const key = op[0];
+        const inc = op[1];
+        if (typeof inc !== 'number') {
+            throw new Error(`invalid increment number: ${inc}`);
+        }
+        if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {
+            this._stats[key] = BigInt(0);
+        }
+        this._stats[key] = BigInt(this._stats[key]) + BigInt(inc);
+        if (this._frequencyAccumulators[key] == null) {
+            this._frequencyAccumulators[key] = 0;
+        }
+        this._frequencyAccumulators[key] += inc;
+    }
+}
+//# sourceMappingURL=stat.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.js.map b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.js.map
new file mode 100644
index 0000000..9e7d737
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/stats/stat.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"stat.js","sourceRoot":"","sources":["../../../src/stats/stat.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AACrC,OAAO,aAAiC,MAAM,6BAA6B,CAAA;AAW3E,MAAM,OAAO,IAAK,SAAQ,YAAY;IAUpC,YAAa,eAAyB,EAAE,OAAoB;QAC1D,KAAK,EAAE,CAAA;QAEP,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAChB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACpC,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAA;QAChC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAA;QAEzB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEtC,eAAe,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YAC9B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;YAC5B,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;YAC9B,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACxD,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAA;gBACxE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAA;YACrC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAA;IACvC,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;IACtB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAA;IACvB,CAAC;IAED,IAAI;QACF,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;YACzB,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC5B;IACH,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;IACvC,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,CAAA;IAChD,CAAC;IAED,IAAI,CAAE,OAAe,EAAE,GAAW;QAChC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAA;YAC5C,IAAI,CAAC,oBAAoB,EAAE,CAAA;SAC5B;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,EAAE;YACzB,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;SAC5B;QACD,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAA;IAC/D,CAAC;IAED,YAAY;QACV,kEAAkE;QAClE,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,2BAA2B,CAAA;QAC9E,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,CAAA;IAC1E,CAAC;IAED,OAAO;QACL,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAA;QAEzB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,IAAI,IAAI,CAAA;YACR,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,MAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CACpC;gBAAA,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;aACnC;YAED,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAA,CAAC,gCAAgC;YAEjF,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;SACjC;IACH,CAAC;IAED,gBAAgB,CAAE,UAAkB;QAClC,MAAM,QAAQ,GAAG,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAA;QAErD,IAAI,QAAQ,GAAG,CAAC,EAAE;YAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;gBACvC,IAAI,CAAC,mBAAmB,CAAC,GAAG,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAA;YACrD,CAAC,CAAC,CAAA;SACH;QAED,IAAI,CAAC,kBAAkB,GAAG,UAAU,CAAA;IACtC,CAAC;IAED,mBAAmB,CAAE,GAAW,EAAE,UAAkB,EAAE,UAAkB;QACtE,MAAM,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;QACnD,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;QACpC,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,UAAU,CAAC,GAAG,IAAI,CAAA;QAEtC,IAAI,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAA;QAC9C,IAAI,cAAc,IAAI,IAAI,EAAE;YAC1B,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;SAChD;QACD,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,qBAAqB,EAAE,EAAE;YACrE,IAAI,aAAa,GAAG,cAAc,CAAC,qBAAqB,CAAC,CAAA;YACzD,IAAI,aAAa,IAAI,IAAI,EAAE;gBACzB,aAAa,GAAG,cAAc,CAAC,qBAAqB,CAAC,GAAG,aAAa,CAAC,qBAAqB,CAAC,CAAA;aAC7F;YACD,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,QAAQ,CAAE,EAAM;QACd,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;QACjB,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,CAAA;QAEjB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,6BAA6B,GAAG,EAAE,CAAC,CAAA;SACpD;QAED,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE;YAC3D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAA;SAC7B;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAA;QAEzD,IAAI,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;YAC5C,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;SACrC;QACD,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,IAAI,GAAG,CAAA;IACzC,CAAC;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.d.ts
new file mode 100644
index 0000000..7e03513
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.d.ts
@@ -0,0 +1,17 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+import { Logger } from '@libp2p/logger';
+import { BitswapMessageEntry } from '../message/entry.js';
+/**
+ * Creates a logger for the given subsystem
+ */
+export declare const logger: (id: PeerId, subsystem?: string) => Logger;
+export declare const includesWith: <X, T>(pred: (x: X, t: T) => boolean, x: X, list: T[]) => boolean;
+export declare const uniqWith: <T>(pred: (x: T, t: T) => boolean, list: T[]) => T[];
+export declare const groupBy: <K extends string | number | symbol, V>(pred: (v: V) => K, list: V[]) => Record<K, V[]>;
+export declare const pullAllWith: <T, E>(pred: (a: T, b: E) => boolean, list: T[], values: E[]) => T[];
+export declare const sortBy: <T>(fn: (v: T) => number, list: T[]) => T[];
+/**
+ * Is equal for Maps of BitswapMessageEntry or Uint8Arrays
+ */
+export declare const isMapEqual: (a: Map<string, Uint8Array | BitswapMessageEntry>, b: Map<string, Uint8Array | BitswapMessageEntry>) => boolean;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.d.ts.map
new file mode 100644
index 0000000..acb39cd
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/utils/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,EAA0B,MAAM,EAAE,MAAM,gBAAgB,CAAA;AAE/D,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAA;AAEzD;;GAEG;AACH,eAAO,MAAM,MAAM,OAAQ,MAAM,cAAc,MAAM,KAAG,MAUvD,CAAA;AAED,eAAO,MAAM,YAAY,+BAAiC,OAAO,sBAAoB,OAUpF,CAAA;AAED,eAAO,MAAM,QAAQ,4BAA8B,OAAO,mBAczD,CAAA;AAED,eAAO,MAAM,OAAO,yFAcnB,CAAA;AAED,eAAO,MAAM,WAAW,+BAAiC,OAAO,gCAI/D,CAAA;AAED,eAAO,MAAM,MAAM,oBAAsB,MAAM,mBAM9C,CAAA;AAED;;GAEG;AACH,eAAO,MAAM,UAAU,MAAO,IAAI,MAAM,EAAE,UAAU,GAAG,mBAAmB,CAAC,KAAK,IAAI,MAAM,EAAE,UAAU,GAAG,mBAAmB,CAAC,KAAG,OA0B/H,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/index.js b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.js
new file mode 100644
index 0000000..ed8522e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.js
@@ -0,0 +1,92 @@
+import { logger as createLogger } from '@libp2p/logger';
+import { equals as uint8ArrayEquals } from 'uint8arrays/equals';
+import { BitswapMessageEntry } from '../message/entry.js';
+/**
+ * Creates a logger for the given subsystem
+ */
+export const logger = (id, subsystem) => {
+    const name = ['bitswap'];
+    if (subsystem != null) {
+        name.push(subsystem);
+    }
+    if (id != null) {
+        name.push(`${id.toString().slice(0, 8)}`);
+    }
+    return createLogger(name.join(':'));
+};
+export const includesWith = (pred, x, list) => {
+    let idx = 0;
+    const len = list.length;
+    while (idx < len) {
+        if (pred(x, list[idx])) {
+            return true;
+        }
+        idx += 1;
+    }
+    return false;
+};
+export const uniqWith = (pred, list) => {
+    let idx = 0;
+    const len = list.length;
+    const result = [];
+    let item;
+    while (idx < len) {
+        item = list[idx];
+        if (!includesWith(pred, item, result)) {
+            result[result.length] = item;
+        }
+        idx += 1;
+    }
+    return result;
+};
+export const groupBy = (pred, list) => {
+    // @ts-expect-error cannot use {} as record with these key types?
+    const output = {};
+    return list.reduce((acc, v) => {
+        const k = pred(v);
+        if (acc[k] != null) {
+            acc[k].push(v);
+        }
+        else {
+            acc[k] = [v];
+        }
+        return acc;
+    }, output);
+};
+export const pullAllWith = (pred, list, values) => {
+    return list.filter(i => {
+        return !includesWith(pred, i, values);
+    });
+};
+export const sortBy = (fn, list) => {
+    return Array.prototype.slice.call(list, 0).sort((a, b) => {
+        const aa = fn(a);
+        const bb = fn(b);
+        return aa < bb ? -1 : aa > bb ? 1 : 0;
+    });
+};
+/**
+ * Is equal for Maps of BitswapMessageEntry or Uint8Arrays
+ */
+export const isMapEqual = (a, b) => {
+    if (a.size !== b.size) {
+        return false;
+    }
+    for (const [key, valueA] of a) {
+        const valueB = b.get(key);
+        if (valueB === undefined) {
+            return false;
+        }
+        // TODO: revisit this
+        // Support Blocks
+        if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {
+            return false;
+        }
+        // Support BitswapMessageEntry
+        if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {
+            return false;
+        }
+    }
+    return true;
+};
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.js.map
new file mode 100644
index 0000000..386e2be
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/utils/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.d.ts
new file mode 100644
index 0000000..49f5e4a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.d.ts
@@ -0,0 +1,28 @@
+/**
+ * SortedMap is a Map whose iterator order can be defined by the user
+ */
+export declare class SortedMap<Key, Value> extends Map<Key, Value> {
+    private readonly _cmp;
+    private _keys;
+    constructor(entries?: Array<[Key, Value]>, cmp?: (a: [Key, Value], b: [Key, Value]) => number);
+    /**
+     * Call update to update the position of the key when it should change.
+     * For example if the compare function sorts by the priority field, and the
+     * priority changes, call update.
+     * Call indexOf() to get the index _before_ the change happens.
+     */
+    update(i: number): void;
+    set(k: Key, v: Value): this;
+    clear(): void;
+    delete(k: Key): boolean;
+    indexOf(k: Key): number;
+    _find(k: Key): number;
+    keys(): IterableIterator<Key>;
+    values(): IterableIterator<Value>;
+    entries(): IterableIterator<[Key, Value]>;
+    [Symbol.iterator](): IterableIterator<[Key, Value]>;
+    forEach(cb: (entry: [Key, Value]) => void, thisArg?: SortedMap<Key, Value>): void;
+    _defaultSort(a: [Key, Value], b: [Key, Value]): 0 | 1 | -1;
+    _kCmp(a: Key, b: Key): number;
+}
+//# sourceMappingURL=sorted-map.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.d.ts.map
new file mode 100644
index 0000000..483e7b2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"sorted-map.d.ts","sourceRoot":"","sources":["../../../src/utils/sorted-map.ts"],"names":[],"mappings":"AACA;;GAEG;AACH,qBAAa,SAAS,CAAC,GAAG,EAAE,KAAK,CAAE,SAAQ,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC;IACxD,OAAO,CAAC,QAAQ,CAAC,IAAI,CAA8C;IACnE,OAAO,CAAC,KAAK,CAAO;gBAEP,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,MAAM;IAW9F;;;;;OAKG;IACH,MAAM,CAAE,CAAC,EAAE,MAAM,GAAG,IAAI;IAWxB,GAAG,CAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,GAAG,IAAI;IAkB5B,KAAK,IAAK,IAAI;IAKd,MAAM,CAAE,CAAC,EAAE,GAAG,GAAG,OAAO;IAUxB,OAAO,CAAE,CAAC,EAAE,GAAG,GAAG,MAAM;IAqBxB,KAAK,CAAE,CAAC,EAAE,GAAG,GAAG,MAAM;IAkBpB,IAAI,IAAK,gBAAgB,CAAC,GAAG,CAAC;IAQ9B,MAAM,IAAK,gBAAgB,CAAC,KAAK,CAAC;IAWlC,OAAO,IAAK,gBAAgB,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAW1C,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAK,gBAAgB,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAKtD,OAAO,CAAE,EAAE,EAAE,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE,OAAO,GAAE,SAAS,CAAC,GAAG,EAAE,KAAK,CAAQ,GAAG,IAAI;IAgBxF,YAAY,CAAE,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAM3D,KAAK,CAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,GAAG,MAAM;CAO/B"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.js b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.js
new file mode 100644
index 0000000..8646baf
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.js
@@ -0,0 +1,145 @@
+/**
+ * SortedMap is a Map whose iterator order can be defined by the user
+ */
+export class SortedMap extends Map {
+    constructor(entries, cmp) {
+        super();
+        this._cmp = cmp ?? this._defaultSort;
+        this._keys = [];
+        for (const [k, v] of entries ?? []) {
+            this.set(k, v);
+        }
+    }
+    /**
+     * Call update to update the position of the key when it should change.
+     * For example if the compare function sorts by the priority field, and the
+     * priority changes, call update.
+     * Call indexOf() to get the index _before_ the change happens.
+     */
+    update(i) {
+        if (i < 0 || i >= this._keys.length) {
+            return;
+        }
+        const k = this._keys[i];
+        this._keys.splice(i, 1);
+        const newIdx = this._find(k);
+        this._keys.splice(newIdx, 0, k);
+    }
+    set(k, v) {
+        // If the key is already in the map, remove it from the ordering and
+        // re-insert it below
+        if (this.has(k)) {
+            const i = this.indexOf(k);
+            this._keys.splice(i, 1);
+        }
+        // Update / insert the k/v into the map
+        super.set(k, v);
+        // Find the correct position of the newly inserted k/v in the order
+        const i = this._find(k);
+        this._keys.splice(i, 0, k);
+        return this;
+    }
+    clear() {
+        super.clear();
+        this._keys = [];
+    }
+    delete(k) {
+        if (!this.has(k)) {
+            return false;
+        }
+        const i = this.indexOf(k);
+        this._keys.splice(i, 1);
+        return super.delete(k);
+    }
+    indexOf(k) {
+        if (!this.has(k)) {
+            return -1;
+        }
+        const i = this._find(k);
+        if (this._keys[i] === k) {
+            return i;
+        }
+        // There may be more than one key with the same ordering
+        // eg { k1: <priority 5>, k2: <priority 5> }
+        // so scan outwards until the key matches
+        for (let j = 1; j < this._keys.length; j++) {
+            if (this._keys[i + j] === k)
+                return i + j;
+            if (this._keys[i - j] === k)
+                return i - j;
+        }
+        return -1; // should never happen for existing key
+    }
+    _find(k) {
+        let lower = 0;
+        let upper = this._keys.length;
+        while (lower < upper) {
+            const pivot = (lower + upper) >>> 1; // lower + (upper - lower) / 2
+            const cmp = this._kCmp(this._keys[pivot], k);
+            // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)
+            if (cmp < 0) { // pivot < k
+                lower = pivot + 1;
+            }
+            else if (cmp > 0) { // pivot > k
+                upper = pivot;
+            }
+            else { // pivot == k
+                return pivot;
+            }
+        }
+        return lower;
+    }
+    *keys() {
+        for (const k of this._keys) {
+            yield k;
+        }
+        return undefined;
+    }
+    *values() {
+        for (const k of this._keys) {
+            // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is
+            // incompatible with `Value`. Typechecker can't that this contains values
+            // for all the `_keys`. ts(2322)
+            yield this.get(k);
+        }
+        return undefined;
+    }
+    *entries() {
+        for (const k of this._keys) {
+            // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is
+            // incompatible with `Value`. Typechecker can't that this contains values
+            // for all the `_keys`. ts(2322)
+            yield [k, this.get(k)];
+        }
+        return undefined;
+    }
+    *[Symbol.iterator]() {
+        yield* this.entries();
+    }
+    // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void
+    forEach(cb, thisArg = this) {
+        if (cb == null) {
+            return;
+        }
+        for (const k of this._keys) {
+            const val = this.get(k);
+            if (val == null) {
+                throw new Error('Value cannot be undefined');
+            }
+            cb.apply(thisArg, [[k, val]]);
+        }
+    }
+    _defaultSort(a, b) {
+        if (a[0] < b[0])
+            return -1;
+        if (b[0] < a[0])
+            return 1;
+        return 0;
+    }
+    _kCmp(a, b) {
+        return this._cmp(
+        // @ts-expect-error - get may return undefined
+        [a, this.get(a)], [b, this.get(b)]);
+    }
+}
+//# sourceMappingURL=sorted-map.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.js.map b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.js.map
new file mode 100644
index 0000000..4b6def6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/sorted-map.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"sorted-map.js","sourceRoot":"","sources":["../../../src/utils/sorted-map.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.d.ts
new file mode 100644
index 0000000..744056c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.d.ts
@@ -0,0 +1,3 @@
+declare function varintEncoder(buf: number[]): Uint8Array;
+export default varintEncoder;
+//# sourceMappingURL=varint-encoder.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.d.ts.map
new file mode 100644
index 0000000..db5a219
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"varint-encoder.d.ts","sourceRoot":"","sources":["../../../src/utils/varint-encoder.ts"],"names":[],"mappings":"AAEA,iBAAS,aAAa,CAAE,GAAG,EAAE,MAAM,EAAE,GAAG,UAAU,CAejD;AAED,eAAe,aAAa,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.js b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.js
new file mode 100644
index 0000000..139cef6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.js
@@ -0,0 +1,16 @@
+import * as varint from 'varint';
+function varintEncoder(buf) {
+    let out = new Uint8Array(buf.reduce((acc, curr) => {
+        // @ts-expect-error types are wrong
+        return acc + varint.default.encodingLength(curr); // eslint-disable-line @typescript-eslint/restrict-plus-operands
+    }, 0));
+    let offset = 0;
+    for (const num of buf) {
+        out = varint.encode(num, out, offset);
+        // @ts-expect-error types are wrong
+        offset += varint.default.encodingLength(num); // eslint-disable-line @typescript-eslint/restrict-plus-operands
+    }
+    return out;
+}
+export default varintEncoder;
+//# sourceMappingURL=varint-encoder.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.js.map b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.js.map
new file mode 100644
index 0000000..e382427
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/utils/varint-encoder.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"varint-encoder.js","sourceRoot":"","sources":["../../../src/utils/varint-encoder.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,MAAM,QAAQ,CAAA;AAEhC,SAAS,aAAa,CAAE,GAAa;IACnC,IAAI,GAAG,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;QAChD,mCAAmC;QACnC,OAAO,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA,CAAC,gEAAgE;IACnH,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;IACN,IAAI,MAAM,GAAG,CAAC,CAAA;IAEd,KAAK,MAAM,GAAG,IAAI,GAAG,EAAE;QACrB,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,CAAA;QAErC,mCAAmC;QACnC,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAA,CAAC,gEAAgE;KAC9G;IAED,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,eAAe,aAAa,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.d.ts
new file mode 100644
index 0000000..a8f8241
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.d.ts
@@ -0,0 +1,42 @@
+import { Wantlist } from '../wantlist/index.js';
+import { MsgQueue } from './msg-queue.js';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { Network } from '../network.js';
+import type { Stats } from '../stats/index.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { CID } from 'multiformats/cid';
+import type { AbortOptions } from '@multiformats/multiaddr';
+import type { ProgressOptions } from 'progress-events';
+import type { BitswapWantBlockProgressEvents } from '../index.js';
+export declare class WantManager {
+    private readonly peers;
+    wantlist: Wantlist;
+    network: Network;
+    private readonly _peerId;
+    private readonly _log;
+    constructor(peerId: PeerId, network: Network, stats: Stats, libp2p: Libp2p);
+    _addEntries(cids: CID[], cancel: boolean, force?: boolean, options?: ProgressOptions<BitswapWantBlockProgressEvents>): void;
+    _startPeerHandler(peerId: PeerId): MsgQueue | undefined;
+    _stopPeerHandler(peerId: PeerId): void;
+    /**
+     * add all the cids to the wantlist
+     */
+    wantBlocks(cids: CID[], options?: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents>): void;
+    /**
+     * Remove blocks of all the given keys without respecting refcounts
+     */
+    unwantBlocks(cids: CID[]): void;
+    /**
+     * Cancel wanting all of the given keys
+     */
+    cancelWants(cids: CID[]): void;
+    /**
+     * Returns a list of all currently connected peers
+     */
+    connectedPeers(): string[];
+    connected(peerId: PeerId): void;
+    disconnected(peerId: PeerId): void;
+    start(): void;
+    stop(): void;
+}
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.d.ts.map
new file mode 100644
index 0000000..d657a25
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/want-manager/index.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAE/C,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAA;AAIzC,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;AAC5C,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAA;AAC9C,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AAEtD,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAC3C,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAA;AAC3D,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AACtD,OAAO,KAAK,EAAE,8BAA8B,EAAE,MAAM,aAAa,CAAA;AAEjE,qBAAa,WAAW;IACtB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAuB;IACtC,QAAQ,EAAE,QAAQ,CAAA;IAClB,OAAO,EAAE,OAAO,CAAA;IACvB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAQ;IAChC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAQ;gBAEhB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM;IAW3E,WAAW,CAAE,IAAI,EAAE,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,GAAE,eAAe,CAAC,8BAA8B,CAAM,GAAG,IAAI;IA2BhI,iBAAiB,CAAE,MAAM,EAAE,MAAM,GAAG,QAAQ,GAAG,SAAS;IAuBxD,gBAAgB,CAAE,MAAM,EAAE,MAAM,GAAG,IAAI;IAevC;;OAEG;IACH,UAAU,CAAE,IAAI,EAAE,GAAG,EAAE,EAAE,OAAO,GAAE,YAAY,GAAG,eAAe,CAAC,8BAA8B,CAAM,GAAG,IAAI;IAQ5G;;OAEG;IACH,YAAY,CAAE,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI;IAKhC;;OAEG;IACH,WAAW,CAAE,IAAI,EAAE,GAAG,EAAE,GAAG,IAAI;IAK/B;;OAEG;IACH,cAAc,IAAK,MAAM,EAAE;IAI3B,SAAS,CAAE,MAAM,EAAE,MAAM,GAAG,IAAI;IAIhC,YAAY,CAAE,MAAM,EAAE,MAAM,GAAG,IAAI;IAInC,KAAK,IAAK,IAAI;IAGd,IAAI,IAAK,IAAI;CAGd"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.js b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.js
new file mode 100644
index 0000000..98a4db3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.js
@@ -0,0 +1,113 @@
+import { BitswapMessage as Message } from '../message/index.js';
+import { Wantlist } from '../wantlist/index.js';
+import * as CONSTANTS from '../constants.js';
+import { MsgQueue } from './msg-queue.js';
+import { logger } from '../utils/index.js';
+import { base58btc } from 'multiformats/bases/base58';
+import { trackedMap } from '@libp2p/tracked-map';
+export class WantManager {
+    constructor(peerId, network, stats, libp2p) {
+        this.peers = trackedMap({
+            name: 'ipfs_bitswap_want_manager_peers',
+            metrics: libp2p.metrics
+        });
+        this.wantlist = new Wantlist(stats, libp2p);
+        this.network = network;
+        this._peerId = peerId;
+        this._log = logger(peerId, 'want');
+    }
+    _addEntries(cids, cancel, force, options = {}) {
+        const entries = cids.map((cid, i) => {
+            return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);
+        });
+        entries.forEach((e) => {
+            // add changes to our wantlist
+            if (e.cancel) {
+                if (force === true) {
+                    this.wantlist.removeForce(e.cid.toString(base58btc));
+                }
+                else {
+                    this.wantlist.remove(e.cid);
+                }
+            }
+            else {
+                this._log('adding to wantlist');
+                // TODO: Figure out the wantType
+                // @ts-expect-error - requires wantType
+                this.wantlist.add(e.cid, e.priority);
+            }
+        });
+        // broadcast changes
+        for (const p of this.peers.values()) {
+            p.addEntries(entries, options);
+        }
+    }
+    _startPeerHandler(peerId) {
+        let mq = this.peers.get(peerId.toString());
+        if (mq != null) {
+            mq.refcnt++;
+            return;
+        }
+        mq = new MsgQueue(this._peerId, peerId, this.network);
+        // new peer, give them the full wantlist
+        const fullwantlist = new Message(true);
+        for (const entry of this.wantlist.entries()) {
+            fullwantlist.addEntry(entry[1].cid, entry[1].priority);
+        }
+        mq.addMessage(fullwantlist);
+        this.peers.set(peerId.toString(), mq);
+        return mq;
+    }
+    _stopPeerHandler(peerId) {
+        const mq = this.peers.get(peerId.toString());
+        if (mq == null) {
+            return;
+        }
+        mq.refcnt--;
+        if (mq.refcnt > 0) {
+            return;
+        }
+        this.peers.delete(peerId.toString());
+    }
+    /**
+     * add all the cids to the wantlist
+     */
+    wantBlocks(cids, options = {}) {
+        this._addEntries(cids, false, false, options);
+        options.signal?.addEventListener('abort', () => {
+            this.cancelWants(cids);
+        });
+    }
+    /**
+     * Remove blocks of all the given keys without respecting refcounts
+     */
+    unwantBlocks(cids) {
+        this._log('unwant blocks: %s', cids.length);
+        this._addEntries(cids, true, true);
+    }
+    /**
+     * Cancel wanting all of the given keys
+     */
+    cancelWants(cids) {
+        this._log('cancel wants: %s', cids.length);
+        this._addEntries(cids, true);
+    }
+    /**
+     * Returns a list of all currently connected peers
+     */
+    connectedPeers() {
+        return Array.from(this.peers.keys());
+    }
+    connected(peerId) {
+        this._startPeerHandler(peerId);
+    }
+    disconnected(peerId) {
+        this._stopPeerHandler(peerId);
+    }
+    start() {
+    }
+    stop() {
+        this.peers.forEach((mq) => { this.disconnected(mq.peerId); });
+    }
+}
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.js.map
new file mode 100644
index 0000000..b5fcb7d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/want-manager/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.d.ts
new file mode 100644
index 0000000..b02f74a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.d.ts
@@ -0,0 +1,22 @@
+import { BitswapMessage as Message } from '../message/index.js';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { BitswapNetworkWantProgressEvents, Network } from '../network.js';
+import type { CID } from 'multiformats/cid';
+import type { ProgressOptions } from 'progress-events';
+import type { BitswapWantBlockProgressEvents } from '../index.js';
+export declare class MsgQueue {
+    peerId: PeerId;
+    refcnt: number;
+    private readonly network;
+    private _entries;
+    private readonly _log;
+    constructor(selfPeerId: PeerId, otherPeerId: PeerId, network: Network);
+    addMessage(msg: Message, options?: ProgressOptions<BitswapNetworkWantProgressEvents>): void;
+    addEntries(entries: Array<{
+        cid: CID;
+        priority: number;
+    }>, options?: ProgressOptions<BitswapWantBlockProgressEvents>): void;
+    sendEntries(options?: ProgressOptions<BitswapWantBlockProgressEvents>): void;
+    send(msg: Message, options?: ProgressOptions<BitswapNetworkWantProgressEvents>): Promise<void>;
+}
+//# sourceMappingURL=msg-queue.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.d.ts.map
new file mode 100644
index 0000000..024b8cd
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"msg-queue.d.ts","sourceRoot":"","sources":["../../../src/want-manager/msg-queue.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,IAAI,OAAO,EAAE,MAAM,qBAAqB,CAAA;AAG/D,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,gCAAgC,EAAE,OAAO,EAAE,MAAM,eAAe,CAAA;AAC9E,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAE3C,OAAO,KAAK,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAA;AACtD,OAAO,KAAK,EAAE,8BAA8B,EAAE,MAAM,aAAa,CAAA;AAEjE,qBAAa,QAAQ;IACZ,MAAM,EAAE,MAAM,CAAA;IACd,MAAM,EAAE,MAAM,CAAA;IACrB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAS;IACjC,OAAO,CAAC,QAAQ,CAAyD;IACzE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAQ;gBAEhB,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO;IAStE,UAAU,CAAE,GAAG,EAAE,OAAO,EAAE,OAAO,GAAE,eAAe,CAAC,gCAAgC,CAAM,GAAG,IAAI;IAQhG,UAAU,CAAE,OAAO,EAAE,KAAK,CAAC;QAAE,GAAG,EAAE,GAAG,CAAC;QAAC,QAAQ,EAAE,MAAM,CAAA;KAAE,CAAC,EAAE,OAAO,GAAE,eAAe,CAAC,8BAA8B,CAAM,GAAG,IAAI;IAKhI,WAAW,CAAE,OAAO,GAAE,eAAe,CAAC,8BAA8B,CAAM,GAAG,IAAI;IAiB3E,IAAI,CAAE,GAAG,EAAE,OAAO,EAAE,OAAO,GAAE,eAAe,CAAC,gCAAgC,CAAM,GAAG,OAAO,CAAC,IAAI,CAAC;CAe1G"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.js b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.js
new file mode 100644
index 0000000..f3d158e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.js
@@ -0,0 +1,55 @@
+import debounce from 'just-debounce-it';
+import { BitswapMessage as Message } from '../message/index.js';
+import { logger } from '../utils/index.js';
+import { wantlistSendDebounceMs } from '../constants.js';
+export class MsgQueue {
+    constructor(selfPeerId, otherPeerId, network) {
+        this.peerId = otherPeerId;
+        this.network = network;
+        this.refcnt = 1;
+        this._entries = [];
+        this._log = logger(selfPeerId, 'msgqueue');
+        this.sendEntries = debounce(this.sendEntries.bind(this), wantlistSendDebounceMs);
+    }
+    addMessage(msg, options = {}) {
+        if (msg.empty) {
+            return;
+        }
+        void this.send(msg, options);
+    }
+    addEntries(entries, options = {}) {
+        this._entries = this._entries.concat(entries);
+        this.sendEntries(options);
+    }
+    sendEntries(options = {}) {
+        if (this._entries.length === 0) {
+            return;
+        }
+        const msg = new Message(false);
+        this._entries.forEach((entry) => {
+            if (entry.cancel === true) {
+                msg.cancel(entry.cid);
+            }
+            else {
+                msg.addEntry(entry.cid, entry.priority);
+            }
+        });
+        this._entries = [];
+        this.addMessage(msg, options);
+    }
+    async send(msg, options = {}) {
+        try {
+            await this.network.connectTo(this.peerId, options);
+        }
+        catch (err) {
+            this._log.error('cant connect to peer %p: %s', this.peerId, err.message);
+            return;
+        }
+        this._log('sending message to peer %p', this.peerId);
+        // Note: Don't wait for sendMessage() to complete
+        this.network.sendMessage(this.peerId, msg, options).catch((err) => {
+            this._log.error('send error', err);
+        });
+    }
+}
+//# sourceMappingURL=msg-queue.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.js.map b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.js.map
new file mode 100644
index 0000000..ba1e81a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/want-manager/msg-queue.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"msg-queue.js","sourceRoot":"","sources":["../../../src/want-manager/msg-queue.ts"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,kBAAkB,CAAA;AACvC,OAAO,EAAE,cAAc,IAAI,OAAO,EAAE,MAAM,qBAAqB,CAAA;AAC/D,OAAO,EAAE,MAAM,EAAE,MAAM,mBAAmB,CAAA;AAC1C,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAA;AAQxD,MAAM,OAAO,QAAQ;IAOnB,YAAa,UAAkB,EAAE,WAAmB,EAAE,OAAgB;QACpE,IAAI,CAAC,MAAM,GAAG,WAAW,CAAA;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;QACf,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;QAClB,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;QAC1C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,sBAAsB,CAAC,CAAA;IAClF,CAAC;IAED,UAAU,CAAE,GAAY,EAAE,UAA6D,EAAE;QACvF,IAAI,GAAG,CAAC,KAAK,EAAE;YACb,OAAM;SACP;QAED,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IAC9B,CAAC;IAED,UAAU,CAAE,OAA8C,EAAE,UAA2D,EAAE;QACvH,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;QAC7C,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;IAC3B,CAAC;IAED,WAAW,CAAE,UAA2D,EAAE;QACxE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YAC9B,OAAM;SACP;QAED,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,KAAK,CAAC,CAAA;QAC9B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC9B,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,EAAE;gBACzB,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;aACtB;iBAAM;gBACL,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAA;aACxC;QACH,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;QAClB,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IAC/B,CAAC;IAED,KAAK,CAAC,IAAI,CAAE,GAAY,EAAE,UAA6D,EAAE;QACvF,IAAI;YACF,MAAM,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;SACnD;QAAC,OAAO,GAAQ,EAAE;YACjB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,OAAO,CAAC,CAAA;YACxE,OAAM;SACP;QAED,IAAI,CAAC,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAEpD,iDAAiD;QACjD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YAChE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,CAAA;QACpC,CAAC,CAAC,CAAA;IACJ,CAAC;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.d.ts
new file mode 100644
index 0000000..7a1f130
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.d.ts
@@ -0,0 +1,15 @@
+import type { CID } from 'multiformats/cid';
+import type { Message } from '../message/message';
+export declare class WantListEntry {
+    private _refCounter;
+    cid: CID;
+    priority: number;
+    wantType: Message.Wantlist.WantType;
+    constructor(cid: CID, priority: number, wantType: Message.Wantlist.WantType);
+    inc(): void;
+    dec(): void;
+    hasRefs(): boolean;
+    get [Symbol.toStringTag](): string;
+    equals(other: any): boolean;
+}
+//# sourceMappingURL=entry.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.d.ts.map
new file mode 100644
index 0000000..3bf4236
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"entry.d.ts","sourceRoot":"","sources":["../../../src/wantlist/entry.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAC3C,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAA;AAEjD,qBAAa,aAAa;IACxB,OAAO,CAAC,WAAW,CAAQ;IACpB,GAAG,EAAE,GAAG,CAAA;IACR,QAAQ,EAAE,MAAM,CAAA;IAChB,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAA;gBAE7B,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ;IAS5E,GAAG,IAAK,IAAI;IAIZ,GAAG,IAAK,IAAI;IAIZ,OAAO,IAAK,OAAO;IAKnB,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,IAAK,MAAM,CAGlC;IAED,MAAM,CAAE,KAAK,EAAE,GAAG,GAAG,OAAO;CAM7B"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.js b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.js
new file mode 100644
index 0000000..0a8d279
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.js
@@ -0,0 +1,31 @@
+import { base58btc } from 'multiformats/bases/base58';
+export class WantListEntry {
+    constructor(cid, priority, wantType) {
+        // Keep track of how many requests we have for this key
+        this._refCounter = 1;
+        this.cid = cid;
+        this.priority = priority ?? 1;
+        this.wantType = wantType;
+    }
+    inc() {
+        this._refCounter += 1;
+    }
+    dec() {
+        this._refCounter = Math.max(0, this._refCounter - 1);
+    }
+    hasRefs() {
+        return this._refCounter > 0;
+    }
+    // So that console.log prints a nice description of this object
+    get [Symbol.toStringTag]() {
+        const cidStr = this.cid.toString(base58btc);
+        return `WantlistEntry <key: ${cidStr}, priority: ${this.priority}, refs: ${this._refCounter}>`;
+    }
+    equals(other) {
+        return (this._refCounter === other._refCounter) &&
+            this.cid.equals(other.cid) &&
+            this.priority === other.priority &&
+            this.wantType === other.wantType;
+    }
+}
+//# sourceMappingURL=entry.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.js.map b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.js.map
new file mode 100644
index 0000000..a1f709e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/entry.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"entry.js","sourceRoot":"","sources":["../../../src/wantlist/entry.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAA;AAIrD,MAAM,OAAO,aAAa;IAMxB,YAAa,GAAQ,EAAE,QAAgB,EAAE,QAAmC;QAC1E,uDAAuD;QACvD,IAAI,CAAC,WAAW,GAAG,CAAC,CAAA;QAEpB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QACd,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,CAAC,CAAA;QAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAA;IAC1B,CAAC;IAED,GAAG;QACD,IAAI,CAAC,WAAW,IAAI,CAAC,CAAA;IACvB,CAAC;IAED,GAAG;QACD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,CAAA;IACtD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC,CAAA;IAC7B,CAAC;IAED,+DAA+D;IAC/D,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;QACtB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;QAC3C,OAAO,uBAAuB,MAAM,eAAe,IAAI,CAAC,QAAQ,WAAW,IAAI,CAAC,WAAW,GAAG,CAAA;IAChG,CAAC;IAED,MAAM,CAAE,KAAU;QAChB,OAAO,CAAC,IAAI,CAAC,WAAW,KAAK,KAAK,CAAC,WAAW,CAAC;YAC7C,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC;YAC1B,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ;YAChC,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,CAAA;IACpC,CAAC;CACF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.d.ts b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.d.ts
new file mode 100644
index 0000000..dfeef47
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.d.ts
@@ -0,0 +1,21 @@
+import { WantListEntry as Entry } from './entry.js';
+import { Message } from '../message/message.js';
+import type { Stats } from '../stats/index.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { CID } from 'multiformats/cid';
+export declare class Wantlist {
+    static Entry: typeof Entry;
+    private readonly set;
+    private readonly _stats?;
+    constructor(stats?: Stats, libp2p?: Libp2p);
+    get length(): number;
+    add(cid: CID, priority: number, wantType: Message.Wantlist.WantType): void;
+    remove(cid: CID): void;
+    removeForce(cidStr: string): void;
+    forEach(fn: (entry: Entry, key: string) => void): void;
+    entries(): IterableIterator<[string, Entry]>;
+    sortedEntries(): Map<string, Entry>;
+    contains(cid: CID): boolean;
+    get(cid: CID): Entry | undefined;
+}
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.d.ts.map
new file mode 100644
index 0000000..025cd44
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../../src/wantlist/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,aAAa,IAAI,KAAK,EAAE,MAAM,YAAY,CAAA;AAEnD,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAA;AAE/C,OAAO,KAAK,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAA;AAC9C,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AACtD,OAAO,KAAK,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAe3C,qBAAa,QAAQ;IACnB,MAAM,CAAC,KAAK,eAAQ;IAEpB,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAoB;IACxC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAO;gBAElB,KAAK,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,EAAE,MAAM;IAU3C,IAAI,MAAM,IAAK,MAAM,CAEpB;IAED,GAAG,CAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,QAAQ,CAAC,QAAQ,GAAG,IAAI;IAoB3E,MAAM,CAAE,GAAG,EAAE,GAAG,GAAG,IAAI;IAqBvB,WAAW,CAAE,MAAM,EAAE,MAAM,GAAG,IAAI;IAMlC,OAAO,CAAE,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,KAAK,IAAI,GAAG,IAAI;IAIvD,OAAO,IAAK,gBAAgB,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAI7C,aAAa,IAAK,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC;IAMpC,QAAQ,CAAE,GAAG,EAAE,GAAG,GAAG,OAAO;IAK5B,GAAG,CAAE,GAAG,EAAE,GAAG,GAAG,KAAK,GAAG,SAAS;CAIlC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.js b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.js
new file mode 100644
index 0000000..2440438
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.js
@@ -0,0 +1,89 @@
+import { WantListEntry as Entry } from './entry.js';
+import { base58btc } from 'multiformats/bases/base58';
+import { Message } from '../message/message.js';
+import { trackedMap } from '@libp2p/tracked-map';
+const WantType = {
+    Block: Message.Wantlist.WantType.Block,
+    Have: Message.Wantlist.WantType.Have
+};
+const sortBy = (fn, list) => {
+    return Array.prototype.slice.call(list, 0).sort((a, b) => {
+        const aa = fn(a);
+        const bb = fn(b);
+        return aa < bb ? -1 : aa > bb ? 1 : 0;
+    });
+};
+export class Wantlist {
+    constructor(stats, libp2p) {
+        this.set = (libp2p != null)
+            ? trackedMap({
+                name: 'ipfs_bitswap_wantlist',
+                metrics: libp2p.metrics
+            })
+            : new Map();
+        this._stats = stats;
+    }
+    get length() {
+        return this.set.size;
+    }
+    add(cid, priority, wantType) {
+        const cidStr = cid.toString(base58btc);
+        const entry = this.set.get(cidStr);
+        if (entry != null) {
+            entry.inc();
+            entry.priority = priority;
+            // We can only overwrite want-have with want-block
+            if (entry.wantType === WantType.Have && wantType === WantType.Block) {
+                entry.wantType = wantType;
+            }
+        }
+        else {
+            this.set.set(cidStr, new Entry(cid, priority, wantType));
+            if (this._stats != null) {
+                this._stats.push(undefined, 'wantListSize', 1);
+            }
+        }
+    }
+    remove(cid) {
+        const cidStr = cid.toString(base58btc);
+        const entry = this.set.get(cidStr);
+        if (entry == null) {
+            return;
+        }
+        entry.dec();
+        // only delete when no refs are held
+        if (entry.hasRefs()) {
+            return;
+        }
+        this.set.delete(cidStr);
+        if (this._stats != null) {
+            this._stats.push(undefined, 'wantListSize', -1);
+        }
+    }
+    removeForce(cidStr) {
+        if (this.set.has(cidStr)) {
+            this.set.delete(cidStr);
+        }
+    }
+    forEach(fn) {
+        this.set.forEach(fn);
+    }
+    entries() {
+        return this.set.entries();
+    }
+    sortedEntries() {
+        // TODO: Figure out if this is an actual bug.
+        // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'
+        return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));
+    }
+    contains(cid) {
+        const cidStr = cid.toString(base58btc);
+        return this.set.has(cidStr);
+    }
+    get(cid) {
+        const cidStr = cid.toString(base58btc);
+        return this.set.get(cidStr);
+    }
+}
+Wantlist.Entry = Entry;
+//# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.js.map b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.js.map
new file mode 100644
index 0000000..10ad81b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/src/wantlist/index.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/wantlist/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.d.ts
new file mode 100644
index 0000000..ba96f25
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=get-many.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.d.ts.map
new file mode 100644
index 0000000..a629686
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"get-many.d.ts","sourceRoot":"","sources":["../../../test/benchmarks/get-many.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.js b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.js
new file mode 100644
index 0000000..cec35d1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.js
@@ -0,0 +1,11 @@
+/* eslint-disable no-console */
+import { distributionTest } from '../utils/distribution-test';
+import { print } from './helpers/print-swarm-results';
+import { EventEmitter } from 'events';
+void (async function () {
+    const emitter = new EventEmitter();
+    print('10 nodes, 10 blocks, 5 iterations', emitter);
+    await distributionTest(10, 10, 5, emitter);
+    console.log('Finished. Can kill now...');
+})();
+//# sourceMappingURL=get-many.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.js.map b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.js.map
new file mode 100644
index 0000000..2f54570
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/get-many.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"get-many.js","sourceRoot":"","sources":["../../../test/benchmarks/get-many.ts"],"names":[],"mappings":"AACA,+BAA+B;AAE/B,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAA;AAC7D,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAA;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AAErC,KAAK,CAAC,KAAK;IACT,MAAM,OAAO,GAAG,IAAI,YAAY,EAAE,CAAA;IAElC,KAAK,CAAC,mCAAmC,EAAE,OAAO,CAAC,CAAA;IAEnD,MAAM,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAE1C,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;AAC1C,CAAC,CAAC,EAAE,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.d.ts
new file mode 100644
index 0000000..2cc9b27
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.d.ts
@@ -0,0 +1,3 @@
+import type { EventEmitter } from 'node:events';
+export declare const print: (suite: any, emitter: EventEmitter) => void;
+//# sourceMappingURL=print-swarm-results.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.d.ts.map
new file mode 100644
index 0000000..e554d02
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"print-swarm-results.d.ts","sourceRoot":"","sources":["../../../../test/benchmarks/helpers/print-swarm-results.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,aAAa,CAAA;AAG/C,eAAO,MAAM,KAAK,UAAW,GAAG,WAAW,YAAY,KAAG,IA+BzD,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.js b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.js
new file mode 100644
index 0000000..5d0f2a5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.js
@@ -0,0 +1,34 @@
+/* eslint-disable no-console */
+import stats from 'stats-lite';
+export const print = (suite, emitter) => {
+    const elapseds = [];
+    emitter.once('start', () => {
+        console.log('\n------------------------');
+        console.log(suite);
+        console.log('started');
+    });
+    emitter.once('all connected', () => {
+        console.log('all nodes connected to each other');
+    });
+    emitter.on('getting many', () => {
+        process.stdout.write('.');
+    });
+    emitter.once('stop', () => {
+        console.log('\nstopping');
+    });
+    emitter.once('stopped', () => {
+        console.log('stopped');
+        console.log('stats:');
+        console.log('---------');
+        console.log('mean: %s', stats.mean(elapseds));
+        console.log('median: %s', stats.median(elapseds));
+        console.log('variance: %s', stats.variance(elapseds));
+        console.log('standard deviation: %s', stats.stdev(elapseds));
+        console.log('85th percentile: %s', stats.percentile(elapseds, 0.85));
+    });
+    emitter.on('got block', (elapsed) => {
+        process.stdout.write('+');
+        elapseds.push(elapsed);
+    });
+};
+//# sourceMappingURL=print-swarm-results.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.js.map b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.js.map
new file mode 100644
index 0000000..46fe95b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/benchmarks/helpers/print-swarm-results.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"print-swarm-results.js","sourceRoot":"","sources":["../../../../test/benchmarks/helpers/print-swarm-results.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAG/B,OAAO,KAAK,MAAM,YAAY,CAAA;AAE9B,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,KAAU,EAAE,OAAqB,EAAQ,EAAE;IAC/D,MAAM,QAAQ,GAAa,EAAE,CAAA;IAC7B,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;QACzB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QACzC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACjC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAA;IAClD,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;QACxB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;QAC3B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACtB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACrB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;QACxB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC7C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;QACjD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrD,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC5D,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAA;IACtE,CAAC,CAAC,CAAA;IAEF,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,EAAE;QAClC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACzB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.d.ts
new file mode 100644
index 0000000..9f90843
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=bitswap-mock-internals.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.d.ts.map
new file mode 100644
index 0000000..33a92f4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-mock-internals.d.ts","sourceRoot":"","sources":["../../test/bitswap-mock-internals.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.js b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.js
new file mode 100644
index 0000000..267281d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.js
@@ -0,0 +1,385 @@
+/* eslint-env mocha */
+/* eslint max-nested-callbacks: ["error", 5] */
+import { expect } from 'aegir/chai';
+import drain from 'it-drain';
+import { BitswapMessage as Message } from '../src/message/index.js';
+import { DefaultBitswap } from '../src/bitswap.js';
+import { CID } from 'multiformats/cid';
+import delay from 'delay';
+import { base58btc } from 'multiformats/bases/base58';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { isPeerId } from '@libp2p/interface-peer-id';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { mockNetwork, applyNetwork, mockLibp2pNode } from './utils/mocks.js';
+import { storeHasBlocks } from './utils/store-has-blocks.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { makePeerIds } from './utils/make-peer-id.js';
+import { orderedFinish } from './utils/helpers.js';
+const DAG_PB_CODEC = 0x70;
+const RAW_CODEC = 0x50;
+function wantsBlock(cid, bitswap) {
+    for (const [, value] of bitswap.getWantlist()) {
+        if (value.cid.equals(cid)) {
+            return true;
+        }
+    }
+    return false;
+}
+describe('bitswap with mocks', function () {
+    this.timeout(10 * 1000);
+    let blockstore;
+    let blocks;
+    let ids;
+    before(async () => {
+        blockstore = new MemoryBlockstore();
+        blocks = await makeBlocks(15);
+        ids = await makePeerIds(2);
+    });
+    describe('receive message', () => {
+        it('simple block message', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const other = ids[1];
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            bs.wm.wantBlocks([b1.cid, b2.cid]);
+            const msg = new Message(false);
+            msg.addBlock(b1.cid, b1.block);
+            msg.addBlock(b2.cid, b2.block);
+            await bs._receiveMessage(other, msg);
+            const blks = await Promise.all([
+                b1.cid, b2.cid
+            ].map(async (cid) => await blockstore.get(cid)));
+            expect(blks[0]).to.eql(b1.block);
+            expect(blks[1]).to.eql(b2.block);
+            const ledger = bs.ledgerForPeer(other);
+            if (ledger == null) {
+                throw new Error('No ledger found for peer');
+            }
+            expect(ledger.peer.toString()).to.equal(other.toString());
+            expect(ledger.value).to.equal(0);
+            expect(ledger.sent).to.equal(0);
+            expect(ledger.recv).to.equal(96);
+            expect(ledger.exchanged).to.equal(2);
+            await bs.stop();
+        });
+        it('simple want message', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const other = ids[1];
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            const msg = new Message(false);
+            msg.addEntry(b1.cid, 1);
+            msg.addEntry(b2.cid, 1);
+            await bs._receiveMessage(other, msg);
+            const wl = bs.wantlistForPeer(other);
+            expect(wl.has(b1.cid.toString(base58btc))).to.eql(true);
+            expect(wl.has(b2.cid.toString(base58btc))).to.eql(true);
+            await bs.stop();
+        });
+        it('multi peer', async function () {
+            this.timeout(80 * 1000);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const others = await makePeerIds(5);
+            const blocks = await makeBlocks(10);
+            const messages = await Promise.all(new Array(5).fill(0).map((_, i) => {
+                const msg = new Message(false);
+                msg.addBlock(blocks[i].cid, blocks[i].block);
+                msg.addBlock(blocks[i + 5].cid, blocks[i + 5].block);
+                return msg;
+            }));
+            let i = 0;
+            for (const other of others) {
+                const msg = messages[i];
+                i++;
+                const cids = [...msg.blocks.keys()].map(k => CID.parse(k));
+                bs.wm.wantBlocks(cids);
+                await bs._receiveMessage(other, msg);
+                await storeHasBlocks(msg, blockstore);
+            }
+            await bs.stop();
+        });
+        it('ignore unwanted blocks', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const other = ids[1];
+            const b1 = blocks[2];
+            const b2 = blocks[3];
+            const b3 = blocks[4];
+            bs.wm.wantBlocks([b2.cid]);
+            const msg = new Message(false);
+            msg.addBlock(b1.cid, b1.block);
+            msg.addBlock(b2.cid, b2.block);
+            msg.addBlock(b3.cid, b3.block);
+            await bs._receiveMessage(other, msg);
+            const res = await Promise.all([b1.cid, b2.cid, b3.cid]
+                .map(async (cid) => {
+                try {
+                    await blockstore.get(cid);
+                    return true;
+                }
+                catch {
+                    return false;
+                }
+            }));
+            expect(res).to.eql([false, true, false]);
+            const ledger = bs.ledgerForPeer(other);
+            if (ledger == null) {
+                throw new Error('No ledger found for peer');
+            }
+            expect(ledger.peer.toString()).to.equal(other.toString());
+            expect(ledger.value).to.equal(0);
+            // Note: Keeping track of received bytes for blocks affects the
+            // debt ratio, which in future may be used as part of fairness
+            // algorithms when prioritizing who to send blocks to.
+            // So we may want to revise whether we record received blocks from
+            // a peer even if we didn't ask for the blocks.
+            // For now keeping it liks this to match the go implementation:
+            // https://github.com/ipfs/go-bitswap/blob/acc22c283722c15436120ae522c8e8021d0b06f8/bitswap.go#L293
+            expect(ledger.sent).to.equal(0);
+            expect(ledger.recv).to.equal(144);
+            expect(ledger.exchanged).to.equal(3);
+            await bs.stop();
+        });
+    });
+    describe('get', () => {
+        it('fails on requesting empty block', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            try {
+                // @ts-expect-error we want this to fail
+                await bs.want(null);
+            }
+            catch (err) {
+                expect(err).to.exist();
+                expect(err.message).to.equal('Not a valid cid');
+            }
+        });
+        it('block exists locally', async () => {
+            const block = blocks[4];
+            await blockstore.put(block.cid, block.block);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            expect(await bs.want(block.cid)).to.equalBytes(block.block);
+        });
+        it('blocks exist locally', async () => {
+            const b1 = blocks[3];
+            const b2 = blocks[14];
+            const b3 = blocks[13];
+            await drain(blockstore.putMany([{ cid: b1.cid, block: b1.block }, { cid: b2.cid, block: b2.block }, { cid: b3.cid, block: b3.block }]));
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const retrievedBlocks = await Promise.all([b1.cid, b2.cid, b3.cid].map(async (cid) => await bs.want(cid)));
+            expect(retrievedBlocks).to.be.eql([b1.block, b2.block, b3.block]);
+        });
+        it('getMany', async () => {
+            const b1 = blocks[5];
+            const b2 = blocks[6];
+            const b3 = blocks[7];
+            await drain(blockstore.putMany([{ cid: b1.cid, block: b1.block }, { cid: b2.cid, block: b2.block }, { cid: b3.cid, block: b3.block }]));
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const block1 = await bs.want(b1.cid);
+            expect(block1).to.equalBytes(b1.block);
+            const block2 = await bs.want(b2.cid);
+            expect(block2).to.equalBytes(b2.block);
+            const block3 = await bs.want(b3.cid);
+            expect(block3).to.equalBytes(b3.block);
+        });
+        it('block is added locally afterwards', async () => {
+            const finish = orderedFinish(2);
+            const block = blocks[9];
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const net = mockNetwork();
+            bs.network = net;
+            bs.wm.network = net;
+            bs.engine.network = net;
+            await bs.start();
+            const get = bs.want(block.cid);
+            setTimeout(() => {
+                finish(1);
+                void bs.put(block.cid, block.block);
+            }, 200);
+            const res = await get;
+            expect(res).to.equalBytes(block.block);
+            finish(2);
+            finish.assert();
+            await bs.stop();
+        });
+        it('block is sent after local add', async () => {
+            const me = ids[0];
+            const other = ids[1];
+            const block = blocks[10];
+            const n1 = {
+                // @ts-expect-error incorrect return type
+                async connectTo(id) {
+                    if (!(isPeerId(id))) {
+                        throw new Error('Not a peer id');
+                    }
+                    if (id.toString() !== other.toString()) {
+                        throw new Error('unknown peer');
+                    }
+                    await Promise.resolve();
+                },
+                async sendMessage(id, msg) {
+                    if (id.toString() === other.toString()) {
+                        await bs2._receiveMessage(me, msg);
+                        return;
+                    }
+                    throw new Error('unknown peer');
+                },
+                async start() {
+                    await Promise.resolve();
+                },
+                async stop() {
+                    await Promise.resolve();
+                },
+                async findAndConnect(cid) {
+                    await Promise.resolve();
+                },
+                async provide(cid) {
+                    await Promise.resolve();
+                }
+            };
+            const n2 = {
+                // @ts-expect-error incorrect return type
+                async connectTo(id) {
+                    if (!(isPeerId(id))) {
+                        throw new Error('Not a peer id');
+                    }
+                    if (id.toString() !== me.toString()) {
+                        throw new Error('unknown peer');
+                    }
+                    await Promise.resolve();
+                },
+                async sendMessage(id, msg) {
+                    if (id.toString() === me.toString()) {
+                        await bs1._receiveMessage(other, msg);
+                        return;
+                    }
+                    throw new Error('unknown peer');
+                },
+                async start() {
+                    await Promise.resolve();
+                },
+                async stop() {
+                    await Promise.resolve();
+                },
+                async findAndConnect(cid) {
+                    await Promise.resolve();
+                },
+                async provide(cid) {
+                    await Promise.resolve();
+                }
+            };
+            // Create and start bs1
+            const bs1 = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            applyNetwork(bs1, n1);
+            await bs1.start();
+            // Create and start bs2
+            const bs2 = new DefaultBitswap(mockLibp2pNode(), new MemoryBlockstore());
+            applyNetwork(bs2, n2);
+            await bs2.start();
+            bs1._onPeerConnected(other);
+            bs2._onPeerConnected(me);
+            const p1 = bs1.want(block.cid);
+            setTimeout(() => {
+                void bs2.put(block.cid, block.block);
+            }, 1000);
+            const b1 = await p1;
+            expect(b1).to.equalBytes(block.block);
+            await bs1.stop();
+            await bs2.stop();
+        });
+        it('double get', async () => {
+            const block = blocks[11];
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const resP = Promise.all([
+                bs.want(block.cid),
+                bs.want(block.cid)
+            ]);
+            void bs.put(block.cid, block.block);
+            const res = await resP;
+            expect(res[0]).to.equalBytes(block.block);
+            expect(res[1]).to.equalBytes(block.block);
+        });
+        it('gets the same block data with different CIDs', async () => {
+            const block = blocks[11];
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            expect(block).to.have.nested.property('cid.code', DAG_PB_CODEC);
+            expect(block).to.have.nested.property('cid.version', 0);
+            const cid1 = CID.create(0, DAG_PB_CODEC, block.cid.multihash);
+            const cid2 = CID.createV1(DAG_PB_CODEC, block.cid.multihash);
+            const cid3 = CID.createV1(RAW_CODEC, block.cid.multihash);
+            const resP = Promise.all([
+                bs.want(cid1),
+                bs.want(cid2),
+                bs.want(cid3)
+            ]);
+            void bs.put(block.cid, block.block);
+            const res = await resP;
+            // blocks should have the requested CID but with the same data
+            expect(res[0]).to.equalBytes(block.block);
+            expect(res[1]).to.equalBytes(block.block);
+            expect(res[2]).to.equalBytes(block.block);
+        });
+        it('removes a block from the wantlist when the request is aborted', async () => {
+            const [block] = await makeBlocks(1);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const controller = new AbortController();
+            const p = bs.want(block.cid, {
+                signal: controller.signal
+            });
+            await delay(1000);
+            expect(wantsBlock(block.cid, bs)).to.be.true();
+            controller.abort();
+            await expect(p).to.eventually.rejectedWith(/aborted/);
+            expect(wantsBlock(block.cid, bs)).to.be.false();
+        });
+        it('block should still be in the wantlist if only one request is aborted', async () => {
+            const [block] = await makeBlocks(1);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const controller = new AbortController();
+            // request twice
+            const p1 = bs.want(block.cid, {
+                signal: controller.signal
+            });
+            const p2 = bs.want(block.cid);
+            await delay(100);
+            // should want the block
+            expect(wantsBlock(block.cid, bs)).to.be.true();
+            // abort one request
+            controller.abort();
+            await expect(p1).to.eventually.rejectedWith(/aborted/);
+            // here comes the block
+            await bs.put(block.cid, block.block);
+            // should still want it
+            expect(wantsBlock(block.cid, bs)).to.be.true();
+            // second request should resolve with the block
+            expect(await p2).to.equalBytes(block.block);
+            // should not be in the want list any more
+            expect(wantsBlock(block.cid, bs)).to.be.false();
+        });
+    });
+    describe('unwant', () => {
+        it('removes blocks that are wanted multiple times', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const b = blocks[12];
+            const p = Promise.all([
+                bs.want(b.cid),
+                bs.want(b.cid)
+            ]);
+            setTimeout(() => { bs.unwant(b.cid); }, 1e3);
+            await expect(p).to.eventually.be.rejected();
+            await bs.stop();
+        });
+    });
+    describe('ledgerForPeer', () => {
+        it('returns null for unknown peer', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const id = await createEd25519PeerId();
+            const ledger = bs.ledgerForPeer(id);
+            expect(ledger).to.be.undefined();
+        });
+    });
+});
+//# sourceMappingURL=bitswap-mock-internals.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.js.map b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.js.map
new file mode 100644
index 0000000..e7def7d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-mock-internals.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-mock-internals.js","sourceRoot":"","sources":["../../test/bitswap-mock-internals.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.d.ts
new file mode 100644
index 0000000..8ae1ac4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=bitswap-stats.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.d.ts.map
new file mode 100644
index 0000000..c222183
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-stats.d.ts","sourceRoot":"","sources":["../../test/bitswap-stats.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.js b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.js
new file mode 100644
index 0000000..d5251e3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.js
@@ -0,0 +1,189 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { pEvent } from 'p-event';
+import { BitswapMessage as Message } from '../src/message/index.js';
+import { DefaultBitswap } from '../src/bitswap.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { createLibp2pNode } from './utils/create-libp2p-node.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { makePeerIds } from './utils/make-peer-id.js';
+/**
+ * @typedef {import('@libp2p/interface-libp2p').Libp2p} Libp2p
+ * @typedef {import('multiformats/cid').CID} CID
+ */
+const expectedStats = [
+    'blocksReceived',
+    'dataReceived',
+    'dupBlksReceived',
+    'dupDataReceived',
+    'blocksSent',
+    'dataSent',
+    'providesBufferLength',
+    'wantListLength'
+];
+const expectedTimeWindows = [
+    1000 * 60,
+    1000 * 60 * 5,
+    1000 * 60 * 15
+];
+describe('bitswap stats', () => {
+    let libp2pNodes;
+    let bitswaps;
+    let bs;
+    let blocks;
+    let ids;
+    before(async () => {
+        const nodes = [0, 1];
+        blocks = await makeBlocks(2);
+        ids = await makePeerIds(2);
+        // create 2 libp2p nodes
+        libp2pNodes = await Promise.all(nodes.map(async (i) => await createLibp2pNode({
+            DHT: true
+        })));
+        // create bitswaps
+        bitswaps = libp2pNodes.map((node, i) => new DefaultBitswap(node, new MemoryBlockstore(), {
+            statsEnabled: true,
+            statsComputeThrottleTimeout: 500 // fast update interval for tests
+        }));
+        bs = bitswaps[0];
+        bs.wm.wantBlocks(blocks.map(b => b.cid));
+        // start the first bitswap
+        await bs.start();
+    });
+    after(async () => {
+        await Promise.all(bitswaps.map(async (bs) => { await bs.stop(); }));
+        await Promise.all(libp2pNodes.map(async (n) => { await n.stop(); }));
+    });
+    it('has initial stats', () => {
+        const stats = bs.stats;
+        const snapshot = stats.snapshot;
+        expectedStats.forEach((key) => {
+            expect(snapshot).to.have.property(key);
+            expect(snapshot[key]).to.equal(BigInt(0));
+        });
+        const movingAverages = stats.movingAverages;
+        expectedStats.forEach((key) => {
+            expectedTimeWindows.forEach((timeWindow) => {
+                expect(movingAverages).to.have.property(key);
+                expect(stats.movingAverages[key]).to.have.property(`${timeWindow}`);
+                const ma = stats.movingAverages[key][timeWindow];
+                expect(ma.movingAverage()).to.eql(0);
+                expect(ma.variance()).to.eql(0);
+            });
+        });
+    });
+    it('updates blocks received', (done) => {
+        bs.stats.once('update', (stats) => {
+            expect(stats.blocksReceived).to.equal(BigInt(2));
+            expect(stats.dataReceived).to.equal(BigInt(96));
+            expect(stats.dupBlksReceived).to.equal(BigInt(0));
+            expect(stats.dupDataReceived).to.equal(BigInt(0));
+            expect(stats.blocksSent).to.equal(BigInt(0));
+            expect(stats.dataSent).to.equal(BigInt(0));
+            expect(stats.providesBufferLength).to.equal(BigInt(0));
+            expect(stats.wantListLength).to.equal(BigInt(0));
+            expect(stats.peerCount).to.equal(BigInt(1));
+            // test moving averages
+            const movingAverages = bs.stats.movingAverages;
+            const blocksReceivedMA = movingAverages.blocksReceived;
+            expectedTimeWindows.forEach((timeWindow) => {
+                expect(blocksReceivedMA).to.have.property(`${timeWindow}`);
+                const ma = blocksReceivedMA[timeWindow];
+                expect(ma.movingAverage()).to.be.above(0);
+                expect(ma.variance()).to.be.above(0);
+            });
+            const dataReceivedMA = movingAverages.dataReceived;
+            expectedTimeWindows.forEach((timeWindow) => {
+                expect(dataReceivedMA).to.have.property(`${timeWindow}`);
+                const ma = dataReceivedMA[timeWindow];
+                expect(ma.movingAverage()).to.be.above(0);
+                expect(ma.variance()).to.be.above(0);
+            });
+            done();
+        });
+        const other = ids[1];
+        const msg = new Message(false);
+        blocks.forEach((block) => { msg.addBlock(block.cid, block.block); });
+        void bs._receiveMessage(other, msg);
+    });
+    it('updates duplicate blocks counters', (done) => {
+        bs.stats.once('update', (stats) => {
+            expect(stats.blocksReceived).to.equal(BigInt(4));
+            expect(stats.dataReceived).to.equal(BigInt(192));
+            expect(stats.dupBlksReceived).to.equal(BigInt(2));
+            expect(stats.dupDataReceived).to.equal(BigInt(96));
+            expect(stats.blocksSent).to.equal(BigInt(0));
+            expect(stats.dataSent).to.equal(BigInt(0));
+            expect(stats.providesBufferLength).to.equal(BigInt(0));
+            done();
+        });
+        const other = ids[1];
+        const msg = new Message(false);
+        blocks.forEach((block) => { msg.addBlock(block.cid, block.block); });
+        void bs._receiveMessage(other, msg);
+    });
+    describe('connected to another bitswap', () => {
+        let bs2;
+        let block;
+        before(async () => {
+            bs2 = bitswaps[1];
+            await bs2.start();
+            const ma = libp2pNodes[1].getMultiaddrs()[0];
+            await libp2pNodes[0].dial(ma);
+            block = (await makeBlocks(1))[0];
+            await bs.put(block.cid, block.block);
+        });
+        after(async () => {
+            await bs2.stop();
+        });
+        it('updates stats on transfer', async () => {
+            const originalStats = bs.stats.snapshot;
+            expect(originalStats.blocksReceived).to.equal(BigInt(4));
+            expect(originalStats.dataReceived).to.equal(BigInt(192));
+            expect(originalStats.dupBlksReceived).to.equal(BigInt(2));
+            expect(originalStats.dupDataReceived).to.equal(BigInt(96));
+            expect(originalStats.blocksSent).to.equal(BigInt(0));
+            expect(originalStats.dataSent).to.equal(BigInt(0));
+            expect(originalStats.providesBufferLength).to.equal(BigInt(0));
+            expect(originalStats.wantListLength).to.equal(BigInt(0));
+            expect(originalStats.peerCount).to.equal(BigInt(1));
+            const deferred = pEvent(bs.stats, 'update');
+            // pull block from bs to bs2
+            await bs2.want(block.cid);
+            const nextStats = await deferred;
+            expect(nextStats.blocksReceived).to.equal(BigInt(4));
+            expect(nextStats.dataReceived).to.equal(BigInt(192));
+            expect(nextStats.dupBlksReceived).to.equal(BigInt(2));
+            expect(nextStats.dupDataReceived).to.equal(BigInt(96));
+            expect(nextStats.blocksSent).to.equal(BigInt(1));
+            expect(nextStats.dataSent).to.equal(BigInt(48));
+            expect(nextStats.providesBufferLength).to.equal(BigInt(0));
+            expect(nextStats.wantListLength).to.equal(BigInt(0));
+            expect(nextStats.peerCount).to.equal(BigInt(2));
+        });
+        it('has peer stats', async () => {
+            const peerStats = bs2.stats.forPeer(libp2pNodes[0].peerId);
+            expect(peerStats).to.exist();
+            if (peerStats == null) {
+                // needed for ts
+                throw new Error('No stats found for peer');
+            }
+            // trigger an update
+            peerStats.push('dataReceived', 1);
+            const stats = await pEvent(peerStats, 'update');
+            expect(stats.blocksReceived).to.equal(BigInt(1));
+            expect(stats.dataReceived).to.equal(BigInt(49));
+            expect(stats.dupBlksReceived).to.equal(BigInt(0));
+            expect(stats.dupDataReceived).to.equal(BigInt(0));
+            expect(stats.blocksSent).to.equal(BigInt(0));
+            expect(stats.dataSent).to.equal(BigInt(0));
+            expect(stats.providesBufferLength).to.equal(BigInt(0));
+            expect(stats.wantListLength).to.equal(BigInt(0));
+            expect(stats.peerCount).to.equal(BigInt(1));
+            const ma = peerStats.movingAverages.dataReceived[60000];
+            expect(ma.movingAverage()).to.be.above(0);
+            expect(ma.variance()).to.be.above(0);
+        });
+    });
+});
+//# sourceMappingURL=bitswap-stats.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.js.map b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.js.map
new file mode 100644
index 0000000..9a814b1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap-stats.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-stats.js","sourceRoot":"","sources":["../../test/bitswap-stats.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.d.ts
new file mode 100644
index 0000000..fb240a5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.d.ts.map
new file mode 100644
index 0000000..a907af2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap.d.ts","sourceRoot":"","sources":["../../test/bitswap.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap.js b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.js
new file mode 100644
index 0000000..f5e4741
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.js
@@ -0,0 +1,171 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import sinon from 'sinon';
+import pWaitFor from 'p-wait-for';
+import { DefaultBitswap } from '../src/bitswap.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { createLibp2pNode } from './utils/create-libp2p-node.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { orderedFinish } from './utils/helpers.js';
+import { BitswapMessage as Message } from '../src/message/index.js';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import drain from 'it-drain';
+import { CID } from 'multiformats/cid';
+/**
+ * Creates a repo + libp2pNode + Bitswap with or without DHT
+ */
+async function createThing(dht) {
+    const libp2pNode = await createLibp2pNode({
+        DHT: dht
+    });
+    const bitswap = new DefaultBitswap(libp2pNode, new MemoryBlockstore());
+    await bitswap.start();
+    return { libp2pNode, bitswap };
+}
+describe('start/stop', () => {
+    it('should tell us if the node is started or not', async () => {
+        const libp2p = {
+            handle: async () => { },
+            unhandle: async () => { },
+            register: async () => { },
+            unregister: async () => { },
+            getConnections: () => []
+        };
+        // @ts-expect-error not a full libp2p
+        const bitswap = new DefaultBitswap(libp2p, new MemoryBlockstore());
+        expect(bitswap.isStarted()).to.be.false();
+        await bitswap.start();
+        expect(bitswap.isStarted()).to.be.true();
+        await bitswap.stop();
+        expect(bitswap.isStarted()).to.be.false();
+    });
+    it('notify should be a noop if not started', () => {
+        const libp2p = {
+            handle: async () => { },
+            unhandle: async () => { },
+            register: async () => { },
+            unregister: async () => { },
+            getConnections: () => []
+        };
+        // @ts-expect-error not a full libp2p
+        const bitswap = new DefaultBitswap(libp2p, new MemoryBlockstore());
+        expect(bitswap.isStarted()).to.be.false();
+        bitswap.notify(CID.parse('QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn'), new Uint8Array(0));
+    });
+});
+describe('bitswap without DHT', function () {
+    this.timeout(20 * 1000);
+    let nodes;
+    before(async () => {
+        nodes = await Promise.all([
+            createThing(false),
+            createThing(false),
+            createThing(false)
+        ]);
+        // connect 0 -> 1 && 1 -> 2
+        const ma1 = nodes[1].libp2pNode.getMultiaddrs()[0];
+        const ma2 = nodes[2].libp2pNode.getMultiaddrs()[0];
+        await Promise.all([
+            nodes[0].libp2pNode.dial(ma1),
+            nodes[1].libp2pNode.dial(ma2)
+        ]);
+    });
+    after(async () => {
+        await Promise.all(nodes.map(async (node) => await Promise.all([
+            node.bitswap.stop(),
+            node.libp2pNode.stop()
+        ])));
+    });
+    it('put a block in 2, fail to get it in 0', async () => {
+        const finish = orderedFinish(2);
+        const [block] = await makeBlocks(1);
+        await nodes[2].bitswap.put(block.cid, block.block);
+        const node0Get = nodes[0].bitswap.want(block.cid);
+        setTimeout(() => {
+            finish(1);
+            nodes[0].bitswap.unwant(block.cid);
+        }, 200);
+        await expect(node0Get).to.eventually.be.rejectedWith(/unwanted/);
+        finish(2);
+        finish.assert();
+    });
+    it('wants a block, receives a block, wants it again before the blockstore has it, receives it after the blockstore has it', async () => {
+        // the block we want
+        const [block] = await makeBlocks(1);
+        // id of a peer with the block we want
+        const peerId = await createEd25519PeerId();
+        // incoming message with requested block from the other peer
+        const message = new Message(false);
+        message.addEntry(block.cid, 1, Message.WantType.Block);
+        message.addBlock(block.cid, block.block);
+        const mockBlockstore = {
+            get: sinon.stub().withArgs(block.cid).throws({ code: 'ERR_NOT_FOUND' }),
+            has: sinon.stub().withArgs(block.cid).returns(false),
+            put: sinon.stub()
+        };
+        // slow blockstore
+        nodes[0].bitswap.blockstore = mockBlockstore;
+        // add the block to our want list
+        const wantBlockPromise1 = nodes[0].bitswap.want(block.cid);
+        // oh look, a peer has sent it to us - this will trigger a `blockstore.put` which
+        // is an async operation so `self.blockstore.get(cid)` will still throw
+        // until the write has completed
+        await nodes[0].bitswap._receiveMessage(peerId, message);
+        // block store did not have it
+        expect(mockBlockstore.get.calledWith(block.cid)).to.be.true();
+        // another context wants the same block
+        const wantBlockPromise2 = nodes[0].bitswap.want(block.cid);
+        // meanwhile the blockstore has written the block
+        nodes[0].bitswap.blockstore.has = sinon.stub().withArgs(block.cid).returns(true);
+        // here it comes again
+        await nodes[0].bitswap._receiveMessage(peerId, message);
+        // block store had it this time
+        expect(mockBlockstore.get.calledWith(block.cid)).to.be.true();
+        // both requests should get the block
+        expect(await wantBlockPromise1).to.equalBytes(block.block);
+        expect(await wantBlockPromise2).to.equalBytes(block.block);
+    });
+});
+describe('bitswap with DHT', function () {
+    this.timeout(60 * 1000);
+    let nodes;
+    before(async () => {
+        nodes = await Promise.all([
+            createThing(true),
+            createThing(true),
+            createThing(true)
+        ]);
+        // connect 0 -> 1 && 1 -> 2
+        const ma1 = nodes[1].libp2pNode.getMultiaddrs()[0];
+        const ma2 = nodes[2].libp2pNode.getMultiaddrs()[0];
+        await Promise.all([
+            nodes[0].libp2pNode.dial(ma1),
+            nodes[1].libp2pNode.dial(ma2)
+        ]);
+        // wait until dht routing tables are updated
+        await Promise.all([
+            pWaitFor(() => nodes[0].libp2pNode.dht?.lan?.routingTable?.size != null && nodes[0].libp2pNode.dht?.lan?.routingTable?.size >= 1),
+            pWaitFor(() => nodes[1].libp2pNode.dht?.lan?.routingTable?.size != null && nodes[1].libp2pNode.dht?.lan?.routingTable?.size >= 2),
+            pWaitFor(() => nodes[2].libp2pNode.dht?.lan?.routingTable?.size != null && nodes[2].libp2pNode.dht?.lan?.routingTable?.size >= 1)
+        ]);
+    });
+    after(async () => {
+        await Promise.all(nodes.map(async (node) => await Promise.all([
+            node.bitswap.stop(),
+            node.libp2pNode.stop()
+        ])));
+    });
+    it('put a block in 2, get it in 0', async () => {
+        const [block] = await makeBlocks(1);
+        if (nodes[2].libp2pNode.dht == null) {
+            throw new Error('DHT was not configured');
+        }
+        const provideSpy = sinon.spy(nodes[2].libp2pNode.dht, 'provide');
+        await nodes[2].bitswap.put(block.cid, block.block);
+        // wait for the DHT to finish providing
+        await drain(provideSpy.returnValues[0]);
+        const blockRetrieved = await nodes[0].bitswap.want(block.cid);
+        expect(block.block).to.eql(blockRetrieved);
+    });
+});
+//# sourceMappingURL=bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/bitswap.js.map b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.js.map
new file mode 100644
index 0000000..38588de
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap.js","sourceRoot":"","sources":["../../test/bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/browser.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/browser.d.ts
new file mode 100644
index 0000000..76b041f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/browser.d.ts
@@ -0,0 +1,3 @@
+import './bitswap-mock-internals.js';
+import './decision-engine/decision-engine.js';
+//# sourceMappingURL=browser.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/browser.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/browser.d.ts.map
new file mode 100644
index 0000000..59ac80a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/browser.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"browser.d.ts","sourceRoot":"","sources":["../../test/browser.ts"],"names":[],"mappings":"AACA,OAAO,6BAA6B,CAAA;AACpC,OAAO,sCAAsC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/browser.js b/node_modules/ipfs-bitswap/dist/dist/test/browser.js
new file mode 100644
index 0000000..78deb60
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/browser.js
@@ -0,0 +1,3 @@
+import './bitswap-mock-internals.js';
+import './decision-engine/decision-engine.js';
+//# sourceMappingURL=browser.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/browser.js.map b/node_modules/ipfs-bitswap/dist/dist/test/browser.js.map
new file mode 100644
index 0000000..40043d1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/browser.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"browser.js","sourceRoot":"","sources":["../../test/browser.ts"],"names":[],"mappings":"AACA,OAAO,6BAA6B,CAAA;AACpC,OAAO,sCAAsC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.d.ts
new file mode 100644
index 0000000..b291d53
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=decision-engine.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.d.ts.map
new file mode 100644
index 0000000..d64ab0c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"decision-engine.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/decision-engine.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.js b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.js
new file mode 100644
index 0000000..aa7f275
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.js
@@ -0,0 +1,666 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+// @ts-expect-error no types
+import range from 'lodash.range';
+// @ts-expect-error no types
+import difference from 'lodash.difference';
+// @ts-expect-error no types
+import flatten from 'lodash.flatten';
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { base58btc } from 'multiformats/bases/base58';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
+import drain from 'it-drain';
+import defer from 'p-defer';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { DecisionEngine } from '../../src/decision-engine/index.js';
+import { Stats } from '../../src/stats/index.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { makePeerId, makePeerIds } from '../utils/make-peer-id.js';
+import { mockNetwork } from '../utils/mocks.js';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+const sum = (nums) => nums.reduce((a, b) => a + b, 0);
+function messageToString(m) {
+    return Array.from(m.blocks.values())
+        .map((b) => uint8ArrayToString(b));
+}
+function stringifyMessages(messages) {
+    return flatten(messages.map(messageToString));
+}
+async function newEngine(network) {
+    const peerId = await createEd25519PeerId();
+    // @ts-expect-error {} is not a real libp2p
+    const engine = new DecisionEngine(peerId, new MemoryBlockstore(), network, new Stats({}), {});
+    engine.start();
+    return { peer: peerId, engine };
+}
+describe('Engine', () => {
+    it('consistent accounting', async () => {
+        const res = await Promise.all([
+            newEngine(mockNetwork()),
+            newEngine(mockNetwork())
+        ]);
+        const sender = res[0];
+        const receiver = res[1];
+        await Promise.all(range(1000).map(async (i) => {
+            const data = uint8ArrayFromString(`this is message ${i}`);
+            const hash = await sha256.digest(data);
+            const m = new Message(false);
+            const cid = CID.createV0(hash);
+            m.addBlock(cid, data);
+            sender.engine.messageSent(receiver.peer, cid, data);
+            await receiver.engine.messageReceived(sender.peer, m);
+        }));
+        expect(sender.engine.numBytesSentTo(receiver.peer))
+            .to.be.above(0);
+        expect(sender.engine.numBytesSentTo(receiver.peer))
+            .to.eql(receiver.engine.numBytesReceivedFrom(sender.peer));
+        expect(receiver.engine.numBytesSentTo(sender.peer))
+            .to.eql(0);
+        expect(sender.engine.numBytesReceivedFrom(receiver.peer))
+            .to.eql(0);
+    });
+    it('peer is added to peers when message received or sent', async () => {
+        const res = await Promise.all([
+            newEngine(mockNetwork()),
+            newEngine(mockNetwork())
+        ]);
+        const sanfrancisco = res[0];
+        const seattle = res[1];
+        const m = new Message(true);
+        sanfrancisco.engine.messageSent(seattle.peer, CID.parse('QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn'), new Uint8Array());
+        await seattle.engine.messageReceived(sanfrancisco.peer, m);
+        expect(seattle.peer.toString())
+            .to.not.eql(sanfrancisco.peer.toString());
+        expect(sanfrancisco.engine.peers()).to.include(seattle.peer);
+        expect(seattle.engine.peers()).to.include(sanfrancisco.peer);
+    });
+    it('partner wants then cancels', async function () {
+        this.timeout(40 * 1000);
+        const numRounds = 10;
+        const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');
+        const vowels = 'aeiou'.split('');
+        const testCases = [{
+                set: alphabet,
+                cancels: vowels
+            }, {
+                set: alphabet,
+                cancels: difference(alphabet, vowels)
+            }];
+        async function partnerWants(dEngine, values, partner) {
+            const message = new Message(false);
+            const hashes = await Promise.all(values.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+            hashes.forEach((hash, i) => {
+                message.addEntry(CID.createV0(hash), Math.pow(2, 32) - 1 - i);
+            });
+            await dEngine.messageReceived(partner, message);
+        }
+        async function partnerCancels(dEngine, values, partner) {
+            const message = new Message(false);
+            const hashes = await Promise.all(values.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+            hashes.forEach((hash) => {
+                message.cancel(CID.createV0(hash));
+            });
+            await dEngine.messageReceived(partner, message);
+        }
+        async function peerSendsBlocks(dEngine, blockstore, blocks) {
+            // Bitswap puts blocks into the blockstore then passes the blocks to the
+            // Decision Engine
+            await drain(blockstore.putMany(blocks));
+            dEngine.receivedBlocks(blocks);
+        }
+        const hashes = await Promise.all(alphabet.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+        const blocks = hashes.map((h, i) => {
+            return {
+                cid: CID.createV0(h),
+                block: uint8ArrayFromString(alphabet[i])
+            };
+        });
+        const partner = await createEd25519PeerId();
+        for (let i = 0; i < numRounds; i++) {
+            // 2 test cases
+            //   a) want alphabet - cancel vowels
+            //   b) want alphabet - cancels everything except vowels
+            for (const { set, cancels } of testCases) {
+                const keeps = difference(set, cancels);
+                const deferred = defer();
+                const network = mockNetwork(1, (res) => {
+                    const msgs = stringifyMessages(res.messages.map(([_, message]) => message));
+                    expect(msgs.sort()).to.eql(keeps.sort());
+                    deferred.resolve();
+                });
+                const id = await createEd25519PeerId();
+                const blockstore = new MemoryBlockstore();
+                // @ts-expect-error {} is not a real libp2p
+                const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {});
+                dEngine.start();
+                // Send wants then cancels for some of the wants
+                await partnerWants(dEngine, set, partner);
+                await partnerCancels(dEngine, cancels, partner);
+                // Simulate receiving blocks from the network
+                await peerSendsBlocks(dEngine, blockstore, blocks);
+                await deferred.promise;
+            }
+        }
+    });
+    it('round-robins incoming wants', async () => {
+        const id = await makePeerId();
+        const peers = await makePeerIds(3);
+        const blockSize = 256 * 1024;
+        const blocks = await makeBlocks(20, blockSize);
+        const blockIndex = (cid) => {
+            for (const [i, b] of blocks.entries()) {
+                if (b.cid.equals(cid)) {
+                    return i;
+                }
+            }
+            return -1;
+        };
+        const blockstore = new MemoryBlockstore();
+        await drain(blockstore.putMany(blocks));
+        let rcvdBlockCount = 0;
+        const received = new Map(peers.map(p => [p.toString(), { count: 0, bytes: 0 }]));
+        const deferred = defer();
+        const network = mockNetwork(blocks.length, undefined, (peer, msg) => {
+            const pid = peer.toString();
+            const rcvd = received.get(pid);
+            if (rcvd == null) {
+                deferred.reject(new Error(`Could not get received for peer ${pid}`));
+                return;
+            }
+            // Blocks should arrive in priority order.
+            // Note: we requested the blocks such that the priority order was
+            // highest at the start to lowest at the end.
+            for (const cidStr of msg.blocks.keys()) {
+                expect(blockIndex(CID.parse(cidStr))).to.gte(rcvd.count);
+            }
+            rcvd.count += msg.blocks.size;
+            rcvd.bytes += sum([...msg.blocks.values()].map(b => b.length));
+            // pendingBytes should be equal to the remaining data we're expecting
+            expect(msg.pendingBytes).to.eql(blockSize * blocks.length - rcvd.bytes);
+            // Expect each peer to receive blocks in a roughly round-robin fashion,
+            // in other words one peer shouldn't receive a bunch more blocks than
+            // the others at any given time.
+            for (const p of peers) {
+                if (p !== peer) {
+                    const peerCount = received.get(p.toString());
+                    if (peerCount == null) {
+                        deferred.reject(new Error(`Could not get peer count for ${p.toString()}`));
+                        return;
+                    }
+                    const pCount = peerCount.count;
+                    expect(rcvd.count - pCount).to.lt(blocks.length * 0.8);
+                }
+            }
+            // When all peers have received all the blocks, we're done
+            rcvdBlockCount += msg.blocks.size;
+            if (rcvdBlockCount === blocks.length * peers.length) {
+                // Make sure each peer received all blocks it was expecting
+                for (const peer of peers) {
+                    const pid = peer.toString();
+                    const rcvd = received.get(pid);
+                    if (rcvd == null) {
+                        deferred.reject(new Error(`Could not get peer count for ${pid}`));
+                        return;
+                    }
+                    expect(rcvd.count).to.eql(blocks.length);
+                }
+                deferred.resolve();
+            }
+        });
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {});
+        dEngine.start();
+        // Each peer requests all blocks
+        for (const peer of peers) {
+            const message = new Message(false);
+            for (const [i, block] of blocks.entries()) {
+                message.addEntry(block.cid, blocks.length - i);
+            }
+            await dEngine.messageReceived(peer, message);
+        }
+        await deferred.promise;
+    });
+    it('sends received blocks to peers that want them', async () => {
+        const [id, peer] = await makePeerIds(2);
+        const blocks = await makeBlocks(4, 8 * 1024);
+        const deferred = defer();
+        const network = mockNetwork(blocks.length, undefined, (peer, msg) => { deferred.resolve([peer, msg]); });
+        const blockstore = new MemoryBlockstore();
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {}, { maxSizeReplaceHasWithBlock: 0 });
+        dEngine.start();
+        const message = new Message(false);
+        message.addEntry(blocks[0].cid, 4, Message.WantType.Have, false);
+        message.addEntry(blocks[1].cid, 3, Message.WantType.Have, false);
+        message.addEntry(blocks[2].cid, 2, Message.WantType.Block, false);
+        message.addEntry(blocks[3].cid, 1, Message.WantType.Block, false);
+        await dEngine.messageReceived(peer, message);
+        // Simulate receiving message - put blocks into the blockstore then pass
+        // them to the Decision Engine
+        const rcvdBlocks = [blocks[0], blocks[2]];
+        await drain(blockstore.putMany(rcvdBlocks));
+        dEngine.receivedBlocks(rcvdBlocks);
+        // Wait till the engine sends a message
+        const [toPeer, msg] = await deferred.promise;
+        // Expect the message to be sent to the peer that wanted the blocks
+        expect(toPeer.toString()).to.eql(peer.toString());
+        // Expect the correct wanted block
+        expect(msg.blocks.size).to.eql(1);
+        expect(msg.blocks.has(blocks[2].cid.toString(base58btc))).to.eql(true);
+        // Expect the correct wanted HAVE
+        expect(msg.blockPresences.size).to.eql(1);
+        expect(msg.blockPresences.has(blocks[0].cid.toString(base58btc))).to.eql(true);
+        expect(msg.blockPresences.get(blocks[0].cid.toString(base58btc))).to.eql(Message.BlockPresenceType.Have);
+    });
+    it('sends DONT_HAVE', async () => {
+        const [id, peer] = await makePeerIds(2);
+        const blocks = await makeBlocks(4, 8 * 1024);
+        let onMsg;
+        const receiveMessage = async () => await new Promise(resolve => {
+            onMsg = resolve;
+        });
+        const network = mockNetwork(blocks.length, undefined, (peerId, message) => {
+            onMsg([peerId, message]);
+        });
+        const blockstore = new MemoryBlockstore();
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {}, { maxSizeReplaceHasWithBlock: 0 });
+        dEngine.start();
+        const message = new Message(false);
+        message.addEntry(blocks[0].cid, 4, Message.WantType.Have, false, false);
+        message.addEntry(blocks[1].cid, 3, Message.WantType.Have, false, true); // send dont have
+        message.addEntry(blocks[2].cid, 2, Message.WantType.Block, false, false);
+        message.addEntry(blocks[3].cid, 1, Message.WantType.Block, false, true); // send dont have
+        await dEngine.messageReceived(peer, message);
+        // Wait till the engine sends a message
+        const [toPeer, msg] = await receiveMessage();
+        // Expect DONT_HAVEs for blocks 1 and 3
+        expect(toPeer.toString()).to.eql(peer.toString());
+        expect(msg.blockPresences.size).to.eql(2);
+        for (const block of [blocks[1], blocks[3]]) {
+            const cid = block.cid.toString(base58btc);
+            expect(msg.blockPresences.has(cid)).to.eql(true);
+            expect(msg.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.DontHave);
+        }
+        // Simulate receiving message with blocks - put blocks into the blockstore
+        // then pass them to the Decision Engine
+        await drain(blockstore.putMany(blocks));
+        dEngine.receivedBlocks(blocks);
+        const [toPeer2, msg2] = await receiveMessage();
+        expect(toPeer2.toString()).to.eql(peer.toString());
+        expect(msg2.blocks.size).to.eql(2);
+        expect(msg2.blockPresences.size).to.eql(2);
+        for (const block of [blocks[0], blocks[1]]) {
+            const cid = block.cid.toString(base58btc);
+            expect(msg2.blockPresences.has(cid)).to.eql(true);
+            expect(msg2.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.Have);
+        }
+    });
+    it('handles want-have and want-block', async () => {
+        const [id, partner] = await makePeerIds(2);
+        const alphabet = 'abcdefghijklmnopqrstuvwxyz';
+        const vowels = 'aeiou';
+        const alphabetLs = alphabet.split('');
+        const hashes = await Promise.all(alphabetLs.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+        const blocks = hashes.map((h, i) => {
+            return {
+                cid: CID.createV0(h),
+                block: uint8ArrayFromString(alphabetLs[i])
+            };
+        });
+        let testCases = [
+            // Just send want-blocks
+            {
+                only: false,
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: '',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: vowels
+                }
+            },
+            // Send want-blocks and want-haves
+            {
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: 'fgh',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: vowels,
+                    haves: 'fgh'
+                }
+            },
+            // Send want-blocks and want-haves, with some want-haves that are not
+            // present, but without requesting DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: 'fgh123',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: vowels,
+                    haves: 'fgh'
+                }
+            },
+            // Send want-blocks and want-haves, with some want-haves that are not
+            // present, and request DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: 'fgh123',
+                        sendDontHave: true
+                    }
+                ],
+                exp: {
+                    blks: vowels,
+                    haves: 'fgh',
+                    dontHaves: '123'
+                }
+            },
+            // Send want-blocks and want-haves, with some want-blocks and want-haves that are not
+            // present, but without requesting DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: 'aeiou123',
+                        wantHaves: 'fgh456',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'fgh',
+                    dontHaves: ''
+                }
+            },
+            // Send want-blocks and want-haves, with some want-blocks and want-haves that are not
+            // present, and request DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: 'aeiou123',
+                        wantHaves: 'fgh456',
+                        sendDontHave: true
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'fgh',
+                    dontHaves: '123456'
+                }
+            },
+            // Send repeated want-blocks
+            {
+                wls: [
+                    {
+                        wantBlks: 'ae',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'io',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'u',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou'
+                }
+            },
+            // Send repeated want-blocks and want-haves
+            {
+                wls: [
+                    {
+                        wantBlks: 'ae',
+                        wantHaves: 'jk',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'io',
+                        wantHaves: 'lm',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'u',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'jklm'
+                }
+            },
+            // Send repeated want-blocks and want-haves, with some want-blocks and want-haves that are not
+            // present, and request DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: 'ae12',
+                        wantHaves: 'jk5',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'io34',
+                        wantHaves: 'lm',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'u',
+                        wantHaves: '6',
+                        sendDontHave: true
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'jklm',
+                    dontHaves: '123456'
+                }
+            },
+            // Send want-block then want-have for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: 'a',
+                        sendDontHave: true
+                    },
+                    {
+                        wantHaves: 'a',
+                        sendDontHave: true
+                    }
+                ],
+                // want-have should be ignored because there was already a
+                // want-block for the same CID in the queue
+                exp: {
+                    blks: 'a'
+                }
+            },
+            // Send want-have then want-block for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: '',
+                        wantHaves: 'b',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'b',
+                        wantHaves: '',
+                        sendDontHave: true
+                    }
+                ],
+                // want-block should overwrite existing want-have
+                exp: {
+                    blks: 'b'
+                }
+            },
+            // Send want-block then want-block for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: 'a',
+                        wantHaves: '',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'a',
+                        wantHaves: '',
+                        sendDontHave: true
+                    }
+                ],
+                // second want-block should be ignored
+                exp: {
+                    blks: 'a'
+                }
+            },
+            // Send want-have then want-have for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: '',
+                        wantHaves: 'a',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: '',
+                        wantHaves: 'a',
+                        sendDontHave: true
+                    }
+                ],
+                // second want-have should be ignored
+                exp: {
+                    haves: 'a'
+                }
+            }
+        ];
+        async function partnerWantBlocksHaves(dEngine, wantBlks, wantHaves, sendDontHave, partner) {
+            const wantTypes = [{
+                    type: Message.WantType.Block,
+                    blocks: wantBlks
+                }, {
+                    type: Message.WantType.Have,
+                    blocks: wantHaves
+                }];
+            let i = wantBlks.length + wantHaves.length;
+            const message = new Message(false);
+            for (const { type, blocks } of wantTypes) {
+                const hashes = await Promise.all(blocks.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+                for (const hash of hashes) {
+                    message.addEntry(CID.createV0(hash), i--, type, false, sendDontHave);
+                }
+            }
+            await dEngine.messageReceived(partner, message);
+        }
+        let onMsg;
+        const nextMessage = async () => {
+            return await new Promise(resolve => {
+                onMsg = resolve;
+                void dEngine._processTasks();
+            });
+        };
+        const network = mockNetwork(blocks.length, undefined, (peer, msg) => {
+            onMsg?.(msg);
+            onMsg = undefined;
+        });
+        const blockstore = new MemoryBlockstore();
+        await drain(blockstore.putMany(blocks));
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {}, { maxSizeReplaceHasWithBlock: 0 });
+        dEngine._scheduleProcessTasks = () => { };
+        dEngine.start();
+        const onlyCases = [];
+        for (const testCase of testCases) {
+            // eslint-disable-next-line
+            if (testCase.only) {
+                onlyCases.push(testCase);
+            }
+        }
+        if (onlyCases.length > 0) {
+            testCases = onlyCases;
+        }
+        for (const [, testCase] of Object.entries(testCases)) {
+            // console.log("Test case %d:", i)
+            for (const wl of testCase.wls) {
+                // console.log("  want-blocks '%s' / want-haves '%s' / sendDontHave %s",
+                //   wl.wantBlks || '', wl.wantHaves || '', wl.sendDontHave)
+                const wantBlks = (wl.wantBlks ?? '').split('');
+                const wantHaves = (wl.wantHaves ?? '').split('');
+                await partnerWantBlocksHaves(dEngine, wantBlks, wantHaves, wl.sendDontHave, partner);
+            }
+            const expBlks = (testCase.exp.blks ?? '').split('');
+            const expHaves = (testCase.exp.haves ?? '').split('');
+            const expDontHaves = (testCase.exp.dontHaves ?? '').split('');
+            const msg = await nextMessage();
+            // Expect the correct number of blocks and block presences
+            expect(msg.blocks.size).to.eql(expBlks.length);
+            expect(msg.blockPresences.size).to.eql(expHaves.length + expDontHaves.length);
+            // Expect the correct block contents
+            for (const expBlk of expBlks) {
+                const hash = await sha256.digest(uint8ArrayFromString(expBlk));
+                expect(msg.blocks.has(CID.createV0(hash).toString(base58btc)));
+            }
+            // Expect the correct HAVEs
+            for (const expHave of expHaves) {
+                const hash = await sha256.digest(uint8ArrayFromString(expHave));
+                const cid = CID.createV0(hash).toString(base58btc);
+                expect(msg.blockPresences.has(cid)).to.eql(true);
+                expect(msg.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.Have);
+            }
+            // Expect the correct DONT_HAVEs
+            for (const expDontHave of expDontHaves) {
+                const hash = await sha256.digest(uint8ArrayFromString(expDontHave));
+                const cid = CID.createV0(hash).toString(base58btc);
+                expect(msg.blockPresences.has(cid)).to.eql(true);
+                expect(msg.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.DontHave);
+            }
+        }
+    });
+    it('survives not being able to send a message to peer', async () => {
+        /** @type {} */
+        let r;
+        const failToSendPromise = new Promise((resolve) => {
+            r = resolve;
+        });
+        const network = mockNetwork();
+        network.sendMessage = () => {
+            r();
+            throw new Error('Something is b0rken');
+        };
+        // who is in the network
+        const us = await newEngine(network);
+        const them = await newEngine(mockNetwork());
+        // add a block to our blockstore
+        const data = uint8ArrayFromString(`this is message ${Date.now()}`);
+        const hash = await sha256.digest(data);
+        const cid = CID.createV0(hash);
+        await us.engine.blockstore.put(cid, data);
+        const message = new Message(false);
+        message.addEntry(cid, 1, Message.WantType.Block, false, false);
+        // receive a message with a want for our block
+        await us.engine.messageReceived(them.peer, message);
+        // should have added a task for the remote peer
+        const tasks = us.engine._requestQueue._byPeer.get(them.peer.toString());
+        expect(tasks).to.have.property('_pending').that.has.property('length', 1);
+        // wait for us.network.sendMessage to be called
+        await failToSendPromise;
+        // should be done processing
+        expect(tasks).to.have.property('_pending').that.has.property('length', 0);
+        expect(tasks).to.have.property('_active').that.has.property('size', 0);
+    });
+});
+//# sourceMappingURL=decision-engine.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.js.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.js.map
new file mode 100644
index 0000000..b63ea5e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/decision-engine.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"decision-engine.js","sourceRoot":"","sources":["../../../test/decision-engine/decision-engine.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.d.ts
new file mode 100644
index 0000000..cee8da7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=ledger.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.d.ts.map
new file mode 100644
index 0000000..51410d4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ledger.spec.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/ledger.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.js
new file mode 100644
index 0000000..39ce3a2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.js
@@ -0,0 +1,31 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { Ledger } from '../../src/decision-engine/ledger.js';
+describe('Ledger', () => {
+    /** @type {} */
+    let peerId;
+    /** @type {} */
+    let ledger;
+    before(async () => {
+        peerId = await createEd25519PeerId();
+    });
+    beforeEach(() => {
+        ledger = new Ledger(peerId);
+    });
+    it('accounts', () => {
+        expect(ledger.debtRatio()).to.eql(0);
+        ledger.sentBytes(100);
+        ledger.sentBytes(12000);
+        ledger.receivedBytes(223432);
+        ledger.receivedBytes(2333);
+        expect(ledger.accounting)
+            .to.eql({
+            bytesSent: 100 + 12000,
+            bytesRecv: 223432 + 2333
+        });
+        expect(ledger.debtRatio())
+            .to.eql((100 + 12000) / (223432 + 2333 + 1));
+    });
+});
+//# sourceMappingURL=ledger.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.js.map
new file mode 100644
index 0000000..7f07372
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/ledger.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ledger.spec.js","sourceRoot":"","sources":["../../../test/decision-engine/ledger.spec.ts"],"names":[],"mappings":"AAAA,sBAAsB;AAEtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAC7D,OAAO,EAAE,MAAM,EAAE,MAAM,qCAAqC,CAAA;AAG5D,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,eAAe;IACf,IAAI,MAAc,CAAA;IAClB,eAAe;IACf,IAAI,MAAc,CAAA;IAElB,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,MAAM,GAAG,MAAM,mBAAmB,EAAE,CAAA;IACtC,CAAC,CAAC,CAAA;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAClB,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAEpC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QACrB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACvB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;QAC5B,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QAE1B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;aACtB,EAAE,CAAC,GAAG,CAAC;YACN,SAAS,EAAE,GAAG,GAAG,KAAK;YACtB,SAAS,EAAE,MAAM,GAAG,IAAI;SACzB,CAAC,CAAA;QACJ,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;aACvB,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.d.ts
new file mode 100644
index 0000000..1a5a348
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=req-queue.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.d.ts.map
new file mode 100644
index 0000000..642eb17
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"req-queue.spec.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/req-queue.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.js
new file mode 100644
index 0000000..e8a029d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.js
@@ -0,0 +1,543 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { RequestQueue } from '../../src/decision-engine/req-queue.js';
+describe('Request Queue', () => {
+    let peerIds;
+    before(async () => {
+        peerIds = await Promise.all([
+            createEd25519PeerId(),
+            createEd25519PeerId(),
+            createEd25519PeerId()
+        ]);
+    });
+    describe('push / pop', () => {
+        it('pop empty queue returns no tasks', () => {
+            const rq = new RequestQueue();
+            const { peerId, tasks, pendingSize } = rq.popTasks(1);
+            expect(peerId).to.be.undefined();
+            expect(tasks.length).to.eql(0);
+            expect(pendingSize).to.eql(0);
+        });
+        it('pops correct number of tasks', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 10,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 5,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 5,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { peerId, tasks, pendingSize } = rq.popTasks(11);
+            expect(peerId).to.eql(peerIds[0]);
+            expect(tasks.map(t => t.topic)).to.eql(['a', 'b']);
+            expect(pendingSize).to.eql(5);
+            const res = rq.popTasks(1);
+            expect(res.tasks.length).to.eql(1);
+            expect(res.pendingSize).to.eql(0);
+        });
+        it('pops nothing for zero targetMinSize', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { tasks, pendingSize } = rq.popTasks(0);
+            expect(tasks.length).to.eql(0);
+            expect(pendingSize).to.eql(2);
+        });
+        it('pops no tasks for empty peer', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const res = rq.popTasks(1);
+            expect(res.tasks.length).to.eql(1);
+            expect(res.pendingSize).to.eql(0);
+            const res2 = rq.popTasks(1);
+            expect(res2.tasks.length).to.eql(0);
+            expect(res2.pendingSize).to.eql(0);
+        });
+        it('pops tasks in priority order', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 10,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 5,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 1,
+                    priority: 7,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { peerId, tasks, pendingSize } = rq.popTasks(10);
+            expect(peerId).to.eql(peerIds[0]);
+            expect(pendingSize).to.eql(0);
+            expect(tasks.map(t => t.topic)).to.eql(['a', 'c', 'b']);
+        });
+        it('can push more tasks after exhausting tasks for peer', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            // Pop all tasks for peer0
+            let { tasks } = rq.popTasks(10);
+            expect(tasks.length).eql(1);
+            // Push some more tasks for peer0
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            // Pop tasks for peer0
+            tasks = rq.popTasks(10).tasks;
+            expect(tasks.length).eql(1);
+        });
+        it('pops peers in order of active size increasing, then pending tasks decreasing', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 5,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[1], [{
+                    topic: 'b',
+                    size: 10,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 3,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'd',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[2], [{
+                    topic: 'e',
+                    size: 7,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'f',
+                    size: 2,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            //          Active   Pending
+            // peer0:            5
+            // peer1:            10, 3, 1
+            // peer2:            7. 2
+            // No active tasks and peer1 has most pending tasks so expect peer1
+            let { peerId } = rq.popTasks(1);
+            expect(peerId).to.eql(peerIds[1]);
+            //          Active   Pending
+            // peer0:            5
+            // peer1:   10       3, 1
+            // peer2:            7. 2
+            // peer0 and peer2 have least active size and peer2 has more pending
+            // tasks so expect peer2
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[2]);
+            //          Active   Pending
+            // peer0:            5
+            // peer1:   10       3, 1
+            // peer2:   7        2
+            // peer0 has least active size so expect peer0
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[0]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10       3, 1
+            // peer2:   7        2
+            // peer0 has least active size but no pending tasks.
+            // peer2 has smaller active size than peer 1 so expect peer2
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[2]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10       3, 1
+            // peer2:   7, 2
+            // peer1 is only peer with pending tasks so expect peer1
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[1]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10, 3    1
+            // peer2:   7, 2
+            // peer1 is only peer with pending tasks so expect peer1
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[1]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10, 3, 1
+            // peer2:   7, 2
+            // peer1 is only peer with pending tasks so expect peer1
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.be.undefined();
+        });
+    });
+    it('resorts queue when new peer tasks are added where peer tasks already exist', () => {
+        const rq = new RequestQueue();
+        rq.pushTasks(peerIds[0], [{
+                topic: 'a',
+                size: 0,
+                priority: 1,
+                data: {
+                    blockSize: 0,
+                    haveBlock: false,
+                    isWantBlock: false,
+                    sendDontHave: false
+                }
+            }]);
+        rq.pushTasks(peerIds[1], [{
+                topic: 'a',
+                size: 0,
+                priority: 1,
+                data: {
+                    blockSize: 0,
+                    haveBlock: false,
+                    isWantBlock: false,
+                    sendDontHave: false
+                }
+            }]);
+        rq.pushTasks(peerIds[0], [{
+                topic: 'a',
+                size: 1,
+                priority: 1,
+                data: {
+                    blockSize: 0,
+                    haveBlock: false,
+                    isWantBlock: false,
+                    sendDontHave: false
+                }
+            }]);
+        // _byPeer map should have been resorted to put peer0
+        // fist in the queue
+        const { peerId } = rq.popTasks(16);
+        expect(peerId).to.eql(peerIds[0]);
+    });
+    describe('remove', () => {
+        it('removes tasks by peer and topic', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[1], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.remove('a', peerIds[0]);
+            rq.remove('b', peerIds[1]);
+            const res = rq.popTasks(10);
+            expect(res.peerId).to.eql(peerIds[1]);
+            expect(res.tasks.length).to.eql(2);
+            expect(res.tasks.map(t => t.topic)).to.eql(['a', 'c']);
+            const res2 = rq.popTasks(10);
+            expect(res2.peerId).to.eql(peerIds[0]);
+            expect(res2.tasks.length).to.eql(1);
+            expect(res2.tasks.map(t => t.topic)).to.eql(['b']);
+        });
+        it('ignores remove non-existent peer', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.remove('a', peerIds[1]);
+            const res = rq.popTasks(10);
+            expect(res.tasks.length).to.eql(1);
+        });
+        it('ignores remove non-existent topic', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.remove('b', peerIds[0]);
+            const res = rq.popTasks(10);
+            expect(res.tasks.length).to.eql(1);
+        });
+    });
+    describe('update tasks', () => {
+        it('updates priority of existing pending tasks', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'b',
+                    size: 1,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { tasks } = rq.popTasks(10);
+            expect(tasks.map(t => t.topic)).to.eql(['b', 'a']);
+        });
+        it('taskDone removes active task', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 2,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[1], [{
+                    topic: 'c',
+                    size: 1,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'd',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            // Pop one task for each peer
+            const res1 = rq.popTasks(1);
+            const res2 = rq.popTasks(1);
+            //          Active       Pending
+            // peer0:   a (size 2)   b
+            // peer1:   c (size 1)   d, e
+            // Mark peer0's task as done
+            for (const res of [res1, res2]) {
+                if (res.peerId === peerIds[0]) {
+                    rq.tasksDone(peerIds[0], res.tasks);
+                }
+            }
+            //          Active       Pending
+            // peer0:     (size 0)   b
+            // peer1:   c (size 1)   d, e
+            // peer0 has less active data (zero bytes) so the next pop should come
+            // from peer0's tasks
+            const peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[0]);
+        });
+    });
+});
+//# sourceMappingURL=req-queue.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.js.map
new file mode 100644
index 0000000..ff863b3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/req-queue.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"req-queue.spec.js","sourceRoot":"","sources":["../../../test/decision-engine/req-queue.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.d.ts
new file mode 100644
index 0000000..b09bbd5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=task-merger.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.d.ts.map
new file mode 100644
index 0000000..608a852
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"task-merger.spec.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/task-merger.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.js
new file mode 100644
index 0000000..cd75d52
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.js
@@ -0,0 +1,298 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { RequestQueue } from '../../src/decision-engine/req-queue.js';
+import { DefaultTaskMerger } from '../../src/decision-engine/task-merger.js';
+describe('Task Merger', () => {
+    let peerId;
+    before(async () => {
+        peerId = await createEd25519PeerId();
+    });
+    it('push have vs block', () => {
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expIsWantBlock) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            rq.pushTasks(peerId, tasks);
+            const popped = rq.popTasks(100).tasks;
+            expect(popped.length).to.eql(1);
+            expect(popped[0].data.isWantBlock).to.eql(expIsWantBlock);
+        };
+        const wantBlockType = true;
+        const wantHaveType = false;
+        // should ignore second want-have
+        runTestCase([wantHave, wantHave], wantHaveType);
+        // should ignore second want-block
+        runTestCase([wantBlock, wantBlock], wantBlockType);
+        // want-have does not overwrite want-block
+        runTestCase([wantBlock, wantHave], wantBlockType);
+        // want-block overwrites want-have
+        runTestCase([wantHave, wantBlock], wantBlockType);
+    });
+    it('push size info', () => {
+        const wantBlockBlockSize = 10;
+        const wantBlockDontHaveBlockSize = 0;
+        const wantHaveBlockSize = 10;
+        const wantHaveDontHaveBlockSize = 0;
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: wantBlockBlockSize,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantBlockDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 2,
+            data: {
+                isWantBlock: true,
+                blockSize: wantBlockDontHaveBlockSize,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: wantHaveBlockSize,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantHaveDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: wantHaveDontHaveBlockSize,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expSize, expBlockSize, expIsWantBlock) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            rq.pushTasks(peerId, tasks);
+            const popped = rq.popTasks(100).tasks;
+            expect(popped.length).to.eql(1);
+            expect(popped[0].size).to.eql(expSize);
+            expect(popped[0].data.blockSize).to.eql(expBlockSize);
+            expect(popped[0].data.isWantBlock).to.eql(expIsWantBlock);
+        };
+        const isWantBlock = true;
+        const isWantHave = false;
+        // want-block (DONT_HAVE) should have no effect on existing want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantBlockDontHave], wantBlockDontHave.size, wantBlockDontHaveBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should have no effect on existing want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantHaveDontHave], wantBlockDontHave.size, wantBlockDontHaveBlockSize, isWantBlock);
+        // want-block with size should update existing want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have with size should update existing want-block (DONT_HAVE) size,
+        // but leave it as a want-block (ie should not change it to want-have)
+        runTestCase([wantBlockDontHave, wantHave], wantHaveBlockSize, wantHaveBlockSize, isWantBlock);
+        // want-block (DONT_HAVE) size should not update existing want-block with size
+        runTestCase([wantBlock, wantBlockDontHave], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should have no effect on existing want-block with size
+        runTestCase([wantBlock, wantHaveDontHave], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-block with size should have no effect on existing want-block with size
+        runTestCase([wantBlock, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have with size should have no effect on existing want-block with size
+        runTestCase([wantBlock, wantHave], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-block (DONT_HAVE) should update type and entry size of existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlockDontHave], wantBlockDontHave.size, wantBlockDontHaveBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should have no effect on existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHaveDontHave], wantHaveDontHave.size, wantHaveDontHaveBlockSize, isWantHave);
+        // want-block with size should update existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have with size should update existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHave], wantHave.size, wantHaveBlockSize, isWantHave);
+        // want-block (DONT_HAVE) should update type and entry size of existing want-have with size
+        runTestCase([wantHave, wantBlockDontHave], wantHaveBlockSize, wantHaveBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should not update existing want-have with size
+        runTestCase([wantHave, wantHaveDontHave], wantHave.size, wantHaveBlockSize, isWantHave);
+        // want-block with size should update type and entry size of existing want-have with size
+        runTestCase([wantHave, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have should have no effect on existing want-have
+        runTestCase([wantHave, wantHave], wantHave.size, wantHaveBlockSize, isWantHave);
+    });
+    it('push have vs block active', () => {
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expCount) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            const popped = [];
+            for (const task of tasks) {
+                // Push the task
+                rq.pushTasks(peerId, [task]);
+                // Pop the task (which makes it active)
+                const res = rq.popTasks(10);
+                popped.push(...res.tasks);
+            }
+            expect(popped.length).to.eql(expCount);
+        };
+        // should ignore second want-have
+        runTestCase([wantHave, wantHave], 1);
+        // should ignore second want-block
+        runTestCase([wantBlock, wantBlock], 1);
+        // want-have does not overwrite want-block
+        runTestCase([wantBlock, wantHave], 1);
+        // can't replace want-have with want-block because want-have is active
+        runTestCase([wantHave, wantBlock], 2);
+    });
+    it('push size info active', () => {
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantBlockDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 2,
+            data: {
+                isWantBlock: true,
+                blockSize: 0,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantHaveDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 0,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expTasks) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            const popped = [];
+            for (const task of tasks) {
+                // Push the task
+                rq.pushTasks(peerId, [task]);
+                // Pop the task (which makes it active)
+                const res = rq.popTasks(10);
+                popped.push(...res.tasks);
+            }
+            expect(popped.length).to.eql(expTasks.length);
+            for (let i = 0; i < popped.length; i++) {
+                const task = popped[i];
+                const exp = expTasks[i];
+                expect(task.size).to.eql(exp.size);
+                expect(task.data.isWantBlock).to.eql(exp.data.isWantBlock);
+            }
+        };
+        // second want-block (DONT_HAVE) should be ignored
+        runTestCase([wantBlockDontHave, wantBlockDontHave], [wantBlockDontHave]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantHaveDontHave], [wantBlockDontHave]);
+        // want-block with size should be added if there is existing active want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantBlock], [wantBlockDontHave, wantBlock]);
+        // want-have with size should be added if there is existing active want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantHave], [wantBlockDontHave, wantHave]);
+        // want-block (DONT_HAVE) should be added if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlockDontHave], [wantHaveDontHave, wantBlockDontHave]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHaveDontHave], [wantHaveDontHave]);
+        // want-block with size should be added if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlock], [wantHaveDontHave, wantBlock]);
+        // want-have with size should be added if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHave], [wantHaveDontHave, wantHave]);
+        // want-block (DONT_HAVE) should be ignored if there is existing active want-block with size
+        runTestCase([wantBlock, wantBlockDontHave], [wantBlock]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-block with size
+        runTestCase([wantBlock, wantHaveDontHave], [wantBlock]);
+        // second want-block with size should be ignored
+        runTestCase([wantBlock, wantBlock], [wantBlock]);
+        // want-have with size should be ignored if there is existing active want-block with size
+        runTestCase([wantBlock, wantHave], [wantBlock]);
+        // want-block (DONT_HAVE) should be added if there is existing active want-have with size
+        runTestCase([wantHave, wantBlockDontHave], [wantHave, wantBlockDontHave]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-have with size
+        runTestCase([wantHave, wantHaveDontHave], [wantHave]);
+        // second want-have with size should be ignored
+        runTestCase([wantHave, wantHave], [wantHave]);
+        // want-block with size should be added if there is existing active want-have with size
+        runTestCase([wantHave, wantBlock], [wantHave, wantBlock]);
+    });
+});
+function cloneTasks(tasks) {
+    const clone = [];
+    for (const t of tasks) {
+        clone.push({ ...t, ...{ data: { ...t.data } } });
+    }
+    return clone;
+}
+//# sourceMappingURL=task-merger.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.js.map
new file mode 100644
index 0000000..28e774c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/decision-engine/task-merger.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"task-merger.spec.js","sourceRoot":"","sources":["../../../test/decision-engine/task-merger.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.d.ts
new file mode 100644
index 0000000..e565cde
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=gen-bitswap-network.node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.d.ts.map
new file mode 100644
index 0000000..6ed8763
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gen-bitswap-network.node.d.ts","sourceRoot":"","sources":["../../../test/network/gen-bitswap-network.node.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.js b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.js
new file mode 100644
index 0000000..aeded83
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.js
@@ -0,0 +1,43 @@
+/* eslint-env mocha */
+/* eslint-disable no-console */
+import { expect } from 'aegir/chai';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { genBitswapNetwork } from '../utils/mocks.js';
+describe('gen Bitswap network', function () {
+    // CI is very slow
+    this.timeout(300 * 1000);
+    describe('distributed blocks', () => {
+        it('with 2 nodes', async () => {
+            const numNodes = 2;
+            const blocksPerNode = 10;
+            const nodeArr = await genBitswapNetwork(numNodes);
+            // -- actual test
+            await exchangeBlocks(nodeArr, blocksPerNode);
+            await Promise.all(nodeArr.map(async (node) => {
+                await node.bitswap.stop();
+                await node.libp2p.stop();
+            }));
+        });
+    });
+});
+async function exchangeBlocks(nodes, blocksPerNode = 10) {
+    const blocks = await makeBlocks(nodes.length * blocksPerNode);
+    const cids = blocks.map((b) => b.cid);
+    // put blocksPerNode amount of blocks per node
+    await Promise.all(nodes.map(async (node, i) => {
+        await node.bitswap.start();
+        const data = new Array(blocksPerNode).fill(0).map((_, j) => {
+            const index = i * blocksPerNode + j;
+            return blocks[index];
+        });
+        await Promise.all(data.map((d) => node.bitswap.put(d.cid, d.block)));
+    }));
+    const d = Date.now();
+    // fetch all blocks on every node
+    await Promise.all(nodes.map(async (node) => {
+        const bs = await Promise.all(cids.map((cid) => node.bitswap.want(cid)));
+        expect(bs).to.deep.equal(blocks.map(b => b.block));
+    }));
+    console.log('  time -- %s', (Date.now() - d));
+}
+//# sourceMappingURL=gen-bitswap-network.node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.js.map b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.js.map
new file mode 100644
index 0000000..a44e24f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/gen-bitswap-network.node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"gen-bitswap-network.node.js","sourceRoot":"","sources":["../../../test/network/gen-bitswap-network.node.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.d.ts
new file mode 100644
index 0000000..3f7ddd5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=network.node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.d.ts.map
new file mode 100644
index 0000000..5dbc5c7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"network.node.d.ts","sourceRoot":"","sources":["../../../test/network/network.node.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.js b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.js
new file mode 100644
index 0000000..205038e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.js
@@ -0,0 +1,280 @@
+/* eslint-env mocha */
+import { expect, assert } from 'aegir/chai';
+import * as lp from 'it-length-prefixed';
+import { pipe } from 'it-pipe';
+import pDefer from 'p-defer';
+import { createLibp2pNode } from '../utils/create-libp2p-node.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { Network } from '../../src/network.js';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { Stats } from '../../src/stats/index.js';
+import sinon from 'sinon';
+import { CID } from 'multiformats/cid';
+import delay from 'delay';
+function createBitswapMock() {
+    // @ts-expect-error incomplete implementation
+    return {
+        _receiveMessage: async () => { },
+        _receiveError: () => { },
+        _onPeerConnected: () => { },
+        _onPeerDisconnected: () => { }
+    };
+}
+describe('network', () => {
+    let p2pA;
+    let networkA;
+    let bitswapMockA;
+    let p2pB;
+    let networkB;
+    let bitswapMockB;
+    let p2pC;
+    let networkC;
+    let bitswapMockC;
+    let blocks;
+    beforeEach(async () => {
+        [p2pA, p2pB, p2pC] = await Promise.all([
+            createLibp2pNode(),
+            createLibp2pNode(),
+            createLibp2pNode()
+        ]);
+        blocks = await makeBlocks(2);
+        bitswapMockA = createBitswapMock();
+        bitswapMockB = createBitswapMock();
+        bitswapMockC = createBitswapMock();
+        // @ts-expect-error {} is not a real libp2p
+        networkA = new Network(p2pA, bitswapMockA, new Stats({}));
+        // @ts-expect-error {} is not a real libp2p
+        networkB = new Network(p2pB, bitswapMockB, new Stats({}));
+        // only bitswap100
+        // @ts-expect-error {} is not a real libp2p
+        networkC = new Network(p2pC, bitswapMockC, new Stats({}), { b100Only: true });
+        await networkA.start();
+        await networkB.start();
+        await networkC.start();
+    });
+    afterEach(async () => {
+        await p2pA.stop();
+        await p2pB.stop();
+        await p2pC.stop();
+    });
+    it('connectTo fail', async () => {
+        try {
+            await networkA.connectTo(p2pB.peerId);
+            assert.fail();
+        }
+        catch (err) {
+            expect(err).to.exist();
+        }
+    });
+    it('onPeerConnected success', async () => {
+        const p2pAConnected = pDefer();
+        const p2pBConnected = pDefer();
+        bitswapMockA._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pB.peerId.toString());
+            p2pBConnected.resolve();
+        };
+        bitswapMockB._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pA.peerId.toString());
+            p2pAConnected.resolve();
+        };
+        const ma = p2pB.getMultiaddrs()[0];
+        await p2pA.dial(ma);
+        await Promise.all([
+            p2pAConnected,
+            p2pBConnected
+        ]);
+    });
+    it('connectTo success', async () => {
+        await p2pA.peerStore.addressBook.add(p2pB.peerId, p2pB.getMultiaddrs());
+        await networkA.connectTo(p2pB.peerId);
+    });
+    it('sets up peer handlers for previously connected peers', async () => {
+        let p2pAConnected = pDefer();
+        let p2pBConnected = pDefer();
+        bitswapMockA._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pB.peerId.toString());
+            p2pBConnected.resolve();
+        };
+        bitswapMockB._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pA.peerId.toString());
+            p2pAConnected.resolve();
+        };
+        const ma = p2pB.getMultiaddrs()[0];
+        await p2pA.dial(ma);
+        await Promise.all([
+            p2pAConnected,
+            p2pBConnected
+        ]);
+        await networkA.stop();
+        await networkB.stop();
+        p2pAConnected = pDefer();
+        p2pBConnected = pDefer();
+        await networkA.start();
+        await networkB.start();
+        await Promise.all([
+            p2pAConnected,
+            p2pBConnected
+        ]);
+    });
+    const versions = [{
+            num: '1.0.0', serialize: (msg) => msg.serializeToBitswap100()
+        }, {
+            num: '1.1.0', serialize: (msg) => msg.serializeToBitswap110()
+        }, {
+            num: '1.2.0', serialize: (msg) => msg.serializeToBitswap110()
+        }];
+    for (const version of versions) {
+        it('._receiveMessage success from Bitswap ' + version.num, async () => {
+            const msg = new Message(true);
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            const deferred = pDefer();
+            msg.addEntry(b1.cid, 0);
+            msg.addBlock(b1.cid, b1.block);
+            msg.addBlock(b2.cid, b2.block);
+            bitswapMockB._receiveMessage = async (peerId, msgReceived) => {
+                // cannot do deep comparison on objects as one has Buffers and one has Uint8Arrays
+                expect(msg.serializeToBitswap110()).to.equalBytes(msgReceived.serializeToBitswap110());
+                bitswapMockB._receiveMessage = async () => { };
+                bitswapMockB._receiveError = () => { };
+                deferred.resolve();
+            };
+            bitswapMockB._receiveError = (err) => { deferred.reject(err); };
+            const ma = p2pB.getMultiaddrs()[0];
+            const stream = await p2pA.dialProtocol(ma, '/ipfs/bitswap/' + version.num);
+            await pipe([version.serialize(msg)], (source) => lp.encode(source), stream);
+            await deferred.promise;
+        });
+    }
+    // From p2pA to p2pB
+    it('.sendMessage on Bitswap 1.1.0', async () => {
+        const msg = new Message(true);
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        const deferred = pDefer();
+        msg.addEntry(b1.cid, 0);
+        msg.addBlock(b1.cid, b1.block);
+        msg.addBlock(b2.cid, b2.block);
+        // In a real network scenario, peers will be discovered and their addresses
+        // will be added to the addressBook before bitswap kicks in
+        await p2pA.peerStore.addressBook.set(p2pB.peerId, p2pB.getMultiaddrs());
+        bitswapMockB._receiveMessage = async (peerId, msgReceived) => {
+            // cannot do deep comparison on objects as one has Buffers and one has Uint8Arrays
+            expect(msg.serializeToBitswap110()).to.equalBytes(msgReceived.serializeToBitswap110());
+            bitswapMockB._receiveMessage = async () => { };
+            bitswapMockB._receiveError = () => { };
+            deferred.resolve();
+        };
+        bitswapMockB._receiveError = deferred.reject;
+        await networkA.sendMessage(p2pB.peerId, msg);
+    });
+    it('dial to peer on Bitswap 1.0.0', async () => {
+        const ma = p2pC.getMultiaddrs()[0];
+        const stream = await p2pA.dialProtocol(ma, ['/ipfs/bitswap/1.1.0', '/ipfs/bitswap/1.0.0']);
+        expect(stream).to.have.nested.property('stat.protocol', '/ipfs/bitswap/1.0.0');
+    });
+    // From p2pA to p2pC
+    it('.sendMessage on Bitswap 1.1.0', async () => {
+        const msg = new Message(true);
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        const deferred = pDefer();
+        msg.addEntry(b1.cid, 0);
+        msg.addBlock(b1.cid, b1.block);
+        msg.addBlock(b2.cid, b2.block);
+        // In a real network scenario, peers will be discovered and their addresses
+        // will be added to the addressBook before bitswap kicks in
+        await p2pA.peerStore.addressBook.set(p2pC.peerId, p2pC.getMultiaddrs());
+        bitswapMockC._receiveMessage = async (peerId, msgReceived) => {
+            // cannot do deep comparison on objects as one has Buffers and one has Uint8Arrays
+            expect(msg.serializeToBitswap110()).to.equalBytes(msgReceived.serializeToBitswap110());
+            bitswapMockC._receiveMessage = async () => { };
+            bitswapMockC._receiveError = () => { };
+            deferred.resolve();
+        };
+        bitswapMockC._receiveError = deferred.reject;
+        await networkA.sendMessage(p2pC.peerId, msg);
+        await deferred.promise;
+    });
+    it('dials to peer using Bitswap 1.2.0', async () => {
+        await networkA.stop();
+        await networkB.stop();
+        // only supports 1.2.0
+        networkB._protocols = ['/ipfs/bitswap/1.2.0'];
+        await networkA.start();
+        await networkB.start();
+        // In a real network scenario, peers will be discovered and their addresses
+        // will be added to the addressBook before bitswap kicks in
+        await p2pA.peerStore.addressBook.set(p2pB.peerId, p2pB.getMultiaddrs());
+        const deferred = pDefer();
+        bitswapMockB._receiveMessage = async () => {
+            deferred.resolve();
+        };
+        await networkA.sendMessage(p2pB.peerId, new Message(true));
+        return deferred;
+    });
+    it('survives connection failures', async () => {
+        const mockFindProviders = sinon.stub();
+        const mockDial = sinon.stub();
+        const libp2p = {
+            // @ts-expect-error incomplete implementation
+            contentRouting: {
+                findProviders: mockFindProviders
+            },
+            register: sinon.stub(),
+            unregister: sinon.stub(),
+            getConnections: () => [],
+            dial: mockDial,
+            handle: sinon.stub()
+        };
+        const network = new Network(libp2p, bitswapMockA, new Stats(libp2p));
+        const cid = CID.parse('QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn');
+        const provider1 = {
+            id: 'provider1'
+        };
+        const provider2 = {
+            id: 'provider2'
+        };
+        mockFindProviders.withArgs(cid).returns([
+            provider1,
+            provider2
+        ]);
+        mockDial.withArgs(provider1.id).returns(Promise.reject(new Error('Could not dial')));
+        mockDial.withArgs(provider2.id).returns(Promise.resolve());
+        await network.start();
+        await network.findAndConnect(cid);
+        expect(mockDial.calledWith(provider1.id)).to.be.true();
+        expect(mockDial.calledWith(provider2.id)).to.be.true();
+    });
+    it('times out slow senders', async () => {
+        const deferred = pDefer();
+        const libp2p = {
+            handle: sinon.stub(),
+            register: sinon.stub(),
+            unregister: sinon.stub(),
+            getConnections: () => []
+        };
+        // @ts-expect-error not a complete libp2p implementation
+        const network = new Network(libp2p, {}, {}, {
+            incomingStreamTimeout: 1
+        });
+        await network.start();
+        const stream = {
+            source: (async function* () {
+                await delay(100);
+                yield 'hello';
+            }()),
+            abort: (err) => {
+                deferred.resolve(err);
+            },
+            stat: {
+                protocol: 'hello'
+            }
+        };
+        const handler = libp2p.handle.getCall(0).args[1];
+        handler({ stream, connection: {} });
+        const err = await deferred.promise;
+        expect(err).to.have.property('code', 'ABORT_ERR');
+    });
+});
+//# sourceMappingURL=network.node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.js.map b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.js.map
new file mode 100644
index 0000000..94e4c75
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/network/network.node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"network.node.js","sourceRoot":"","sources":["../../../test/network/network.node.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/node.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/node.d.ts
new file mode 100644
index 0000000..1f6eb2e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/node.d.ts
@@ -0,0 +1,8 @@
+import './bitswap.js';
+import './bitswap-mock-internals.js';
+import './bitswap-stats.js';
+import './decision-engine/decision-engine.js';
+import './network/network.node.js';
+import './network/gen-bitswap-network.node.js';
+import './swarms.js';
+//# sourceMappingURL=node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/node.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/node.d.ts.map
new file mode 100644
index 0000000..0c776f8
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"node.d.ts","sourceRoot":"","sources":["../../test/node.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,CAAA;AACrB,OAAO,6BAA6B,CAAA;AACpC,OAAO,oBAAoB,CAAA;AAC3B,OAAO,sCAAsC,CAAA;AAC7C,OAAO,2BAA2B,CAAA;AAClC,OAAO,uCAAuC,CAAA;AAC9C,OAAO,aAAa,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/node.js b/node_modules/ipfs-bitswap/dist/dist/test/node.js
new file mode 100644
index 0000000..972186f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/node.js
@@ -0,0 +1,8 @@
+import './bitswap.js';
+import './bitswap-mock-internals.js';
+import './bitswap-stats.js';
+import './decision-engine/decision-engine.js';
+import './network/network.node.js';
+import './network/gen-bitswap-network.node.js';
+import './swarms.js';
+//# sourceMappingURL=node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/node.js.map b/node_modules/ipfs-bitswap/dist/dist/test/node.js.map
new file mode 100644
index 0000000..80847ba
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"node.js","sourceRoot":"","sources":["../../test/node.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,CAAA;AACrB,OAAO,6BAA6B,CAAA;AACpC,OAAO,oBAAoB,CAAA;AAC3B,OAAO,sCAAsC,CAAA;AAC7C,OAAO,2BAA2B,CAAA;AAClC,OAAO,uCAAuC,CAAA;AAC9C,OAAO,aAAa,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.d.ts
new file mode 100644
index 0000000..4bc416c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=notifications.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.d.ts.map
new file mode 100644
index 0000000..6caa722
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"notifications.spec.d.ts","sourceRoot":"","sources":["../../test/notifications.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.js
new file mode 100644
index 0000000..eb58246
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.js
@@ -0,0 +1,83 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { base32 } from 'multiformats/bases/base32';
+import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
+import { Notifications } from '../src/notifications.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { makePeerId } from './utils/make-peer-id.js';
+describe('Notifications', () => {
+    let blocks;
+    let peerId;
+    before(async () => {
+        blocks = await makeBlocks(3);
+        peerId = await makePeerId();
+    });
+    it('hasBlock', (done) => {
+        const n = new Notifications(peerId);
+        const b = blocks[0];
+        n.once(`block:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`, (block) => {
+            expect(b.block).to.equalBytes(block);
+            done();
+        });
+        n.hasBlock(b.cid, b.block);
+    });
+    describe('wantBlock', () => {
+        it('receive block', async () => {
+            const n = new Notifications(peerId);
+            const b = blocks[0];
+            const p = n.wantBlock(b.cid);
+            // check that listeners have been set up
+            expect(n.listenerCount(`block:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(1);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(1);
+            n.hasBlock(b.cid, b.block);
+            const block = await p;
+            expect(b.block).to.equalBytes(block);
+            // check that internal cleanup works as expected
+            expect(n.listenerCount(`block:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(0);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(0);
+        });
+        it('unwant block', async () => {
+            const n = new Notifications(peerId);
+            const b = blocks[0];
+            const p = n.wantBlock(b.cid);
+            n.unwantBlock(b.cid);
+            await expect(p).to.eventually.be.rejectedWith(/unwanted/);
+        });
+        it('abort block want', async () => {
+            const n = new Notifications(peerId);
+            const b = blocks[0];
+            const controller = new AbortController();
+            const p = n.wantBlock(b.cid, {
+                signal: controller.signal
+            });
+            controller.abort();
+            await expect(p).to.eventually.be.rejectedWith(/aborted/);
+        });
+    });
+    describe('wantBlock with same cid derived from distinct encodings', () => {
+        it('receive block', async () => {
+            const n = new Notifications(peerId);
+            const cid = CID.parse(blocks[0].cid.toV1().toString());
+            const cid2 = CID.parse(cid.toString(base32));
+            const p = n.wantBlock(cid2);
+            // check that listeners have been set up
+            expect(n.listenerCount(`block:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(1);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(1);
+            n.hasBlock(cid, blocks[0].block);
+            await expect(p).to.eventually.deep.equal(blocks[0].block);
+            // check that internal cleanup works as expected
+            expect(n.listenerCount(`block:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(0);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(0);
+        });
+        it('unwant block', async () => {
+            const n = new Notifications(peerId);
+            const cid = CID.parse(blocks[0].cid.toV1().toString());
+            const cid2 = CID.parse(cid.toString(base32));
+            const p = n.wantBlock(cid2);
+            n.unwantBlock(cid);
+            await expect(p).to.eventually.be.rejectedWith(/unwanted/);
+        });
+    });
+});
+//# sourceMappingURL=notifications.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.js.map
new file mode 100644
index 0000000..4621c92
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/notifications.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"notifications.spec.js","sourceRoot":"","sources":["../../test/notifications.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/swarms.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/swarms.d.ts
new file mode 100644
index 0000000..d6a6a26
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/swarms.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=swarms.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/swarms.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/swarms.d.ts.map
new file mode 100644
index 0000000..13086b1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/swarms.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"swarms.d.ts","sourceRoot":"","sources":["../../test/swarms.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/swarms.js b/node_modules/ipfs-bitswap/dist/dist/test/swarms.js
new file mode 100644
index 0000000..7e75388
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/swarms.js
@@ -0,0 +1,82 @@
+/* eslint-env mocha */
+/* eslint-disable no-console */
+import stats from 'stats-lite';
+import { distributionTest } from './utils/distribution-test.js';
+import { EventEmitter } from 'events';
+const test = it;
+describe.skip('swarms', () => {
+    const print = Boolean(process.env.PRINT);
+    let emitter;
+    before(() => {
+        emitter = new EventEmitter();
+    });
+    after(() => {
+        process.exit();
+    });
+    test('2 nodes, 2 blocks', async function () {
+        this.timeout(10 * 1000);
+        maybePrint('2 nodes, 2 blocks', emitter);
+        await distributionTest(2, 2, 1, emitter);
+    });
+    test('10 nodes, 2 blocks', async function () {
+        this.timeout(30 * 1000);
+        maybePrint('10 nodes, 2 blocks', emitter);
+        await distributionTest(10, 2, 1, emitter);
+    });
+    test('10 nodes, 10 blocks', async function () {
+        this.timeout(30 * 1000);
+        maybePrint('10 nodes, 10 blocks', emitter);
+        await distributionTest(10, 10, 1, emitter);
+    });
+    test('10 nodes, 20 blocks', async function () {
+        this.timeout(30 * 1000);
+        maybePrint('10 nodes, 20 blocks', emitter);
+        await distributionTest(10, 20, 1, emitter);
+    });
+    test('50 nodes, 2 blocks', async function () {
+        this.timeout(600 * 1000);
+        maybePrint('50 nodes, 2 blocks', emitter);
+        await distributionTest(50, 2, 1, emitter);
+    });
+    test.skip('100 nodes, 2 blocks', async function () {
+        this.timeout(600 * 1000);
+        maybePrint('100 nodes, 2 blocks', emitter);
+        await distributionTest(100, 2, 1, emitter);
+    });
+    test('10 nodes, 100 blocks', async function () {
+        this.timeout(600 * 1000);
+        maybePrint('10 nodes, 100 blocks', emitter);
+        await distributionTest(10, 100, 1, emitter);
+    });
+    function maybePrint(suite, emitter) {
+        if (!print) {
+            return;
+        }
+        const elapseds = [];
+        emitter.once('start', () => {
+            console.log('\n------------------------');
+            console.log(suite);
+            console.log('started');
+        });
+        emitter.once('all connected', () => {
+            console.log('all nodes connected to each other');
+        });
+        emitter.once('stop', () => {
+            console.log('stopping');
+        });
+        emitter.once('stopped', () => {
+            console.log('stopped');
+            console.log('stats:');
+            console.log('---------');
+            console.log('mean: %s', stats.mean(elapseds));
+            console.log('median: %s', stats.median(elapseds));
+            console.log('variance: %s', stats.variance(elapseds));
+            console.log('standard deviation: %s', stats.stdev(elapseds));
+            console.log('85th percentile: %s', stats.percentile(elapseds, 0.85));
+        });
+        emitter.on('got block', (elapsed) => {
+            elapseds.push(elapsed);
+        });
+    }
+});
+//# sourceMappingURL=swarms.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/swarms.js.map b/node_modules/ipfs-bitswap/dist/dist/test/swarms.js.map
new file mode 100644
index 0000000..c7dc286
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/swarms.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"swarms.js","sourceRoot":"","sources":["../../test/swarms.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.d.ts
new file mode 100644
index 0000000..35f5cbb
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=message.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.d.ts.map
new file mode 100644
index 0000000..04d6b0a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"message.spec.d.ts","sourceRoot":"","sources":["../../../test/types/message.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.js
new file mode 100644
index 0000000..a6e9aa2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.js
@@ -0,0 +1,307 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { base32 } from 'multiformats/bases/base32';
+import { base64 } from 'multiformats/bases/base64';
+import { base58btc } from 'multiformats/bases/base58';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import loadFixture from 'aegir/fixtures';
+import { Message } from '../../src/message/message.js';
+import { BitswapMessage } from '../../src/message/index.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import varintEncoder from '../../src/utils/varint-encoder.js';
+const testDataPath = 'test/fixtures/serialized-from-go';
+const rawMessageFullWantlist = loadFixture(testDataPath + '/bitswap110-message-full-wantlist');
+const rawMessageOneBlock = loadFixture(testDataPath + '/bitswap110-message-one-block');
+describe('BitswapMessage', () => {
+    let blocks;
+    let cids;
+    before(async () => {
+        blocks = await makeBlocks(4);
+        cids = blocks.map((b) => b.cid);
+    });
+    describe('.addEntry', () => {
+        it('want type defaults to want block', async () => {
+            const cid = cids[1];
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cid, 1);
+            const serialized = msg.serializeToBitswap100();
+            const deserialized = await BitswapMessage.deserialize(serialized);
+            expect(deserialized.wantlist.get(cid.toString(base58btc))).to.have.nested.property('entry.wantType', Message.Wantlist.WantType.Block);
+        });
+        it('updates priority only if same want type', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[0], 2, BitswapMessage.WantType.Have, true, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('priority', 1);
+            msg.addEntry(cids[0], 2, BitswapMessage.WantType.Block, true, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('priority', 2);
+        });
+        it('only changes from dont cancel to do cancel', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, true, false);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('cancel', true);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, true, false);
+            expect(msg.wantlist.get(cids[1].toString(base58btc))).to.have.property('cancel', true);
+        });
+        it('only changes from dont send to do send DONT_HAVE', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, true);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('sendDontHave', true);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, true);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, false);
+            expect(msg.wantlist.get(cids[1].toString(base58btc))).to.have.property('sendDontHave', true);
+        });
+        it('only override want-have with want-block (not vice versa)', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Have, false, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('wantType', BitswapMessage.WantType.Block);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Have, false, false);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, false);
+            expect(msg.wantlist.get(cids[1].toString(base58btc))).to.have.property('wantType', BitswapMessage.WantType.Block);
+        });
+    });
+    it('.serializeToBitswap100', () => {
+        const block = blocks[1];
+        const msg = new BitswapMessage(true);
+        msg.addBlock(block.cid, block.block);
+        const serialized = msg.serializeToBitswap100();
+        expect(Message.decode(serialized).blocks).to.eql([block.block]);
+    });
+    it('.serializeToBitswap110', () => {
+        const block = blocks[1];
+        const msg = new BitswapMessage(true);
+        msg.addBlock(block.cid, block.block);
+        msg.setPendingBytes(10);
+        msg.addEntry(cids[0], 10, BitswapMessage.WantType.Have, false, true);
+        msg.addHave(cids[1]);
+        msg.addDontHave(cids[2]);
+        const serialized = msg.serializeToBitswap110();
+        const decoded = Message.decode(serialized);
+        expect(decoded.payload[0].data).to.eql(block.block);
+        expect(decoded.pendingBytes).to.eql(10);
+        expect(decoded).to.have.nested.property('wantlist.entries').with.lengthOf(1);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].priority', 10);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].wantType', BitswapMessage.WantType.Have);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].cancel', false);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].sendDontHave', true);
+        expect(decoded.blockPresences.length).to.eql(2);
+        for (const bp of decoded.blockPresences) {
+            if (bp.type === BitswapMessage.BlockPresenceType.Have) {
+                expect(bp.cid).to.equalBytes(cids[1].bytes);
+            }
+            else {
+                expect(bp.cid).to.equalBytes(cids[2].bytes);
+            }
+        }
+    });
+    it('.deserialize a Bitswap100 Message', async () => {
+        const cid0 = cids[0];
+        const cid1 = cids[1];
+        const cid2 = cids[2];
+        const b1 = blocks[1];
+        const b2 = blocks[2];
+        const raw = Message.encode({
+            wantlist: {
+                entries: [{
+                        block: cid0.bytes,
+                        cancel: false,
+                        priority: 0,
+                        sendDontHave: false,
+                        wantType: Message.Wantlist.WantType.Block
+                    }],
+                full: true
+            },
+            blocks: [
+                b1.block,
+                b2.block
+            ]
+        });
+        const msg = await BitswapMessage.deserialize(raw);
+        expect(msg.full).to.equal(true);
+        expect(Array.from(msg.wantlist))
+            .to.eql([[
+                cid0.toString(base58btc),
+                new BitswapMessage.Entry(cid0, 0, BitswapMessage.WantType.Block, false)
+            ]]);
+        expect(Array.from(msg.blocks).map((b) => [b[0], b[1]])).to.eql([
+            [cid1.toString(base58btc), b1.block],
+            [cid2.toString(base58btc), b2.block]
+        ]);
+    });
+    it('.deserialize a Bitswap110 Message', async () => {
+        const cid0 = cids[0];
+        const cid1 = cids[1];
+        const cid2 = cids[2];
+        const cid3 = cids[3];
+        const b1 = blocks[1];
+        const b2 = blocks[2];
+        const raw = Message.encode({
+            wantlist: {
+                entries: [{
+                        block: cid0.bytes,
+                        cancel: false,
+                        wantType: BitswapMessage.WantType.Block,
+                        sendDontHave: true,
+                        priority: 0
+                    }],
+                full: true
+            },
+            payload: [{
+                    data: b1.block,
+                    prefix: varintEncoder([
+                        cid1.version,
+                        cid1.code,
+                        cid1.multihash.code,
+                        cid1.multihash.digest.length
+                    ])
+                }, {
+                    data: b2.block,
+                    prefix: varintEncoder([
+                        cid2.version,
+                        cid2.code,
+                        cid2.multihash.code,
+                        cid2.multihash.digest.length
+                    ])
+                }],
+            blockPresences: [{
+                    cid: cid3.bytes,
+                    type: BitswapMessage.BlockPresenceType.Have
+                }],
+            pendingBytes: 10
+        });
+        const msg = await BitswapMessage.deserialize(raw);
+        expect(msg.full).to.equal(true);
+        expect(Array.from(msg.wantlist))
+            .to.eql([[
+                cid0.toString(base58btc),
+                new BitswapMessage.Entry(cid0, 0, BitswapMessage.WantType.Block, false, true)
+            ]]);
+        expect(Array.from(msg.blocks).map((b) => [b[0], b[1]])).to.eql([
+            [cid1.toString(base58btc), b1.block],
+            [cid2.toString(base58btc), b2.block]
+        ]);
+        expect(Array.from(msg.blockPresences))
+            .to.eql([[
+                cid3.toString(base58btc),
+                BitswapMessage.BlockPresenceType.Have
+            ]]);
+        expect(msg.pendingBytes).to.equal(10);
+    });
+    it('ignores duplicates', () => {
+        const b = blocks[0];
+        const cid = cids[0];
+        const m = new BitswapMessage(true);
+        m.addEntry(cid, 1);
+        m.addEntry(cid, 1);
+        expect(m.wantlist.size).to.be.eql(1);
+        m.addBlock(b.cid, b.block);
+        m.addBlock(b.cid, b.block);
+        expect(m.blocks.size).to.be.eql(1);
+    });
+    it('.empty', () => {
+        const m = new BitswapMessage(true);
+        expect(m.empty).to.equal(true);
+    });
+    it('non-full wantlist message', () => {
+        const msg = new BitswapMessage(false);
+        const serialized = msg.serializeToBitswap100();
+        expect(Message.decode(serialized)).to.have.nested.property('wantlist.full', false);
+    });
+    describe('.equals', () => {
+        it('true, same message', () => {
+            const b = blocks[0];
+            const cid = cids[0];
+            const m1 = new BitswapMessage(true);
+            const m2 = new BitswapMessage(true);
+            m1.addEntry(cid, 1);
+            m2.addEntry(cid, 1);
+            m1.addBlock(b.cid, b.block);
+            m2.addBlock(b.cid, b.block);
+            expect(m1.equals(m2)).to.equal(true);
+        });
+        it('false, different entries', () => {
+            const b = blocks[0];
+            const cid = cids[0];
+            const m1 = new BitswapMessage(true);
+            const m2 = new BitswapMessage(true);
+            m1.addEntry(cid, 100);
+            m2.addEntry(cid, 3750);
+            m1.addBlock(b.cid, b.block);
+            m2.addBlock(b.cid, b.block);
+            expect(m1.equals(m2)).to.equal(false);
+        });
+        it('true, same cid derived from distinct encoding', () => {
+            const b = blocks[0];
+            const cid = cids[0].toV1();
+            const cid1 = CID.parse(cid.toString(base32));
+            const cid2 = CID.parse(cid.toString(base64), base64);
+            const m1 = new BitswapMessage(true);
+            const m2 = new BitswapMessage(true);
+            m1.addEntry(cid1, 1);
+            m2.addEntry(cid2, 1);
+            m1.addBlock(b.cid, b.block);
+            m2.addBlock(b.cid, b.block);
+            expect(m1.equals(m2)).to.equal(true);
+        });
+    });
+    describe('BitswapMessageEntry', () => {
+        it('exposes the wantlist entry properties', () => {
+            const cid = cids[0];
+            const entry = new BitswapMessage.Entry(cid, 5, BitswapMessage.WantType.Block, false, false);
+            expect(entry).to.have.property('cid');
+            expect(entry).to.have.property('priority', 5);
+            expect(entry).to.have.property('wantType', BitswapMessage.WantType.Block);
+            expect(entry).to.have.property('cancel', false);
+            expect(entry).to.have.property('sendDontHave', false);
+        });
+        it('allows setting properties on the wantlist entry', () => {
+            const cid1 = cids[0];
+            const cid2 = cids[1];
+            const entry = new BitswapMessage.Entry(cid1, 5, BitswapMessage.WantType.Block, false, false);
+            expect(entry.entry).to.have.property('cid');
+            expect(entry.entry).to.have.property('priority', 5);
+            entry.cid = cid2;
+            entry.priority = 2;
+            expect(entry.entry).to.have.property('cid');
+            expect(entry.entry.cid.equals(cid2));
+            expect(entry.entry).to.have.property('priority', 2);
+        });
+    });
+    describe('go interop', () => {
+        it('bitswap 1.0.0 message', async () => {
+            const goEncoded = uint8ArrayFromString('CioKKAoiEiAs8k26X7CjDiboOyrFueKeGxYeXB+nQl5zBDNik4uYJBAKGAA=', 'base64pad');
+            const msg = new BitswapMessage(false);
+            const cid = CID.parse('QmRN6wdp1S2A5EtjW9A3M1vKSBuQQGcgvuhoMUoEz4iiT5');
+            msg.addEntry(cid, 10);
+            const res = await BitswapMessage.deserialize(goEncoded);
+            expect(res).to.eql(msg);
+            // TODO: this go bitswap 1.0.0 message was created when the most of the fields were `optional`
+            // https://github.com/ipfs/go-libipfs/blob/a43c8829ef499c6ddab4f10d56a7c45738224e7f/bitswap/message/pb/message.proto
+            // They've since reverted to being `singular` which means they can be omitted from the buffer
+            // if they are set to the default value so compliant protobuf encoders wont produce bytes that
+            // match any more.
+            // expect(msg.serializeToBitswap100()).to.equalBytes(goEncoded)
+        });
+        describe.skip('bitswap 1.1.0 message', () => {
+            // TODO check with whyrusleeping the quality of the raw protobufs
+            // deserialization is just failing on the first and the second has a
+            // payload but empty
+            it('full wantlist message', async () => {
+                await BitswapMessage.deserialize(rawMessageFullWantlist);
+                // TODO
+                //   check the deserialised message
+            });
+            it('one block message', async () => {
+                await BitswapMessage.deserialize(rawMessageOneBlock);
+                // TODO
+                //   check the deserialised message
+            });
+        });
+    });
+});
+//# sourceMappingURL=message.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.js.map
new file mode 100644
index 0000000..a167a70
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/message.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"message.spec.js","sourceRoot":"","sources":["../../../test/types/message.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.d.ts
new file mode 100644
index 0000000..7877bd9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=wantlist.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.d.ts.map
new file mode 100644
index 0000000..e04bc8b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"wantlist.spec.d.ts","sourceRoot":"","sources":["../../../test/types/wantlist.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.js
new file mode 100644
index 0000000..22fa646
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.js
@@ -0,0 +1,106 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { base58btc } from 'multiformats/bases/base58';
+import { base64 } from 'multiformats/bases/base64';
+import { Wantlist } from '../../src/wantlist/index.js';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+const DAG_PB_CODEC = 0x70;
+describe('Wantlist', () => {
+    let wm;
+    let blocks;
+    before(async () => {
+        blocks = await makeBlocks(2);
+    });
+    beforeEach(() => {
+        wm = new Wantlist();
+    });
+    it('length', () => {
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        wm.add(b1.cid, 2, Message.WantType.Block);
+        wm.add(b2.cid, 1, Message.WantType.Block);
+        expect(wm).to.have.length(2);
+    });
+    describe('remove', () => {
+        it('removes with a single ref', () => {
+            const b = blocks[0];
+            wm.add(b.cid, 1, Message.WantType.Block);
+            wm.remove(b.cid);
+            expect(wm).to.have.length(0);
+        });
+        it('removes with multiple refs', () => {
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            wm.add(b1.cid, 1, Message.WantType.Block);
+            wm.add(b2.cid, 2, Message.WantType.Block);
+            expect(wm).to.have.length(2);
+            wm.remove(b2.cid);
+            expect(wm).to.have.length(1);
+            wm.add(b1.cid, 2, Message.WantType.Block);
+            wm.remove(b1.cid);
+            expect(wm).to.have.length(1);
+            wm.remove(b1.cid);
+            expect(wm).to.have.length(0);
+        });
+        it('ignores non existing removes', () => {
+            const b = blocks[0];
+            wm.add(b.cid, 1, Message.WantType.Block);
+            wm.remove(b.cid);
+            wm.remove(b.cid);
+            expect(wm).to.have.length(0);
+        });
+    });
+    it('entries', () => {
+        const b = blocks[0];
+        wm.add(b.cid, 2, Message.WantType.Have);
+        expect(Array.from(wm.entries())).to.be.eql([[
+                b.cid.toString(base58btc),
+                new Wantlist.Entry(b.cid, 2, Message.WantType.Have)
+            ]]);
+    });
+    it('sortedEntries', () => {
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        wm.add(b1.cid, 1, Message.WantType.Block);
+        wm.add(b2.cid, 1, Message.WantType.Block);
+        expect(Array.from(wm.sortedEntries())).to.be.eql([
+            [b1.cid.toString(base58btc), new Wantlist.Entry(b1.cid, 1, Message.WantType.Block)],
+            [b2.cid.toString(base58btc), new Wantlist.Entry(b2.cid, 1, Message.WantType.Block)]
+        ]);
+    });
+    it('contains', () => {
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        wm.add(b1.cid, 2, Message.WantType.Block);
+        expect(wm.contains(b1.cid)).to.be.true();
+        expect(wm.contains(b2.cid)).to.be.false();
+    });
+    it('with cidV1', async () => {
+        const b = blocks[0];
+        const digest = await sha256.digest(b.block);
+        const cid = CID.createV1(DAG_PB_CODEC, digest);
+        wm.add(cid, 2, Message.WantType.Block);
+        expect(Array.from(wm.entries())).to.be.eql([[
+                cid.toString(base58btc),
+                new Wantlist.Entry(cid, 2, Message.WantType.Block)
+            ]]);
+    });
+    it('matches same cid derived from distinct encodings', () => {
+        // Base 64
+        const id1 = 'mAVUSIKlIkE8vD0ebj4GXaUswGEsNLtHBzSoewPuF0pmhkqRH';
+        // Base 32
+        const id2 = 'bafkreifjjcie6lypi6ny7amxnfftagclbuxndqonfipmb64f2km2devei4';
+        const cid1 = CID.parse(id1, base64);
+        const cid2 = CID.parse(id2);
+        wm.add(cid1, 2, Message.WantType.Block);
+        expect(wm.contains(cid1)).to.be.true();
+        expect(wm.contains(cid2)).to.be.true();
+        wm.remove(cid1);
+        expect(wm.contains(cid1)).to.be.false();
+        expect(wm.contains(cid2)).to.be.false();
+    });
+});
+//# sourceMappingURL=wantlist.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.js.map
new file mode 100644
index 0000000..d8c5d56
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/types/wantlist.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"wantlist.spec.js","sourceRoot":"","sources":["../../../test/types/wantlist.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.d.ts
new file mode 100644
index 0000000..defd4da
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=utils.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.d.ts.map
new file mode 100644
index 0000000..8f252e3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.spec.d.ts","sourceRoot":"","sources":["../../test/utils.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.js
new file mode 100644
index 0000000..87f9b77
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.js
@@ -0,0 +1,272 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { BitswapMessageEntry } from '../src/message/entry.js';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import { BitswapMessage } from '../src/message/index.js';
+import { groupBy, uniqWith, pullAllWith, includesWith, sortBy, isMapEqual } from '../src/utils/index.js';
+import { SortedMap } from '../src/utils/sorted-map.js';
+import varintEncoder from '../src/utils/varint-encoder.js';
+// @ts-expect-error no types
+import varintDecoder from 'varint-decoder';
+const DAG_PB_CODEC = 0x70;
+describe('utils spec', function () {
+    it('groupBy', () => {
+        const list = [
+            { name: 'name1', score: 1 },
+            { name: 'name2', score: 1 },
+            { name: 'name3', score: 2 }
+        ];
+        const actual = groupBy(p => p.score === 1 ? 'a' : 'b', list);
+        expect(actual).to.deep.equal({
+            a: [
+                { name: 'name1', score: 1 },
+                { name: 'name2', score: 1 }
+            ],
+            b: [{ name: 'name3', score: 2 }]
+        });
+    });
+    it('pullAllWith', () => {
+        const array = [{ x: 1, y: 2 }, { x: 3, y: 4 }, { x: 5, y: 6 }];
+        const actual = pullAllWith((a, b) => (a.x === b.x && a.y === b.y), array, [{ x: 3, y: 4 }]);
+        expect(actual).to.deep.equal([{ x: 1, y: 2 }, { x: 5, y: 6 }]);
+    });
+    it('uniqWith', () => {
+        class T {
+            constructor(id) {
+                this.id = id;
+            }
+            equals(instance) {
+                return instance.id === this.id;
+            }
+        }
+        const list = [new T(1), new T(1), new T(2)];
+        const r = uniqWith((a, b) => a.equals(b), list);
+        if (r[0].id === 1 && r[1].id === 2) {
+            return;
+        }
+        throw new Error('no match');
+    });
+    it('includesWith', () => {
+        class T {
+            constructor(id) {
+                this.id = id;
+            }
+            equals(instance) {
+                return instance.id === this.id;
+            }
+        }
+        const list = [new T(1), new T(2), new T(3)];
+        const r1 = includesWith((a, b) => a.equals(b), new T(2), list);
+        const r2 = includesWith((a, b) => a.equals(b), new T(4), list);
+        expect(r1).to.be.true();
+        expect(r2).to.be.false();
+    });
+    it('sortBy', () => {
+        const list = [
+            {
+                id: 3,
+                name: 'b'
+            },
+            {
+                id: 2,
+                name: 'a'
+            },
+            {
+                id: 1,
+                name: 'c'
+            }
+        ];
+        const groupedList1 = sortBy(o => o.name.charCodeAt(0), list);
+        const groupedList2 = sortBy(o => o.id, list);
+        expect(groupedList1).to.be.deep.equal([{ id: 2, name: 'a' },
+            { id: 3, name: 'b' },
+            { id: 1, name: 'c' }]);
+        expect(groupedList2).to.be.deep.equal([{ id: 1, name: 'c' },
+            { id: 2, name: 'a' },
+            { id: 3, name: 'b' }]);
+    });
+    describe('isMapEqual', () => {
+        it('should on be false when !== size', () => {
+            expect(isMapEqual(new Map([['key1', uint8ArrayFromString('value1')], ['key2', uint8ArrayFromString('value2')]]), new Map([['key1', uint8ArrayFromString('value1')]]))).to.be.false();
+        });
+        it('should on be false if one key is missing', () => {
+            expect(isMapEqual(new Map([['key1', uint8ArrayFromString('value1')], ['key2', uint8ArrayFromString('value2')]]), new Map([['key1', uint8ArrayFromString('value1')], ['key3', uint8ArrayFromString('value2')]]))).to.be.false();
+        });
+        it('should on be false if BitswapMessageEntry don\'t match', async () => {
+            const hash1 = await sha256.digest(uint8ArrayFromString('OMG!1'));
+            const cid1 = CID.createV1(DAG_PB_CODEC, hash1);
+            expect(isMapEqual(new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 2, BitswapMessage.WantType.Block)]]), new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)]]))).to.be.false();
+        });
+        it('should on be true if BitswapMessageEntry match', async () => {
+            const hash1 = await sha256.digest(uint8ArrayFromString('OMG!1'));
+            const cid1 = CID.createV1(DAG_PB_CODEC, hash1);
+            expect(isMapEqual(new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)]]), new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)]]))).to.be.true();
+        });
+        it('should on be false if data does not match', async () => {
+            const block1 = uint8ArrayFromString('hello world');
+            const block2 = uint8ArrayFromString('hello world 2');
+            expect(isMapEqual(new Map([['key1', block1], ['key2', block1]]), new Map([['key1', block1], ['key2', block2]]))).to.be.false();
+        });
+        it('should on be true if data matches', async () => {
+            const data = uint8ArrayFromString('hello world');
+            expect(isMapEqual(new Map([['key1', data], ['key2', data]]), new Map([['key1', data], ['key2', data]]))).to.be.true();
+        });
+    });
+    describe('SortedMap', () => {
+        it('size', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.size).to.eql(3);
+        });
+        it('get / set', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.get('one')).to.eql(1);
+            expect(sm.get('two')).to.eql(2);
+            expect(sm.get('three')).to.eql(3);
+        });
+        it('delete', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.get('two')).to.eql(2);
+            sm.delete('two');
+            expect(sm.get('two')).to.be.undefined();
+            expect(sm.size).to.eql(2);
+            sm.delete('two');
+            expect(sm.size).to.eql(2);
+        });
+        it('clear', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.get('two')).to.eql(2);
+            sm.clear();
+            expect(sm.get('two')).to.be.undefined();
+            expect(sm.size).to.eql(0);
+            expect([...sm.keys()]).to.eql([]);
+        });
+        it('default order', async () => {
+            const sm = new SortedMap();
+            sm.set(1, 'a');
+            sm.set(3, 'c');
+            sm.set(2, 'b');
+            expect(sm.size).to.eql(3);
+            expect([...sm.keys()]).to.eql([1, 2, 3]);
+            expect([...sm.values()]).to.eql(['a', 'b', 'c']);
+            expect([...sm.entries()]).to.eql([[1, 'a'], [2, 'b'], [3, 'c']]);
+            expect([...sm]).to.eql([...sm.entries()]);
+            const collected = [];
+            sm.forEach(i => { collected.push(i); });
+            expect(collected).to.eql([...sm]);
+        });
+        describe('custom order', () => {
+            const prioritySort = (a, b) => b[1].priority - a[1].priority;
+            it('forward', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 2 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'low']);
+            });
+            it('backward', () => {
+                const sm = new SortedMap([
+                    ['high', { priority: 2 }],
+                    ['low', { priority: 1 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'low']);
+            });
+            it('insert start', () => {
+                const sm = new SortedMap([
+                    ['mid', { priority: 2 }],
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 3 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'mid', 'low']);
+            });
+            it('insert end', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['mid', { priority: 2 }],
+                    ['high', { priority: 3 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'mid', 'low']);
+            });
+            it('insert middle', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 3 }],
+                    ['mid', { priority: 2 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'mid', 'low']);
+            });
+            it('insert same priority start', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high-a', { priority: 3 }],
+                    ['high-b', { priority: 3 }]
+                ], prioritySort);
+                expect([...sm.keys()].map(s => s.substring(0, 4))).to.eql(['high', 'high', 'low']);
+            });
+            it('insert same priority end', () => {
+                const sm = new SortedMap([
+                    ['hi', { priority: 3 }],
+                    ['low-a', { priority: 1 }],
+                    ['low-b', { priority: 1 }]
+                ], prioritySort);
+                expect([...sm.keys()].map(s => s.substring(0, 3))).to.eql(['hi', 'low', 'low']);
+            });
+            it('insert same key', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 3 }],
+                    ['high', { priority: 4 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'low']);
+            });
+            it('update', () => {
+                const sm = new SortedMap([], prioritySort);
+                const data1 = { k: 'v1', priority: 1 };
+                const data2 = { k: 'v2', priority: 3 };
+                const data3 = { k: 'v3', priority: 2 };
+                sm.set('one', data1);
+                sm.set('two', data2);
+                sm.set('three', data3);
+                expect([...sm.keys()]).to.eql(['two', 'three', 'one']);
+                expect([...sm.values()].map(v => v.k)).to.eql(['v2', 'v3', 'v1']);
+                // After changing data that affects the sort order, need to call update
+                // to actually trigger the sort
+                data3.priority = 5;
+                sm.update(1); // 'three'
+                expect([...sm.keys()]).to.eql(['three', 'two', 'one']);
+                expect([...sm.values()].map(v => v.k)).to.eql(['v3', 'v2', 'v1']);
+            });
+            it('delete same priority', () => {
+                const sm = new SortedMap([
+                    ['a', { priority: 1 }],
+                    ['b', { priority: 1 }],
+                    ['c', { priority: 1 }]
+                ], prioritySort);
+                sm.delete('a');
+                expect([...sm.keys()].sort()).to.eql(['b', 'c']);
+            });
+        });
+    });
+});
+describe('varint encoder', () => {
+    it('should encode and decode', () => {
+        const input = [1, 112, 18];
+        const encoded = varintEncoder(input);
+        const decoded = varintDecoder(encoded);
+        expect(decoded).to.deep.equal(input);
+    });
+});
+//# sourceMappingURL=utils.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.js.map
new file mode 100644
index 0000000..e1bce23
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../test/utils.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.d.ts
new file mode 100644
index 0000000..4b12ea4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.d.ts
@@ -0,0 +1,2 @@
+export declare const connectAll: (nodes: any[]) => Promise<void>;
+//# sourceMappingURL=connect-all.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.d.ts.map
new file mode 100644
index 0000000..5f5a047
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"connect-all.d.ts","sourceRoot":"","sources":["../../../test/utils/connect-all.ts"],"names":[],"mappings":"AAIA,eAAO,MAAM,UAAU,UAAiB,GAAG,EAAE,KAAG,QAAQ,IAAI,CAM3D,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.js
new file mode 100644
index 0000000..94f8914
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.js
@@ -0,0 +1,10 @@
+// @ts-expect-error no types
+import without from 'lodash.without';
+export const connectAll = async (nodes) => {
+    for (const node of nodes) {
+        for (const otherNode of without(nodes, node)) {
+            await node.libp2pNode.dial(otherNode.bitswap.peerId);
+        }
+    }
+};
+//# sourceMappingURL=connect-all.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.js.map
new file mode 100644
index 0000000..0be15a6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/connect-all.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"connect-all.js","sourceRoot":"","sources":["../../../test/utils/connect-all.ts"],"names":[],"mappings":"AACA,4BAA4B;AAC5B,OAAO,OAAO,MAAM,gBAAgB,CAAA;AAEpC,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,KAAY,EAAiB,EAAE;IAC9D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YAC5C,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;SACrD;KACF;AACH,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.d.ts
new file mode 100644
index 0000000..b935508
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.d.ts
@@ -0,0 +1,3 @@
+import type { BitswapNode } from './mocks.js';
+export declare const createBitswap: () => Promise<BitswapNode>;
+//# sourceMappingURL=create-bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.d.ts.map
new file mode 100644
index 0000000..a734461
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-bitswap.d.ts","sourceRoot":"","sources":["../../../test/utils/create-bitswap.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AAE7C,eAAO,MAAM,aAAa,QAAa,QAAQ,WAAW,CAQzD,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.js
new file mode 100644
index 0000000..7c8a19b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.js
@@ -0,0 +1,13 @@
+import { DefaultBitswap } from '../../src/bitswap.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { createLibp2pNode } from './create-libp2p-node.js';
+export const createBitswap = async () => {
+    const libp2p = await createLibp2pNode({
+        DHT: true
+    });
+    const blockstore = new MemoryBlockstore();
+    const bitswap = new DefaultBitswap(libp2p, blockstore);
+    await bitswap.start();
+    return { bitswap, libp2p, blockstore };
+};
+//# sourceMappingURL=create-bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.js.map
new file mode 100644
index 0000000..35b795c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-bitswap.js","sourceRoot":"","sources":["../../../test/utils/create-bitswap.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAA;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAA;AACzD,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAG1D,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,IAA0B,EAAE;IAC5D,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC;QACpC,GAAG,EAAE,IAAI;KACV,CAAC,CAAA;IACF,MAAM,UAAU,GAAG,IAAI,gBAAgB,EAAE,CAAA;IACzC,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;IACtD,MAAM,OAAO,CAAC,KAAK,EAAE,CAAA;IACrB,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,CAAA;AACxC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.d.ts
new file mode 100644
index 0000000..4fb829c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.d.ts
@@ -0,0 +1,7 @@
+import { Libp2pOptions } from 'libp2p';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+export interface NodeOptions extends Libp2pOptions {
+    DHT?: boolean;
+}
+export declare function createLibp2pNode(options?: NodeOptions): Promise<Libp2p>;
+//# sourceMappingURL=create-libp2p-node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.d.ts.map
new file mode 100644
index 0000000..8226932
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-libp2p-node.d.ts","sourceRoot":"","sources":["../../../test/utils/create-libp2p-node.ts"],"names":[],"mappings":"AAIA,OAAO,EAAgB,aAAa,EAAE,MAAM,QAAQ,CAAA;AAGpD,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AAKtD,MAAM,WAAW,WAAY,SAAQ,aAAa;IAChD,GAAG,CAAC,EAAE,OAAO,CAAA;CACd;AAED,wBAAsB,gBAAgB,CAAE,OAAO,GAAE,WAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,CAyBlF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.js
new file mode 100644
index 0000000..830576b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.js
@@ -0,0 +1,33 @@
+import { tcp } from '@libp2p/tcp';
+import { mplex } from '@libp2p/mplex';
+import { noise } from '@chainsafe/libp2p-noise';
+import { createLibp2p } from 'libp2p';
+import { kadDHT } from '@libp2p/kad-dht';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+// @ts-expect-error no types
+import defaultsDeep from '@nodeutils/defaults-deep';
+export async function createLibp2pNode(options = {}) {
+    const node = await createLibp2p(defaultsDeep({
+        peerId: await createEd25519PeerId(),
+        addresses: {
+            listen: ['/ip4/0.0.0.0/tcp/0']
+        },
+        transports: [
+            tcp()
+        ],
+        streamMuxers: [
+            mplex()
+        ],
+        connectionEncryption: [
+            noise()
+        ],
+        dht: options.DHT === true
+            ? kadDHT({
+                clientMode: false
+            })
+            : undefined
+    }, options));
+    await node.start();
+    return node;
+}
+//# sourceMappingURL=create-libp2p-node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.js.map
new file mode 100644
index 0000000..aad5a22
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/create-libp2p-node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-libp2p-node.js","sourceRoot":"","sources":["../../../test/utils/create-libp2p-node.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAA;AACjC,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAA;AACrC,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAA;AAC/C,OAAO,EAAE,YAAY,EAAiB,MAAM,QAAQ,CAAA;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACxC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAG7D,4BAA4B;AAC5B,OAAO,YAAY,MAAM,0BAA0B,CAAA;AAMnD,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAE,UAAuB,EAAE;IAC/D,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC;QAC3C,MAAM,EAAE,MAAM,mBAAmB,EAAE;QACnC,SAAS,EAAE;YACT,MAAM,EAAE,CAAC,oBAAoB,CAAC;SAC/B;QACD,UAAU,EAAE;YACV,GAAG,EAAE;SACN;QACD,YAAY,EAAE;YACZ,KAAK,EAAE;SACR;QACD,oBAAoB,EAAE;YACpB,KAAK,EAAE;SACR;QACD,GAAG,EAAE,OAAO,CAAC,GAAG,KAAK,IAAI;YACvB,CAAC,CAAC,MAAM,CAAC;gBACP,UAAU,EAAE,KAAK;aAClB,CAAC;YACF,CAAC,CAAC,SAAS;KACd,EAAE,OAAO,CAAC,CAAC,CAAA;IAEZ,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;IAElB,OAAO,IAAI,CAAA;AACb,CAAC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.d.ts
new file mode 100644
index 0000000..841dff9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.d.ts
@@ -0,0 +1,2 @@
+export declare const distributionTest: (instanceCount: number, blockCount: number, repeats: number, events: any) => Promise<void>;
+//# sourceMappingURL=distribution-test.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.d.ts.map
new file mode 100644
index 0000000..a73d281
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"distribution-test.d.ts","sourceRoot":"","sources":["../../../test/utils/distribution-test.ts"],"names":[],"mappings":"AAUA,eAAO,MAAM,gBAAgB,kBAAyB,MAAM,cAAc,MAAM,WAAW,MAAM,UAAU,GAAG,KAAG,QAAQ,IAAI,CA0D5H,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.js
new file mode 100644
index 0000000..598de3d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.js
@@ -0,0 +1,48 @@
+/** @type {(n:number) => any[]} */
+// @ts-expect-error no types
+import range from 'lodash.range';
+import { expect } from 'aegir/chai';
+import { createBitswap } from './create-bitswap.js';
+import { makeBlocks } from './make-blocks.js';
+import { connectAll } from './connect-all.js';
+export const distributionTest = async (instanceCount, blockCount, repeats, events) => {
+    let pendingRepeats = repeats;
+    const nodes = await Promise.all(range(instanceCount).map(async () => await createBitswap()));
+    events.emit('start');
+    await connectAll(nodes);
+    events.emit('all connected');
+    while (pendingRepeats > 0) {
+        const first = nodes[0];
+        const blocks = await makeBlocks(blockCount);
+        await Promise.all(blocks.map(async (block) => { await first.blockstore.put(block.cid, block.block); }));
+        events.emit('first put');
+        const results = await Promise.all(nodes.map(async (node) => {
+            events.emit('getting many');
+            const cids = blocks.map((block) => block.cid);
+            const start = Date.now();
+            const result = await Promise.all(cids.map(async (cid) => await node.bitswap.want(cid)));
+            const elapsed = Date.now() - start;
+            events.emit('got block', elapsed);
+            return result;
+        }));
+        try {
+            expect(results).have.lengthOf(instanceCount);
+            for (const nodeBlocks of results) {
+                expect(nodeBlocks).to.have.lengthOf(blocks.length);
+                nodeBlocks.forEach((block, i) => {
+                    expect(block).to.deep.equal(blocks[i].block);
+                });
+            }
+        }
+        finally {
+            pendingRepeats--;
+        }
+    }
+    events.emit('stop');
+    await Promise.all(nodes.map(async (node) => {
+        await node.bitswap.stop();
+        await node.libp2p.stop();
+    }));
+    events.emit('stopped');
+};
+//# sourceMappingURL=distribution-test.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.js.map
new file mode 100644
index 0000000..d9a3a8b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/distribution-test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"distribution-test.js","sourceRoot":"","sources":["../../../test/utils/distribution-test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.d.ts
new file mode 100644
index 0000000..68e0da2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.d.ts
@@ -0,0 +1,9 @@
+export declare const orderedFinish: (n: number) => {
+    (i: number): void;
+    assert: () => void;
+};
+export declare const countToFinish: (n: number) => {
+    (): void;
+    assert: () => void;
+};
+//# sourceMappingURL=helpers.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.d.ts.map
new file mode 100644
index 0000000..f6e479a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"helpers.d.ts","sourceRoot":"","sources":["../../../test/utils/helpers.ts"],"names":[],"mappings":"AAKA,eAAO,MAAM,aAAa,MAAO,MAAM;QAAS,MAAM,GAAG,IAAI;YAAU,MAAM,IAAI;CAchF,CAAA;AAED,eAAO,MAAM,aAAa,MAAO,MAAM,KAAG;IAAE,IAAI,IAAI,CAAC;IAAC,MAAM,EAAE,MAAM,IAAI,CAAA;CAYvE,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.js
new file mode 100644
index 0000000..d90c612
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.js
@@ -0,0 +1,26 @@
+// @ts-expect-error no types
+import range from 'lodash.range';
+import { expect } from 'aegir/chai';
+export const orderedFinish = (n) => {
+    const r = range(1, n + 1);
+    const finishes = [];
+    const output = (i) => {
+        finishes.push(i);
+    };
+    output.assert = () => {
+        expect(finishes.length).to.equal(n);
+        expect(r).to.deep.equal(finishes, `Invalid finish order: ${finishes}`);
+    };
+    return output;
+};
+export const countToFinish = (n) => {
+    let pending = n;
+    const output = () => {
+        pending--;
+    };
+    output.assert = () => {
+        expect(pending).to.equal(0, `too many finishes, expected only ${n}`);
+    };
+    return output;
+};
+//# sourceMappingURL=helpers.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.js.map
new file mode 100644
index 0000000..d3be4eb
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/helpers.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../test/utils/helpers.ts"],"names":[],"mappings":"AACA,4BAA4B;AAC5B,OAAO,KAAK,MAAM,cAAc,CAAA;AAChC,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AAEnC,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,CAAS,EAA6C,EAAE;IACpF,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;IACzB,MAAM,QAAQ,GAAa,EAAE,CAAA;IAE7B,MAAM,MAAM,GAAG,CAAC,CAAS,EAAQ,EAAE;QACjC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAClB,CAAC,CAAA;IAED,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;QACnB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACnC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,yBAAyB,QAAQ,EAAE,CAAC,CAAA;IACxE,CAAC,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,CAAS,EAAoC,EAAE;IAC3E,IAAI,OAAO,GAAG,CAAC,CAAA;IAEf,MAAM,MAAM,GAAG,GAAS,EAAE;QACxB,OAAO,EAAE,CAAA;IACX,CAAC,CAAA;IAED,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;QACnB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,oCAAoC,CAAC,EAAE,CAAC,CAAA;IACtE,CAAC,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.d.ts
new file mode 100644
index 0000000..cb26fe2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.d.ts
@@ -0,0 +1,6 @@
+import { CID } from 'multiformats/cid';
+export declare const makeBlocks: (count: number, size?: number) => Promise<Array<{
+    cid: CID;
+    block: Uint8Array;
+}>>;
+//# sourceMappingURL=make-blocks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.d.ts.map
new file mode 100644
index 0000000..9a33fd7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-blocks.d.ts","sourceRoot":"","sources":["../../../test/utils/make-blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAStC,eAAO,MAAM,UAAU,UAAiB,MAAM,SAAS,MAAM,KAAG,QAAQ,MAAM;IAAE,GAAG,EAAE,GAAG,CAAC;IAAC,KAAK,EAAE,UAAU,CAAA;CAAE,CAAC,CAa7G,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.js
new file mode 100644
index 0000000..838fdc7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.js
@@ -0,0 +1,20 @@
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { randomBytes } from 'iso-random-stream';
+// @ts-expect-error no types
+import range from 'lodash.range';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+// @ts-expect-error no types
+import { v4 as uuid } from 'uuid';
+export const makeBlocks = async (count, size) => {
+    const blocks = await Promise.all(range(count ?? 1).map(async () => {
+        const block = size != null ? randomBytes(size) : uint8ArrayFromString(`hello world ${uuid()}`);
+        const hash = await sha256.digest(block);
+        return {
+            cid: CID.createV0(hash),
+            block
+        };
+    }));
+    return blocks;
+};
+//# sourceMappingURL=make-blocks.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.js.map
new file mode 100644
index 0000000..6c200b7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-blocks.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-blocks.js","sourceRoot":"","sources":["../../../test/utils/make-blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAA;AAC/C,4BAA4B;AAC5B,OAAO,KAAK,MAAM,cAAc,CAAA;AAChC,OAAO,EAAE,UAAU,IAAI,oBAAoB,EAAE,MAAM,yBAAyB,CAAA;AAC5E,4BAA4B;AAC5B,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAA;AAEjC,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,KAAa,EAAE,IAAa,EAAmD,EAAE;IAChH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;QAC/B,MAAM,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,IAAI,EAAE,EAAE,CAAC,CAAA;QAC9F,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACvC,OAAO;YACL,GAAG,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;YACvB,KAAK;SACN,CAAA;IACH,CAAC,CAAC,CACH,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.d.ts
new file mode 100644
index 0000000..8048a1f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.d.ts
@@ -0,0 +1,4 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+export declare function makePeerId(): Promise<PeerId>;
+export declare function makePeerIds(count: number): Promise<PeerId[]>;
+//# sourceMappingURL=make-peer-id.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.d.ts.map
new file mode 100644
index 0000000..1265c79
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-peer-id.d.ts","sourceRoot":"","sources":["../../../test/utils/make-peer-id.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AAGvD,wBAAsB,UAAU,IAAK,OAAO,CAAC,MAAM,CAAC,CAEnD;AAED,wBAAsB,WAAW,CAAE,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAKnE"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.js
new file mode 100644
index 0000000..8b18f4e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.js
@@ -0,0 +1,11 @@
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+export async function makePeerId() {
+    return (await makePeerIds(1))[0];
+}
+export async function makePeerIds(count) {
+    const peerIds = await Promise.all([...new Array(count ?? 1)].map(async () => {
+        return await createEd25519PeerId();
+    }));
+    return peerIds;
+}
+//# sourceMappingURL=make-peer-id.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.js.map
new file mode 100644
index 0000000..8aa1f5c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/make-peer-id.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-peer-id.js","sourceRoot":"","sources":["../../../test/utils/make-peer-id.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAE7D,MAAM,CAAC,KAAK,UAAU,UAAU;IAC9B,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAClC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAE,KAAa;IAC9C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;QAC1E,OAAO,MAAM,mBAAmB,EAAE,CAAA;IACpC,CAAC,CAAC,CAAC,CAAA;IACH,OAAO,OAAO,CAAA;AAChB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.d.ts
new file mode 100644
index 0000000..1ecdb06
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.d.ts
@@ -0,0 +1,34 @@
+import type { Blockstore } from 'interface-blockstore';
+import { DefaultBitswap } from '../../src/bitswap.js';
+import { Network } from '../../src/network.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { Multiaddr } from '@multiformats/multiaddr';
+import type { BitswapMessage } from '../../src/message/index.js';
+import type { Bitswap } from '../../src/index.js';
+/**
+ * Create a mock libp2p node
+ */
+export declare const mockLibp2pNode: () => Libp2p;
+interface OnDone {
+    (args: {
+        connects: Array<PeerId | Multiaddr>;
+        messages: Array<[PeerId, BitswapMessage]>;
+    }): void;
+}
+interface OnMessage {
+    (peerId: PeerId, message: BitswapMessage): void;
+}
+/**
+ * Create a mock network instance
+ */
+export declare const mockNetwork: (calls?: number, done?: OnDone, onMsg?: OnMessage) => Network;
+export declare const applyNetwork: (bs: DefaultBitswap, n: Network) => void;
+export interface BitswapNode {
+    libp2p: Libp2p;
+    bitswap: Bitswap;
+    blockstore: Blockstore;
+}
+export declare const genBitswapNetwork: (n: number, enableDHT?: boolean) => Promise<BitswapNode[]>;
+export {};
+//# sourceMappingURL=mocks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.d.ts.map
new file mode 100644
index 0000000..cac2b64
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"mocks.d.ts","sourceRoot":"","sources":["../../../test/utils/mocks.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAA;AAGtD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAA;AACrD,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAA;AAM9C,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AAEtD,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AAExD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAA;AAChE,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAA;AAEjD;;GAEG;AACH,eAAO,MAAM,cAAc,QAAO,MAgCjC,CAAA;AAED,UAAU,MAAM;IACd,CAAC,IAAI,EAAE;QAAE,QAAQ,EAAE,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;QAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAA;KAAE,GAAG,IAAI,CAAA;CACjG;AAED,UAAU,SAAS;IACjB,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,cAAc,GAAG,IAAI,CAAA;CAChD;AAED;;GAEG;AACH,eAAO,MAAM,WAAW,WAAW,MAAM,SAAmB,MAAM,UAAyC,SAAS,KAAmC,OA8DtJ,CAAA;AAED,eAAO,MAAM,YAAY,OAAQ,cAAc,KAAK,OAAO,KAAG,IAI7D,CAAA;AAED,MAAM,WAAW,WAAW;IAC1B,MAAM,EAAE,MAAM,CAAA;IACd,OAAO,EAAE,OAAO,CAAA;IAChB,UAAU,EAAE,UAAU,CAAA;CACvB;AAED,eAAO,MAAM,iBAAiB,MAAa,MAAM,cAAa,OAAO,KAAW,QAAQ,WAAW,EAAE,CA6CpG,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.js
new file mode 100644
index 0000000..73540ce
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.js
@@ -0,0 +1,131 @@
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { EventEmitter } from 'events';
+import { DefaultBitswap } from '../../src/bitswap.js';
+import { Network } from '../../src/network.js';
+import { Stats } from '../../src/stats/index.js';
+import { peerIdFromBytes } from '@libp2p/peer-id';
+import { createLibp2pNode } from './create-libp2p-node.js';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+/**
+ * Create a mock libp2p node
+ */
+export const mockLibp2pNode = () => {
+    const buf = uint8ArrayFromString('122019318b6e5e0cf93a2314bf01269a2cc23cd3dcd452d742cdb9379d8646f6e4a9', 'base16');
+    const peerId = peerIdFromBytes(buf);
+    const libp2p = Object.assign(new EventEmitter(), {
+        peerId,
+        multiaddrs: [],
+        handle() { },
+        unhandle() { },
+        register() { },
+        unregister() { },
+        contentRouting: {
+            provide: async (cid) => { },
+            findProviders: async (cid, timeout) => { return []; } // eslint-disable-line require-await
+        },
+        connectionManager: {
+            on() { },
+            removeListener() { }
+        },
+        async dial(peer) {
+        },
+        async dialProtocol(peer, protocol) {
+            return {};
+        },
+        swarm: {
+            setMaxListeners() { }
+        },
+        getConnections: () => []
+    });
+    // @ts-expect-error not all libp2p fields are implemented
+    return libp2p;
+};
+/**
+ * Create a mock network instance
+ */
+export const mockNetwork = (calls = Infinity, done = async () => { }, onMsg = async () => { }) => {
+    const connects = [];
+    const messages = [];
+    let i = 0;
+    const finish = (peerId, message) => {
+        onMsg?.(peerId, message);
+        if (++i === calls) {
+            done?.({ connects, messages });
+        }
+    };
+    class MockNetwork extends Network {
+        constructor() {
+            // @ts-expect-error - {} is not an instance of libp2p
+            super({}, new DefaultBitswap({}, new MemoryBlockstore()), new Stats({}));
+            this.connects = connects;
+            this.messages = messages;
+        }
+        async connectTo(p) {
+            setTimeout(() => {
+                connects.push(p);
+            });
+            // @ts-expect-error not all connection fields are implemented
+            return await Promise.resolve({ id: '', remotePeer: '' });
+        }
+        async sendMessage(p, msg) {
+            messages.push([p, msg]);
+            setTimeout(() => {
+                finish(p, msg);
+            });
+            await Promise.resolve();
+        }
+        async start() {
+            await Promise.resolve();
+        }
+        async stop() {
+            await Promise.resolve();
+        }
+        async findAndConnect() {
+            await Promise.resolve();
+        }
+        async provide() {
+            await Promise.resolve();
+        }
+    }
+    return new MockNetwork();
+};
+export const applyNetwork = (bs, n) => {
+    bs.network = n;
+    bs.wm.network = n;
+    bs.engine.network = n;
+};
+export const genBitswapNetwork = async (n, enableDHT = false) => {
+    // create PeerId and libp2p.Node for each
+    const peers = await Promise.all(new Array(n).fill(0).map(async () => await createEd25519PeerId()));
+    /** @type {{ libp2p: Libp2p, bitswap: Bitswap }[]} */
+    const netArray = await Promise.all(peers.map(async (peerId, i) => {
+        const libp2p = await createLibp2pNode({
+            peerId,
+            DHT: enableDHT,
+            nat: {
+                enabled: false
+            }
+        });
+        await libp2p.start();
+        const blockstore = new MemoryBlockstore();
+        return {
+            libp2p,
+            bitswap: new DefaultBitswap(libp2p, blockstore),
+            blockstore
+        };
+    }));
+    // populate peerStores
+    for (let i = 0; i < netArray.length; i++) {
+        const netA = netArray[i];
+        for (let j = 0; j < netArray.length; j++) {
+            if (i === j) {
+                continue;
+            }
+            const netB = netArray[j];
+            await netA.libp2p.peerStore.addressBook.set(netB.libp2p.peerId, netB.libp2p.getMultiaddrs());
+        }
+    }
+    return netArray;
+};
+//# sourceMappingURL=mocks.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.js.map
new file mode 100644
index 0000000..c8c0751
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/mocks.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"mocks.js","sourceRoot":"","sources":["../../../test/utils/mocks.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.d.ts
new file mode 100644
index 0000000..64356e3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.d.ts
@@ -0,0 +1,4 @@
+import type { Blockstore } from 'interface-blockstore';
+import type { BitswapMessage } from '../../src/message';
+export declare function storeHasBlocks(message: BitswapMessage, store: Blockstore): Promise<void>;
+//# sourceMappingURL=store-has-blocks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.d.ts.map
new file mode 100644
index 0000000..faeccee
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"store-has-blocks.d.ts","sourceRoot":"","sources":["../../../test/utils/store-has-blocks.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAA;AAEtD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAA;AAEvD,wBAAsB,cAAc,CAAE,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAI/F"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.js b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.js
new file mode 100644
index 0000000..252bb9e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.js
@@ -0,0 +1,8 @@
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+export async function storeHasBlocks(message, store) {
+    for (const k of message.blocks.keys()) {
+        expect(await store.has(CID.parse(k))).to.be.true('missing block');
+    }
+}
+//# sourceMappingURL=store-has-blocks.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.js.map b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.js.map
new file mode 100644
index 0000000..82c64c0
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/utils/store-has-blocks.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"store-has-blocks.js","sourceRoot":"","sources":["../../../test/utils/store-has-blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AAEnC,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAGtC,MAAM,CAAC,KAAK,UAAU,cAAc,CAAE,OAAuB,EAAE,KAAiB;IAC9E,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;QACrC,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;KAClE;AACH,CAAC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.d.ts
new file mode 100644
index 0000000..b37c2d2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=index.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.d.ts.map
new file mode 100644
index 0000000..4f1b2ee
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.spec.d.ts","sourceRoot":"","sources":["../../../test/wantmanager/index.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.js
new file mode 100644
index 0000000..fbc94d6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.js
@@ -0,0 +1,60 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import * as CONSTANTS from '../../src/constants.js';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { WantManager } from '../../src/want-manager/index.js';
+import { Stats } from '../../src/stats/index.js';
+import { mockNetwork } from '../utils/mocks.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { makePeerIds } from '../utils/make-peer-id.js';
+describe('WantManager', () => {
+    it('sends wantlist to all connected peers', async function () {
+        this.timeout(80 * 1000);
+        const peerIds = await makePeerIds(3);
+        const blocks = await makeBlocks(3);
+        const cids = blocks.map((b) => b.cid);
+        const peer1 = peerIds[0];
+        const peer2 = peerIds[1];
+        const cid1 = cids[0];
+        const cid2 = cids[1];
+        const cid3 = cids[2];
+        const m1 = new Message(true);
+        m1.addEntry(cid1, CONSTANTS.kMaxPriority);
+        m1.addEntry(cid2, CONSTANTS.kMaxPriority - 1);
+        const m2 = new Message(false);
+        m2.cancel(cid2);
+        const m3 = new Message(false);
+        m3.addEntry(cid3, CONSTANTS.kMaxPriority);
+        const msgs = [m1, m1, m2, m2, m3, m3];
+        await new Promise((resolve, reject) => {
+            const network = mockNetwork(6, (calls) => {
+                expect(calls.connects).to.have.length(6);
+                expect(calls.messages).to.have.length(6);
+                for (let ii = 0; ii < calls.messages.length; ii++) {
+                    const message = calls.messages[ii];
+                    const connect = calls.connects[ii];
+                    expect(message[0]).to.be.eql(connect);
+                    if (!message[1].equals(msgs[ii])) {
+                        reject(new Error('expected messages to match'));
+                        return;
+                    }
+                }
+                resolve();
+            });
+            // @ts-expect-error {} is not a real libp2p
+            const wantManager = new WantManager(peerIds[2], network, new Stats({}), {});
+            wantManager.start();
+            wantManager.wantBlocks([cid1, cid2]);
+            wantManager.connected(peer1);
+            wantManager.connected(peer2);
+            new Promise(resolve => setTimeout(resolve, 200))
+                .then(async () => {
+                wantManager.cancelWants([cid2]);
+                await new Promise(resolve => setTimeout(resolve, 200));
+                wantManager.wantBlocks([cid3]);
+            })
+                .catch(reject);
+        });
+    });
+});
+//# sourceMappingURL=index.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.js.map
new file mode 100644
index 0000000..42adfe7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/index.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../test/wantmanager/index.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.d.ts b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.d.ts
new file mode 100644
index 0000000..0aca3b9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=msg-queue.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.d.ts.map
new file mode 100644
index 0000000..f7f4bd3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"msg-queue.spec.d.ts","sourceRoot":"","sources":["../../../test/wantmanager/msg-queue.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.js b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.js
new file mode 100644
index 0000000..e5378d8
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.js
@@ -0,0 +1,56 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { MsgQueue } from '../../src/want-manager/msg-queue.js';
+import defer from 'p-defer';
+import { mockNetwork } from '../utils/mocks.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { makePeerId } from '../utils/make-peer-id.js';
+describe('MessageQueue', () => {
+    let peerIds;
+    let cids;
+    before(async () => {
+        peerIds = await Promise.all([0, 1].map(async () => await makePeerId()));
+        cids = (await makeBlocks(6)).map(({ cid }) => cid);
+    });
+    it('connects and sends messages', async () => {
+        const msg = new Message(true);
+        const cid1 = cids[0];
+        const cid2 = cids[1];
+        const cid3 = cids[2];
+        const cid4 = cids[3];
+        const cid5 = cids[4];
+        const cid6 = cids[5];
+        msg.addEntry(cid1, 3);
+        msg.addEntry(cid2, 1);
+        const deferred = defer();
+        const network = mockNetwork(2, ({ connects, messages }) => {
+            expect(connects).to.be.eql([peerIds[1], peerIds[1]]);
+            const m1 = new Message(false);
+            m1.addEntry(cid3, 1);
+            m1.addEntry(cid4, 2);
+            m1.cancel(cid5);
+            m1.cancel(cid6);
+            expect(messages).to.be.eql([
+                [peerIds[1], msg],
+                [peerIds[1], m1]
+            ]);
+            deferred.resolve();
+        });
+        const mq = new MsgQueue(peerIds[0], peerIds[1], network);
+        expect(mq.refcnt).to.equal(1);
+        const batch1 = [
+            new Message.Entry(cid3, 1, Message.WantType.Block, false),
+            new Message.Entry(cid4, 2, Message.WantType.Block, false)
+        ];
+        const batch2 = [
+            new Message.Entry(cid5, 1, Message.WantType.Block, true),
+            new Message.Entry(cid6, 2, Message.WantType.Block, true)
+        ];
+        mq.addEntries(batch1);
+        mq.addEntries(batch2);
+        mq.addMessage(msg);
+        await deferred.promise;
+    });
+});
+//# sourceMappingURL=msg-queue.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.js.map b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.js.map
new file mode 100644
index 0000000..a1cca97
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/test/wantmanager/msg-queue.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"msg-queue.spec.js","sourceRoot":"","sources":["../../../test/wantmanager/msg-queue.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/dist/tsconfig.tsbuildinfo b/node_modules/ipfs-bitswap/dist/dist/tsconfig.tsbuildinfo
new file mode 100644
index 0000000..d220f92
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/dist/tsconfig.tsbuildinfo
@@ -0,0 +1 @@
+{"program":{"fileNames":["../node_modules/typescript/lib/lib.es5.d.ts","../node_modules/typescript/lib/lib.es2015.d.ts","../node_modules/typescript/lib/lib.es2016.d.ts","../node_modules/typescript/lib/lib.es2017.d.ts","../node_modules/typescript/lib/lib.es2018.d.ts","../node_modules/typescript/lib/lib.es2019.d.ts","../node_modules/typescript/lib/lib.es2020.d.ts","../node_modules/typescript/lib/lib.es2021.d.ts","../node_modules/typescript/lib/lib.dom.d.ts","../node_modules/typescript/lib/lib.dom.iterable.d.ts","../node_modules/typescript/lib/lib.webworker.d.ts","../node_modules/typescript/lib/lib.es2015.core.d.ts","../node_modules/typescript/lib/lib.es2015.collection.d.ts","../node_modules/typescript/lib/lib.es2015.generator.d.ts","../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../node_modules/typescript/lib/lib.es2015.promise.d.ts","../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../node_modules/typescript/lib/lib.es2017.object.d.ts","../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2017.string.d.ts","../node_modules/typescript/lib/lib.es2017.intl.d.ts","../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../node_modules/typescript/lib/lib.es2018.intl.d.ts","../node_modules/typescript/lib/lib.es2018.promise.d.ts","../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../node_modules/typescript/lib/lib.es2019.array.d.ts","../node_modules/typescript/lib/lib.es2019.object.d.ts","../node_modules/typescript/lib/lib.es2019.string.d.ts","../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../node_modules/typescript/lib/lib.es2019.intl.d.ts","../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../node_modules/typescript/lib/lib.es2020.date.d.ts","../node_modules/typescript/lib/lib.es2020.promise.d.ts","../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2020.string.d.ts","../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2020.intl.d.ts","../node_modules/typescript/lib/lib.es2020.number.d.ts","../node_modules/typescript/lib/lib.es2021.promise.d.ts","../node_modules/typescript/lib/lib.es2021.string.d.ts","../node_modules/typescript/lib/lib.es2021.weakref.d.ts","../node_modules/typescript/lib/lib.es2021.intl.d.ts","../node_modules/typescript/lib/lib.esnext.intl.d.ts","../node_modules/multiformats/dist/types/src/hashes/interface.d.ts","../node_modules/multiformats/dist/types/src/bases/interface.d.ts","../node_modules/multiformats/dist/types/src/block/interface.d.ts","../node_modules/multiformats/dist/types/src/link/interface.d.ts","../node_modules/multiformats/dist/types/src/cid.d.ts","../node_modules/multiformats/dist/types/src/hashes/digest.d.ts","../node_modules/multiformats/dist/types/src/hashes/hasher.d.ts","../node_modules/multiformats/dist/types/src/hashes/sha2.d.ts","../node_modules/multiformats/dist/types/src/bases/base.d.ts","../node_modules/multiformats/dist/types/src/bases/base58.d.ts","../node_modules/@types/node/assert.d.ts","../node_modules/@types/node/assert/strict.d.ts","../node_modules/@types/node/globals.d.ts","../node_modules/@types/node/async_hooks.d.ts","../node_modules/@types/node/buffer.d.ts","../node_modules/@types/node/child_process.d.ts","../node_modules/@types/node/cluster.d.ts","../node_modules/@types/node/console.d.ts","../node_modules/@types/node/constants.d.ts","../node_modules/@types/node/crypto.d.ts","../node_modules/@types/node/dgram.d.ts","../node_modules/@types/node/diagnostics_channel.d.ts","../node_modules/@types/node/dns.d.ts","../node_modules/@types/node/dns/promises.d.ts","../node_modules/@types/node/domain.d.ts","../node_modules/@types/node/dom-events.d.ts","../node_modules/@types/node/events.d.ts","../node_modules/@types/node/fs.d.ts","../node_modules/@types/node/fs/promises.d.ts","../node_modules/@types/node/http.d.ts","../node_modules/@types/node/http2.d.ts","../node_modules/@types/node/https.d.ts","../node_modules/@types/node/inspector.d.ts","../node_modules/@types/node/module.d.ts","../node_modules/@types/node/net.d.ts","../node_modules/@types/node/os.d.ts","../node_modules/@types/node/path.d.ts","../node_modules/@types/node/perf_hooks.d.ts","../node_modules/@types/node/process.d.ts","../node_modules/@types/node/punycode.d.ts","../node_modules/@types/node/querystring.d.ts","../node_modules/@types/node/readline.d.ts","../node_modules/@types/node/readline/promises.d.ts","../node_modules/@types/node/repl.d.ts","../node_modules/@types/node/stream.d.ts","../node_modules/@types/node/stream/promises.d.ts","../node_modules/@types/node/stream/consumers.d.ts","../node_modules/@types/node/stream/web.d.ts","../node_modules/@types/node/string_decoder.d.ts","../node_modules/@types/node/test.d.ts","../node_modules/@types/node/timers.d.ts","../node_modules/@types/node/timers/promises.d.ts","../node_modules/@types/node/tls.d.ts","../node_modules/@types/node/trace_events.d.ts","../node_modules/@types/node/tty.d.ts","../node_modules/@types/node/url.d.ts","../node_modules/@types/node/util.d.ts","../node_modules/@types/node/v8.d.ts","../node_modules/@types/node/vm.d.ts","../node_modules/@types/node/wasi.d.ts","../node_modules/@types/node/worker_threads.d.ts","../node_modules/@types/node/zlib.d.ts","../node_modules/@types/node/globals.global.d.ts","../node_modules/@types/node/index.d.ts","../node_modules/@types/varint/index.d.ts","../src/utils/varint-encoder.ts","../node_modules/@libp2p/interface-peer-id/dist/src/index.d.ts","../node_modules/@libp2p/logger/dist/src/index.d.ts","../node_modules/uint8arrays/dist/src/equals.d.ts","../node_modules/protons-runtime/dist/src/codec.d.ts","../node_modules/uint8arraylist/dist/src/index.d.ts","../node_modules/protons-runtime/dist/src/decode.d.ts","../node_modules/protons-runtime/dist/src/encode.d.ts","../node_modules/protons-runtime/dist/src/codecs/enum.d.ts","../node_modules/protons-runtime/dist/src/codecs/message.d.ts","../node_modules/protons-runtime/dist/src/utils.d.ts","../node_modules/protons-runtime/dist/src/index.d.ts","../src/message/message.ts","../src/wantlist/entry.ts","../src/message/entry.ts","../src/utils/index.ts","../node_modules/@libp2p/interfaces/dist/src/errors.d.ts","../node_modules/interface-store/dist/src/index.d.ts","../node_modules/interface-blockstore/dist/src/index.d.ts","../node_modules/@vascosantos/moving-average/index.d.ts","../node_modules/@libp2p/interfaces/dist/src/index.d.ts","../node_modules/@libp2p/interfaces/dist/src/events.d.ts","../node_modules/@libp2p/interfaces/dist/src/startable.d.ts","../node_modules/@multiformats/multiaddr/dist/src/protocols-table.d.ts","../node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts","../node_modules/@multiformats/multiaddr/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-info/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-discovery/dist/src/index.d.ts","../node_modules/@libp2p/interface-dht/dist/src/index.d.ts","../node_modules/@libp2p/interface-record/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-store/dist/src/index.d.ts","../node_modules/@libp2p/interface-libp2p/node_modules/@libp2p/interface-connection/dist/src/status.d.ts","../node_modules/it-stream-types/dist/src/index.d.ts","../node_modules/@libp2p/interface-libp2p/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-routing/dist/src/index.d.ts","../node_modules/@libp2p/interface-content-routing/dist/src/index.d.ts","../node_modules/it-pushable/dist/src/index.d.ts","../node_modules/@libp2p/interface-pubsub/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-pubsub/dist/src/index.d.ts","../node_modules/@libp2p/interface-registrar/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-registrar/dist/src/index.d.ts","../node_modules/@libp2p/interface-metrics/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-metrics/dist/src/index.d.ts","../node_modules/@libp2p/interface-keychain/dist/src/index.d.ts","../node_modules/@libp2p/interface-libp2p/dist/src/index.d.ts","../node_modules/progress-events/dist/src/index.d.ts","../node_modules/it-length-prefixed/dist/src/encode.d.ts","../node_modules/it-reader/dist/src/index.d.ts","../node_modules/it-length-prefixed/dist/src/decode.d.ts","../node_modules/it-length-prefixed/dist/src/index.d.ts","../node_modules/it-pipe/node_modules/it-stream-types/dist/src/index.d.ts","../node_modules/it-pipe/dist/src/index.d.ts","../node_modules/@libp2p/topology/dist/src/index.d.ts","../src/constants.ts","../node_modules/timeout-abort-controller/dist/index.d.ts","../node_modules/abortable-iterator/dist/src/abort-error.d.ts","../node_modules/abortable-iterator/dist/src/index.d.ts","../src/stats/stat.ts","../node_modules/@libp2p/tracked-map/dist/src/index.d.ts","../node_modules/@libp2p/interface-stream-muxer/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-stream-muxer/dist/src/index.d.ts","../node_modules/@libp2p/interface-transport/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-transport/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection/dist/src/status.d.ts","../node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-address-manager/dist/src/index.d.ts","../node_modules/libp2p/dist/src/transport-manager.d.ts","../node_modules/libp2p/dist/src/identify/pb/message.d.ts","../node_modules/libp2p/node_modules/@libp2p/interface-connection-manager/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/libp2p/node_modules/@libp2p/interface-connection-manager/dist/src/index.d.ts","../node_modules/libp2p/dist/src/identify/index.d.ts","../node_modules/multiformats/dist/types/src/codecs/interface.d.ts","../node_modules/multiformats/dist/types/src/interface.d.ts","../node_modules/multiformats/dist/types/src/varint.d.ts","../node_modules/multiformats/dist/types/src/bytes.d.ts","../node_modules/multiformats/dist/types/src/index.d.ts","../node_modules/multiformats/dist/types/src/codecs/raw.d.ts","../node_modules/multiformats/dist/types/src/codecs/json.d.ts","../node_modules/multiformats/dist/types/src/basics.d.ts","../node_modules/uint8arrays/dist/src/util/bases.d.ts","../node_modules/uint8arrays/dist/src/to-string.d.ts","../node_modules/interface-datastore/dist/src/key.d.ts","../node_modules/interface-datastore/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-gater/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-gater/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-encrypter/dist/src/index.d.ts","../node_modules/libp2p/dist/src/ping/index.d.ts","../node_modules/libp2p/dist/src/fetch/index.d.ts","../node_modules/libp2p/dist/src/autonat/index.d.ts","../node_modules/libp2p/dist/src/components.d.ts","../node_modules/@libp2p/keychain/dist/src/index.d.ts","../node_modules/@achingbrain/nat-port-mapper/dist/src/index.d.ts","../node_modules/libp2p/dist/src/nat-manager.d.ts","../node_modules/libp2p/dist/src/address-manager/index.d.ts","../node_modules/libp2p/dist/src/peer-routing.d.ts","../node_modules/libp2p/dist/src/connection-manager/latency-monitor.d.ts","../node_modules/libp2p/dist/src/connection-manager/index.d.ts","../node_modules/@libp2p/peer-collections/dist/src/map.d.ts","../node_modules/@libp2p/peer-collections/dist/src/set.d.ts","../node_modules/@libp2p/peer-collections/dist/src/list.d.ts","../node_modules/@libp2p/peer-collections/dist/src/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/pb/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/server/reservation-store.d.ts","../node_modules/libp2p/dist/src/circuit-relay/server/advert-service.d.ts","../node_modules/it-pb-stream/dist/src/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/server/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/transport/reservation-store.d.ts","../node_modules/libp2p/dist/src/circuit-relay/transport/discovery.d.ts","../node_modules/libp2p/dist/src/circuit-relay/transport/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/index.d.ts","../node_modules/libp2p/dist/src/index.d.ts","../src/stats/index.ts","../node_modules/it-take/dist/src/index.d.ts","../node_modules/it-drain/dist/src/index.d.ts","../node_modules/it-map/dist/src/index.d.ts","../src/network.ts","../node_modules/@marcopolo_/libp2p-fetch/dist/src/index.d.ts","../src/http-bitswap.ts","../src/index.ts","../src/message/index.ts","../src/wantlist/index.ts","../node_modules/just-debounce-it/index.d.ts","../src/want-manager/msg-queue.ts","../src/want-manager/index.ts","../src/decision-engine/ledger.ts","../src/utils/sorted-map.ts","../src/decision-engine/req-queue.ts","../src/decision-engine/task-merger.ts","../src/decision-engine/index.ts","../src/notifications.ts","../node_modules/any-signal/index.d.ts","../node_modules/it-foreach/dist/src/index.d.ts","../src/bitswap.ts","../node_modules/@types/chai/index.d.ts","../node_modules/@types/chai-as-promised/index.d.ts","../node_modules/chai-parentheses/index.d.ts","../node_modules/@types/chai-subset/index.d.ts","../node_modules/chai-bites/index.d.ts","../node_modules/@types/chai-string/index.d.ts","../node_modules/aegir/dist/utils/chai.d.ts","../node_modules/delay/index.d.ts","../node_modules/@libp2p/interface-keys/dist/src/index.d.ts","../node_modules/@libp2p/peer-id-factory/dist/src/index.d.ts","../node_modules/blockstore-core/dist/src/base.d.ts","../node_modules/blockstore-core/dist/src/memory.d.ts","../node_modules/@libp2p/peer-id/dist/src/index.d.ts","../node_modules/@libp2p/tcp/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/tcp/dist/src/listener.d.ts","../node_modules/@libp2p/tcp/dist/src/index.d.ts","../node_modules/@libp2p/mplex/dist/src/index.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/@types/basic.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/@types/libp2p.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/nonce.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/@types/handshake.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/crypto.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/noise.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/crypto/stablelib.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/index.d.ts","../node_modules/eventemitter3/index.d.ts","../node_modules/p-queue/dist/queue.d.ts","../node_modules/p-queue/dist/options.d.ts","../node_modules/p-queue/dist/priority-queue.d.ts","../node_modules/p-queue/dist/index.d.ts","../node_modules/@libp2p/interface-connection-manager/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-manager/dist/src/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/routing-table/index.d.ts","../node_modules/@libp2p/record/dist/src/record.d.ts","../node_modules/@libp2p/record/dist/src/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/message/dht.d.ts","../node_modules/@libp2p/kad-dht/dist/src/message/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/network.d.ts","../node_modules/@libp2p/kad-dht/dist/src/query/types.d.ts","../node_modules/@libp2p/kad-dht/dist/src/query/manager.d.ts","../node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/providers.d.ts","../node_modules/@libp2p/kad-dht/dist/src/kad-dht.d.ts","../node_modules/@libp2p/kad-dht/dist/src/dual-kad-dht.d.ts","../node_modules/@libp2p/kad-dht/dist/src/index.d.ts","../test/utils/create-libp2p-node.ts","../node_modules/uint8arrays/dist/src/from-string.d.ts","../test/utils/mocks.ts","../test/utils/store-has-blocks.ts","../node_modules/iso-random-stream/dist/src/index.d.ts","../test/utils/make-blocks.ts","../test/utils/make-peer-id.ts","../test/utils/helpers.ts","../test/bitswap-mock-internals.ts","../node_modules/p-timeout/index.d.ts","../node_modules/p-event/index.d.ts","../test/bitswap-stats.ts","../node_modules/@types/sinonjs__fake-timers/index.d.ts","../node_modules/@types/sinon/index.d.ts","../node_modules/p-wait-for/node_modules/p-timeout/index.d.ts","../node_modules/p-wait-for/index.d.ts","../test/bitswap.ts","../node_modules/p-defer/index.d.ts","../test/decision-engine/decision-engine.ts","../test/browser.ts","../test/network/network.node.ts","../test/network/gen-bitswap-network.node.ts","../node_modules/@types/stats-lite/index.d.ts","../test/utils/create-bitswap.ts","../test/utils/connect-all.ts","../test/utils/distribution-test.ts","../test/swarms.ts","../test/node.ts","../node_modules/multiformats/dist/types/src/bases/base32.d.ts","../test/notifications.spec.ts","../test/utils.spec.ts","../test/benchmarks/helpers/print-swarm-results.ts","../test/benchmarks/get-many.ts","../test/decision-engine/ledger.spec.ts","../test/decision-engine/req-queue.spec.ts","../test/decision-engine/task-merger.spec.ts","../node_modules/multiformats/dist/types/src/bases/base64.d.ts","../node_modules/aegir/dist/utils/fixtures.d.ts","../test/types/message.spec.ts","../test/types/wantlist.spec.ts","../test/wantmanager/index.spec.ts","../test/wantmanager/msg-queue.spec.ts","../node_modules/keyv/src/index.d.ts","../node_modules/@types/http-cache-semantics/index.d.ts","../node_modules/@types/responselike/index.d.ts","../node_modules/@types/cacheable-request/index.d.ts","../node_modules/@types/ms/index.d.ts","../node_modules/@types/debug/index.d.ts","../node_modules/@types/extend/index.d.ts","../node_modules/@types/istanbul-lib-coverage/index.d.ts","../node_modules/@types/json-schema/index.d.ts","../node_modules/@types/json5/index.d.ts","../node_modules/@types/keyv/index.d.ts","../node_modules/@types/linkify-it/index.d.ts","../node_modules/@types/mdurl/encode.d.ts","../node_modules/@types/mdurl/decode.d.ts","../node_modules/@types/mdurl/parse.d.ts","../node_modules/@types/mdurl/format.d.ts","../node_modules/@types/mdurl/index.d.ts","../node_modules/@types/markdown-it/lib/common/utils.d.ts","../node_modules/@types/markdown-it/lib/token.d.ts","../node_modules/@types/markdown-it/lib/rules_inline/state_inline.d.ts","../node_modules/@types/markdown-it/lib/helpers/parse_link_label.d.ts","../node_modules/@types/markdown-it/lib/helpers/parse_link_destination.d.ts","../node_modules/@types/markdown-it/lib/helpers/parse_link_title.d.ts","../node_modules/@types/markdown-it/lib/helpers/index.d.ts","../node_modules/@types/markdown-it/lib/ruler.d.ts","../node_modules/@types/markdown-it/lib/rules_block/state_block.d.ts","../node_modules/@types/markdown-it/lib/parser_block.d.ts","../node_modules/@types/markdown-it/lib/rules_core/state_core.d.ts","../node_modules/@types/markdown-it/lib/parser_core.d.ts","../node_modules/@types/markdown-it/lib/parser_inline.d.ts","../node_modules/@types/markdown-it/lib/renderer.d.ts","../node_modules/@types/markdown-it/lib/index.d.ts","../node_modules/@types/markdown-it/index.d.ts","../node_modules/@types/unist/index.d.ts","../node_modules/@types/mdast/index.d.ts","../node_modules/@types/minimatch/index.d.ts","../node_modules/@types/minimist/index.d.ts","../node_modules/@types/mocha/index.d.ts","../node_modules/@types/normalize-package-data/index.d.ts","../node_modules/@types/parse-json/index.d.ts","../node_modules/@types/retry/index.d.ts","../node_modules/@types/semver/classes/semver.d.ts","../node_modules/@types/semver/functions/parse.d.ts","../node_modules/@types/semver/functions/valid.d.ts","../node_modules/@types/semver/functions/clean.d.ts","../node_modules/@types/semver/functions/inc.d.ts","../node_modules/@types/semver/functions/diff.d.ts","../node_modules/@types/semver/functions/major.d.ts","../node_modules/@types/semver/functions/minor.d.ts","../node_modules/@types/semver/functions/patch.d.ts","../node_modules/@types/semver/functions/prerelease.d.ts","../node_modules/@types/semver/functions/compare.d.ts","../node_modules/@types/semver/functions/rcompare.d.ts","../node_modules/@types/semver/functions/compare-loose.d.ts","../node_modules/@types/semver/functions/compare-build.d.ts","../node_modules/@types/semver/functions/sort.d.ts","../node_modules/@types/semver/functions/rsort.d.ts","../node_modules/@types/semver/functions/gt.d.ts","../node_modules/@types/semver/functions/lt.d.ts","../node_modules/@types/semver/functions/eq.d.ts","../node_modules/@types/semver/functions/neq.d.ts","../node_modules/@types/semver/functions/gte.d.ts","../node_modules/@types/semver/functions/lte.d.ts","../node_modules/@types/semver/functions/cmp.d.ts","../node_modules/@types/semver/functions/coerce.d.ts","../node_modules/@types/semver/classes/comparator.d.ts","../node_modules/@types/semver/classes/range.d.ts","../node_modules/@types/semver/functions/satisfies.d.ts","../node_modules/@types/semver/ranges/max-satisfying.d.ts","../node_modules/@types/semver/ranges/min-satisfying.d.ts","../node_modules/@types/semver/ranges/to-comparators.d.ts","../node_modules/@types/semver/ranges/min-version.d.ts","../node_modules/@types/semver/ranges/valid.d.ts","../node_modules/@types/semver/ranges/outside.d.ts","../node_modules/@types/semver/ranges/gtr.d.ts","../node_modules/@types/semver/ranges/ltr.d.ts","../node_modules/@types/semver/ranges/intersects.d.ts","../node_modules/@types/semver/ranges/simplify.d.ts","../node_modules/@types/semver/ranges/subset.d.ts","../node_modules/@types/semver/internals/identifiers.d.ts","../node_modules/@types/semver/index.d.ts","../node_modules/@types/strip-bom/index.d.ts","../node_modules/@types/strip-json-comments/index.d.ts","../node_modules/@types/yargs-parser/index.d.ts","../node_modules/@types/yargs/index.d.ts","../node_modules/@types/yauzl/index.d.ts","../../../node_modules/@types/connect/index.d.ts","../../../node_modules/@types/body-parser/index.d.ts","../../../node_modules/@types/bonjour/index.d.ts","../../../node_modules/@types/range-parser/index.d.ts","../../../node_modules/@types/qs/index.d.ts","../../../node_modules/@types/express-serve-static-core/index.d.ts","../../../node_modules/@types/connect-history-api-fallback/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/eslint-scope/index.d.ts","../../../node_modules/@types/mime/mime.d.ts","../../../node_modules/@types/mime/index.d.ts","../../../node_modules/@types/serve-static/index.d.ts","../../../node_modules/@types/express/index.d.ts","../../../node_modules/@types/html-minifier-terser/index.d.ts","../../../node_modules/@types/http-proxy/index.d.ts","../../../node_modules/@types/prop-types/index.d.ts","../../../node_modules/@types/react/global.d.ts","../../../node_modules/csstype/index.d.ts","../../../node_modules/@types/scheduler/tracing.d.ts","../../../node_modules/@types/react/index.d.ts","../../../node_modules/@types/scheduler/index.d.ts","../../../node_modules/@types/serve-index/index.d.ts","../../../node_modules/@types/sockjs/index.d.ts","../../../node_modules/@types/ws/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9","746d62152361558ea6d6115cf0da4dd10ede041d14882ede3568bce5dc4b4f1f",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"f3d4da15233e593eacb3965cde7960f3fddf5878528d882bcedd5cbaba0193c7","affectsGlobalScope":true},{"version":"d3f4771304b6b07e5a2bb992e75af76ac060de78803b1b21f0475ffc5654d817","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"6c55633c733c8378db65ac3da7a767c3cf2cf3057f0565a9124a16a3a2019e87","affectsGlobalScope":true},{"version":"fb4416144c1bf0323ccbc9afb0ab289c07312214e8820ad17d709498c865a3fe","affectsGlobalScope":true},{"version":"5b0ca94ec819d68d33da516306c15297acec88efeb0ae9e2b39f71dbd9685ef7","affectsGlobalScope":true},{"version":"34c839eaaa6d78c8674ae2c37af2236dee6831b13db7b4ef4df3ec889a04d4f2","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"65da6f0b8f50b27e05ebf35c88a8757eb4308751cdf2b1064a0e310a2a485895","2e3dc1d28f2467b2af0c931a3b0d2c595746a2f21818fc3c7b5d050996ace788","237be372eeb9a7ce07c6b2a21358f22772cde924614d67de175a4ac0ba3eb486","862eacc247d6c92524d7879feac6da363f55428cc78270bce7b14f2d3d0b0cef","f55f3ab9485b5fd1a3ba3a5a53e680cb8d3acc3552816a5d58a1fa26324262d0","635e7c978a30ab2013a37c4d05d0d081e58e4ad867db46a009412ad24ee426d7","b27c2a28daf3e502ae6b631cbf51881247fffd3e0163520bc5904604f9e48096","2f686fbec43c87bc9b9c3d0e237f780e0e822d2c3a9a25fc99a16030a294b764","4a8ce4a308482d69bd9032ee59f895a9d91e28ac5324665b31ea3a374b45e686","66621f74fca4ce5aee46018ab7a7c262f7b203cf81a6fe674a2865d60b48863f","7e771891adaa85b690266bc37bd6eb43bc57eecc4b54693ead36467e7369952a","a69c09dbea52352f479d3e7ac949fde3d17b195abe90b045d619f747b38d6d1a",{"version":"57b6cb95756d1fe3bfeb20205de27b0c5406e4a86e130c6dfa6bd92af641e09d","affectsGlobalScope":true},"11e2d554398d2bd460e7d06b2fa5827a297c8acfbe00b4f894a224ac0862857f",{"version":"e193e634a99c9c1d71f1c6e4e1567a4a73584328d21ea02dd5cddbaad6693f61","affectsGlobalScope":true},"374ca798f244e464346f14301dc2a8b4b111af1a83b49fffef5906c338a1f922","5a94487653355b56018122d92392beb2e5f4a6c63ba5cef83bbe1c99775ef713",{"version":"d5135ad93b33adcce80b18f8065087934cdc1730d63db58562edcf017e1aad9b","affectsGlobalScope":true},"82408ed3e959ddc60d3e9904481b5a8dc16469928257af22a3f7d1a3bc7fd8c4","e596c9bb2f29a2699fdd4ae89139612652245192f67f45617c5a4b20832aaae9","bb9c4ffa5e6290c6980b63c815cdd1625876dadb2efaf77edbe82984be93e55e","1cdcfc1f624d6c08aa12c73935f6e13f095919cd99edf95752951796eb225729","216717f17c095cde1dc19375e1ab3af0a4a485355860c077a4f9d6ea59fab5b5","14b5aa23c5d0ae1907bc696ac7b6915d88f7d85799cc0dc2dcf98fbce2c5a67c","5c439dafdc09abe4d6c260a96b822fa0ba5be7203c71a63ab1f1423cd9e838ea",{"version":"6b526a5ec4a401ca7c26cfe6a48e641d8f30af76673bad3b06a1b4504594a960","affectsGlobalScope":true},{"version":"816ad2e607a96de5bcac7d437f843f5afd8957f1fa5eefa6bba8e4ed7ca8fd84","affectsGlobalScope":true},"80473bd0dd90ca1e166514c2dfead9d5803f9c51418864ca35abbeec6e6847e1","1c84b46267610a34028edfd0d035509341751262bac1062857f3c8df7aff7153","e6c86d83bd526c8bdb5d0bf935b8e72ce983763d600743f74d812fdf4abf4df6","a3d541d303ee505053f5dcbf9fafb65cac3d5631037501cd616195863a6c5740","8d3c583a07e0c37e876908c2d5da575019f689df8d9fa4c081d99119d53dba22","2c828a5405191d006115ab34e191b8474bc6c86ffdc401d1a9864b1b6e088a58",{"version":"e630e5528e899219ae319e83bef54bf3bcb91b01d76861ecf881e8e614b167f0","affectsGlobalScope":true},"bcebb922784739bdb34c18ee51095d25a92b560c78ccd2eaacd6bd00f7443d83","7ee6ed878c4528215c82b664fe0cfe80e8b4da6c0d4cc80869367868774db8b1","b0973c3cbcdc59b37bf477731d468696ecaf442593ec51bab497a613a580fe30",{"version":"4989e92ba5b69b182d2caaea6295af52b7dc73a4f7a2e336a676722884e7139d","affectsGlobalScope":true},{"version":"0715e4cd28ad471b2a93f3e552ff51a3ae423417a01a10aa1d3bc7c6b95059d6","affectsGlobalScope":true},"5153a2fd150e46ce57bb3f8db1318d33f6ad3261ed70ceeff92281c0608c74a3","210d54cd652ec0fec8c8916e4af59bb341065576ecda039842f9ffb2e908507c","36b03690b628eab08703d63f04eaa89c5df202e5f1edf3989f13ad389cd2c091","0effadd232a20498b11308058e334d3339cc5bf8c4c858393e38d9d4c0013dcf","25846d43937c672bab7e8195f3d881f93495df712ee901860effc109918938cc","7d55d78cd47cf5280643b53434b16c2d9d11d144126932759fbdd51da525eec4","1b952304137851e45bc009785de89ada562d9376177c97e37702e39e60c2f1ff","69ee23dd0d215b09907ad30d23f88b7790c93329d1faf31d7835552a10cf7cbf","44b8b584a338b190a59f4f6929d072431950c7bd92ec2694821c11bce180c8a5","23b89798789dffbd437c0c423f5d02d11f9736aea73d6abf16db4f812ff36eda","f69ff39996a61a0dd10f4bce73272b52e8024a4d58b13ab32bf4712909d0a2b7",{"version":"3c4ba1dd9b12ffa284b565063108f2f031d150ea15b8fafbdc17f5d2a07251f3","affectsGlobalScope":true},"e10177274a35a9d07c825615340b2fcde2f610f53f3fb40269fd196b4288dda6","c4577fb855ca259bdbf3ea663ca73988ce5f84251a92b4aef80a1f4122b6f98e","3c13ef48634e7b5012fcf7e8fce7496352c2d779a7201389ca96a2a81ee4314d","5d0a25ec910fa36595f85a67ac992d7a53dd4064a1ba6aea1c9f14ab73a023f2",{"version":"f0900cd5d00fe1263ff41201fb8073dbeb984397e4af3b8002a5c207a30bdc33","affectsGlobalScope":true},{"version":"ff07a9a03c65732ccc59b3c65bc584173da093bd563a6565411c01f5703bd3cb","affectsGlobalScope":true},"6de4a219df57d2b27274d59b67708f13c2cbf7ed211abe57d8f9ab8b25cde776","0fe8985a28f82c450a04a6edf1279d7181c0893f37da7d2a27f8efd4fd5edb03","e59a892d87e72733e2a9ca21611b9beb52977be2696c7ba4b216cbbb9a48f5aa",{"version":"da26af7362f53d122283bc69fed862b9a9fe27e01bc6a69d1d682e0e5a4df3e6","affectsGlobalScope":true},"8a300fa9b698845a1f9c41ecbe2c5966634582a8e2020d51abcace9b55aa959e",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"d8d555f3d607ecaa18d55de6995ea8f206342ecc93305919eac945c7c78c78c6","6e037a885b94caf06b3dd8146ad3f46fdffb8b5aca11e3de6a6a930266b4a460",{"version":"c7c4d2674da156b5cc5c4a42cbd527a4ad91c6f8866ff892328186bac6a8bcb5","signature":"7a3e9aebca3ef227511ddb3be8df61be6427ab791a8fc8a236d5fd431c64133f"},"ee93f3313289b31afd1544da65086607942df227eb61aedf488b7c072aa1128f","b6d189963f04bd06137fe46fb8db1dca958aa65a15cc3aa210a3b2f9a2641c2a","41faca5faa6859bbe93224fdd4007353393807527d2fb674fbd83b2edfd16af3","77411d10dad0e74a86ce28dd0f720cce2947421e42f3fb5d1849bc14520f9b5b","ea86fe238f679714f2b3662d9d932bc3b47a0500894985718243167043f2bda8","667c9ac7c2f61c4a36220c2fa02f848a170aa96d3a58be32a5831aad86330da2","eb15dfd1f8b6da5f546fe29a6a0f0de4ae6dbd4a5577af4eba4c8a54548ef0a2","01443e5da049881a99f223c72617d4bb1d8854930d03deceb628e4be83df1e4a","a380f922477db0b9b4a17cde7d29585e2280036fd62ac4564814d4844b64717a","a0263cc045540023e72c993a26fd1bef3adf8674b9719272009134c56ecfc336","df162b6f89985144d8aedccc36dfc366ab5e562ba8615125b2bfa25273f3006b",{"version":"d28d470c2ad98a6c8a311dee028e330414b2d5fb8929a8273f2d49d97edb4306","signature":"1e14f5130ca1e7084d87d6ce216595cfce894542e5545fcf47f9a999bb858f82"},{"version":"b203b43d6fa6a3e4f0df310d57ca7bb00f5a451ea3db50dac7c80e25ddd72e2e","signature":"df8e482c1b6128d94042d64423f1cc5804c5802e32695f505485d17512b92361"},{"version":"0641e7f6fa369fae8236c03ef5c831002894e5323e2baaf068da9c242fb4f595","signature":"9ff59cce7bd2fd9ca2e8870a9d66ffbd78c5572dcf28e1af2d2ecbc9ec4304d0"},{"version":"ca1aaa8a0d13ce98ed20906d8397cd2769d891674bbe65ada8eb60a53f58b0e7","signature":"bc236f73ba82a070e91a55b2a256727a46a573ec6409336ff6617d3418f6cb1a"},"147b16a7da1cef5e7c1ce5f6e3c1559b786f86d504d1151d94221a578f8ff533","7735c3681e614d7e967a935f397210fedbd987243456206f697202cb7c266a41","9dffe4acb382f1232e9eaeda23ed7f07c934acb9ef06aa528f75799d12d35343","7f8f6d3576ead7698d78d3849b5cd55b79f923e5589e14a2cc5270b4d0c9fe96","a807c0a82557d68f6f0464d6af0a6566d1ef708f57c7d1d7dd8dde28879635bc","4a5612eb59f581a5b8e05d22e668b4199787751266a0291e3e07113fc52abf2a","16c594cd8a44be9f5398d3fc7dbc9575f0b67d91a6553f35bd3576136862b32b","5d055d8b54e2dec3fe4aa417f5f664658b78123e83e8735047285f99a1d24065","42b5333564fef3c9becbe8daf55b1ea124514cd86c2f8bed401d2a3f0037b3b1","109970171acb66c4c03fa6ba9d0a3bc2bf43c12540db2b0842d25d54fbe11f65","edb50eace77052203c3bc6eb251fe31f44ab0107e2b6d949ec983a918726aaf4","70cbb43b1e838bb77b16e1085115494c8b6925a954edf7fbdd494ad56a88adb8","ad716342f559ff88871c01a351dbf89fe72c8313f329cd2a714f09f532c50eab","866f0c4f16380a56653adc6cbeac08c58c626dabb431f0fa6cc2ba07874836d8","e8c5b68c1182684e8cfc177430b80fef003976d1dbde326087c28f5125fe4b5d","6666d48a46dbfd565490e7f8789093e2392c5bdcc3a380dfdd91c77237e43101","a2023e18c62b1109f17241fb1f90a84e75fffcb3ee9265d2e9bc0fa40b6ede42","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","9080b537cd4fa24273477f33faf5f983e5f10aa386c2de8fcb6de837c9cc9763","272cd5e6428b68d973ce707329c3f621ac6b3eb4bf5bd4421b1106299600ddde","d34a8917095f11006957bed03e1e60dacc0b82906f5d0ddc87b959e283fbb5cc","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","bffe8a5db9410d2f3320df7016f83e9de47328e377aa78b9aaed1fe6d5db9d66","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","14b8a1dd226271e6b045d91262602b15820ff871b3dab24510a15e6989d05a5d","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","0fc1e0effc8ea83ceca9a1ff36c2696489fefea040d33fc5cbe244111333fcd4","1217c84b164e559b2371aea1b8c11eea9f95e123dab98942c8a5a4aacc2ad252","28092d5b5aea82adc509a3d522d265d9d5a8a0ddf92f94c8fb336c5787893030","1104c3d427c1cd94c53b14c09dc27d342a1cc1b0070ef95423bc3732940360e0","6c2d1a830c44b810afbc51d9c6e24acc69bba27bcd8f635142ebdfbe3e8512a3","86aa8428ca8e1061ca36c4d3d62add983e16b01c003b8644ad10e3baaa7fac22","975bbb148ebe1290081bb0f643d70aa4c5e4b09ef9121eb60dd78ec262042dac","d61d22e1b77ff3242e3ebdc209b1567edbf573fa619ef10841f282705124254c","1738ee2a1396aff81a52e43d32ac60ffd203d20ffccab11418d116be2fc5b876","0b8b1130956872ca47bca072483e8091d6f2a82a5d12a487ba5823c02fe86f2c","f74cefbbb1ebd84a1a124e9e433fb5d5ca1f0196bc8b863fff32f144bca7b6d0",{"version":"cd8301c383190417018a9610d3041893c5911cf68e413984ff5dc446e31f1791","signature":"b4374e50591dd2a55a2183128276da874427283c9d8c52ce913f77dd0c3ed5f9"},"f83ca4c2157040bc3dc3edc59900f83cb4ca98c08357b8547401119cac667f57","d9b9c8643cc9909046a2c4f9786362549372172cbf2b5dd64af91bb0cb428f07","1e696d3bb095bc56363c69d6799302fdde67ab28d629d93efdd04182207ebc84",{"version":"c2e0562d9ae0f6e24b0982067b76e5370de740e449f650f85d9e6a9e328cd292","signature":"9b4e2e8e74287ca4e992c3dd63b299a5c25757afe25304af631479e0d0bc3ae8"},"d491ddcef62d13d93bf4a4b9e1223f8fb1ca628dbd7c871c34398f2d291f26ce","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","4c5e54a2d502770a63859a00fbf77e8b91ce76b18080278f62866e7cdb582798","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","71dfda7df8d05d2d54627963af1c3c675ef99363d421b7ff42ae237d038db4ce","6666d48a46dbfd565490e7f8789093e2392c5bdcc3a380dfdd91c77237e43101","6377354dd753557d479933e0bec6ca6836f839c87394ecb071e85f062b708058","0dd67171a4a3fa82044faec51befa11ab96f9205fd8cc96be09de275b65d36ab","42570779c28480ae0d1fa0695974a888305ee2b2efd37bacdeb57204dec843db","dc35c5340756418041da9f388103218ead65f57397f40d5674672c216b008126","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","2596013e7e3f002455e29bad0a70e0ae1a1364cac8584d2590b73133e63d6073","b9f2a8333ccac1e6037afd66dbba82bdeea00f1ed011f741ce4f006ad4eb8b01","8ad13afb5324460426b210f7c5040d3d19375accd24e22bb52a534c728aca73e","e1fe04ff1ffecfb18420f0895d0cd2652f98a27def5c33aae5ef328f186c905b","87b44430497cae7542bbd5ac2fb6663df6a465dea7a46be58a49cd9416530439","32b67d761db3999f1e482d0add405b695d3ec5607e07ae4c963a96334c331814","8747571dae434deca4847b49e09b5421d7068b0956a1df841756812645d4e1ed","474ab86e676e0c1b664bfcd21b1e58bed351f3390ba1d892e8da703f371b7a4e","fb7a601066e19b5d0c173b564bd46b358cf00c9040e79fb6fd427b7aa223eed1","8b097e48fdeabcee00e2aacd4d009dff135c2cd51675a272d74ec25dd853dfee","28235440c6b330eb66df3a7badfc11e32cf7e08fbdb17b518a6b775fb269170f","247a5bebf668df6d3bb7e0b297ed5a6b6913d9343dcfea5bf77ce4662ab102bf","531556008024c69163c0d120823a69e7a6a5be1279ea87fc725a63dc386278b7","e2e44effbf7b4b1fb5111ef7a4443a733aff4cace7875fafa86bc41130dfdb84","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","78599ccb7640bea7bc64e8fddf33e97b8cf512c1b2be2c8851655a66980e4268","cd5ab2f30a27d53001804b7ef51758a79b73e4ccb7716b8e2ab8e17d69a7183b","a9dc4418352bc4a8d1e9314aba1e29327b17d06c604b397c6140d6488c5b022a","6adcf362e079c177ea4730c8b7beb3e9848b3f970ef08b497a641e034b0a0ece","341331b97a90ac435664e68b81f116f1f622283f3de523c5425b67eb0a58cad1","5e76b98d51f23f9d9563ac7002139d43fd6543eb66646928bf2e9df6a468ace5","e0b109ec8368bbb8943bf7943af9fbcf0e895160d1363cf93dacd43bcc747794","f569da0d6f4c6fb153811dd6b7d34afb4511c7d85f5089e30a1db78004975ec1","537b1070107a0454a2fe365a633555700fff55a4b3e15d55520633b93dbf96d1","8571610b2e190937f6fcf0c626ad415ec9b02a4ff550d8881812d2b9efdd2847","8dac050016c78a797699221c95d569c47ea4176e403b47f9f5a2e95afe26cdd6","d8a63ecc9188f8ef5fce8c82ea2c691acce9a152b8bd07d75a6531c7d4c07df9","cf86d880d95988555dd6ac5d1d3c9aa99054df217f0a7ec1acf39b9d56f6445f","6426748248e4065207bda1892b18426f1c9072800edc015119d4c907f62af51d","4ce46cbc89a24ce3d0a00dec230826cefee2514181e790932230705db3f0849d","f7b2f9a0ffd520805cdf2440d48f45bd9074c905aea1a365b91de9170ccc9d58","8432e40770dd9f642c682661fea75226189e5b701b06189a98c6bcd3764d796b","8f0d013f819b91abf6b355e510e1bc039ff10699932d726ba7b3a4f447c031bc","4f7f48524408301ae348e9d310f9ca718210cc2ac1c2c6697eee1e0d487c7d00","34999b05c3aa15b73ab99dc1bd9a2d17b7f24cbf229a45b0850c7cd9e138ffe7","91fe7b33847d945b1ad3a816c397ca4cddf5005dc36f5bea4ab11e1ca7b256f1","fe968d845c846a7b92645287133ba0b8e9f84fcfd31834993e77330a95e6e40c","a054d5318c7a96f630b21d0ecbbec6a5adf97f8d697f11dc1e7892f87be5ad02","a5e5b361a88c70f95156c17dadb55b39f658103e28f16d7a3158be79809b09fd","d40b8ae5d3a678fc5542430da94fc918f1c6859c214e899040c3df4c51742f2e","677634e24d8933e8820eac9ca51b590a63618d297f202cf0751777d2563c74c6","06d62ca3f63cc0a07f525f0df010713c02d0b3a12eff7e7c393641b36ec070cc",{"version":"91298c569ddea0c2eb69d87b6cd29d0589393e4303f405e9461321e1f4840a94","signature":"f04841b945e88e83a31e47aee7c08ebb310c09f6552029520c7c3c0e9fb31ee6"},"a3729108e0d2e5b9f634b3d8d1e5b73960ef367cc77ae597eee87fcbda9442a0","5fc52eff32c75afed919d4518e57e3e3c424f79b1a280c3c9f1d0cc5bd6ba7d9","c2fc1482fdfd2d87e8ca806ef1139b2c7824efee6cc1230b0aff88087528f5d7",{"version":"ad099f15366e0d9a462b5bd7a2a6d678812d28b1e44549adc7c6329fe65b0351","signature":"d2fa075ca2f9ba295773da850487ce6a9b96dbceda87039be23a46d756ca9587"},"05ba2b0bff03530b208e72fedcc7e343161bdfc4d061ea159b189b8ba4d69ea9",{"version":"932a9bc425a7a8474f0c6ba4c1db72aea074da6957594f8ba80e427d5a854906","signature":"a87ad0491ff93f1588480cbcf1bbceaff6dfc4ede03fdbee1fa87000bfb7e6c5"},{"version":"c4edaa545469fa15aa633522707d6c834e476d7dcd03354224fab6489eea2ee8","signature":"2362c75b628cfb1872679b1b7ad18b9cb20e12617c1d78df2ecc3a29e2cf6394"},{"version":"9124738ec25434e256056e497059e2338c6c128c899b6e05b83412c716688078","signature":"819b09ed9ec43215b9ddb2e9452a6ea0307564db8fe8fb46d6976bcc875e9deb"},{"version":"23614e113e12e7dbf0f548a53f7cb89a4931078d6beca64e08adbf0284afa66a","signature":"e86e5fb7d53550c4b209a29769a3eaa7c4aca393f11e0cd6e6e2500c9909993c"},"04cbb5c8ae98f513211203d01c5b6ff8197ea756ecc490c81e7c9fae8447754e",{"version":"0f39bed75a41966c6bf31a5560f6da1f91cfd1e12a7f74d325c5e63d8fe22787","signature":"f528c5b981cccf0a0f6938c5b122e056b3b4b83bc94fdd93dd674942a705c4c3"},{"version":"4a60bfb087a1f9cd8f351879ee2e5e3ef5f678d9439665d5cf4f9b334bb9b756","signature":"ca5f0b96f8efa2a4f951b41092122b2df8313df078536c521ad3abb51e6cc54e"},{"version":"81ee83ad0855c3978f27a6359ee54d974905691dbd6040bfda6634f22d72c9be","signature":"8600f518fb55b95cc297e01dcd69244caa8562dc262dd0e619ba763fc40a4252"},{"version":"70803c7bfc11f4fb9dd790de32aad3e04458cedd67e2705eca040f041be1aea1","signature":"d0b089607ffee9a6d65615fa63ee15753c51017501397ef7d2247a7404a42623"},{"version":"b0834965af1c3626049bed5da0b50fd950611a1f9067894ea9559dbe081a0518","signature":"59d4e5449440c3e8a7ad10bbdf682c80e332c607bf1583251e61394d59d205ce"},{"version":"08f529198e3f741cef564a05f31b5d3645770bc8327d44950fc1cb67cd29afe7","signature":"524c270b4218ceeb0de13055a14790a8796a8c0263163f04bf0837bd3085c7d6"},{"version":"9312d1eab301ab5e5149be77ec740f263a2f0fb3099fb5e7751c012e062b07d8","signature":"626c363aa0c9838f69171aafaed274fbefcce9016a26a43e8f6b0c7983a4b0e1"},{"version":"13d4dbf89a1c537dfe3b8b0bf424e1243ab35e3da431fa075f6dd0b5a1f26e73","signature":"597a88000c8f0f6646e67b2dd718333eba96bc2bfd7f677edfb8e6f589d32369"},"04e6fc01ec88336d8d03d3f115bf38600207a363b01f30461fa0304b1b964804","d33ce9358de6447d71146be26bd735890a8c2b3f08a6f4dc2962d5d76ad308d5",{"version":"bb14d9c0cc759b54c6eebad3a613e2c54942fb6115fd076d3ee90eaf5de4de43","signature":"51e1bb6379d54600c028292b8e796a1cf65091cb9873834e8c5c815e8a22cc3b"},{"version":"b9734142a4b241cfb505be4a2eb0261d211647df7c73043f817f4fdd8d96c846","affectsGlobalScope":true},{"version":"63e2182615c513e89bb8a3e749d08f7c379e86490fcdbf6d35f2c14b3507a6e8","affectsGlobalScope":true},{"version":"c1f79c6d85cd84518fd7349588b3c61bdc189f58e3866f925cbf4631c81e31f9","affectsGlobalScope":true},{"version":"f4c0db3a49cea9babd5d224ba14243a6a6119bf65a65198994033aaea3a60a71","affectsGlobalScope":true},{"version":"42f28f4cfca4a70bd89c1d55d76c7978275030b894f6793f36890265c11a83a4","affectsGlobalScope":true},{"version":"41071d2f1a39386d10bf36d1ba4712ad42a900047f16a109936df9e48f13673e","affectsGlobalScope":true},"961e669569be9491c20108cda7db74e91d9ceafde708d3db10603af69aef7e23","4c7fb1f4c57f3cd9d571c5e4cae33503530273a45579fa0babaf36b64a776eaa","3b65ca51bc8915ae230bb40cb6a9662bcdcde83c402f57d7f8b8c803d497d0af","e9ac10dc565b57bbcb6d134321f3a1fa2fd9c9c886d00455c0f2cf8631e37b34","89f3cdbbf9cb7b86ef859cefea8f2b669dbe0610d942a3a38e1fde983907a762","ed42a3b734edf70e551f833095d39fc7ec977e57408aa59639f88a5f97c096b4","495e96e2e15ef27419b115b9874b644dce848c2ecb7dfbc1d0bffc3f767c777c","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","97002bbdee99ce5e895daab7608d0bb5a92d1fcabeb0ef26f959a135645ab760","2c45e8c5856d9e68da38da9df7d2e76418ba70d619af172722140147881a2662","86ef3c0f13b861966c3f8a594c4042df6f3b2945fae733ba011b16dc2836453e","634383ecece44671e25939c8a6710e8a9f1f02ea51424e9752c81c0c3f3ae6d5","594f11fc10f5fa50df7e09c3c7d3e925bf0bd5f10af78fa715b809a847cba718","63ad4205a06d0f4529ea385815c51ebb32ce68fc52ae4e650e51e866e5578ec5","ce8d5b83e00a61eb0b931ca091036266565ae8c730a0276c3687bf079f33b44b","25005fd1c08300ea0aced86760109ebc99ae29400f90163bbe1ee4a0fc57ed1d","c622790571b9723df8f1175ce4deb073728b55bef81f1c4c12ec4967249b53c6","c55719987df25500caf575194e75c0f249758f8a7cbc1eac25541faa49d18eab","6fe8555e7cff8fb4b1c4ee9c759e3ad0e205f1d20c302ccd47cd5c05dd3f67f5","940fd6ac43a78cbe1ed17db09ff8f93dcf7f9703cebaaea53071a6b448f25466","b80c780c52524beb13488942543972c8b0e54400e8b59cee0169f38d0fabb968","a77fbecee25688f568e18b43f8f54195d6c278a2a9a687ada5ab3d2f726524eb","e29f2b3a93ca3392fe29fa8e7b93985e854b44fe28e2b5c113f08296095bd6b7","d27956c8b392088a06d882e1edb58aab4d5cf5ab1229b73f99329ab21f352147","90dab905b7ea5ab629b62ec5a4153b3f44469aff5b1f6132edb2802537e5d8a7","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","164a5f7d876c1c34be273cdc3c7f8b7619729010cc4350e0f58d2624b7f66610","9b65fed5eefae75fe8b47f0ec66e958910c07a397a0bea486e29a0a1ede9bd59","75614d08e0829e2cdaf0f11ea77678210782e9460aa65d507ec1500ff14cbbaa","9044d1e9327294a169fb02ff20ce04db42bdc11ea771bcbe229ff7233fc27912","d9794ac6f56649c85740cbd2acfab019959e96c95b352418eda3be50a9b507bf","3dfdb0a87095463b35bc2776e30255bc8334c17903d617388e80b4c241f4e2d1","00297049e5c15c995373d5dd0e9144fd20eb4ecfb8757f0ebc3a3d889d709807","2b6a4ce9c496d80c9e3e0be81d4e708c53b5576b463b215c16f9b9cdffd9e085","e76a8353e31ab7720941ef98e0f541a4d55cff6e70db99fb4bdc524d55d1ee41","509dcc5428613ee5c3214715a62f96d14c66a4aa247da7414b7f29501ffeead7","5433ea8c939ff483d06f5b67841eb2084849b1323021e2b14e39f384393b50ff","aa0a53e66dd47479acca758d17d713c249f50eec1c3894e6de1113e2d07010ce","381561ca646fbf1cd1667ce707e92a87dd6f72ca0c3d397964073e0e21a9cecd","5860618432214072761b1bbc2df4fa2466005d0644fadbbdbe961b6c226339bc",{"version":"09ef1b7ad18a73905918711482ffcd1392dc2cf64266cc1156ab7f1be95cad2f","signature":"b1f5d24e6a9ad2e00eb493b46a1e21e54aab34ec348d862bafe5c247c0c6e853"},"558b9c398ce6f03df00e76eca31d239960977a6c3f06c5fa067e7f176fd5e6be",{"version":"2b31a9262694ff1d62ebdbd49d5ce22e28ca6261c768def7f580f6be26aa7c35","signature":"f6b58374b7f1e7e2321b61d018b8f466b9aa72008caeba637fdd50cacefb213a"},{"version":"f20cccfb5627da167936e226d5ae24253bb64a52b021dedfb315321bfe72ca6a","signature":"3c49d76d1f6709b97d3017746279bdc9f97a5a00a0a52091b1dbd52561cb4ad8"},"9ec4f7b64a4efdae7039397c79e6826d29284bf91e7fc63574c65881f68cee3c",{"version":"1f38d7f8d07e880ae8bde665135505eb6de3cd6d401a948c6b7687c6f35afaa2","signature":"baebc7794d496341b7cc103be88686d3cc321fdff779d06b2f585ada66192d55"},{"version":"2a21130cd006cfc719d58c8d37e8d8d589d394f75993ff7a18ff66e5196f1499","signature":"fa07aafdf8def8a8cfe757cc2838e9a9b3bb53079bf3f050c4a06f32de3b1ebc"},{"version":"3cacf516f7abf8b79d78fdec66e14c6fa97d5744fb52a8114418a0d067ad8839","signature":"b00026164be9ca0d5d0ebf8959d6cfd1da6fc29b134db4c8f70857f00d8ef2df"},{"version":"c8d11aeb9b419da12593fb3f49afc5d93ced8788546a394ef39c651419caddd5","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"286211de937e01a946a011c9b2e3239acec1d810f7cde6240e31a8cc203b700b","3438e820e6c690814bd00de7df9b645cbb4889ebfb29eab0aed65fa3247621e1",{"version":"842dbc6d3f594df1abc01d76b15ba64fb4333e2b64ffb0872535d249ba645d1a","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"f83b320cceccfc48457a818d18fc9a006ab18d0bdd727aa2c2e73dc1b4a45e98","354abbae08f72ea982b1a767a8908f1b3efe8bbe53955c64f9c0c249c8832d5d","39e79b923b74c9fca4f9ca3bae7c363d225efca70476883593543a1cbb3991b7","adb5ad16c19ff8dbfa9daa3a7dc8e1b039c381a2b94383144a53368681ad8ca0",{"version":"0332788828957f7bcb9f4291fb10439c98bf06a2218c19f69d37b78aca1d0310","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"acd5d501223e3a7cdd229b501fce5fb071937b72bd05fa33e543eb21c8ee0aba",{"version":"163178e13d325fc4a76596a42c7bc2dcdf20ac632233f3ab4ca27cd76d31b684","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"e4d67da1c664d0a6ff176cf42ee31a44f86e804cc769f722d74a15a2765ff1d6","signature":"69b30e660ed2960155d8d5157d665a176dd384f31a74e65766f452598f386822"},{"version":"9460893bafa9bbdae04bee68fe2da87e692b67798f107c4a56621cd0f09eb739","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"bdc5b4b1b813ba7078a951429536389d58ccb0e4e1772a9357827bbe68893bce","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"6a3816094633a8e76b1f3d7d3834b6ed2dc9dd08c8e996a74c118284468c6e7b",{"version":"3c084863032c954391d9b6b42fca68f40c6488d887b6d0c5a10bf492eaaf1eed","signature":"114d891ae559bc488ba0c3ed112fb88caa47c0050bdd079251aedb601100c75d"},{"version":"a70b1818601f1b84463df0d31f36a21f79f4f68d7048bb9c2f853ecb841bb6f2","signature":"8e76443c3b74f5d050f7cbab44d4b6f8f8b7cc28c4d58421f711ad78898f16fc"},{"version":"5e85a5d84409b462b36f9e72de987604dae996dd5630efc9927222a4a3a1021c","signature":"9ebd48df2bda26c6b4efc73e5239a82f3148319fc60f31fb95bce1d1a1432a08"},{"version":"cc0774b79256216281fec62337dc8686014d44b970270bc69257acad529ba7b3","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"c4c7ee93c17711273a36b00093977a51f312af35e90832cbbb1419f9b6b8ca60","signature":"262209045764c29b050897da900672b07b8572b572ad330e0d244ee87592603a"},"bff0e5b78911a9a743b80b83ca989765b2036ac5b3423a07f9a5d172ba0771ab",{"version":"6350ea1e0a08c1627d178ac4aa55c96a67c46ad073057a7426d703549b1c1a98","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"ef4256805042988fa183b9994f1871a433421788f29fb66bc45edce3c1cf0e81","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"a33d98728092bfe6c0eccbd38b714a618ab340f1bf975596234af30939d7ead4","signature":"eb42bc5267f461f8744bbb6aebab29d9b6cd4f68dea6580114c427134faed436"},{"version":"f5651a01bab07880e215d3ef1c4207495281bc10d24c90d60f5cfce02e5708a7","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"3d1c959c452163b7f62470091d245786758ca36190330b3b20c68188c8f3367f","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"b3bd50e2a103ab7b874a2d0a0242db639a07780a394f291a4f05af76f72e7952","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"874413f18d1740d386fd8d0b5a91c2a66dc773ccac2eed1b8529ff45c735ed6f","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"de3ba4fafdea18e37beed5924f34b180e32793e34669e311031ec39ded7b84fe","a236a784cc81a8b83aa0684721bcda0812aef7a06f15fdefd7e08a7a3f9980a0",{"version":"22f5baafb40a1437cc3da6447ce3ab989c5f0406ee5720d8920b560af330f135","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"cb746dcf66a45ed75f87b5dfdd4d5f43311a95799fe244300d2ef258e7f45174","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"da45ee6fbc1ae3e13be063bf57aa5f71435c6602dca66de97bd500f15d9333cb","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"5b383753383e8776993a075ebb46cba9b2078e04e3f97f5b70f2258a90298ef8","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"92edb6e257fa64d3baae647490e041912684f5dc1f243d0aedd60b4b383ff50b","cab425b5559edac18327eb2c3c0f47e7e9f71b667290b7689faafd28aac69eae","3cfb0cb51cc2c2e1b313d7c4df04dbf7e5bda0a133c6b309bf6af77cf614b971","f992cd6cc0bcbaa4e6c810468c90f2d8595f8c6c3cf050c806397d3de8585562","6a9c5127096b35264eb7cd21b2417bfc1d42cceca9ba4ce2bb0c3410b7816042","78828b06c0d3b586954015e9ebde5480b009e166c71244763bda328ec0920f41","80d50bca45b12deb542118e51aa1c5e6c779f2b387e589d475297c07de0b342d","8b06ac3faeacb8484d84ddb44571d8f410697f98d7bfa86c0fda60373a9f5215","f3e604694b624fa3f83f6684185452992088f5efb2cf136b62474aa106d6f1b6","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","fec943fdb3275eb6e006b35e04a8e2e99e9adf3f4b969ddf15315ac7575a93e4","6503fb6addf62f9b10f8564d9869ad824565a914ec1ac3dd7d13da14a3f57036","f313731860257325f13351575f381fef333d4dfe30daf5a2e72f894208feea08","951b37f7d86f6012f09e6b35f1de57c69d75f16908cb0adaa56b93675ea0b853","3816fc03ffd9cbd1a7a3362a264756a4a1d547caabea50ca68303046be40e376","0c417b4ec46b88fb62a43ec00204700b560d01eb5677c7faa8ecd34610f096a8","13d29cdeb64e8496424edf42749bbb47de5e42d201cf958911a4638cbcffbd3f","0f9e381eecc5860f693c31fe463b3ca20a64ca9b8db0cf6208cd4a053f064809","95902d5561c6aac5dfc40568a12b0aca324037749dcd32a81f23423bfde69bab","5dfb2aca4136abdc5a2740f14be8134a6e6b66fd53470bb2e954e40f8abfaf3e","577463167dd69bd81f76697dfc3f7b22b77a6152f60a602a9218e52e3183ad67","b8396e9024d554b611cbe31a024b176ba7116063d19354b5a02dccd8f0118989","4b28e1c5bf88d891e07a1403358b81a51b3ba2eae1ffada51cca7476b5ac6407","7150ad575d28bf98fae321a1c0f10ad17b127927811f488ded6ff1d88d4244e5","8b155c4757d197969553de3762c8d23d5866710301de41e1b66b97c9ed867003","93733466609dd8bf72eace502a24ca7574bd073d934216e628f1b615c8d3cb3c","45e9228761aabcadb79c82fb3008523db334491525bdb8e74e0f26eaf7a4f7f4","aeacac2778c9821512b6b889da79ac31606a863610c8f28da1e483579627bf90","569fdb354062fc098a6a3ba93a029edf22d6fe480cf72b231b3c07832b2e7c97","bf9876e62fb7f4237deafab8c7444770ef6e82b4cad2d5dc768664ff340feeb2","6cf60e76d37faf0fbc2f80a873eab0fd545f6b1bf300e7f0823f956ddb3083e9","6adaa6103086f931e3eee20f0987e86e8879e9d13aa6bd6075ccfc58b9c5681c","ee0af0f2b8d3b4d0baf669f2ff6fcef4a8816a473c894cc7c905029f7505fed0","cddf5c26907c0b8378bc05543161c11637b830da9fadf59e02a11e675d11e180","5774751340e987a6a9e4a5dcc03ff68a6515adc2b91423e1af2f660fc8f30e81","8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","209e814e8e71aec74f69686a9506dd7610b97ab59dcee9446266446f72a76d05",{"version":"677646e2620795c98a539fb12fb531f10331c217cef1492132b2518f894fa92d","affectsGlobalScope":true},"6fa0008bf91a4cc9c8963bace4bba0bd6865cbfa29c3e3ccc461155660fb113a","2b8264b2fefd7367e0f20e2c04eed5d3038831fe00f5efbc110ff0131aab899b","58a3914b1cce4560d9ad6eee2b716caaa030eda0a90b21ca2457ea9e2783eaa3","2b93035328f7778d200252681c1d86285d501ed424825a18f81e4c3028aa51d9","2ac9c8332c5f8510b8bdd571f8271e0f39b0577714d5e95c1e79a12b2616f069","42c21aa963e7b86fa00801d96e88b36803188018d5ad91db2a9101bccd40b3ff","d31eb848cdebb4c55b4893b335a7c0cca95ad66dee13cbb7d0893810c0a9c301","77c1d91a129ba60b8c405f9f539e42df834afb174fe0785f89d92a2c7c16b77a","7a9e0a564fee396cacf706523b5aeed96e04c6b871a8bebefad78499fbffc5bc","906c751ef5822ec0dadcea2f0e9db64a33fb4ee926cc9f7efa38afe5d5371b2a","5387c049e9702f2d2d7ece1a74836a14b47fbebe9bbeb19f94c580a37c855351","c68391fb9efad5d99ff332c65b1606248c4e4a9f1dd9a087204242b56c7126d6","e9cf02252d3a0ced987d24845dcb1f11c1be5541f17e5daa44c6de2d18138d0c","e8b02b879754d85f48489294f99147aeccc352c760d95a6fe2b6e49cd400b2fe","9f6908ab3d8a86c68b86e38578afc7095114e66b2fc36a2a96e9252aac3998e0","0eedb2344442b143ddcd788f87096961cd8572b64f10b4afc3356aa0460171c6","71405cc70f183d029cc5018375f6c35117ffdaf11846c35ebf85ee3956b1b2a6","c68baff4d8ba346130e9753cefe2e487a16731bf17e05fdacc81e8c9a26aae9d","2cd15528d8bb5d0453aa339b4b52e0696e8b07e790c153831c642c3dea5ac8af","479d622e66283ffa9883fbc33e441f7fc928b2277ff30aacbec7b7761b4e9579","ade307876dc5ca267ca308d09e737b611505e015c535863f22420a11fffc1c54","f8cdefa3e0dee639eccbe9794b46f90291e5fd3989fcba60d2f08fde56179fb9","86c5a62f99aac7053976e317dbe9acb2eaf903aaf3d2e5bb1cafe5c2df7b37a8","2b300954ce01a8343866f737656e13243e86e5baef51bd0631b21dcef1f6e954","a2d409a9ffd872d6b9d78ead00baa116bbc73cfa959fce9a2f29d3227876b2a1","b288936f560cd71f4a6002953290de9ff8dfbfbf37f5a9391be5c83322324898","61178a781ef82e0ff54f9430397e71e8f365fc1e3725e0e5346f2de7b0d50dfa","6a6ccb37feb3aad32d9be026a3337db195979cd5727a616fc0f557e974101a54","c649ea79205c029a02272ef55b7ab14ada0903db26144d2205021f24727ac7a3","38e2b02897c6357bbcff729ef84c736727b45cc152abe95a7567caccdfad2a1d","d6610ea7e0b1a7686dba062a1e5544dd7d34140f4545305b7c6afaebfb348341","3dee35db743bdba2c8d19aece7ac049bde6fa587e195d86547c882784e6ba34c","b15e55c5fa977c2f25ca0b1db52cfa2d1fd4bf0baf90a8b90d4a7678ca462ff1","f41d30972724714763a2698ae949fbc463afb203b5fa7c4ad7e4de0871129a17","843dd7b6a7c6269fd43827303f5cbe65c1fecabc30b4670a50d5a15d57daeeb9","f06d8b8567ee9fd799bf7f806efe93b67683ef24f4dea5b23ef12edff4434d9d","6017384f697ff38bc3ef6a546df5b230c3c31329db84cbfe686c83bec011e2b2","e1a5b30d9248549ca0c0bb1d653bafae20c64c4aa5928cc4cd3017b55c2177b0","a593632d5878f17295bd53e1c77f27bf4c15212822f764a2bfc1702f4b413fa0","a868a534ba1c2ca9060b8a13b0ffbbbf78b4be7b0ff80d8c75b02773f7192c29","da7545aba8f54a50fde23e2ede00158dc8112560d934cee58098dfb03aae9b9d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","6aee496bf0ecfbf6731aa8cca32f4b6e92cdc0a444911a7d88410408a45ecc5d","4006c872e38a2c4e09c593bc0cdd32b7b4f5c4843910bea0def631c483fff6c5","ab6aa3a65d473871ee093e3b7b71ed0f9c69e07d1d4295f45c9efd91a771241d","70e9a18da08294f75bf23e46c7d69e67634c0765d355887b9b41f0d959e1426e","e9eb1b173aa166892f3eddab182e49cfe59aa2e14d33aedb6b49d175ed6a3750","65dfa4bc49ccd1355789abb6ae215b302a5b050fdee9651124fe7e826f33113c","6d829824ead8999f87b6df21200df3c6150391b894b4e80662caa462bd48d073","afc559c1b93df37c25aef6b3dfa2d64325b0e112e887ee18bf7e6f4ec383fc90","d78e5898c8de5e0f934eee83f680262de005caa268d137101b833fd932f95e07","16d51f964ec125ad2024cf03f0af444b3bc3ec3614d9345cc54d09bab45c9a4c","ba601641fac98c229ccd4a303f747de376d761babb33229bb7153bed9356c9cc",{"version":"c5dd1fef4cd4aaffc78786047bed5ae6fc1200d19a1946cbc4e2d3ed4d62c8fa","affectsGlobalScope":true},"56cbe80e6c42d7e6e66b6f048add8b01c663797b843a074d9f19c4a3d63a269a",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"a1c79f857f5c7754e14c93949dad8cfefcd7df2ecc0dc9dd79a30fd493e28449","f3e604694b624fa3f83f6684185452992088f5efb2cf136b62474aa106d6f1b6","e793f85164d47950e32731e98897e3e6b285339c5fa1b3a3ddd1711a54f371b1","e050a0afcdbb269720a900c85076d18e0c1ab73e580202a2bf6964978181222a","5b9ecf7da4d71cf3832dbb8336150fa924631811f488ad4690c2dfec2b4fb1d7","951c85f75aac041dddbedfedf565886a7b494e29ec1532e2a9b4a6180560b50e","e6f0cb9d8cb2e38bec66e032e73caa3e7c6671f21ed7196acb821aec462051f2","43cdd474c5aa3340da4816bb8f1ae7f3b1bcf9e70d997afc36a0f2c432378c84","ee65fe452abe1309389c5f50710f24114e08a302d40708101c4aa950a2a7d044","54c9959f2d8ba97a5fcc4345ac2fca6f1bc20fe5764570b7fef37bea107bc70b","6a386ff939f180ae8ef064699d8b7b6e62bc2731a62d7fbf5e02589383838dea",{"version":"bbdf156fea2fabed31a569445835aeedcc33643d404fcbaa54541f06c109df3f","affectsGlobalScope":true},"1c29793071152b207c01ea1954e343be9a44d85234447b2b236acae9e709a383","f5a8b384f182b3851cec3596ccc96cb7464f8d3469f48c74bf2befb782a19de5",{"version":"45e702668a69a742682ccc153d6159a8817fa6387b6d1d91a447e3e4534518b3","affectsGlobalScope":true},"74b0245c42990ed8a849df955db3f4362c81b13f799ebc981b7bec2d5b414a57","acebfe99678cf7cddcddc3435222cf132052b1226e902daac9fbb495c321a9b5","82b1f9a6eefef7386aebe22ac49f23b806421e82dbf35c6e5b7132d79e4165da","77c5c7f8578d139c74102a29384f5f4f0792a12d819ddcdcaf8307185ff2d45d"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":false,"esModuleInterop":true,"importsNotUsedAsValues":2,"module":6,"noEmitOnError":true,"noFallthroughCasesInSwitch":true,"noImplicitReturns":false,"noUnusedLocals":true,"noUnusedParameters":false,"outDir":"./","removeComments":false,"skipLibCheck":true,"sourceMap":true,"strict":true,"stripInternal":true,"target":7},"fileIdsList":[[79,106,113,422],[70,106,113],[105,106,113,427],[79,106,113],[106,430,432],[106],[106,344,429,430],[76,79,106,113,425,426],[106,423,426,427,436],[76,79,81,84,94,105,106,113],[106,434],[106,435],[106,440,441,442,443],[77,106,437],[79,106,113,435],[76,79,81,94,102,105,106,111,113],[106,265,267,268],[106,200,265,266],[106,265,267,269],[106,270],[106,200,266,270,271,272],[106,116,147,157,200,265,266,267,270],[106,265],[106,120,126],[106,136,140],[106,116,147],[106,116,140,148],[106,116,120,135,140,146,147],[106,116,135,136,140,148,215],[106,116,120,135,140,147,178],[54,106,135,141],[54,106,116,135,141,142],[51,106,116],[106,116,135,136,137,140,141,143,145,148,149,150,153,155,157,158],[106,148],[106,136,141],[50,54,106],[106,116,140],[106,116,135,141],[106,116,136,140,141,144],[106,116,120,136,148,151],[106,116,120],[106,116,148],[106,135,147,148],[106,135,136,140,147,148,175],[106,116,135,136,142,143,190,291,293],[106,116,143,145,155,157,180,197,280,290,292],[54,106,116,136,141,142,143,281,286,289,290,293],[106,120,141,283,284],[106,116,120,135,136,137,141,143,147,285,293],[106,116,135,141,143,281,286,288,293],[106,116,137,190,197],[106,116,137,143,157,287],[106,116,143],[106,116,137,145,157,278,280],[106,116,158,197],[106,175],[106,212,213,214],[106,116],[106,116,256],[50,51,54,106,116],[106,120,282],[106,140,157,177,262],[106,136,140,148,157,177,263],[106,155],[106,157],[106,120],[106,140],[106,138,139],[76,79,105,106,113,336,337,338],[106,248],[106,340],[76,106,113],[106,367],[106,352],[106,356,357,358],[106,355],[106,357],[106,347,353,354,359,362,364,365,366],[106,354,360,361,367],[106,360,363],[106,354,355,360,367],[106,354,367],[106,369],[106,348,349,350,351],[60,106],[63,106],[64,69,97,106],[65,76,77,84,94,105,106],[65,66,76,84,106],[67,106],[68,69,77,85,106],[69,94,102,106],[70,72,76,84,106],[71,106],[72,73,106],[76,106],[74,76,106],[76,77,78,94,105,106],[76,77,78,91,94,97,106],[106,110],[72,79,84,94,105,106],[76,77,79,80,84,94,102,105,106],[79,81,94,102,105,106],[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],[76,82,106],[83,105,106],[72,76,84,94,106],[85,106],[86,106],[63,87,106],[88,104,106,110],[89,106],[90,106],[76,91,92,106],[91,93,106,108],[64,76,94,95,96,97,106],[64,94,96,106],[94,95,106],[97,106],[98,106],[76,100,101,106],[100,101,106],[69,84,94,102,106],[103,106],[84,104,106],[64,79,90,105,106],[69,106],[94,106,107],[106,108],[106,109],[64,69,76,78,87,94,105,106,108,110],[94,106,111],[79,94,106,113],[106,377,416],[106,377,401,416],[106,416],[106,377],[106,377,402,416],[106,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415],[106,402,416],[106,306],[106,113],[106,419],[76,94,106,113],[106,147,170],[106,248,249,250,251,252,253],[54,106,132,133],[54,106,132,133,258],[106,248,249],[54,106,132],[106,132,196],[106,195],[106,120,147,162,164],[106,120,147,164],[106,120,161,163],[106,165],[106,120,147],[106,116,136,140,177,180],[106,116,137,149,155,177,180,184],[106,136,140,215,216,220,223],[106,136,137,150],[106,116,145,155,179,180,184,199,216,217,218,219,224],[106,116,135,137,140,215,216,224],[106,116,136,137,145,150,155,177,184],[106,116,145,150,155,177,180,184,199,221,222],[106,116,136,137,145,177,184],[106,116,137,143,145,149,150,153,155,157,177,179,180,184,197,199],[106,116,135,136,137,140,145,157,177,179,184,210],[106,136],[106,116,135,137,155,179,184],[106,116,135,137,140,145,155,179,180,182,184],[106,116,135,141,142,143,145,149,150,153,157,159,175,177,179,181,185,197,199,200,201,202,203,204,205,207,208,209,211,224],[106,116,137,177,180,206],[106,116,135,137,141,145,149],[106,116,135,137,155,184],[106,135,136,137,140,157,177,179,180],[106,116,135,136,140,148],[51,106],[58,106],[58,106,190,191,192],[53,54,106],[53,106],[52,106],[106,186],[50,106],[50,55,106],[56,106],[54,55,56,106,187,188,189],[50,51,52,53,106,186],[50,51,52,106],[106,303],[106,274,275,276,277],[106,275],[106,275,276],[106,308],[106,126],[106,119],[106,119,126],[106,119,120],[106,119,121,122,123,124,125],[106,194],[106,190,193],[54,106,116,117,130,132,133,140,159,160,226,230,233,234,238,243,244,245,246],[54,59,106,116,117,127,128,129,130,133,159,173,226,230,234,235,239,241,242],[54,106,116,127,128,235],[106,116,240,243],[106,243],[106,116,133,135,160,190,225,230,231,233],[50,54,106,116,127,133,134,135,137,159,160,230,232,247],[54,59,106,127,128],[54,57,59,106,115,127,129,130,131,233],[54,106,116,117,130,135,140,141,155,159,160,164,166,167,168,169,171,179,226,227,228,229,233,234,247],[54,76,106,116,117,130,135,160,168,195,233],[76,106,116,134,172,173,225],[76,106,134],[106,116,117,118,129],[106,114],[54,59,106,116,117,130,140,159,160,168,173,226,230,233,234,235,237],[54,106,116,117,130,160,168,230,233,234,236],[54,59,106,127],[54,59,106,127,128,159,173,226],[76,106,319,325],[76,106,316],[54,59,106,116,133,228,230,233,234,247,254,255,257,259,296,297,299,300,301],[54,106,116,159,234,247,254,259,294,299,300,304],[54,106,159,228,234,247,254,257,259,294,299,301,307,309],[106,302,312],[54,57,59,106,116,133,195,226,228,230,234,243,254,257,259,295,296,299,300,311],[106,116,239,254,257],[106,116,241,254,257],[106,116,241,242,254,257],[106,254,296,299],[54,106,159,164,166,226,230,234,247,254,255,294,299,307,311],[106,302,305,310,312,314,315,320],[54,106,116,195,244,254,299,300,322],[76,106,316,319],[54,59,106,115,127,234,254,295,299,322,330,331],[54,57,59,106,234,235,254,299,330],[54,57,106,115,129,130,234,240,254,295],[106,247,259,294,296],[106,159,225,257,263,264,273,293],[106,254,296,299,317,318],[106,254],[54,57,106,295,298],[106,116,257],[54,76,106,116,133,140,159,179,226,230,233,234,247,257,259,260,294,295],[54,106,133,234,254],[106,168,226,234,238,254,296,299,300],[54,106,116,234,237,254,296,299,300,311],[54,116,132,133,140,159,160,226,230,233,234,238,243,244],[54,116,127,128,129,133,159,226,230,234,239,241],[54,116,127,128,235],[116,240,243],[243],[116,133,135,160,190,225,230,233],[50,54,116,127,133,134,135,137,159,160,230,232],[54,127,128],[54,127,129,233],[120,126],[54,116,135,140,141,155,159,160,179,226,233,234,247],[54,76,116,135,160,233],[76,116,134,172,225],[76,134],[116,117,129],[54,116,140,159,160,226,230,233,235,237],[54,116,160,230,233,234],[54,127],[54,127,128,159,226],[76],[302,312],[302,305,310,312,314,315,320],[296],[159,225],[54],[116],[116,133,140,159,230,233,234,247],[133,234]],"referencedMap":[[423,1],[424,2],[428,3],[422,4],[433,5],[429,6],[432,7],[430,6],[427,8],[437,9],[438,6],[439,10],[431,6],[435,11],[434,12],[440,6],[426,6],[425,6],[441,6],[444,13],[445,6],[443,6],[446,14],[436,15],[447,4],[448,16],[442,6],[206,6],[265,6],[269,17],[267,18],[270,19],[272,20],[273,21],[271,22],[268,23],[266,24],[180,25],[200,26],[199,27],[198,28],[280,29],[279,28],[179,30],[178,6],[150,31],[143,32],[158,33],[256,6],[159,34],[148,28],[146,6],[157,35],[156,28],[142,36],[116,37],[141,38],[149,39],[145,40],[153,41],[152,28],[144,42],[155,43],[154,28],[175,44],[174,28],[177,45],[176,28],[131,6],[136,6],[135,6],[137,6],[292,46],[293,47],[291,48],[284,24],[285,49],[286,50],[289,51],[290,52],[288,53],[287,54],[281,55],[205,56],[117,6],[264,57],[215,58],[214,59],[212,59],[213,59],[257,60],[260,61],[283,62],[282,24],[263,63],[262,64],[261,28],[167,65],[173,66],[231,67],[139,68],[140,69],[138,68],[339,70],[249,71],[253,71],[251,71],[248,6],[341,72],[342,6],[337,6],[343,6],[344,6],[345,6],[346,73],[347,6],[368,74],[353,75],[359,76],[357,6],[356,77],[358,78],[367,79],[362,80],[364,81],[365,82],[366,83],[360,6],[361,83],[363,83],[355,83],[354,6],[370,84],[349,6],[348,6],[351,75],[352,85],[350,75],[371,6],[372,6],[373,6],[340,6],[60,86],[61,86],[63,87],[64,88],[65,89],[66,90],[67,91],[68,92],[69,93],[70,94],[71,95],[72,96],[73,96],[75,97],[74,98],[76,97],[77,99],[78,100],[62,101],[112,6],[79,102],[80,103],[81,104],[113,105],[82,106],[83,107],[84,108],[85,109],[86,110],[87,111],[88,112],[89,113],[90,114],[91,115],[92,115],[93,116],[94,117],[96,118],[95,119],[97,120],[98,121],[99,6],[100,122],[101,123],[102,124],[103,125],[104,126],[105,127],[106,128],[107,129],[108,130],[109,131],[110,132],[111,133],[374,6],[375,6],[338,134],[376,6],[401,135],[402,136],[377,137],[380,137],[399,135],[400,135],[390,135],[389,138],[387,135],[382,135],[395,135],[393,135],[397,135],[381,135],[394,135],[398,135],[383,135],[384,135],[396,135],[378,135],[385,135],[386,135],[388,135],[392,135],[403,139],[391,135],[379,135],[416,140],[415,6],[410,139],[412,141],[411,139],[404,139],[405,139],[407,139],[409,139],[413,141],[414,141],[406,141],[408,141],[307,142],[306,6],[316,6],[417,6],[418,6],[369,6],[114,143],[419,6],[420,144],[421,145],[134,6],[170,6],[171,146],[254,147],[331,6],[245,6],[258,148],[259,149],[252,71],[250,150],[255,6],[274,6],[133,151],[197,152],[196,153],[132,6],[298,6],[228,6],[246,6],[163,154],[161,155],[164,156],[229,6],[219,155],[166,157],[165,6],[151,6],[162,158],[147,6],[227,6],[236,6],[336,97],[208,159],[203,160],[224,161],[216,24],[218,162],[220,163],[217,164],[222,165],[223,166],[221,167],[204,168],[211,169],[210,170],[202,171],[185,172],[182,24],[225,173],[207,174],[209,175],[201,176],[181,177],[184,178],[183,28],[58,179],[322,180],[59,180],[330,180],[51,6],[193,181],[52,182],[189,6],[54,183],[186,184],[192,185],[191,185],[55,186],[56,187],[50,6],[57,188],[190,189],[187,190],[53,191],[188,6],[311,6],[304,192],[278,193],[276,194],[277,195],[275,6],[303,6],[309,196],[308,6],[160,6],[119,197],[123,198],[124,199],[121,200],[122,198],[126,201],[125,197],[169,6],[9,6],[10,6],[13,6],[12,6],[2,6],[14,6],[15,6],[16,6],[17,6],[18,6],[19,6],[20,6],[21,6],[3,6],[4,6],[25,6],[22,6],[23,6],[24,6],[26,6],[27,6],[28,6],[5,6],[29,6],[30,6],[31,6],[32,6],[6,6],[36,6],[33,6],[34,6],[35,6],[37,6],[7,6],[38,6],[43,6],[44,6],[39,6],[40,6],[41,6],[42,6],[8,6],[48,6],[45,6],[46,6],[47,6],[1,6],[49,6],[11,6],[120,6],[118,6],[295,202],[195,202],[194,203],[247,204],[168,6],[243,205],[239,206],[241,207],[242,208],[232,209],[233,210],[129,211],[234,212],[127,24],[230,213],[244,214],[226,215],[172,216],[130,217],[240,6],[115,218],[238,219],[237,220],[128,221],[235,222],[326,223],[325,224],[302,225],[305,226],[310,227],[313,228],[312,229],[327,230],[328,231],[329,232],[315,233],[314,234],[321,235],[323,236],[320,237],[332,238],[333,239],[324,240],[318,6],[317,241],[294,242],[319,243],[301,244],[299,245],[300,246],[296,247],[297,248],[334,249],[335,250]],"exportedModulesMap":[[423,1],[424,2],[428,3],[422,4],[433,5],[429,6],[432,7],[430,6],[427,8],[437,9],[438,6],[439,10],[431,6],[435,11],[434,12],[440,6],[426,6],[425,6],[441,6],[444,13],[445,6],[443,6],[446,14],[436,15],[447,4],[448,16],[442,6],[206,6],[265,6],[269,17],[267,18],[270,19],[272,20],[273,21],[271,22],[268,23],[266,24],[180,25],[200,26],[199,27],[198,28],[280,29],[279,28],[179,30],[178,6],[150,31],[143,32],[158,33],[256,6],[159,34],[148,28],[146,6],[157,35],[156,28],[142,36],[116,37],[141,38],[149,39],[145,40],[153,41],[152,28],[144,42],[155,43],[154,28],[175,44],[174,28],[177,45],[176,28],[131,6],[136,6],[135,6],[137,6],[292,46],[293,47],[291,48],[284,24],[285,49],[286,50],[289,51],[290,52],[288,53],[287,54],[281,55],[205,56],[117,6],[264,57],[215,58],[214,59],[212,59],[213,59],[257,60],[260,61],[283,62],[282,24],[263,63],[262,64],[261,28],[167,65],[173,66],[231,67],[139,68],[140,69],[138,68],[339,70],[249,71],[253,71],[251,71],[248,6],[341,72],[342,6],[337,6],[343,6],[344,6],[345,6],[346,73],[347,6],[368,74],[353,75],[359,76],[357,6],[356,77],[358,78],[367,79],[362,80],[364,81],[365,82],[366,83],[360,6],[361,83],[363,83],[355,83],[354,6],[370,84],[349,6],[348,6],[351,75],[352,85],[350,75],[371,6],[372,6],[373,6],[340,6],[60,86],[61,86],[63,87],[64,88],[65,89],[66,90],[67,91],[68,92],[69,93],[70,94],[71,95],[72,96],[73,96],[75,97],[74,98],[76,97],[77,99],[78,100],[62,101],[112,6],[79,102],[80,103],[81,104],[113,105],[82,106],[83,107],[84,108],[85,109],[86,110],[87,111],[88,112],[89,113],[90,114],[91,115],[92,115],[93,116],[94,117],[96,118],[95,119],[97,120],[98,121],[99,6],[100,122],[101,123],[102,124],[103,125],[104,126],[105,127],[106,128],[107,129],[108,130],[109,131],[110,132],[111,133],[374,6],[375,6],[338,134],[376,6],[401,135],[402,136],[377,137],[380,137],[399,135],[400,135],[390,135],[389,138],[387,135],[382,135],[395,135],[393,135],[397,135],[381,135],[394,135],[398,135],[383,135],[384,135],[396,135],[378,135],[385,135],[386,135],[388,135],[392,135],[403,139],[391,135],[379,135],[416,140],[415,6],[410,139],[412,141],[411,139],[404,139],[405,139],[407,139],[409,139],[413,141],[414,141],[406,141],[408,141],[307,142],[306,6],[316,6],[417,6],[418,6],[369,6],[114,143],[419,6],[420,144],[421,145],[134,6],[170,6],[171,146],[254,147],[331,6],[245,6],[258,148],[259,149],[252,71],[250,150],[255,6],[274,6],[133,151],[197,152],[196,153],[132,6],[298,6],[228,6],[246,6],[163,154],[161,155],[164,156],[229,6],[219,155],[166,157],[165,6],[151,6],[162,158],[147,6],[227,6],[236,6],[336,97],[208,159],[203,160],[224,161],[216,24],[218,162],[220,163],[217,164],[222,165],[223,166],[221,167],[204,168],[211,169],[210,170],[202,171],[185,172],[182,24],[225,173],[207,174],[209,175],[201,176],[181,177],[184,178],[183,28],[58,179],[322,180],[59,180],[330,180],[51,6],[193,181],[52,182],[189,6],[54,183],[186,184],[192,185],[191,185],[55,186],[56,187],[50,6],[57,188],[190,189],[187,190],[53,191],[188,6],[311,6],[304,192],[278,193],[276,194],[277,195],[275,6],[303,6],[309,196],[308,6],[160,6],[119,197],[123,198],[124,199],[121,200],[122,198],[126,201],[125,197],[169,6],[9,6],[10,6],[13,6],[12,6],[2,6],[14,6],[15,6],[16,6],[17,6],[18,6],[19,6],[20,6],[21,6],[3,6],[4,6],[25,6],[22,6],[23,6],[24,6],[26,6],[27,6],[28,6],[5,6],[29,6],[30,6],[31,6],[32,6],[6,6],[36,6],[33,6],[34,6],[35,6],[37,6],[7,6],[38,6],[43,6],[44,6],[39,6],[40,6],[41,6],[42,6],[8,6],[48,6],[45,6],[46,6],[47,6],[1,6],[49,6],[11,6],[120,6],[118,6],[295,202],[195,202],[194,203],[247,251],[243,252],[239,253],[241,254],[242,255],[232,256],[233,257],[129,258],[234,259],[127,260],[230,261],[244,262],[226,263],[172,264],[130,265],[238,266],[237,267],[128,268],[235,269],[325,270],[313,271],[321,272],[317,273],[294,274],[299,275],[300,276],[296,277],[297,278]],"semanticDiagnosticsPerFile":[423,424,428,422,433,429,432,430,427,437,438,439,431,435,434,440,426,425,441,444,445,443,446,436,447,448,442,206,265,269,267,270,272,273,271,268,266,180,200,199,198,280,279,179,178,150,143,158,256,159,148,146,157,156,142,116,141,149,145,153,152,144,155,154,175,174,177,176,131,136,135,137,292,293,291,284,285,286,289,290,288,287,281,205,117,264,215,214,212,213,257,260,283,282,263,262,261,167,173,231,139,140,138,339,249,253,251,248,341,342,337,343,344,345,346,347,368,353,359,357,356,358,367,362,364,365,366,360,361,363,355,354,370,349,348,351,352,350,371,372,373,340,60,61,63,64,65,66,67,68,69,70,71,72,73,75,74,76,77,78,62,112,79,80,81,113,82,83,84,85,86,87,88,89,90,91,92,93,94,96,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,374,375,338,376,401,402,377,380,399,400,390,389,387,382,395,393,397,381,394,398,383,384,396,378,385,386,388,392,403,391,379,416,415,410,412,411,404,405,407,409,413,414,406,408,307,306,316,417,418,369,114,419,420,421,134,170,171,254,331,245,258,259,252,250,255,274,133,197,196,132,298,228,246,163,161,164,229,219,166,165,151,162,147,227,236,336,208,203,224,216,218,220,217,222,223,221,204,211,210,202,185,182,225,207,209,201,181,184,183,58,322,59,330,51,193,52,189,54,186,192,191,55,56,50,57,190,187,53,188,311,304,278,276,277,275,303,309,308,160,119,123,124,121,122,126,125,169,9,10,13,12,2,14,15,16,17,18,19,20,21,3,4,25,22,23,24,26,27,28,5,29,30,31,32,6,36,33,34,35,37,7,38,43,44,39,40,41,42,8,48,45,46,47,1,49,11,120,118,295,195,194,247,168,243,239,241,242,232,233,129,234,127,230,244,226,172,130,240,115,238,237,128,235,326,325,302,305,310,313,312,327,328,329,315,314,321,323,320,332,333,324,318,317,294,319,301,299,300,296,297,334,335],"latestChangedDtsFile":"./test/wantmanager/msg-queue.spec.d.ts"},"version":"4.9.5"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/index.min.js b/node_modules/ipfs-bitswap/dist/index.min.js
index 062148f..c4eca6f 100644
--- a/node_modules/ipfs-bitswap/dist/index.min.js
+++ b/node_modules/ipfs-bitswap/dist/index.min.js
@@ -1,3 +1,13 @@
 (function (root, factory) {(typeof module === 'object' && module.exports) ? module.exports = factory() : root.IpfsBitswap = factory()}(typeof self !== 'undefined' ? self : this, function () {
-"use strict";var IpfsBitswap=(()=>{var vs=Object.create;var Wt=Object.defineProperty;var xs=Object.getOwnPropertyDescriptor;var ks=Object.getOwnPropertyNames;var Ss=Object.getPrototypeOf,Es=Object.prototype.hasOwnProperty;var v=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),N=(r,t)=>{for(var e in t)Wt(r,e,{get:t[e],enumerable:!0})},Tr=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of ks(t))!Es.call(r,i)&&i!==e&&Wt(r,i,{get:()=>t[i],enumerable:!(n=xs(t,i))||n.enumerable});return r};var L=(r,t,e)=>(e=r!=null?vs(Ss(r)):{},Tr(t||!r||!r.__esModule?Wt(e,"default",{value:r,enumerable:!0}):e,r)),Cs=r=>Tr(Wt({},"__esModule",{value:!0}),r);var Xr=v(($c,Qr)=>{Qr.exports=jr;var Gr=128,ho=127,fo=~ho,po=Math.pow(2,31);function jr(r,t,e){t=t||[],e=e||0;for(var n=e;r>=po;)t[e++]=r&255|Gr,r/=128;for(;r&fo;)t[e++]=r&255|Gr,r>>>=7;return t[e]=r|0,jr.bytes=e-n+1,t}});var Zr=v((Gc,Kr)=>{Kr.exports=Oe;var go=128,Jr=127;function Oe(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a)throw Oe.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&Jr)<<i:(o&Jr)*Math.pow(2,i),i+=7}while(o>=go);return Oe.bytes=s-n,e}});var tn=v((jc,Yr)=>{var mo=Math.pow(2,7),yo=Math.pow(2,14),bo=Math.pow(2,21),wo=Math.pow(2,28),_o=Math.pow(2,35),vo=Math.pow(2,42),xo=Math.pow(2,49),ko=Math.pow(2,56),So=Math.pow(2,63);Yr.exports=function(r){return r<mo?1:r<yo?2:r<bo?3:r<wo?4:r<_o?5:r<vo?6:r<xo?7:r<ko?8:r<So?9:10}});var rn=v((Qc,en)=>{en.exports={encode:Xr(),decode:Zr(),encodingLength:tn()}});var on=v((Xc,sn)=>{"use strict";var nn=rn();sn.exports=r=>{if(!(r instanceof Uint8Array))throw new Error("arg needs to be a Uint8Array");let t=[];for(;r.length>0;){let e=nn.decode(r);t.push(e),r=r.slice(nn.decode.bytes)}return t}});var un=v((Jc,cn)=>{cn.exports=Pe;var an=128,Eo=127,Co=~Eo,Ao=Math.pow(2,31);function Pe(r,t,e){if(Number.MAX_SAFE_INTEGER&&r>Number.MAX_SAFE_INTEGER)throw Pe.bytes=0,new RangeError("Could not encode varint");t=t||[],e=e||0;for(var n=e;r>=Ao;)t[e++]=r&255|an,r/=128;for(;r&Co;)t[e++]=r&255|an,r>>>=7;return t[e]=r|0,Pe.bytes=e-n+1,t}});var fn=v((Kc,hn)=>{hn.exports=Ie;var Bo=128,ln=127;function Ie(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a||i>49)throw Ie.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&ln)<<i:(o&ln)*Math.pow(2,i),i+=7}while(o>=Bo);return Ie.bytes=s-n,e}});var pn=v((Zc,dn)=>{var To=Math.pow(2,7),Lo=Math.pow(2,14),Mo=Math.pow(2,21),Do=Math.pow(2,28),No=Math.pow(2,35),Fo=Math.pow(2,42),Oo=Math.pow(2,49),Po=Math.pow(2,56),Io=Math.pow(2,63);dn.exports=function(r){return r<To?1:r<Lo?2:r<Mo?3:r<Do?4:r<No?5:r<Fo?6:r<Oo?7:r<Po?8:r<Io?9:10}});var mn=v((Yc,gn)=>{gn.exports={encode:un(),decode:fn(),encodingLength:pn()}});var wn=v((eu,bn)=>{var vt=1e3,xt=vt*60,kt=xt*60,ot=kt*24,Ro=ot*7,Uo=ot*365.25;bn.exports=function(r,t){t=t||{};var e=typeof r;if(e==="string"&&r.length>0)return Ho(r);if(e==="number"&&isFinite(r))return t.long?Wo(r):qo(r);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(r))};function Ho(r){if(r=String(r),!(r.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(r);if(t){var e=parseFloat(t[1]),n=(t[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return e*Uo;case"weeks":case"week":case"w":return e*Ro;case"days":case"day":case"d":return e*ot;case"hours":case"hour":case"hrs":case"hr":case"h":return e*kt;case"minutes":case"minute":case"mins":case"min":case"m":return e*xt;case"seconds":case"second":case"secs":case"sec":case"s":return e*vt;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return e;default:return}}}}function qo(r){var t=Math.abs(r);return t>=ot?Math.round(r/ot)+"d":t>=kt?Math.round(r/kt)+"h":t>=xt?Math.round(r/xt)+"m":t>=vt?Math.round(r/vt)+"s":r+"ms"}function Wo(r){var t=Math.abs(r);return t>=ot?$t(r,t,ot,"day"):t>=kt?$t(r,t,kt,"hour"):t>=xt?$t(r,t,xt,"minute"):t>=vt?$t(r,t,vt,"second"):r+" ms"}function $t(r,t,e,n){var i=t>=e*1.5;return Math.round(r/e)+" "+n+(i?"s":"")}});var vn=v((ru,_n)=>{function Vo(r){e.debug=e,e.default=e,e.coerce=c,e.disable=s,e.enable=i,e.enabled=o,e.humanize=wn(),e.destroy=u,Object.keys(r).forEach(l=>{e[l]=r[l]}),e.names=[],e.skips=[],e.formatters={};function t(l){let h=0;for(let f=0;f<l.length;f++)h=(h<<5)-h+l.charCodeAt(f),h|=0;return e.colors[Math.abs(h)%e.colors.length]}e.selectColor=t;function e(l){let h,f=null,m,d;function p(...y){if(!p.enabled)return;let S=p,A=Number(new Date),P=A-(h||A);S.diff=P,S.prev=h,S.curr=A,h=A,y[0]=e.coerce(y[0]),typeof y[0]!="string"&&y.unshift("%O");let T=0;y[0]=y[0].replace(/%([a-zA-Z%])/g,(I,D)=>{if(I==="%%")return"%";T++;let z=e.formatters[D];if(typeof z=="function"){let mt=y[T];I=z.call(S,mt),y.splice(T,1),T--}return I}),e.formatArgs.call(S,y),(S.log||e.log).apply(S,y)}return p.namespace=l,p.useColors=e.useColors(),p.color=e.selectColor(l),p.extend=n,p.destroy=e.destroy,Object.defineProperty(p,"enabled",{enumerable:!0,configurable:!1,get:()=>f!==null?f:(m!==e.namespaces&&(m=e.namespaces,d=e.enabled(l)),d),set:y=>{f=y}}),typeof e.init=="function"&&e.init(p),p}function n(l,h){let f=e(this.namespace+(typeof h>"u"?":":h)+l);return f.log=this.log,f}function i(l){e.save(l),e.namespaces=l,e.names=[],e.skips=[];let h,f=(typeof l=="string"?l:"").split(/[\s,]+/),m=f.length;for(h=0;h<m;h++)f[h]&&(l=f[h].replace(/\*/g,".*?"),l[0]==="-"?e.skips.push(new RegExp("^"+l.slice(1)+"$")):e.names.push(new RegExp("^"+l+"$")))}function s(){let l=[...e.names.map(a),...e.skips.map(a).map(h=>"-"+h)].join(",");return e.enable(""),l}function o(l){if(l[l.length-1]==="*")return!0;let h,f;for(h=0,f=e.skips.length;h<f;h++)if(e.skips[h].test(l))return!1;for(h=0,f=e.names.length;h<f;h++)if(e.names[h].test(l))return!0;return!1}function a(l){return l.toString().substring(2,l.toString().length-2).replace(/\.\*\?$/,"*")}function c(l){return l instanceof Error?l.stack||l.message:l}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return e.enable(e.load()),e}_n.exports=Vo});var xn=v((F,Gt)=>{F.formatArgs=Go;F.save=jo;F.load=Qo;F.useColors=$o;F.storage=Xo();F.destroy=(()=>{let r=!1;return()=>{r||(r=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();F.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function $o(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function Go(r){if(r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+Gt.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;r.splice(1,0,t,"color: inherit");let e=0,n=0;r[0].replace(/%[a-zA-Z%]/g,i=>{i!=="%%"&&(e++,i==="%c"&&(n=e))}),r.splice(n,0,t)}F.log=console.debug||console.log||(()=>{});function jo(r){try{r?F.storage.setItem("debug",r):F.storage.removeItem("debug")}catch{}}function Qo(){let r;try{r=F.storage.getItem("debug")}catch{}return!r&&typeof process<"u"&&"env"in process&&(r=process.env.DEBUG),r}function Xo(){try{return localStorage}catch{}}Gt.exports=vn()(F);var{formatters:Jo}=Gt.exports;Jo.j=function(r){try{return JSON.stringify(r)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var En=v((bu,Sn)=>{"use strict";Sn.exports=ea;function ea(r,t){for(var e=new Array(arguments.length-1),n=0,i=2,s=!0;i<arguments.length;)e[n++]=arguments[i++];return new Promise(function(a,c){e[n]=function(l){if(s)if(s=!1,l)c(l);else{for(var h=new Array(arguments.length-1),f=0;f<h.length;)h[f++]=arguments[f];a.apply(null,h)}};try{r.apply(t||null,e)}catch(u){s&&(s=!1,c(u))}})}});var Tn=v(Bn=>{"use strict";var Xt=Bn;Xt.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&t.charAt(e)==="=";)++n;return Math.ceil(t.length*3)/4-n};var St=new Array(64),An=new Array(123);for(W=0;W<64;)An[St[W]=W<26?W+65:W<52?W+71:W<62?W-4:W-59|43]=W++;var W;Xt.encode=function(t,e,n){for(var i=null,s=[],o=0,a=0,c;e<n;){var u=t[e++];switch(a){case 0:s[o++]=St[u>>2],c=(u&3)<<4,a=1;break;case 1:s[o++]=St[c|u>>4],c=(u&15)<<2,a=2;break;case 2:s[o++]=St[c|u>>6],s[o++]=St[u&63],a=0;break}o>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,s)),o=0)}return a&&(s[o++]=St[c],s[o++]=61,a===1&&(s[o++]=61)),i?(o&&i.push(String.fromCharCode.apply(String,s.slice(0,o))),i.join("")):String.fromCharCode.apply(String,s.slice(0,o))};var Cn="invalid encoding";Xt.decode=function(t,e,n){for(var i=n,s=0,o,a=0;a<t.length;){var c=t.charCodeAt(a++);if(c===61&&s>1)break;if((c=An[c])===void 0)throw Error(Cn);switch(s){case 0:o=c,s=1;break;case 1:e[n++]=o<<2|(c&48)>>4,o=c,s=2;break;case 2:e[n++]=(o&15)<<4|(c&60)>>2,o=c,s=3;break;case 3:e[n++]=(o&3)<<6|c,s=0;break}}if(s===1)throw Error(Cn);return n-i};Xt.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}});var Mn=v((_u,Ln)=>{"use strict";Ln.exports=Jt;function Jt(){this._listeners={}}Jt.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this};Jt.prototype.off=function(t,e){if(t===void 0)this._listeners={};else if(e===void 0)this._listeners[t]=[];else for(var n=this._listeners[t],i=0;i<n.length;)n[i].fn===e?n.splice(i,1):++i;return this};Jt.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],i=1;i<arguments.length;)n.push(arguments[i++]);for(i=0;i<e.length;)e[i].fn.apply(e[i++].ctx,n)}return this}});var zn=v((vu,In)=>{"use strict";In.exports=Dn(Dn);function Dn(r){return typeof Float32Array<"u"?function(){var t=new Float32Array([-0]),e=new Uint8Array(t.buffer),n=e[3]===128;function i(c,u,l){t[0]=c,u[l]=e[0],u[l+1]=e[1],u[l+2]=e[2],u[l+3]=e[3]}function s(c,u,l){t[0]=c,u[l]=e[3],u[l+1]=e[2],u[l+2]=e[1],u[l+3]=e[0]}r.writeFloatLE=n?i:s,r.writeFloatBE=n?s:i;function o(c,u){return e[0]=c[u],e[1]=c[u+1],e[2]=c[u+2],e[3]=c[u+3],t[0]}function a(c,u){return e[3]=c[u],e[2]=c[u+1],e[1]=c[u+2],e[0]=c[u+3],t[0]}r.readFloatLE=n?o:a,r.readFloatBE=n?a:o}():function(){function t(n,i,s,o){var a=i<0?1:0;if(a&&(i=-i),i===0)n(1/i>0?0:2147483648,s,o);else if(isNaN(i))n(2143289344,s,o);else if(i>34028234663852886e22)n((a<<31|2139095040)>>>0,s,o);else if(i<11754943508222875e-54)n((a<<31|Math.round(i/1401298464324817e-60))>>>0,s,o);else{var c=Math.floor(Math.log(i)/Math.LN2),u=Math.round(i*Math.pow(2,-c)*8388608)&8388607;n((a<<31|c+127<<23|u)>>>0,s,o)}}r.writeFloatLE=t.bind(null,Nn),r.writeFloatBE=t.bind(null,Fn);function e(n,i,s){var o=n(i,s),a=(o>>31)*2+1,c=o>>>23&255,u=o&8388607;return c===255?u?NaN:a*(1/0):c===0?a*1401298464324817e-60*u:a*Math.pow(2,c-150)*(u+8388608)}r.readFloatLE=e.bind(null,On),r.readFloatBE=e.bind(null,Pn)}(),typeof Float64Array<"u"?function(){var t=new Float64Array([-0]),e=new Uint8Array(t.buffer),n=e[7]===128;function i(c,u,l){t[0]=c,u[l]=e[0],u[l+1]=e[1],u[l+2]=e[2],u[l+3]=e[3],u[l+4]=e[4],u[l+5]=e[5],u[l+6]=e[6],u[l+7]=e[7]}function s(c,u,l){t[0]=c,u[l]=e[7],u[l+1]=e[6],u[l+2]=e[5],u[l+3]=e[4],u[l+4]=e[3],u[l+5]=e[2],u[l+6]=e[1],u[l+7]=e[0]}r.writeDoubleLE=n?i:s,r.writeDoubleBE=n?s:i;function o(c,u){return e[0]=c[u],e[1]=c[u+1],e[2]=c[u+2],e[3]=c[u+3],e[4]=c[u+4],e[5]=c[u+5],e[6]=c[u+6],e[7]=c[u+7],t[0]}function a(c,u){return e[7]=c[u],e[6]=c[u+1],e[5]=c[u+2],e[4]=c[u+3],e[3]=c[u+4],e[2]=c[u+5],e[1]=c[u+6],e[0]=c[u+7],t[0]}r.readDoubleLE=n?o:a,r.readDoubleBE=n?a:o}():function(){function t(n,i,s,o,a,c){var u=o<0?1:0;if(u&&(o=-o),o===0)n(0,a,c+i),n(1/o>0?0:2147483648,a,c+s);else if(isNaN(o))n(0,a,c+i),n(2146959360,a,c+s);else if(o>17976931348623157e292)n(0,a,c+i),n((u<<31|2146435072)>>>0,a,c+s);else{var l;if(o<22250738585072014e-324)l=o/5e-324,n(l>>>0,a,c+i),n((u<<31|l/4294967296)>>>0,a,c+s);else{var h=Math.floor(Math.log(o)/Math.LN2);h===1024&&(h=1023),l=o*Math.pow(2,-h),n(l*4503599627370496>>>0,a,c+i),n((u<<31|h+1023<<20|l*1048576&1048575)>>>0,a,c+s)}}}r.writeDoubleLE=t.bind(null,Nn,0,4),r.writeDoubleBE=t.bind(null,Fn,4,0);function e(n,i,s,o,a){var c=n(o,a+i),u=n(o,a+s),l=(u>>31)*2+1,h=u>>>20&2047,f=4294967296*(u&1048575)+c;return h===2047?f?NaN:l*(1/0):h===0?l*5e-324*f:l*Math.pow(2,h-1075)*(f+4503599627370496)}r.readDoubleLE=e.bind(null,On,0,4),r.readDoubleBE=e.bind(null,Pn,4,0)}(),r}function Nn(r,t,e){t[e]=r&255,t[e+1]=r>>>8&255,t[e+2]=r>>>16&255,t[e+3]=r>>>24}function Fn(r,t,e){t[e]=r>>>24,t[e+1]=r>>>16&255,t[e+2]=r>>>8&255,t[e+3]=r&255}function On(r,t){return(r[t]|r[t+1]<<8|r[t+2]<<16|r[t+3]<<24)>>>0}function Pn(r,t){return(r[t]<<24|r[t+1]<<16|r[t+2]<<8|r[t+3])>>>0}});var Rn=v((exports,module)=>{"use strict";module.exports=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(r){}return null}});var Hn=v(Un=>{"use strict";var Ue=Un;Ue.length=function(t){for(var e=0,n=0,i=0;i<t.length;++i)n=t.charCodeAt(i),n<128?e+=1:n<2048?e+=2:(n&64512)===55296&&(t.charCodeAt(i+1)&64512)===56320?(++i,e+=4):e+=3;return e};Ue.read=function(t,e,n){var i=n-e;if(i<1)return"";for(var s=null,o=[],a=0,c;e<n;)c=t[e++],c<128?o[a++]=c:c>191&&c<224?o[a++]=(c&31)<<6|t[e++]&63:c>239&&c<365?(c=((c&7)<<18|(t[e++]&63)<<12|(t[e++]&63)<<6|t[e++]&63)-65536,o[a++]=55296+(c>>10),o[a++]=56320+(c&1023)):o[a++]=(c&15)<<12|(t[e++]&63)<<6|t[e++]&63,a>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,o)),a=0);return s?(a&&s.push(String.fromCharCode.apply(String,o.slice(0,a))),s.join("")):String.fromCharCode.apply(String,o.slice(0,a))};Ue.write=function(t,e,n){for(var i=n,s,o,a=0;a<t.length;++a)s=t.charCodeAt(a),s<128?e[n++]=s:s<2048?(e[n++]=s>>6|192,e[n++]=s&63|128):(s&64512)===55296&&((o=t.charCodeAt(a+1))&64512)===56320?(s=65536+((s&1023)<<10)+(o&1023),++a,e[n++]=s>>18|240,e[n++]=s>>12&63|128,e[n++]=s>>6&63|128,e[n++]=s&63|128):(e[n++]=s>>12|224,e[n++]=s>>6&63|128,e[n++]=s&63|128);return n-i}});var Wn=v((ku,qn)=>{"use strict";qn.exports=ra;function ra(r,t,e){var n=e||8192,i=n>>>1,s=null,o=n;return function(c){if(c<1||c>i)return r(c);o+c>n&&(s=r(n),o=0);var u=t.call(s,o,o+=c);return o&7&&(o=(o|7)+1),u}}});var $n=v((Su,Vn)=>{"use strict";Vn.exports=B;var Ot=ut();function B(r,t){this.lo=r>>>0,this.hi=t>>>0}var ct=B.zero=new B(0,0);ct.toNumber=function(){return 0};ct.zzEncode=ct.zzDecode=function(){return this};ct.length=function(){return 1};var na=B.zeroHash="\0\0\0\0\0\0\0\0";B.fromNumber=function(t){if(t===0)return ct;var e=t<0;e&&(t=-t);var n=t>>>0,i=(t-n)/4294967296>>>0;return e&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new B(n,i)};B.from=function(t){if(typeof t=="number")return B.fromNumber(t);if(Ot.isString(t))if(Ot.Long)t=Ot.Long.fromString(t);else return B.fromNumber(parseInt(t,10));return t.low||t.high?new B(t.low>>>0,t.high>>>0):ct};B.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=~this.lo+1>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+n*4294967296)}return this.lo+this.hi*4294967296};B.prototype.toLong=function(t){return Ot.Long?new Ot.Long(this.lo|0,this.hi|0,!!t):{low:this.lo|0,high:this.hi|0,unsigned:!!t}};var rt=String.prototype.charCodeAt;B.fromHash=function(t){return t===na?ct:new B((rt.call(t,0)|rt.call(t,1)<<8|rt.call(t,2)<<16|rt.call(t,3)<<24)>>>0,(rt.call(t,4)|rt.call(t,5)<<8|rt.call(t,6)<<16|rt.call(t,7)<<24)>>>0)};B.prototype.toHash=function(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};B.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this};B.prototype.zzDecode=function(){var t=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this};B.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return n===0?e===0?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10}});var ut=v(He=>{"use strict";var g=He;g.asPromise=En();g.base64=Tn();g.EventEmitter=Mn();g.float=zn();g.inquire=Rn();g.utf8=Hn();g.pool=Wn();g.LongBits=$n();g.isNode=!!(typeof globalThis<"u"&&globalThis&&globalThis.process&&globalThis.process.versions&&globalThis.process.versions.node);g.global=g.isNode&&globalThis||typeof window<"u"&&window||typeof self<"u"&&self||He;g.emptyArray=Object.freeze?Object.freeze([]):[];g.emptyObject=Object.freeze?Object.freeze({}):{};g.isInteger=Number.isInteger||function(t){return typeof t=="number"&&isFinite(t)&&Math.floor(t)===t};g.isString=function(t){return typeof t=="string"||t instanceof String};g.isObject=function(t){return t&&typeof t=="object"};g.isset=g.isSet=function(t,e){var n=t[e];return n!=null&&t.hasOwnProperty(e)?typeof n!="object"||(Array.isArray(n)?n.length:Object.keys(n).length)>0:!1};g.Buffer=function(){try{var r=g.inquire("buffer").Buffer;return r.prototype.utf8Write?r:null}catch{return null}}();g._Buffer_from=null;g._Buffer_allocUnsafe=null;g.newBuffer=function(t){return typeof t=="number"?g.Buffer?g._Buffer_allocUnsafe(t):new g.Array(t):g.Buffer?g._Buffer_from(t):typeof Uint8Array>"u"?t:new Uint8Array(t)};g.Array=typeof Uint8Array<"u"?Uint8Array:Array;g.Long=g.global.dcodeIO&&g.global.dcodeIO.Long||g.global.Long||g.inquire("long");g.key2Re=/^true|false|0|1$/;g.key32Re=/^-?(?:0|[1-9][0-9]*)$/;g.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;g.longToHash=function(t){return t?g.LongBits.from(t).toHash():g.LongBits.zeroHash};g.longFromHash=function(t,e){var n=g.LongBits.fromHash(t);return g.Long?g.Long.fromBits(n.lo,n.hi,e):n.toNumber(!!e)};function Gn(r,t,e){for(var n=Object.keys(t),i=0;i<n.length;++i)(r[n[i]]===void 0||!e)&&(r[n[i]]=t[n[i]]);return r}g.merge=Gn;g.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)};function jn(r){function t(e,n){if(!(this instanceof t))return new t(e,n);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:new Error().stack||""}),n&&Gn(this,n)}return t.prototype=Object.create(Error.prototype,{constructor:{value:t,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return r},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),t}g.newError=jn;g.ProtocolError=jn("ProtocolError");g.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var i=Object.keys(this),s=i.length-1;s>-1;--s)if(e[i[s]]===1&&this[i[s]]!==void 0&&this[i[s]]!==null)return i[s]}};g.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}};g.toJSONOptions={longs:String,enums:String,bytes:String,json:!0};g._configure=function(){var r=g.Buffer;if(!r){g._Buffer_from=g._Buffer_allocUnsafe=null;return}g._Buffer_from=r.from!==Uint8Array.from&&r.from||function(e,n){return new r(e,n)},g._Buffer_allocUnsafe=r.allocUnsafe||function(e){return new r(e)}}});var Ve=v((Cu,Zn)=>{"use strict";Zn.exports=C;var j=ut(),We,Jn=j.LongBits,ia=j.utf8;function V(r,t){return RangeError("index out of range: "+r.pos+" + "+(t||1)+" > "+r.len)}function C(r){this.buf=r,this.pos=0,this.len=r.length}var Qn=typeof Uint8Array<"u"?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new C(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new C(t);throw Error("illegal buffer")},Kn=function(){return j.Buffer?function(e){return(C.create=function(i){return j.Buffer.isBuffer(i)?new We(i):Qn(i)})(e)}:Qn};C.create=Kn();C.prototype._slice=j.Array.prototype.subarray||j.Array.prototype.slice;C.prototype.uint32=function(){var t=4294967295;return function(){if(t=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(t=(t|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return t;if((this.pos+=5)>this.len)throw this.pos=this.len,V(this,10);return t}}();C.prototype.int32=function(){return this.uint32()|0};C.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(t&1)|0};function qe(){var r=new Jn(0,0),t=0;if(this.len-this.pos>4){for(;t<4;++t)if(r.lo=(r.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return r;if(r.lo=(r.lo|(this.buf[this.pos]&127)<<28)>>>0,r.hi=(r.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return r;t=0}else{for(;t<3;++t){if(this.pos>=this.len)throw V(this);if(r.lo=(r.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return r}return r.lo=(r.lo|(this.buf[this.pos++]&127)<<t*7)>>>0,r}if(this.len-this.pos>4){for(;t<5;++t)if(r.hi=(r.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return r}else for(;t<5;++t){if(this.pos>=this.len)throw V(this);if(r.hi=(r.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return r}throw Error("invalid varint encoding")}C.prototype.bool=function(){return this.uint32()!==0};function Kt(r,t){return(r[t-4]|r[t-3]<<8|r[t-2]<<16|r[t-1]<<24)>>>0}C.prototype.fixed32=function(){if(this.pos+4>this.len)throw V(this,4);return Kt(this.buf,this.pos+=4)};C.prototype.sfixed32=function(){if(this.pos+4>this.len)throw V(this,4);return Kt(this.buf,this.pos+=4)|0};function Xn(){if(this.pos+8>this.len)throw V(this,8);return new Jn(Kt(this.buf,this.pos+=4),Kt(this.buf,this.pos+=4))}C.prototype.float=function(){if(this.pos+4>this.len)throw V(this,4);var t=j.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t};C.prototype.double=function(){if(this.pos+8>this.len)throw V(this,4);var t=j.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t};C.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw V(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)};C.prototype.string=function(){var t=this.bytes();return ia.read(t,0,t.length)};C.prototype.skip=function(t){if(typeof t=="number"){if(this.pos+t>this.len)throw V(this,t);this.pos+=t}else do if(this.pos>=this.len)throw V(this);while(this.buf[this.pos++]&128);return this};C.prototype.skipType=function(r){switch(r){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(r=this.uint32()&7)!==4;)this.skipType(r);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+r+" at offset "+this.pos)}return this};C._configure=function(r){We=r,C.create=Kn(),We._configure();var t=j.Long?"toLong":"toNumber";j.merge(C.prototype,{int64:function(){return qe.call(this)[t](!1)},uint64:function(){return qe.call(this)[t](!0)},sint64:function(){return qe.call(this).zzDecode()[t](!1)},fixed64:function(){return Xn.call(this)[t](!0)},sfixed64:function(){return Xn.call(this)[t](!1)}})}});var ri=v((Au,ei)=>{"use strict";ei.exports=lt;var ti=Ve();(lt.prototype=Object.create(ti.prototype)).constructor=lt;var Yn=ut();function lt(r){ti.call(this,r)}lt._configure=function(){Yn.Buffer&&(lt.prototype._slice=Yn.Buffer.prototype.slice)};lt.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))};lt._configure()});var Ke=v((Bu,oi)=>{"use strict";oi.exports=_;var H=ut(),$e,Zt=H.LongBits,ni=H.base64,ii=H.utf8;function Pt(r,t,e){this.fn=r,this.len=t,this.next=void 0,this.val=e}function je(){}function sa(r){this.head=r.head,this.tail=r.tail,this.len=r.len,this.next=r.states}function _(){this.len=0,this.head=new Pt(je,0,0),this.tail=this.head,this.states=null}var si=function(){return H.Buffer?function(){return(_.create=function(){return new $e})()}:function(){return new _}};_.create=si();_.alloc=function(t){return new H.Array(t)};H.Array!==Array&&(_.alloc=H.pool(_.alloc,H.Array.prototype.subarray));_.prototype._push=function(t,e,n){return this.tail=this.tail.next=new Pt(t,e,n),this.len+=e,this};function Qe(r,t,e){t[e]=r&255}function oa(r,t,e){for(;r>127;)t[e++]=r&127|128,r>>>=7;t[e]=r}function Xe(r,t){this.len=r,this.next=void 0,this.val=t}Xe.prototype=Object.create(Pt.prototype);Xe.prototype.fn=oa;_.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new Xe((t=t>>>0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this};_.prototype.int32=function(t){return t<0?this._push(Je,10,Zt.fromNumber(t)):this.uint32(t)};_.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)};function Je(r,t,e){for(;r.hi;)t[e++]=r.lo&127|128,r.lo=(r.lo>>>7|r.hi<<25)>>>0,r.hi>>>=7;for(;r.lo>127;)t[e++]=r.lo&127|128,r.lo=r.lo>>>7;t[e++]=r.lo}_.prototype.uint64=function(t){var e=Zt.from(t);return this._push(Je,e.length(),e)};_.prototype.int64=_.prototype.uint64;_.prototype.sint64=function(t){var e=Zt.from(t).zzEncode();return this._push(Je,e.length(),e)};_.prototype.bool=function(t){return this._push(Qe,1,t?1:0)};function Ge(r,t,e){t[e]=r&255,t[e+1]=r>>>8&255,t[e+2]=r>>>16&255,t[e+3]=r>>>24}_.prototype.fixed32=function(t){return this._push(Ge,4,t>>>0)};_.prototype.sfixed32=_.prototype.fixed32;_.prototype.fixed64=function(t){var e=Zt.from(t);return this._push(Ge,4,e.lo)._push(Ge,4,e.hi)};_.prototype.sfixed64=_.prototype.fixed64;_.prototype.float=function(t){return this._push(H.float.writeFloatLE,4,t)};_.prototype.double=function(t){return this._push(H.float.writeDoubleLE,8,t)};var aa=H.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var i=0;i<t.length;++i)e[n+i]=t[i]};_.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(Qe,1,0);if(H.isString(t)){var n=_.alloc(e=ni.length(t));ni.decode(t,n,0),t=n}return this.uint32(e)._push(aa,e,t)};_.prototype.string=function(t){var e=ii.length(t);return e?this.uint32(e)._push(ii.write,e,t):this._push(Qe,1,0)};_.prototype.fork=function(){return this.states=new sa(this),this.head=this.tail=new Pt(je,0,0),this.len=0,this};_.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Pt(je,0,0),this.len=0),this};_.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this};_.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e};_._configure=function(r){$e=r,_.create=si(),$e._configure()}});var ui=v((Tu,ci)=>{"use strict";ci.exports=Q;var ai=Ke();(Q.prototype=Object.create(ai.prototype)).constructor=Q;var nt=ut();function Q(){ai.call(this)}Q._configure=function(){Q.alloc=nt._Buffer_allocUnsafe,Q.writeBytesBuffer=nt.Buffer&&nt.Buffer.prototype instanceof Uint8Array&&nt.Buffer.prototype.set.name==="set"?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var i=0;i<t.length;)e[n++]=t[i++]}};Q.prototype.bytes=function(t){nt.isString(t)&&(t=nt._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(Q.writeBytesBuffer,e,t),this};function ca(r,t,e){r.length<40?nt.utf8.write(r,t,e):t.utf8Write?t.utf8Write(r,e):t.write(r,e)}Q.prototype.string=function(t){var e=nt.Buffer.byteLength(t);return this.uint32(e),e&&this._push(ca,e,t),this};Q._configure()});var Ei=v(($l,Si)=>{"use strict";function ki(r,t){for(let e in t)Object.defineProperty(r,e,{value:t[e],enumerable:!0,configurable:!0});return r}function Sa(r,t,e){if(!r||typeof r=="string")throw new TypeError("Please pass an Error to err-code");e||(e={}),typeof t=="object"&&(e=t,t=""),t&&(e.code=t);try{return ki(r,e)}catch{e.message=r.message,e.stack=r.stack;let i=function(){};return i.prototype=Object.create(Object.getPrototypeOf(r)),ki(new i,e)}}Si.exports=Sa});var Di=v((uh,Mi)=>{"use strict";Mi.exports=function(){return Date.now()}});var Fi=v((lh,Ni)=>{"use strict";var he=Di(),lr=class{constructor(t,e,n){let i=this;this._started=he(),this._rescheduled=0,this._scheduled=e,this._args=n,this._triggered=!1,this._timerWrapper=()=>{i._rescheduled>0?(i._scheduled=i._rescheduled-(he()-i._started),i._schedule(i._scheduled)):(i._triggered=!0,t.apply(null,i._args))},this._timer=setTimeout(this._timerWrapper,e)}reschedule(t){t||(t=this._scheduled);let e=he();e+t-(this._started+this._scheduled)<0?(clearTimeout(this._timer),this._schedule(t)):this._triggered?this._schedule(t):(this._started=e,this._rescheduled=t)}_schedule(t){this._triggered=!1,this._started=he(),this._rescheduled=0,this._scheduled=t,this._timer=setTimeout(this._timerWrapper,t)}clear(){clearTimeout(this._timer)}};function Na(){if(typeof arguments[0]!="function")throw new Error("callback needed");if(typeof arguments[1]!="number")throw new Error("timeout needed");let r;if(arguments.length>0){r=new Array(arguments.length-2);for(var t=0;t<r.length;t++)r[t]=arguments[t+2]}return new lr(arguments[0],arguments[1],r)}Ni.exports=Na});var Ii=v((hh,Pi)=>{"use strict";var{AbortController:Fa}=globalThis,Oi=Fi(),Rt=class extends Fa{constructor(t){super(),this._ms=t,this._timer=Oi(()=>this.abort(),t),Object.setPrototypeOf(this,Rt.prototype)}abort(){return this._timer.clear(),super.abort()}clear(){this._timer.clear()}reset(){this._timer.clear(),this._timer=Oi(()=>this.abort(),this._ms)}};Pi.exports={TimeoutController:Rt}});var _e=v((Xh,gr)=>{"use strict";var Bt=typeof Reflect=="object"?Reflect:null,Gi=Bt&&typeof Bt.apply=="function"?Bt.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)},be;Bt&&typeof Bt.ownKeys=="function"?be=Bt.ownKeys:Object.getOwnPropertySymbols?be=function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:be=function(t){return Object.getOwnPropertyNames(t)};function Xa(r){console&&console.warn&&console.warn(r)}var Qi=Number.isNaN||function(t){return t!==t};function k(){k.init.call(this)}gr.exports=k;gr.exports.once=Ya;k.EventEmitter=k;k.prototype._events=void 0;k.prototype._eventsCount=0;k.prototype._maxListeners=void 0;var ji=10;function we(r){if(typeof r!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r)}Object.defineProperty(k,"defaultMaxListeners",{enumerable:!0,get:function(){return ji},set:function(r){if(typeof r!="number"||r<0||Qi(r))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+r+".");ji=r}});k.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};k.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||Qi(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this};function Xi(r){return r._maxListeners===void 0?k.defaultMaxListeners:r._maxListeners}k.prototype.getMaxListeners=function(){return Xi(this)};k.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var i=t==="error",s=this._events;if(s!==void 0)i=i&&s.error===void 0;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=s[t];if(c===void 0)return!1;if(typeof c=="function")Gi(c,this,e);else for(var u=c.length,l=ts(c,u),n=0;n<u;++n)Gi(l[n],this,e);return!0};function Ji(r,t,e,n){var i,s,o;if(we(e),s=r._events,s===void 0?(s=r._events=Object.create(null),r._eventsCount=0):(s.newListener!==void 0&&(r.emit("newListener",t,e.listener?e.listener:e),s=r._events),o=s[t]),o===void 0)o=s[t]=e,++r._eventsCount;else if(typeof o=="function"?o=s[t]=n?[e,o]:[o,e]:n?o.unshift(e):o.push(e),i=Xi(r),i>0&&o.length>i&&!o.warned){o.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=r,a.type=t,a.count=o.length,Xa(a)}return r}k.prototype.addListener=function(t,e){return Ji(this,t,e,!1)};k.prototype.on=k.prototype.addListener;k.prototype.prependListener=function(t,e){return Ji(this,t,e,!0)};function Ja(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function Ki(r,t,e){var n={fired:!1,wrapFn:void 0,target:r,type:t,listener:e},i=Ja.bind(n);return i.listener=e,n.wrapFn=i,i}k.prototype.once=function(t,e){return we(e),this.on(t,Ki(this,t,e)),this};k.prototype.prependOnceListener=function(t,e){return we(e),this.prependListener(t,Ki(this,t,e)),this};k.prototype.removeListener=function(t,e){var n,i,s,o,a;if(we(e),i=this._events,i===void 0)return this;if(n=i[t],n===void 0)return this;if(n===e||n.listener===e)--this._eventsCount===0?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,n.listener||e));else if(typeof n!="function"){for(s=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,s=o;break}if(s<0)return this;s===0?n.shift():Ka(n,s),n.length===1&&(i[t]=n[0]),i.removeListener!==void 0&&this.emit("removeListener",t,a||e)}return this};k.prototype.off=k.prototype.removeListener;k.prototype.removeAllListeners=function(t){var e,n,i;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[t]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[t]),this;if(arguments.length===0){var s=Object.keys(n),o;for(i=0;i<s.length;++i)o=s[i],o!=="removeListener"&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(e=n[t],typeof e=="function")this.removeListener(t,e);else if(e!==void 0)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this};function Zi(r,t,e){var n=r._events;if(n===void 0)return[];var i=n[t];return i===void 0?[]:typeof i=="function"?e?[i.listener||i]:[i]:e?Za(i):ts(i,i.length)}k.prototype.listeners=function(t){return Zi(this,t,!0)};k.prototype.rawListeners=function(t){return Zi(this,t,!1)};k.listenerCount=function(r,t){return typeof r.listenerCount=="function"?r.listenerCount(t):Yi.call(r,t)};k.prototype.listenerCount=Yi;function Yi(r){var t=this._events;if(t!==void 0){var e=t[r];if(typeof e=="function")return 1;if(e!==void 0)return e.length}return 0}k.prototype.eventNames=function(){return this._eventsCount>0?be(this._events):[]};function ts(r,t){for(var e=new Array(t),n=0;n<t;++n)e[n]=r[n];return e}function Ka(r,t){for(;t+1<r.length;t++)r[t]=r[t+1];r.pop()}function Za(r){for(var t=new Array(r.length),e=0;e<t.length;++e)t[e]=r[e].listener||r[e];return t}function Ya(r,t){return new Promise(function(e,n){function i(o){r.removeListener(t,s),n(o)}function s(){typeof r.removeListener=="function"&&r.removeListener("error",i),e([].slice.call(arguments))}es(r,t,s,{once:!0}),t!=="error"&&tc(r,i,{once:!0})})}function tc(r,t,e){typeof r.on=="function"&&es(r,"error",t,e)}function es(r,t,e,n){if(typeof r.on=="function")n.once?r.once(t,e):r.on(t,e);else if(typeof r.addEventListener=="function")r.addEventListener(t,function i(s){n.once&&r.removeEventListener(t,i),e(s)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof r)}});var ds=v((hs,fs)=>{"use strict";var _c=Math.exp;hs=fs.exports=function(t){if(typeof t!="number")throw new Error("must provide a timespan to the moving average constructor");if(t<=0)throw new Error("must provide a timespan > 0 to the moving average constructor");let e,n=0,i=0,s=0,o,a={};function c(u,l){return 1-_c(-(u-l)/t)}return a.push=function(l,h){if(o){let f=c(l,o),m=h-e,d=f*m;e=f*h+(1-f)*e,n=(1-f)*(n+m*d),i=Math.sqrt(n),s=e+f*m}else e=h;o=l},a.movingAverage=function(){return e},a.variance=function(){return n},a.deviation=function(){return i},a.forecast=function(){return s},a}});var bs=v((Bf,Br)=>{function ys(r){let t=new globalThis.AbortController;function e(){t.abort();for(let n of r)!n||!n.removeEventListener||n.removeEventListener("abort",e)}for(let n of r)if(!(!n||!n.addEventListener)){if(n.aborted){e();break}n.addEventListener("abort",e)}return t.signal}Br.exports=ys;Br.exports.anySignal=ys});var Ac={};N(Ac,{createBitswap:()=>Cc});var As=Dr,Lr=128,Bs=127,Ts=~Bs,Ls=Math.pow(2,31);function Dr(r,t,e){t=t||[],e=e||0;for(var n=e;r>=Ls;)t[e++]=r&255|Lr,r/=128;for(;r&Ts;)t[e++]=r&255|Lr,r>>>=7;return t[e]=r|0,Dr.bytes=e-n+1,t}var Ms=Se,Ds=128,Mr=127;function Se(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a)throw Se.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&Mr)<<i:(o&Mr)*Math.pow(2,i),i+=7}while(o>=Ds);return Se.bytes=s-n,e}var Ns=Math.pow(2,7),Fs=Math.pow(2,14),Os=Math.pow(2,21),Ps=Math.pow(2,28),Is=Math.pow(2,35),zs=Math.pow(2,42),Rs=Math.pow(2,49),Us=Math.pow(2,56),Hs=Math.pow(2,63),qs=function(r){return r<Ns?1:r<Fs?2:r<Os?3:r<Ps?4:r<Is?5:r<zs?6:r<Rs?7:r<Us?8:r<Hs?9:10},Ws={encode:As,decode:Ms,encodingLength:qs},Vs=Ws,Tt=Vs;var Lt=(r,t=0)=>[Tt.decode(r,t),Tt.decode.bytes],yt=(r,t,e=0)=>(Tt.encode(r,t,e),t),bt=r=>Tt.encodingLength(r);var Mc=new Uint8Array(0);var Nr=(r,t)=>{if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let e=0;e<r.byteLength;e++)if(r[e]!==t[e])return!1;return!0},J=r=>{if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")};var Fr=r=>new TextEncoder().encode(r),Or=r=>new TextDecoder().decode(r);var st=(r,t)=>{let e=t.byteLength,n=bt(r),i=n+bt(e),s=new Uint8Array(i+e);return yt(r,s,0),yt(e,s,n),s.set(t,i),new wt(r,e,t,s)},Ir=r=>{let t=J(r),[e,n]=Lt(t),[i,s]=Lt(t.subarray(n)),o=t.subarray(n+s);if(o.byteLength!==i)throw new Error("Incorrect length");return new wt(e,i,o,t)},zr=(r,t)=>{if(r===t)return!0;{let e=t;return r.code===e.code&&r.size===e.size&&e.bytes instanceof Uint8Array&&Nr(r.bytes,e.bytes)}},wt=class{constructor(t,e,n,i){this.code=t,this.size=e,this.digest=n,this.bytes=i}};var Te={};N(Te,{base58btc:()=>b,base58flickr:()=>Js});function $s(r,t){if(r.length>=255)throw new TypeError("Alphabet too long");for(var e=new Uint8Array(256),n=0;n<e.length;n++)e[n]=255;for(var i=0;i<r.length;i++){var s=r.charAt(i),o=s.charCodeAt(0);if(e[o]!==255)throw new TypeError(s+" is ambiguous");e[o]=i}var a=r.length,c=r.charAt(0),u=Math.log(a)/Math.log(256),l=Math.log(256)/Math.log(a);function h(d){if(d instanceof Uint8Array||(ArrayBuffer.isView(d)?d=new Uint8Array(d.buffer,d.byteOffset,d.byteLength):Array.isArray(d)&&(d=Uint8Array.from(d))),!(d instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(d.length===0)return"";for(var p=0,y=0,S=0,A=d.length;S!==A&&d[S]===0;)S++,p++;for(var P=(A-S)*l+1>>>0,T=new Uint8Array(P);S!==A;){for(var q=d[S],I=0,D=P-1;(q!==0||I<y)&&D!==-1;D--,I++)q+=256*T[D]>>>0,T[D]=q%a>>>0,q=q/a>>>0;if(q!==0)throw new Error("Non-zero carry");y=I,S++}for(var z=P-y;z!==P&&T[z]===0;)z++;for(var mt=c.repeat(p);z<P;++z)mt+=r.charAt(T[z]);return mt}function f(d){if(typeof d!="string")throw new TypeError("Expected String");if(d.length===0)return new Uint8Array;var p=0;if(d[p]!==" "){for(var y=0,S=0;d[p]===c;)y++,p++;for(var A=(d.length-p)*u+1>>>0,P=new Uint8Array(A);d[p];){var T=e[d.charCodeAt(p)];if(T===255)return;for(var q=0,I=A-1;(T!==0||q<S)&&I!==-1;I--,q++)T+=a*P[I]>>>0,P[I]=T%256>>>0,T=T/256>>>0;if(T!==0)throw new Error("Non-zero carry");S=q,p++}if(d[p]!==" "){for(var D=A-S;D!==A&&P[D]===0;)D++;for(var z=new Uint8Array(y+(A-D)),mt=y;D!==A;)z[mt++]=P[D++];return z}}}function m(d){var p=f(d);if(p)return p;throw new Error(`Non-${t} character`)}return{encode:h,decodeUnsafe:f,decode:m}}var Gs=$s,js=Gs,Rr=js;var Ee=class{constructor(t,e,n){this.name=t,this.prefix=e,this.baseEncode=n}encode(t){if(t instanceof Uint8Array)return`${this.prefix}${this.baseEncode(t)}`;throw Error("Unknown type, must be binary type")}},Ce=class{constructor(t,e,n){if(this.name=t,this.prefix=e,e.codePointAt(0)===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=e.codePointAt(0),this.baseDecode=n}decode(t){if(typeof t=="string"){if(t.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(t)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(t.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(t){return Ur(this,t)}},Ae=class{constructor(t){this.decoders=t}or(t){return Ur(this,t)}decode(t){let e=t[0],n=this.decoders[e];if(n)return n.decode(t);throw RangeError(`Unable to decode multibase string ${JSON.stringify(t)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}},Ur=(r,t)=>new Ae({...r.decoders||{[r.prefix]:r},...t.decoders||{[t.prefix]:t}}),Be=class{constructor(t,e,n,i){this.name=t,this.prefix=e,this.baseEncode=n,this.baseDecode=i,this.encoder=new Ee(t,e,n),this.decoder=new Ce(t,e,i)}encode(t){return this.encoder.encode(t)}decode(t){return this.decoder.decode(t)}},_t=({name:r,prefix:t,encode:e,decode:n})=>new Be(r,t,e,n),Y=({prefix:r,name:t,alphabet:e})=>{let{encode:n,decode:i}=Rr(e,t);return _t({prefix:r,name:t,encode:n,decode:s=>J(i(s))})},Qs=(r,t,e,n)=>{let i={};for(let l=0;l<t.length;++l)i[t[l]]=l;let s=r.length;for(;r[s-1]==="=";)--s;let o=new Uint8Array(s*e/8|0),a=0,c=0,u=0;for(let l=0;l<s;++l){let h=i[r[l]];if(h===void 0)throw new SyntaxError(`Non-${n} character`);c=c<<e|h,a+=e,a>=8&&(a-=8,o[u++]=255&c>>a)}if(a>=e||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o},Xs=(r,t,e)=>{let n=t[t.length-1]==="=",i=(1<<e)-1,s="",o=0,a=0;for(let c=0;c<r.length;++c)for(a=a<<8|r[c],o+=8;o>e;)o-=e,s+=t[i&a>>o];if(o&&(s+=t[i&a<<e-o]),n)for(;s.length*e&7;)s+="=";return s},E=({name:r,prefix:t,bitsPerChar:e,alphabet:n})=>_t({prefix:t,name:r,encode(i){return Xs(i,n,e)},decode(i){return Qs(i,n,e,r)}});var b=Y({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),Js=Y({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Le={};N(Le,{base32:()=>tt,base32hex:()=>to,base32hexpad:()=>ro,base32hexpadupper:()=>no,base32hexupper:()=>eo,base32pad:()=>Zs,base32padupper:()=>Ys,base32upper:()=>Ks,base32z:()=>io});var tt=E({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),Ks=E({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),Zs=E({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),Ys=E({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),to=E({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),eo=E({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),ro=E({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),no=E({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),io=E({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var Hr=(r,t)=>{let{bytes:e,version:n}=r;switch(n){case 0:return oo(e,Me(r),t||b.encoder);default:return ao(e,Me(r),t||tt.encoder)}};var qr=new WeakMap,Me=r=>{let t=qr.get(r);if(t==null){let e=new Map;return qr.set(r,e),e}return t},w=class{constructor(t,e,n,i){this.code=e,this.version=t,this.multihash=n,this.bytes=i,this["/"]=i}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{let{code:t,multihash:e}=this;if(t!==Dt)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(e.code!==co)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return w.createV0(e)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{let{code:t,digest:e}=this.multihash,n=st(t,e);return w.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(t){return w.equals(this,t)}static equals(t,e){let n=e;return n&&t.code===n.code&&t.version===n.version&&zr(t.multihash,n.multihash)}toString(t){return Hr(this,t)}toJSON(){return{"/":Hr(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(t){if(t==null)return null;let e=t;if(e instanceof w)return e;if(e["/"]!=null&&e["/"]===e.bytes||e.asCID===e){let{version:n,code:i,multihash:s,bytes:o}=e;return new w(n,i,s,o||Wr(n,i,s.bytes))}else if(e[uo]===!0){let{version:n,multihash:i,code:s}=e,o=Ir(i);return w.create(n,s,o)}else return null}static create(t,e,n){if(typeof e!="number")throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(t){case 0:{if(e!==Dt)throw new Error(`Version 0 CID must use dag-pb (code: ${Dt}) block encoding`);return new w(t,e,n,n.bytes)}case 1:{let i=Wr(t,e,n.bytes);return new w(t,e,n,i)}default:throw new Error("Invalid version")}}static createV0(t){return w.create(0,Dt,t)}static createV1(t,e){return w.create(1,t,e)}static decode(t){let[e,n]=w.decodeFirst(t);if(n.length)throw new Error("Incorrect length");return e}static decodeFirst(t){let e=w.inspectBytes(t),n=e.size-e.multihashSize,i=J(t.subarray(n,n+e.multihashSize));if(i.byteLength!==e.multihashSize)throw new Error("Incorrect length");let s=i.subarray(e.multihashSize-e.digestSize),o=new wt(e.multihashCode,e.digestSize,s,i);return[e.version===0?w.createV0(o):w.createV1(e.codec,o),t.subarray(e.size)]}static inspectBytes(t){let e=0,n=()=>{let[h,f]=Lt(t.subarray(e));return e+=f,h},i=n(),s=Dt;if(i===18?(i=0,e=0):s=n(),i!==0&&i!==1)throw new RangeError(`Invalid CID version ${i}`);let o=e,a=n(),c=n(),u=e+c,l=u-o;return{version:i,codec:s,multihashCode:a,digestSize:c,multihashSize:l,size:u}}static parse(t,e){let[n,i]=so(t,e),s=w.decode(i);if(s.version===0&&t[0]!=="Q")throw Error("Version 0 CID string must not include multibase prefix");return Me(s).set(n,t),s}},so=(r,t)=>{switch(r[0]){case"Q":{let e=t||b;return[b.prefix,e.decode(`${b.prefix}${r}`)]}case b.prefix:{let e=t||b;return[b.prefix,e.decode(r)]}case tt.prefix:{let e=t||tt;return[tt.prefix,e.decode(r)]}default:{if(t==null)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[r[0],t.decode(r)]}}},oo=(r,t,e)=>{let{prefix:n}=e;if(n!==b.prefix)throw Error(`Cannot string encode V0 in ${e.name} encoding`);let i=t.get(n);if(i==null){let s=e.encode(r).slice(1);return t.set(n,s),s}else return i},ao=(r,t,e)=>{let{prefix:n}=e,i=t.get(n);if(i==null){let s=e.encode(r);return t.set(n,s),s}else return i},Dt=112,co=18,Wr=(r,t,e)=>{let n=bt(r),i=n+bt(t),s=new Uint8Array(i+e.byteLength);return yt(r,s,0),yt(t,s,n),s.set(e,i),s},uo=Symbol.for("@ipld/js-cid/CID");var Fe={};N(Fe,{sha256:()=>Nt,sha512:()=>lo});var Ne=({name:r,code:t,encode:e})=>new De(r,t,e),De=class{constructor(t,e,n){this.name=t,this.code=e,this.encode=n}digest(t){if(t instanceof Uint8Array){let e=this.encode(t);return e instanceof Uint8Array?st(this.code,e):e.then(n=>st(this.code,n))}else throw Error("Unknown type, must be binary type")}};var $r=r=>async t=>new Uint8Array(await crypto.subtle.digest(r,t)),Nt=Ne({name:"sha2-256",code:18,encode:$r("SHA-256")}),lo=Ne({name:"sha2-512",code:19,encode:$r("SHA-512")});var pi=L(on(),1);var Ft=L(mn(),1);function zo(r){let t=new Uint8Array(r.reduce((n,i)=>n+Ft.default.encodingLength(i),0)),e=0;for(let n of r)t=Ft.encode(n,t,e),e+=Ft.default.encodingLength(n);return t}var yn=zo;var R=L(xn(),1);var Re={};N(Re,{base64:()=>ze,base64pad:()=>Ko,base64url:()=>Zo,base64urlpad:()=>Yo});var ze=E({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),Ko=E({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),Zo=E({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),Yo=E({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});R.default.formatters.b=r=>r==null?"undefined":b.baseEncode(r);R.default.formatters.t=r=>r==null?"undefined":tt.baseEncode(r);R.default.formatters.m=r=>r==null?"undefined":ze.baseEncode(r);R.default.formatters.p=r=>r==null?"undefined":r.toString();R.default.formatters.c=r=>r==null?"undefined":r.toString();R.default.formatters.k=r=>r==null?"undefined":r.toString();function ta(r){let t=()=>{};return t.enabled=!1,t.color="",t.diff=0,t.log=()=>{},t.namespace=r,t.destroy=()=>!0,t.extend=()=>t,t}function kn(r){let t=ta(`${r}:trace`);return R.default.enabled(`${r}:trace`)&&R.default.names.map(e=>e.toString()).find(e=>e.includes(":trace"))!=null&&(t=(0,R.default)(`${r}:trace`)),Object.assign((0,R.default)(r),{error:(0,R.default)(`${r}:error`),trace:t})}function jt(r,t){if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let e=0;e<r.byteLength;e++)if(r[e]!==t[e])return!1;return!0}var at=class{constructor(t,e,n){this._refCounter=1,this.cid=t,this.priority=e??1,this.wantType=n}inc(){this._refCounter+=1}dec(){this._refCounter=Math.max(0,this._refCounter-1)}hasRefs(){return this._refCounter>0}get[Symbol.toStringTag](){return`WantlistEntry <key: ${this.cid.toString(b)}, priority: ${this.priority}, refs: ${this._refCounter}>`}equals(t){return this._refCounter===t._refCounter&&this.cid.equals(t.cid)&&this.priority===t.priority&&this.wantType===t.wantType}};var et=class{constructor(t,e,n,i,s){this.entry=new at(t,e,n),this.cancel=!!i,this.sendDontHave=!!s}get cid(){return this.entry.cid}set cid(t){this.entry.cid=t}get priority(){return this.entry.priority}set priority(t){this.entry.priority=t}get wantType(){return this.entry.wantType}set wantType(t){this.entry.wantType=t}get[Symbol.toStringTag](){return`BitswapMessageEntry ${this.cid.toString(b)} <cancel: ${this.cancel}, priority: ${this.priority}>`}equals(t){return this.cancel===t.cancel&&this.sendDontHave===t.sendDontHave&&this.wantType===t.wantType&&this.entry.equals(t.entry)}};var U=(r,t)=>{let e=["bitswap"];return t!=null&&e.push(t),r!=null&&e.push(`${r.toString().slice(0,8)}`),kn(e.join(":"))};var Qt=(r,t)=>{if(r.size!==t.size)return!1;for(let[e,n]of r){let i=t.get(e);if(i===void 0||n instanceof Uint8Array&&i instanceof Uint8Array&&!jt(n,i)||n instanceof et&&i instanceof et&&!n.equals(i))return!1}return!0};var Ze=L(Ve(),1),li=L(ri(),1),hi=L(ut(),1),Ye=L(Ke(),1),fi=L(ui(),1);function ua(){hi.default._configure(),Ze.default._configure(li.default),Ye.default._configure(fi.default)}ua();var di=["uint64","int64","sint64","fixed64","sfixed64"];function la(r){for(let t of di){if(r[t]==null)continue;let e=r[t];r[t]=function(){return BigInt(e.call(this).toString())}}return r}function tr(r){return la(new Ze.default(r))}function ha(r){for(let t of di){if(r[t]==null)continue;let e=r[t];r[t]=function(n){return e.call(this,n.toString())}}return r}function er(){return ha(Ye.default.create())}function ht(r,t){let e=tr(r instanceof Uint8Array?r:r.subarray());return t.decode(e)}function ft(r,t){let e=er();return t.encode(r,e,{lengthDelimited:!1}),e.finish()}var Et;(function(r){r[r.VARINT=0]="VARINT",r[r.BIT64=1]="BIT64",r[r.LENGTH_DELIMITED=2]="LENGTH_DELIMITED",r[r.START_GROUP=3]="START_GROUP",r[r.END_GROUP=4]="END_GROUP",r[r.BIT32=5]="BIT32"})(Et||(Et={}));function Yt(r,t,e,n){return{name:r,type:t,encode:e,decode:n}}function te(r){function t(i){if(r[i.toString()]==null)throw new Error("Invalid enum value");return r[i]}let e=function(s,o){let a=t(s);o.int32(a)},n=function(s){let o=s.int32();return t(o)};return Yt("enum",Et.VARINT,e,n)}function dt(r,t){return Yt("message",Et.LENGTH_DELIMITED,r,t)}var M;(function(r){let t;(function(a){let c;(function(f){f.Block="Block",f.Have="Have"})(c=a.WantType||(a.WantType={}));let u;(function(f){f[f.Block=0]="Block",f[f.Have=1]="Have"})(u||(u={})),function(f){f.codec=()=>te(u)}(c=a.WantType||(a.WantType={}));let l;(function(f){let m;f.codec=()=>(m==null&&(m=dt((d,p,y={})=>{y.lengthDelimited!==!1&&p.fork(),d.block!=null&&d.block.byteLength>0&&(p.uint32(10),p.bytes(d.block)),d.priority!=null&&d.priority!==0&&(p.uint32(16),p.int32(d.priority)),d.cancel!=null&&d.cancel!==!1&&(p.uint32(24),p.bool(d.cancel)),d.wantType!=null&&u[d.wantType]!==0&&(p.uint32(32),r.Wantlist.WantType.codec().encode(d.wantType,p)),d.sendDontHave!=null&&d.sendDontHave!==!1&&(p.uint32(40),p.bool(d.sendDontHave)),y.lengthDelimited!==!1&&p.ldelim()},(d,p)=>{let y={block:new Uint8Array(0),priority:0,cancel:!1,wantType:c.Block,sendDontHave:!1},S=p==null?d.len:d.pos+p;for(;d.pos<S;){let A=d.uint32();switch(A>>>3){case 1:y.block=d.bytes();break;case 2:y.priority=d.int32();break;case 3:y.cancel=d.bool();break;case 4:y.wantType=r.Wantlist.WantType.codec().decode(d);break;case 5:y.sendDontHave=d.bool();break;default:d.skipType(A&7);break}}return y})),m),f.encode=d=>ft(d,f.codec()),f.decode=d=>ht(d,f.codec())})(l=a.Entry||(a.Entry={}));let h;a.codec=()=>(h==null&&(h=dt((f,m,d={})=>{if(d.lengthDelimited!==!1&&m.fork(),f.entries!=null)for(let p of f.entries)m.uint32(10),r.Wantlist.Entry.codec().encode(p,m);f.full!=null&&f.full!==!1&&(m.uint32(16),m.bool(f.full)),d.lengthDelimited!==!1&&m.ldelim()},(f,m)=>{let d={entries:[],full:!1},p=m==null?f.len:f.pos+m;for(;f.pos<p;){let y=f.uint32();switch(y>>>3){case 1:d.entries.push(r.Wantlist.Entry.codec().decode(f,f.uint32()));break;case 2:d.full=f.bool();break;default:f.skipType(y&7);break}}return d})),h),a.encode=f=>ft(f,a.codec()),a.decode=f=>ht(f,a.codec())})(t=r.Wantlist||(r.Wantlist={}));let e;(function(a){let c;a.codec=()=>(c==null&&(c=dt((u,l,h={})=>{h.lengthDelimited!==!1&&l.fork(),u.prefix!=null&&u.prefix.byteLength>0&&(l.uint32(10),l.bytes(u.prefix)),u.data!=null&&u.data.byteLength>0&&(l.uint32(18),l.bytes(u.data)),h.lengthDelimited!==!1&&l.ldelim()},(u,l)=>{let h={prefix:new Uint8Array(0),data:new Uint8Array(0)},f=l==null?u.len:u.pos+l;for(;u.pos<f;){let m=u.uint32();switch(m>>>3){case 1:h.prefix=u.bytes();break;case 2:h.data=u.bytes();break;default:u.skipType(m&7);break}}return h})),c),a.encode=u=>ft(u,a.codec()),a.decode=u=>ht(u,a.codec())})(e=r.Block||(r.Block={}));let n;(function(a){a.Have="Have",a.DontHave="DontHave"})(n=r.BlockPresenceType||(r.BlockPresenceType={}));let i;(function(a){a[a.Have=0]="Have",a[a.DontHave=1]="DontHave"})(i||(i={})),function(a){a.codec=()=>te(i)}(n=r.BlockPresenceType||(r.BlockPresenceType={}));let s;(function(a){let c;a.codec=()=>(c==null&&(c=dt((u,l,h={})=>{h.lengthDelimited!==!1&&l.fork(),u.cid!=null&&u.cid.byteLength>0&&(l.uint32(10),l.bytes(u.cid)),u.type!=null&&i[u.type]!==0&&(l.uint32(16),r.BlockPresenceType.codec().encode(u.type,l)),h.lengthDelimited!==!1&&l.ldelim()},(u,l)=>{let h={cid:new Uint8Array(0),type:n.Have},f=l==null?u.len:u.pos+l;for(;u.pos<f;){let m=u.uint32();switch(m>>>3){case 1:h.cid=u.bytes();break;case 2:h.type=r.BlockPresenceType.codec().decode(u);break;default:u.skipType(m&7);break}}return h})),c),a.encode=u=>ft(u,a.codec()),a.decode=u=>ht(u,a.codec())})(s=r.BlockPresence||(r.BlockPresence={}));let o;r.codec=()=>(o==null&&(o=dt((a,c,u={})=>{if(u.lengthDelimited!==!1&&c.fork(),a.wantlist!=null&&(c.uint32(10),r.Wantlist.codec().encode(a.wantlist,c)),a.blocks!=null)for(let l of a.blocks)c.uint32(18),c.bytes(l);if(a.payload!=null)for(let l of a.payload)c.uint32(26),r.Block.codec().encode(l,c);if(a.blockPresences!=null)for(let l of a.blockPresences)c.uint32(34),r.BlockPresence.codec().encode(l,c);a.pendingBytes!=null&&a.pendingBytes!==0&&(c.uint32(40),c.int32(a.pendingBytes)),u.lengthDelimited!==!1&&c.ldelim()},(a,c)=>{let u={blocks:[],payload:[],blockPresences:[],pendingBytes:0},l=c==null?a.len:a.pos+c;for(;a.pos<l;){let h=a.uint32();switch(h>>>3){case 1:u.wantlist=r.Wantlist.codec().decode(a,a.uint32());break;case 2:u.blocks.push(a.bytes());break;case 3:u.payload.push(r.Block.codec().decode(a,a.uint32()));break;case 4:u.blockPresences.push(r.BlockPresence.codec().decode(a,a.uint32()));break;case 5:u.pendingBytes=a.int32();break;default:a.skipType(h&7);break}}return u})),o),r.encode=a=>ft(a,r.codec()),r.decode=a=>ht(a,r.codec())})(M||(M={}));var ee=class extends Error{constructor(t,e,n){super(t),this.code=e,this.name=n?.name??"CodeError",this.props=n??{}}};var fa,x=class{constructor(t){this.full=t,this.wantlist=new Map,this.blocks=new Map,this.blockPresences=new Map,this.pendingBytes=0}get empty(){return this.blocks.size===0&&this.wantlist.size===0&&this.blockPresences.size===0}addEntry(t,e,n,i,s){n==null&&(n=x.WantType.Block);let o=t.toString(b),a=this.wantlist.get(o);a!=null?(a.wantType===n&&(a.priority=e),i===!0&&(a.cancel=!!i),s===!0&&(a.sendDontHave=!!s),n===x.WantType.Block&&a.wantType===x.WantType.Have&&(a.wantType=n)):this.wantlist.set(o,new et(t,e,n,i,s))}addBlock(t,e){let n=t.toString(b);this.blocks.set(n,e)}addHave(t){let e=t.toString(b);this.blockPresences.has(e)||this.blockPresences.set(e,x.BlockPresenceType.Have)}addDontHave(t){let e=t.toString(b);this.blockPresences.has(e)||this.blockPresences.set(e,x.BlockPresenceType.DontHave)}cancel(t){let e=t.toString(b);this.wantlist.delete(e),this.addEntry(t,0,x.WantType.Block,!0,!1)}setPendingBytes(t){this.pendingBytes=t}serializeToBitswap100(){return M.encode({wantlist:{entries:Array.from(this.wantlist.values()).map(t=>({block:t.cid.bytes,priority:Number(t.priority),cancel:!!t.cancel,wantType:M.Wantlist.WantType.Block,sendDontHave:!1})),full:!!this.full},blocks:Array.from(this.blocks.values())})}serializeToBitswap110(){let t={wantlist:{entries:Array.from(this.wantlist.values()).map(e=>({block:e.cid.bytes,priority:Number(e.priority),wantType:e.wantType,cancel:!!e.cancel,sendDontHave:!!e.sendDontHave})),full:!!this.full},blockPresences:[],payload:[],pendingBytes:this.pendingBytes,blocks:[]};for(let[e,n]of this.blocks.entries()){let i=w.parse(e),s=i.version,o=i.code,a=i.multihash.code,c=i.multihash.digest.length,u=yn([s,o,a,c]);t.payload.push({prefix:u,data:n})}for(let[e,n]of this.blockPresences)t.blockPresences.push({cid:w.parse(e).bytes,type:n});return this.pendingBytes>0&&(t.pendingBytes=this.pendingBytes),M.encode(t)}equals(t){return!(this.full!==t.full||this.pendingBytes!==t.pendingBytes||!Qt(this.wantlist,t.wantlist)||!Qt(this.blocks,t.blocks)||!Qt(this.blockPresences,t.blockPresences))}get[Symbol.toStringTag](){let t=Array.from(this.wantlist.keys()),e=Array.from(this.blocks.keys());return`BitswapMessage <full: ${this.full}, list: ${t}, blocks: ${e}>`}};fa=x;x.Entry=et;x.WantType={Block:M.Wantlist.WantType.Block,Have:M.Wantlist.WantType.Have};x.BlockPresenceType={Have:M.BlockPresenceType.Have,DontHave:M.BlockPresenceType.DontHave};x.deserialize=async(r,t)=>{let e=M.decode(r),n=e.wantlist?.full===!0,i=new x(n);return e.wantlist?.entries.forEach(s=>{if(s.block==null)return;let o=w.decode(s.block);i.addEntry(o,s.priority??0,s.wantType,!!s.cancel,!!s.sendDontHave)}),e.blockPresences.forEach(s=>{if(s.cid==null)return;let o=w.decode(s.cid);s.type===x.BlockPresenceType.Have?i.addHave(o):i.addDontHave(o)}),e.blocks.length>0?(await Promise.all(e.blocks.map(async s=>{let o=await Nt.digest(s),a=w.createV0(o);i.addBlock(a,s)})),i):(e.payload.length>0&&(await Promise.all(e.payload.map(async s=>{if(s.prefix==null||s.data==null)return;let o=(0,pi.default)(s.prefix),a=o[0],c=o[1],u=o[2],l=u===Nt.code?Nt:await t?.getHasher(u);if(l==null)throw new ee("Unknown hash algorithm","ERR_UNKNOWN_HASH_ALG");let h=await l.digest(s.data),f=w.create(a,c,h);i.addBlock(f,s.data)})),i.setPendingBytes(e.pendingBytes)),i)};x.blockPresenceSize=r=>r.bytes.length+1;var rr=class extends Map{constructor(t){super();let{name:e,metrics:n}=t;this.metric=n.registerMetric(e),this.updateComponentMetric()}set(t,e){return super.set(t,e),this.updateComponentMetric(),this}delete(t){let e=super.delete(t);return this.updateComponentMetric(),e}clear(){super.clear(),this.updateComponentMetric()}updateComponentMetric(){this.metric.update(this.size)}};function it(r){let{name:t,metrics:e}=r,n;return e!=null?n=new rr({name:t,metrics:e}):n=new Map,n}var gi={Block:M.Wantlist.WantType.Block,Have:M.Wantlist.WantType.Have},da=(r,t)=>Array.prototype.slice.call(t,0).sort((e,n)=>{let i=r(e),s=r(n);return i<s?-1:i>s?1:0}),K=class{constructor(t,e){this.set=e!=null?it({name:"ipfs_bitswap_wantlist",metrics:e.metrics}):new Map,this._stats=t}get length(){return this.set.size}add(t,e,n){let i=t.toString(b),s=this.set.get(i);s!=null?(s.inc(),s.priority=e,s.wantType===gi.Have&&n===gi.Block&&(s.wantType=n)):(this.set.set(i,new at(t,e,n)),this._stats!=null&&this._stats.push(void 0,"wantListSize",1))}remove(t){let e=t.toString(b),n=this.set.get(e);n!=null&&(n.dec(),!n.hasRefs()&&(this.set.delete(e),this._stats!=null&&this._stats.push(void 0,"wantListSize",-1)))}removeForce(t){this.set.has(t)&&this.set.delete(t)}forEach(t){this.set.forEach(t)}entries(){return this.set.entries()}sortedEntries(){return new Map(da(t=>t[1].key,Array.from(this.set.entries())))}contains(t){let e=t.toString(b);return this.set.has(e)}get(t){let e=t.toString(b);return this.set.get(e)}};K.Entry=at;var mi=Math.pow(2,31)-1,yi=1e3,bi=1;var wi=pa;function pa(r,t,e){var n=null,i=null,s=function(){n&&(clearTimeout(n),i=null,n=null)},o=function(){var c=i;s(),c&&c()},a=function(){if(!t)return r.apply(this,arguments);var c=this,u=arguments,l=e&&!n;if(s(),i=function(){r.apply(c,u)},n=setTimeout(function(){if(n=null,!l){var h=i;return i=null,h()}},t),l)return i()};return a.cancel=s,a.flush=o,a}var re=class{constructor(t,e,n){this.peerId=e,this.network=n,this.refcnt=1,this._entries=[],this._log=U(t,"msgqueue"),this.sendEntries=wi(this.sendEntries.bind(this),bi)}addMessage(t,e={}){t.empty||this.send(t,e)}addEntries(t,e={}){this._entries=this._entries.concat(t),this.sendEntries(e)}sendEntries(t={}){if(this._entries.length===0)return;let e=new x(!1);this._entries.forEach(n=>{n.cancel===!0?e.cancel(n.cid):e.addEntry(n.cid,n.priority)}),this._entries=[],this.addMessage(e,t)}async send(t,e={}){try{await this.network.connectTo(this.peerId,e)}catch(n){this._log.error("cant connect to peer %p: %s",this.peerId,n.message);return}this._log("sending message to peer %p",this.peerId),this.network.sendMessage(this.peerId,t,e).catch(n=>{this._log.error("send error",n)})}};var ne=class{constructor(t,e,n,i){this.peers=it({name:"ipfs_bitswap_want_manager_peers",metrics:i.metrics}),this.wantlist=new K(n,i),this.network=e,this._peerId=t,this._log=U(t,"want")}_addEntries(t,e,n,i={}){let s=t.map((o,a)=>new x.Entry(o,mi-a,x.WantType.Block,e));s.forEach(o=>{o.cancel?n===!0?this.wantlist.removeForce(o.cid.toString(b)):this.wantlist.remove(o.cid):(this._log("adding to wantlist"),this.wantlist.add(o.cid,o.priority))});for(let o of this.peers.values())o.addEntries(s,i)}_startPeerHandler(t){let e=this.peers.get(t.toString());if(e!=null){e.refcnt++;return}e=new re(this._peerId,t,this.network);let n=new x(!0);for(let i of this.wantlist.entries())n.addEntry(i[1].cid,i[1].priority);return e.addMessage(n),this.peers.set(t.toString(),e),e}_stopPeerHandler(t){let e=this.peers.get(t.toString());e!=null&&(e.refcnt--,!(e.refcnt>0)&&this.peers.delete(t.toString()))}wantBlocks(t,e={}){this._addEntries(t,!1,!1,e),e.signal?.addEventListener("abort",()=>{this.cancelWants(t)})}unwantBlocks(t){this._log("unwant blocks: %s",t.length),this._addEntries(t,!0,!0)}cancelWants(t){this._log("cancel wants: %s",t.length),this._addEntries(t,!0)}connectedPeers(){return Array.from(this.peers.keys())}connected(t){this._startPeerHandler(t)}disconnected(t){this._stopPeerHandler(t)}start(){}stop(){this.peers.forEach(t=>{this.disconnected(t.peerId)})}};function It(r){return globalThis.Buffer!=null?new Uint8Array(r.buffer,r.byteOffset,r.byteLength):r}function Z(r=0){return globalThis.Buffer?.alloc!=null?It(globalThis.Buffer.alloc(r)):new Uint8Array(r)}function $(r=0){return globalThis.Buffer?.allocUnsafe!=null?It(globalThis.Buffer.allocUnsafe(r)):new Uint8Array(r)}function ir(r,t){t==null&&(t=r.reduce((i,s)=>i+s.length,0));let e=$(t),n=0;for(let i of r)e.set(i,n),n+=i.length;return It(e)}var vi=Symbol.for("@achingbrain/uint8arraylist");function _i(r,t){if(t==null||t<0)throw new RangeError("index is out of bounds");let e=0;for(let n of r){let i=e+n.byteLength;if(t<i)return{buf:n,index:t-e};e=i}throw new RangeError("index is out of bounds")}function ie(r){return!!r?.[vi]}var X=class{constructor(...t){Object.defineProperty(this,vi,{value:!0}),this.bufs=[],this.length=0,t.length>0&&this.appendAll(t)}*[Symbol.iterator](){yield*this.bufs}get byteLength(){return this.length}append(...t){this.appendAll(t)}appendAll(t){let e=0;for(let n of t)if(n instanceof Uint8Array)e+=n.byteLength,this.bufs.push(n);else if(ie(n))e+=n.byteLength,this.bufs.push(...n.bufs);else throw new Error("Could not append value, must be an Uint8Array or a Uint8ArrayList");this.length+=e}prepend(...t){this.prependAll(t)}prependAll(t){let e=0;for(let n of t.reverse())if(n instanceof Uint8Array)e+=n.byteLength,this.bufs.unshift(n);else if(ie(n))e+=n.byteLength,this.bufs.unshift(...n.bufs);else throw new Error("Could not prepend value, must be an Uint8Array or a Uint8ArrayList");this.length+=e}get(t){let e=_i(this.bufs,t);return e.buf[e.index]}set(t,e){let n=_i(this.bufs,t);n.buf[n.index]=e}write(t,e=0){if(t instanceof Uint8Array)for(let n=0;n<t.length;n++)this.set(e+n,t[n]);else if(ie(t))for(let n=0;n<t.length;n++)this.set(e+n,t.get(n));else throw new Error("Could not write value, must be an Uint8Array or a Uint8ArrayList")}consume(t){if(t=Math.trunc(t),!(Number.isNaN(t)||t<=0)){if(t===this.byteLength){this.bufs=[],this.length=0;return}for(;this.bufs.length>0;)if(t>=this.bufs[0].byteLength)t-=this.bufs[0].byteLength,this.length-=this.bufs[0].byteLength,this.bufs.shift();else{this.bufs[0]=this.bufs[0].subarray(t),this.length-=t;break}}}slice(t,e){let{bufs:n,length:i}=this._subList(t,e);return ir(n,i)}subarray(t,e){let{bufs:n,length:i}=this._subList(t,e);return n.length===1?n[0]:ir(n,i)}sublist(t,e){let{bufs:n,length:i}=this._subList(t,e),s=new X;return s.length=i,s.bufs=n,s}_subList(t,e){if(t=t??0,e=e??this.length,t<0&&(t=this.length+t),e<0&&(e=this.length+e),t<0||e>this.length)throw new RangeError("index is out of bounds");if(t===e)return{bufs:[],length:0};if(t===0&&e===this.length)return{bufs:[...this.bufs],length:this.length};let n=[],i=0;for(let s=0;s<this.bufs.length;s++){let o=this.bufs[s],a=i,c=a+o.byteLength;if(i=c,t>=c)continue;let u=t>=a&&t<c,l=e>a&&e<=c;if(u&&l){if(t===a&&e===c){n.push(o);break}let h=t-a;n.push(o.subarray(h,h+(e-t)));break}if(u){if(t===0){n.push(o);continue}n.push(o.subarray(t-a));continue}if(l){if(e===c){n.push(o);break}n.push(o.subarray(0,e-a));break}n.push(o)}return{bufs:n,length:e-t}}indexOf(t,e=0){if(!ie(t)&&!(t instanceof Uint8Array))throw new TypeError('The "value" argument must be a Uint8ArrayList or Uint8Array');let n=t instanceof Uint8Array?t:t.subarray();if(e=Number(e??0),isNaN(e)&&(e=0),e<0&&(e=this.length+e),e<0&&(e=0),t.length===0)return e>this.length?this.length:e;let i=n.byteLength;if(i===0)throw new TypeError("search must be at least 1 byte long");let s=256,o=new Int32Array(s);for(let h=0;h<s;h++)o[h]=-1;for(let h=0;h<i;h++)o[n[h]]=h;let a=o,c=this.byteLength-n.byteLength,u=n.byteLength-1,l;for(let h=e;h<=c;h+=l){l=0;for(let f=u;f>=0;f--){let m=this.get(h+f);if(n[f]!==m){l=Math.max(1,f-a[m]);break}}if(l===0)return h}return-1}getInt8(t){let e=this.subarray(t,t+1);return new DataView(e.buffer,e.byteOffset,e.byteLength).getInt8(0)}setInt8(t,e){let n=$(1);new DataView(n.buffer,n.byteOffset,n.byteLength).setInt8(0,e),this.write(n,t)}getInt16(t,e){let n=this.subarray(t,t+2);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt16(0,e)}setInt16(t,e,n){let i=Z(2);new DataView(i.buffer,i.byteOffset,i.byteLength).setInt16(0,e,n),this.write(i,t)}getInt32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt32(0,e)}setInt32(t,e,n){let i=Z(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setInt32(0,e,n),this.write(i,t)}getBigInt64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getBigInt64(0,e)}setBigInt64(t,e,n){let i=Z(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setBigInt64(0,e,n),this.write(i,t)}getUint8(t){let e=this.subarray(t,t+1);return new DataView(e.buffer,e.byteOffset,e.byteLength).getUint8(0)}setUint8(t,e){let n=$(1);new DataView(n.buffer,n.byteOffset,n.byteLength).setUint8(0,e),this.write(n,t)}getUint16(t,e){let n=this.subarray(t,t+2);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint16(0,e)}setUint16(t,e,n){let i=Z(2);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint16(0,e,n),this.write(i,t)}getUint32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint32(0,e)}setUint32(t,e,n){let i=Z(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint32(0,e,n),this.write(i,t)}getBigUint64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getBigUint64(0,e)}setBigUint64(t,e,n){let i=Z(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setBigUint64(0,e,n),this.write(i,t)}getFloat32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getFloat32(0,e)}setFloat32(t,e,n){let i=Z(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setFloat32(0,e,n),this.write(i,t)}getFloat64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getFloat64(0,e)}setFloat64(t,e,n){let i=Z(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setFloat64(0,e,n),this.write(i,t)}equals(t){if(t==null||!(t instanceof X)||t.bufs.length!==this.bufs.length)return!1;for(let e=0;e<this.bufs.length;e++)if(!jt(this.bufs[e],t.bufs[e]))return!1;return!0}static fromUint8Arrays(t,e){let n=new X;return n.bufs=t,e==null&&(e=t.reduce((i,s)=>i+s.byteLength,0)),n.length=e,n}};function se(r){return r instanceof Uint8Array?{get(t){return r[t]},set(t,e){r[t]=e}}:{get(t){return r.get(t)},set(t,e){r.set(t,e)}}}var xi=4294967296,O=class{constructor(t=0,e=0){this.hi=t,this.lo=e}toBigInt(t){if(t===!0)return BigInt(this.lo>>>0)+(BigInt(this.hi>>>0)<<32n);if(this.hi>>>31){let e=~this.lo+1>>>0,n=~this.hi>>>0;return e===0&&(n=n+1>>>0),-(BigInt(e)+(BigInt(n)<<32n))}return BigInt(this.lo>>>0)+(BigInt(this.hi>>>0)<<32n)}toNumber(t){return Number(this.toBigInt(t))}zzDecode(){let t=-(this.lo&1),e=((this.lo>>>1|this.hi<<31)^t)>>>0,n=(this.hi>>>1^t)>>>0;return new O(n,e)}zzEncode(){let t=this.hi>>31,e=((this.hi<<1|this.lo>>>31)^t)>>>0,n=(this.lo<<1^t)>>>0;return new O(e,n)}toBytes(t,e=0){let n=se(t);for(;this.hi>0;)n.set(e++,this.lo&127|128),this.lo=(this.lo>>>7|this.hi<<25)>>>0,this.hi>>>=7;for(;this.lo>127;)n.set(e++,this.lo&127|128),this.lo=this.lo>>>7;n.set(e++,this.lo)}static fromBigInt(t){if(t===0n)return new O;let e=t<0;e&&(t=-t);let n=Number(t>>32n)|0,i=Number(t-(BigInt(n)<<32n))|0;return e&&(n=~n>>>0,i=~i>>>0,++i>xi&&(i=0,++n>xi&&(n=0))),new O(n,i)}static fromNumber(t){if(t===0)return new O;let e=t<0;e&&(t=-t);let n=t>>>0,i=(t-n)/4294967296>>>0;return e&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new O(i,n)}static fromBytes(t,e=0){let n=se(t),i=new O,s=0;if(t.length-e>4){for(;s<4;++s)if(i.lo=(i.lo|(n.get(e)&127)<<s*7)>>>0,n.get(e++)<128)return i;if(i.lo=(i.lo|(n.get(e)&127)<<28)>>>0,i.hi=(i.hi|(n.get(e)&127)>>4)>>>0,n.get(e++)<128)return i;s=0}else for(;s<4;++s){if(e>=t.length)throw RangeError(`index out of range: ${e} > ${t.length}`);if(i.lo=(i.lo|(n.get(e)&127)<<s*7)>>>0,n.get(e++)<128)return i}if(t.length-e>4){for(;s<5;++s)if(i.hi=(i.hi|(n.get(e)&127)<<s*7+3)>>>0,n.get(e++)<128)return i}else if(e<t.byteLength)for(;s<5;++s){if(e>=t.length)throw RangeError(`index out of range: ${e} > ${t.length}`);if(i.hi=(i.hi|(n.get(e)&127)<<s*7+3)>>>0,n.get(e++)<128)return i}throw RangeError("invalid varint encoding")}};var ga=Math.pow(2,7),ma=Math.pow(2,14),ya=Math.pow(2,21),ba=Math.pow(2,28),wa=Math.pow(2,35),_a=Math.pow(2,42),va=Math.pow(2,49),xa=Math.pow(2,56),ka=Math.pow(2,63),pt={encodingLength(r){return r<ga?1:r<ma?2:r<ya?3:r<ba?4:r<wa?5:r<_a?6:r<va?7:r<xa?8:r<ka?9:10},encode(r,t,e=0){if(Number.MAX_SAFE_INTEGER!=null&&r>Number.MAX_SAFE_INTEGER)throw new RangeError("Could not encode varint");return t==null&&(t=$(pt.encodingLength(r))),O.fromNumber(r).toBytes(t,e),t},decode(r,t=0){return O.fromBytes(r,t).toNumber(!0)}};function oe(r){return r[Symbol.asyncIterator]!=null}var ae=r=>{let t=pt.encodingLength(r),e=$(t);return pt.encode(r,e),ae.bytes=t,e};ae.bytes=0;function ce(r,t){t=t??{};let e=t.lengthEncoder??ae;function*n(i){let s=e(i.byteLength);s instanceof Uint8Array?yield s:yield*s,i instanceof Uint8Array?yield i:yield*i}return oe(r)?async function*(){for await(let i of r)yield*n(i)}():function*(){for(let i of r)yield*n(i)}()}ce.single=(r,t)=>{t=t??{};let e=t.lengthEncoder??ae;return new X(e(r.byteLength),r)};var Ct=L(Ei(),1);var Ea=8,Ca=1024*1024*4,gt;(function(r){r[r.LENGTH=0]="LENGTH",r[r.DATA=1]="DATA"})(gt||(gt={}));var sr=r=>{let t=pt.decode(r);return sr.bytes=pt.encodingLength(t),t};sr.bytes=0;function zt(r,t){let e=new X,n=gt.LENGTH,i=-1,s=t?.lengthDecoder??sr,o=t?.maxLengthLength??Ea,a=t?.maxDataLength??Ca;function*c(){for(;e.byteLength>0;){if(n===gt.LENGTH)try{if(i=s(e),i<0)throw(0,Ct.default)(new Error("invalid message length"),"ERR_INVALID_MSG_LENGTH");if(i>a)throw(0,Ct.default)(new Error("message length too long"),"ERR_MSG_DATA_TOO_LONG");let u=s.bytes;e.consume(u),t?.onLength!=null&&t.onLength(i),n=gt.DATA}catch(u){if(u instanceof RangeError){if(e.byteLength>o)throw(0,Ct.default)(new Error("message length length too long"),"ERR_MSG_LENGTH_TOO_LONG");break}throw u}if(n===gt.DATA){if(e.byteLength<i)break;let u=e.sublist(0,i);e.consume(i),t?.onData!=null&&t.onData(u),yield u,n=gt.LENGTH}}}return oe(r)?async function*(){for await(let u of r)e.append(u),yield*c();if(e.byteLength>0)throw(0,Ct.default)(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}():function*(){for(let u of r)e.append(u),yield*c();if(e.byteLength>0)throw(0,Ct.default)(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}()}zt.fromReader=(r,t)=>{let e=1,n=async function*(){for(;;)try{let{done:s,value:o}=await r.next(e);if(s===!0)return;o!=null&&(yield o)}catch(s){if(s.code==="ERR_UNDER_READ")return{done:!0,value:null};throw s}finally{e=1}}();return zt(n,{...t??{},onLength:s=>{e=s}})};var ue=class{constructor(t){if(!(t>0)||t-1&t)throw new Error("Max size for a FixedFIFO should be a power of two");this.buffer=new Array(t),this.mask=t-1,this.top=0,this.btm=0,this.next=null}push(t){return this.buffer[this.top]!==void 0?!1:(this.buffer[this.top]=t,this.top=this.top+1&this.mask,!0)}shift(){let t=this.buffer[this.btm];if(t!==void 0)return this.buffer[this.btm]=void 0,this.btm=this.btm+1&this.mask,t}isEmpty(){return this.buffer[this.btm]===void 0}},At=class{constructor(t={}){this.hwm=t.splitLimit??16,this.head=new ue(this.hwm),this.tail=this.head,this.size=0}calculateSize(t){return t?.byteLength!=null?t.byteLength:1}push(t){if(t?.value!=null&&(this.size+=this.calculateSize(t.value)),!this.head.push(t)){let e=this.head;this.head=e.next=new ue(2*this.head.buffer.length),this.head.push(t)}}shift(){let t=this.tail.shift();if(t===void 0&&this.tail.next!=null){let e=this.tail.next;this.tail.next=null,this.tail=e,t=this.tail.shift()}return t?.value!=null&&(this.size-=this.calculateSize(t.value)),t}isEmpty(){return this.head.isEmpty()}};function le(r={}){return Ba(e=>{let n=e.shift();if(n==null)return{done:!0};if(n.error!=null)throw n.error;return{done:n.done===!0,value:n.value}},r)}function Ba(r,t){t=t??{};let e=t.onEnd,n=new At,i,s,o,a=async()=>n.isEmpty()?o?{done:!0}:await new Promise((p,y)=>{s=S=>{s=null,n.push(S);try{p(r(n))}catch(A){y(A)}return i}}):r(n),c=p=>s!=null?s(p):(n.push(p),i),u=p=>(n=new At,s!=null?s({error:p}):(n.push({error:p}),i)),l=p=>{if(o)return i;if(t?.objectMode!==!0&&p?.byteLength==null)throw new Error("objectMode was not true but tried to push non-Uint8Array value");return c({done:!1,value:p})},h=p=>o?i:(o=!0,p!=null?u(p):c({done:!0})),f=()=>(n=new At,h(),{done:!0}),m=p=>(h(p),{done:!0});if(i={[Symbol.asyncIterator](){return this},next:a,return:f,throw:m,push:l,end:h,get readableLength(){return n.size}},e==null)return i;let d=i;return i={[Symbol.asyncIterator](){return this},next(){return d.next()},throw(p){return d.throw(p),e!=null&&(e(p),e=void 0),{done:!0}},return(){return d.return(),e!=null&&(e(),e=void 0),{done:!0}},push:l,end(p){return d.end(p),e!=null&&(e(p),e=void 0),i},get readableLength(){return d.readableLength}},i}function Ta(r){return r[Symbol.asyncIterator]!=null}function La(...r){let t=[];for(let e of r)Ta(e)||t.push(e);return t.length===r.length?function*(){for(let e of t)yield*e}():async function*(){let e=le({objectMode:!0});Promise.resolve().then(async()=>{try{await Promise.all(r.map(async n=>{for await(let i of n)e.push(i)})),e.end()}catch(n){e.end(n)}}),yield*e}()}var Ci=La;function ar(r,...t){if(r==null)throw new Error("Empty pipeline");if(or(r)){let n=r;r=()=>n.source}else if(Bi(r)||Ai(r)){let n=r;r=()=>n}let e=[r,...t];if(e.length>1&&or(e[e.length-1])&&(e[e.length-1]=e[e.length-1].sink),e.length>2)for(let n=1;n<e.length-1;n++)or(e[n])&&(e[n]=Da(e[n]));return Ma(...e)}var Ma=(...r)=>{let t;for(;r.length>0;)t=r.shift()(t);return t},Ai=r=>r?.[Symbol.asyncIterator]!=null,Bi=r=>r?.[Symbol.iterator]!=null,or=r=>r==null?!1:r.sink!=null&&r.source!=null,Da=r=>t=>{let e=r.sink(t);if(e?.then!=null){let n=le({objectMode:!0});e.then(()=>{n.end()},o=>{n.end(o)});let i,s=r.source;if(Ai(s))i=async function*(){yield*s,n.end()};else if(Bi(s))i=function*(){yield*s,n.end()};else throw new Error("Unknown duplex source type - must be Iterable or AsyncIterable");return Ci(n,i())}return r.source};var cr=Symbol.for("@libp2p/topology");var Ti=()=>{},ur=class{constructor(t){this.min=t.min??0,this.max=t.max??1/0,this.peers=new Set,this.onConnect=t.onConnect??Ti,this.onDisconnect=t.onDisconnect??Ti}get[Symbol.toStringTag](){return cr.toString()}get[cr](){return!0}async setRegistrar(t){this.registrar=t}disconnect(t){this.onDisconnect(t)}};function Li(r){return new ur(r)}var Wi=L(Ii(),1);var Ut=class extends Error{constructor(t,e){super(t??"The operation was aborted"),this.type="aborted",this.code=e??"ABORT_ERR"}};function zi(r){if(r!=null){if(typeof r[Symbol.iterator]=="function")return r[Symbol.iterator]();if(typeof r[Symbol.asyncIterator]=="function")return r[Symbol.asyncIterator]();if(typeof r.next=="function")return r}throw new Error("argument is not an iterator or iterable")}function Ri(r,t,e){let n=e??{},i=zi(r);async function*s(){let o,a=()=>{o?.()};for(t.addEventListener("abort",a);;){let c;try{if(t.aborted){let{abortMessage:l,abortCode:h}=n;throw new Ut(l,h)}let u=new Promise((l,h)=>{o=()=>{let{abortMessage:f,abortCode:m}=n;h(new Ut(f,m))}});c=await Promise.race([u,i.next()]),o=null}catch(u){t.removeEventListener("abort",a);let l=u.type==="aborted"&&t.aborted;if(l&&n.onAbort!=null&&await n.onAbort(r),typeof i.return=="function")try{let h=i.return();h instanceof Promise&&h.catch(f=>{n.onReturnError!=null&&n.onReturnError(f)})}catch(h){n.onReturnError!=null&&n.onReturnError(h)}if(l&&n.returnOnAbort===!0)return;throw u}if(c.done===!0)break;yield c.value}t.removeEventListener("abort",a)}return s()}var G=class extends Event{constructor(t,e){super(t),this.detail=e}};function Oa(r){return r[Symbol.asyncIterator]!=null}function Pa(r,t){return Oa(r)?async function*(){let e=0;if(!(t<1)){for await(let n of r)if(yield n,e++,e===t)return}}():function*(){let e=0;if(!(t<1)){for(let n of r)if(yield n,e++,e===t)return}}()}var Ui=Pa;function Ia(r){return r[Symbol.asyncIterator]!=null}function za(r){if(Ia(r))return(async()=>{for await(let t of r);})();for(let t of r);}var Hi=za;function Ra(r){let[t,e]=r[Symbol.asyncIterator]!=null?[r[Symbol.asyncIterator](),Symbol.asyncIterator]:[r[Symbol.iterator](),Symbol.iterator],n=[];return{peek:()=>t.next(),push:i=>{n.push(i)},next:()=>n.length>0?{done:!1,value:n.shift()}:t.next(),[e](){return this}}}var fe=Ra;function Ua(r){return r[Symbol.asyncIterator]!=null}function Ha(r,t){if(Ua(r))return async function*(){for await(let a of r)yield t(a)}();let e=fe(r),{value:n,done:i}=e.next();if(i===!0)return function*(){}();let s=t(n);if(typeof s.then=="function")return async function*(){yield await s;for await(let a of e)yield t(a)}();let o=t;return function*(){yield s;for(let a of e)yield o(a)}()}var qi=Ha;var hr="/ipfs/bitswap/1.0.0",fr="/ipfs/bitswap/1.1.0",dr="/ipfs/bitswap/1.2.0",Wa=32,Va=128,$a=3e4,de=class{constructor(t,e,n,i={}){this._log=U(t.peerId,"network"),this._libp2p=t,this._bitswap=e,this._protocols=[hr],i.b100Only!==!0&&(this._protocols.unshift(fr),this._protocols.unshift(dr)),this._stats=n,this._running=!1,this._onPeerConnect=this._onPeerConnect.bind(this),this._onPeerDisconnect=this._onPeerDisconnect.bind(this),this._onConnection=this._onConnection.bind(this),this._hashLoader=i.hashLoader??{async getHasher(){throw new Error("Not implemented")}},this._maxInboundStreams=i.maxInboundStreams??Wa,this._maxOutboundStreams=i.maxOutboundStreams??Va,this._incomingStreamTimeout=i.incomingStreamTimeout??$a}async start(){this._running=!0,await this._libp2p.handle(this._protocols,this._onConnection,{maxInboundStreams:this._maxInboundStreams,maxOutboundStreams:this._maxOutboundStreams});let t=Li({onConnect:this._onPeerConnect,onDisconnect:this._onPeerDisconnect});this._registrarIds=[];for(let e of this._protocols)this._registrarIds.push(await this._libp2p.register(e,t));this._libp2p.getConnections().forEach(e=>{this._onPeerConnect(e.remotePeer)})}async stop(){if(this._running=!1,await this._libp2p.unhandle(this._protocols),this._registrarIds!=null){for(let t of this._registrarIds)this._libp2p.unregister(t);this._registrarIds=[]}}_onConnection(t){if(!this._running)return;let{stream:e,connection:n}=t,i=new Wi.TimeoutController(this._incomingStreamTimeout);Promise.resolve().then(async()=>{this._log("incoming new bitswap %s connection from %p",e.stat.protocol,n.remotePeer),await ar(Ri(e.source,i.signal),s=>zt(s),async s=>{for await(let o of s){try{let a=await x.deserialize(o.subarray(),this._hashLoader);await this._bitswap._receiveMessage(n.remotePeer,a)}catch(a){this._bitswap._receiveError(a);break}i.reset()}})}).catch(s=>{this._log(s),e.abort(s)}).finally(()=>{i.clear(),e.close()})}_onPeerConnect(t){this._bitswap._onPeerConnected(t)}_onPeerDisconnect(t){this._bitswap._onPeerDisconnected(t)}findProviders(t,e={}){return e.onProgress?.(new G("bitswap:network:find-providers",t)),this._libp2p.contentRouting.findProviders(t,e)}async findAndConnect(t,e){await Hi(Ui(qi(this.findProviders(t,e),async n=>await this.connectTo(n.id,e).catch(i=>{this._log.error(i)})),3)).catch(n=>{this._log.error(n)})}async provide(t,e={}){e.onProgress?.(new G("bitswap:network:provide",t)),await this._libp2p.contentRouting.provide(t,e)}async sendMessage(t,e,n={}){if(!this._running)throw new Error("network isn't running");let i=t.toString();this._log("sendMessage to %s",i,e),n.onProgress?.(new G("bitswap:network:send-wantlist",t)),await this._writeMessage(t,e,n),this._updateSentStats(t,e.blocks)}async connectTo(t,e={}){if(!this._running)throw new Error("network isn't running");return e.onProgress?.(new G("bitswap:network:dial",t)),await this._libp2p.dial(t,e)}_updateSentStats(t,e){let n=t.toString();if(this._stats!=null){for(let i of e.values())this._stats.push(n,"dataSent",i.length);this._stats.push(n,"blocksSent",e.size)}}async _writeMessage(t,e,n={}){let i=await this._libp2p.dialProtocol(t,[dr,fr,hr]);try{let s;switch(i.stat.protocol){case hr:s=e.serializeToBitswap100();break;case fr:case dr:s=e.serializeToBitswap110();break;default:throw new Error(`Unknown protocol: ${i.stat.protocol}`)}await ar([s],o=>ce(o),i)}catch(s){n.onProgress?.(new G("bitswap:network:send-wantlist:error",{peer:t,error:s})),this._log(s)}finally{i.close()}}};var pe=class{constructor(t){this.partner=t,this.wantlist=new K,this.exchangeCount=0,this.accounting={bytesSent:0,bytesRecv:0}}sentBytes(t){this.exchangeCount++,this.lastExchange=new Date().getTime(),this.accounting.bytesSent+=t}receivedBytes(t){this.exchangeCount++,this.lastExchange=new Date().getTime(),this.accounting.bytesRecv+=t}wants(t,e,n){this.wantlist.add(t,e,n)}cancelWant(t){this.wantlist.remove(t)}wantlistContains(t){return this.wantlist.get(t)}debtRatio(){return this.accounting.bytesSent/(this.accounting.bytesRecv+1)}};var Ht=class extends Map{constructor(t,e){super(),this._cmp=e??this._defaultSort,this._keys=[];for(let[n,i]of t??[])this.set(n,i)}update(t){if(t<0||t>=this._keys.length)return;let e=this._keys[t];this._keys.splice(t,1);let n=this._find(e);this._keys.splice(n,0,e)}set(t,e){if(this.has(t)){let i=this.indexOf(t);this._keys.splice(i,1)}super.set(t,e);let n=this._find(t);return this._keys.splice(n,0,t),this}clear(){super.clear(),this._keys=[]}delete(t){if(!this.has(t))return!1;let e=this.indexOf(t);return this._keys.splice(e,1),super.delete(t)}indexOf(t){if(!this.has(t))return-1;let e=this._find(t);if(this._keys[e]===t)return e;for(let n=1;n<this._keys.length;n++){if(this._keys[e+n]===t)return e+n;if(this._keys[e-n]===t)return e-n}return-1}_find(t){let e=0,n=this._keys.length;for(;e<n;){let i=e+n>>>1,s=this._kCmp(this._keys[i],t);if(s<0)e=i+1;else if(s>0)n=i;else return i}return e}*keys(){for(let t of this._keys)yield t}*values(){for(let t of this._keys)yield this.get(t)}*entries(){for(let t of this._keys)yield[t,this.get(t)]}*[Symbol.iterator](){yield*this.entries()}forEach(t,e=this){if(t!=null)for(let n of this._keys){let i=this.get(n);if(i==null)throw new Error("Value cannot be undefined");t.apply(e,[[n,i]])}}_defaultSort(t,e){return t[0]<e[0]?-1:e[0]<t[0]?1:0}_kCmp(t,e){return this._cmp([t,this.get(t)],[e,this.get(e)])}};var Ga={hasNewInfo(){return!1},merge(){}},ge=class{constructor(t=Ga){this._taskMerger=t,this._byPeer=new Ht([],me.compare)}pushTasks(t,e){let n=this._byPeer.get(t.toString());n==null&&(n=new me(t,this._taskMerger)),n.pushTasks(e),this._byPeer.set(t.toString(),n)}popTasks(t){let e=this._head();if(e===void 0)return{tasks:[],pendingSize:0};let{tasks:n,pendingSize:i}=e.popTasks(t);if(n.length===0)return{tasks:n,pendingSize:i};let s=e.peerId;return e.isIdle()?this._byPeer.delete(s.toString()):this._byPeer.update(0),{peerId:s,tasks:n,pendingSize:i}}_head(){if(this._byPeer.size!==0)for(let[,t]of this._byPeer)return t}remove(t,e){this._byPeer.get(e.toString())?.remove(t)}tasksDone(t,e){let n=this._byPeer.get(t.toString());if(n==null)return;let i=this._byPeer.indexOf(t.toString());for(let s of e)n.taskDone(s);this._byPeer.update(i)}},me=class{constructor(t,e){this.peerId=t,this._taskMerger=e,this._activeTotalSize=0,this._pending=new pr,this._active=new Set}pushTasks(t){for(let e of t)this._pushTask(e)}_pushTask(t){if(!this._taskHasMoreInfoThanActiveTasks(t))return;let e=this._pending.get(t.topic);if(e!=null){t.priority>e.priority&&this._pending.updatePriority(t.topic,t.priority),this._taskMerger.merge(t,e);return}this._pending.add(t)}_taskHasMoreInfoThanActiveTasks(t){let e=[];for(let n of this._active)n.topic===t.topic&&e.push(n);return e.length===0?!0:this._taskMerger.hasNewInfo(t,e)}popTasks(t){let e=0,n=[],i=this._pending.tasks();for(let s=0;s<i.length&&e<t;s++){let o=i[s];n.push(o),e+=o.size,this._pending.delete(o.topic),this._activeTotalSize+=o.size,this._active.add(o)}return{tasks:n,pendingSize:this._pending.totalSize}}taskDone(t){this._active.has(t)&&(this._activeTotalSize-=t.size,this._active.delete(t))}remove(t){this._pending.delete(t)}isIdle(){return this._pending.length===0&&this._active.size===0}static compare(t,e){return t[1]._pending.length===0?1:e[1]._pending.length===0?-1:t[1]._activeTotalSize===e[1]._activeTotalSize?e[1]._pending.length-t[1]._pending.length:t[1]._activeTotalSize-e[1]._activeTotalSize}},pr=class{constructor(){this._tasks=new Ht([],this._compare)}get length(){return this._tasks.size}get totalSize(){return[...this._tasks.values()].reduce((t,e)=>t+e.task.size,0)}get(t){return this._tasks?.get(t)?.task}add(t){this._tasks.set(t.topic,{created:Date.now(),task:t})}delete(t){this._tasks.delete(t)}tasks(){return[...this._tasks.values()].map(t=>t.task)}updatePriority(t,e){let n=this._tasks.get(t);if(n==null)return;let i=this._tasks.indexOf(t);n.task.priority=e,this._tasks.update(i)}_compare(t,e){return t[1].task.priority===e[1].task.priority?t[1].created-e[1].created:e[1].task.priority-t[1].task.priority}};var Vi={hasNewInfo(r,t){let e=!1,n=!1;for(let i of t)i.data.haveBlock&&(e=!0),i.data.isWantBlock&&(n=!0);return!!(!n&&r.data.isWantBlock||!e&&r.data.haveBlock)},merge(r,t){let e=r.data,n=t.data;!n.haveBlock&&e.haveBlock&&(n.haveBlock=e.haveBlock,n.blockSize=e.blockSize),!n.isWantBlock&&e.isWantBlock&&(n.isWantBlock=!0,(!n.haveBlock||e.haveBlock)&&(n.haveBlock=e.haveBlock,t.size=r.size)),n.isWantBlock&&n.haveBlock&&(t.size=n.blockSize)}};var $i=x.WantType,ja=16*1024,Qa=1024,ye=class{constructor(t,e,n,i,s,o={}){this._log=U(t,"engine"),this.blockstore=e,this.network=n,this._stats=i,this._opts=this._processOpts(o),this.ledgerMap=it({name:"ipfs_bitswap_ledger_map",metrics:s.metrics}),this._running=!1,this._requestQueue=new ge(Vi)}_processOpts(t){return{maxSizeReplaceHasWithBlock:Qa,targetMessageSize:ja,...t}}_scheduleProcessTasks(){setTimeout(()=>{this._processTasks().catch(t=>{this._log.error("error processing stats",t)})})}async _processTasks(){if(!this._running)return;let{peerId:t,tasks:e,pendingSize:n}=this._requestQueue.popTasks(this._opts.targetMessageSize);if(e.length===0)return;let i=new x(!1);i.setPendingBytes(n);let s=[],o=new Map;for(let c of e){let u=w.parse(c.topic);c.data.haveBlock?c.data.isWantBlock?(s.push(u),o.set(c.topic,c.data)):i.addHave(u):i.addDontHave(u)}let a=await this._getBlocks(s);for(let[c,u]of o){let l=w.parse(c),h=a.get(c);h!=null?i.addBlock(l,h):u.sendDontHave&&i.addDontHave(l)}if(i.empty){t!=null&&this._requestQueue.tasksDone(t,e),this._scheduleProcessTasks();return}try{t!=null&&await this.network.sendMessage(t,i);for(let[c,u]of a.entries())t!=null&&this.messageSent(t,w.parse(c),u)}catch(c){this._log.error(c)}t!=null&&this._requestQueue.tasksDone(t,e),this._scheduleProcessTasks()}wantlistForPeer(t){let e=t.toString(),n=this.ledgerMap.get(e);return n!=null?n.wantlist.sortedEntries():new Map}ledgerForPeer(t){let e=t.toString(),n=this.ledgerMap.get(e);if(n!=null)return{peer:n.partner,value:n.debtRatio(),sent:n.accounting.bytesSent,recv:n.accounting.bytesRecv,exchanged:n.exchangeCount}}peers(){return Array.from(this.ledgerMap.values()).map(t=>t.partner)}receivedBlocks(t){if(t.length!==0){for(let e of this.ledgerMap.values())for(let{cid:n,block:i}of t){let s=e.wantlistContains(n);if(s==null)continue;let o=i.length,a=this._sendAsBlock(s.wantType,o),c=o;a||(c=x.blockPresenceSize(s.cid)),this._requestQueue.pushTasks(e.partner,[{topic:s.cid.toString(b),priority:s.priority,size:c,data:{blockSize:o,isWantBlock:a,haveBlock:!0,sendDontHave:!1}}])}this._scheduleProcessTasks()}}async messageReceived(t,e){let n=this._findOrCreate(t);if(e.empty)return;if(e.full&&(n.wantlist=new K),this._updateBlockAccounting(e.blocks,n),e.wantlist.size===0){this._scheduleProcessTasks();return}let i=[],s=[];e.wantlist.forEach(o=>{o.cancel?(n.cancelWant(o.cid),i.push(o.cid)):(n.wants(o.cid,o.priority,o.wantType),s.push(o))}),this._cancelWants(t,i),await this._addWants(t,s),this._scheduleProcessTasks()}_cancelWants(t,e){for(let n of e)this._requestQueue.remove(n.toString(b),t)}async _addWants(t,e){let n=await this._getBlockSizes(e.map(s=>s.cid)),i=[];for(let s of e){let o=s.cid.toString(b),a=n.get(o);if(a==null)s.sendDontHave&&i.push({topic:o,priority:s.priority,size:x.blockPresenceSize(s.cid),data:{isWantBlock:s.wantType===$i.Block,blockSize:0,haveBlock:!1,sendDontHave:s.sendDontHave}});else{let c=this._sendAsBlock(s.wantType,a),u=a;c||(u=x.blockPresenceSize(s.cid)),i.push({topic:o,priority:s.priority,size:u,data:{isWantBlock:c,blockSize:a,haveBlock:!0,sendDontHave:s.sendDontHave}})}this._requestQueue.pushTasks(t,i)}}_sendAsBlock(t,e){return t===$i.Block||e<=this._opts.maxSizeReplaceHasWithBlock}async _getBlockSizes(t){let e=await this._getBlocks(t);return new Map([...e].map(([n,i])=>[n,i.length]))}async _getBlocks(t){let e=new Map;return await Promise.all(t.map(async n=>{try{let i=await this.blockstore.get(n);e.set(n.toString(b),i)}catch(i){i.code!=="ERR_NOT_FOUND"&&this._log.error("failed to query blockstore for %s: %s",n,i)}})),e}_updateBlockAccounting(t,e){for(let n of t.values())this._log("got block (%s bytes)",n.length),e.receivedBytes(n.length)}messageSent(t,e,n){let i=this._findOrCreate(t);i.sentBytes(n.length),i.wantlist.remove(e)}numBytesSentTo(t){return this._findOrCreate(t).accounting.bytesSent}numBytesReceivedFrom(t){return this._findOrCreate(t).accounting.bytesRecv}peerDisconnected(t){this.ledgerMap.delete(t.toString())}_findOrCreate(t){let e=t.toString(),n=this.ledgerMap.get(e);if(n!=null)return n;let i=new pe(t);return this.ledgerMap.set(e,i),this._stats!=null&&this._stats.push(e,"peerCount",1),i}start(){this._running=!0}stop(){this._running=!1}};var ls=L(_e(),1);var mr={};N(mr,{identity:()=>ec});var ec=_t({prefix:"\0",name:"identity",encode:r=>Or(r),decode:r=>Fr(r)});var yr={};N(yr,{base2:()=>rc});var rc=E({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var br={};N(br,{base8:()=>nc});var nc=E({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var wr={};N(wr,{base10:()=>ic});var ic=Y({prefix:"9",name:"base10",alphabet:"0123456789"});var _r={};N(_r,{base16:()=>sc,base16upper:()=>oc});var sc=E({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),oc=E({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var vr={};N(vr,{base36:()=>ac,base36upper:()=>cc});var ac=Y({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),cc=Y({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var xr={};N(xr,{base256emoji:()=>dc});var rs=Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"),uc=rs.reduce((r,t,e)=>(r[e]=t,r),[]),lc=rs.reduce((r,t,e)=>(r[t.codePointAt(0)]=e,r),[]);function hc(r){return r.reduce((t,e)=>(t+=uc[e],t),"")}function fc(r){let t=[];for(let e of r){let n=lc[e.codePointAt(0)];if(n===void 0)throw new Error(`Non-base256emoji character: ${e}`);t.push(n)}return new Uint8Array(t)}var dc=_t({prefix:"\u{1F680}",name:"base256emoji",encode:hc,decode:fc});var kr={};N(kr,{identity:()=>mc});var ns=0,pc="identity",is=J,gc=r=>st(ns,is(r)),mc={code:ns,name:pc,encode:is,digest:gc};var af=new TextEncoder,cf=new TextDecoder;var Sr={...mr,...yr,...br,...wr,..._r,...Le,...vr,...Te,...Re,...xr},df={...Fe,...kr};function os(r,t,e,n){return{name:r,prefix:t,encoder:{name:r,prefix:t,encode:e},decoder:{decode:n}}}var ss=os("utf8","u",r=>"u"+new TextDecoder("utf8").decode(r),r=>new TextEncoder().encode(r.substring(1))),Er=os("ascii","a",r=>{let t="a";for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return t},r=>{r=r.substring(1);let t=$(r.length);for(let e=0;e<r.length;e++)t[e]=r.charCodeAt(e);return t}),wc={utf8:ss,"utf-8":ss,hex:Sr.base16,latin1:Er,ascii:Er,binary:Er,...Sr},as=wc;function Cr(r,t="utf8"){let e=as[t];if(e==null)throw new Error(`Unsupported encoding "${t}"`);return(t==="utf8"||t==="utf-8")&&globalThis.Buffer!=null&&globalThis.Buffer.from!=null?globalThis.Buffer.from(r.buffer,r.byteOffset,r.byteLength).toString("utf8"):e.encoder.encode(r).substring(1)}var cs=r=>`unwant:${Cr(r.multihash.bytes,"base64")}`,us=r=>`block:${Cr(r.multihash.bytes,"base64")}`,ve=class extends ls.EventEmitter{constructor(t){super(),this.setMaxListeners(yi),this._log=U(t,"notif")}hasBlock(t,e){let n=us(t);this._log(n),this.emit(n,e)}async wantBlock(t,e={}){if(t==null)throw new Error("Not a valid cid");let n=us(t),i=cs(t);return this._log(`wantBlock:${t}`),await new Promise((s,o)=>{let a=()=>{this.removeListener(n,c),e.onProgress?.(new G("bitswap:want-block:unwant",t)),o(new Error(`Block for ${t} unwanted`))},c=u=>{this.removeListener(i,a),e.onProgress?.(new G("bitswap:want-block:block",t)),s(u)};this.once(i,a),this.once(n,c),e.signal?.addEventListener("abort",()=>{this.removeListener(n,c),this.removeListener(i,a),o(new Error(`Want for ${t} aborted`))})})}unwantBlock(t){let e=cs(t);this._log(e),this.emit(e)}};var ms=L(_e(),1);var ps=L(_e(),1),Ar=L(ds(),1),qt=class extends ps.EventEmitter{constructor(t,e){super(),this._options=e,this._queue=[],this._stats={},this._frequencyLastTime=Date.now(),this._frequencyAccumulators={},this._movingAverages={},this._update=this._update.bind(this),t.forEach(n=>{this._stats[n]=BigInt(0),this._movingAverages[n]={},this._options.movingAverageIntervals.forEach(i=>{(this._movingAverages[n][i]=(0,Ar.default)(i)).push(this._frequencyLastTime,0)})}),this._enabled=this._options.enabled}enable(){this._enabled=!0}disable(){this._enabled=!1}stop(){this._timeout!=null&&clearTimeout(this._timeout)}get snapshot(){return Object.assign({},this._stats)}get movingAverages(){return Object.assign({},this._movingAverages)}push(t,e){this._enabled&&(this._queue.push([t,e,Date.now()]),this._resetComputeTimeout())}_resetComputeTimeout(){this._timeout!=null&&clearTimeout(this._timeout),this._timeout=setTimeout(this._update,this._nextTimeout())}_nextTimeout(){let t=this._queue.length/this._options.computeThrottleMaxQueueSize;return Math.max(this._options.computeThrottleTimeout*(1-t),0)}_update(){if(this._timeout=void 0,this._queue.length>0){let t;for(;this._queue.length>0;){let e=t=this._queue.shift();e!=null&&this._applyOp(e)}t!=null&&this._updateFrequency(t[2]),this.emit("update",this._stats)}}_updateFrequency(t){let e=t-this._frequencyLastTime;e>0&&Object.keys(this._stats).forEach(n=>{this._updateFrequencyFor(n,e,t)}),this._frequencyLastTime=t}_updateFrequencyFor(t,e,n){let i=this._frequencyAccumulators[t]??0;this._frequencyAccumulators[t]=0;let s=i/e*1e3,o=this._movingAverages[t];o==null&&(o=this._movingAverages[t]={}),this._options.movingAverageIntervals.forEach(a=>{let c=o[a];c==null&&(c=o[a]=(0,Ar.default)(a)),c.push(n,s)})}_applyOp(t){let e=t[0],n=t[1];if(typeof n!="number")throw new Error(`invalid increment number: ${n}`);Object.prototype.hasOwnProperty.call(this._stats,e)||(this._stats[e]=BigInt(0)),this._stats[e]=BigInt(this._stats[e])+BigInt(n),this._frequencyAccumulators[e]==null&&(this._frequencyAccumulators[e]=0),this._frequencyAccumulators[e]+=n}};var gs={enabled:!1,computeThrottleTimeout:1e3,computeThrottleMaxQueueSize:1e3,movingAverageIntervals:[60*1e3,5*60*1e3,15*60*1e3]},xe=class extends ms.EventEmitter{constructor(t,e=[],n=gs){super();let i=Object.assign({},gs,n);if(typeof i.computeThrottleTimeout!="number")throw new Error("need computeThrottleTimeout");if(typeof i.computeThrottleMaxQueueSize!="number")throw new Error("need computeThrottleMaxQueueSize");this._initialCounters=e,this._options=i,this._enabled=this._options.enabled,this._global=new qt(e,i),this._global.on("update",s=>this.emit("update",s)),this._peers=it({name:"ipfs_bitswap_stats_peers",metrics:t.metrics})}enable(){this._enabled=!0,this._options.enabled=!0,this._global.enable()}disable(){this._enabled=!1,this._options.enabled=!1,this._global.disable()}stop(){this._enabled=!1,this._global.stop();for(let t of this._peers)t[1].stop()}get snapshot(){return this._global.snapshot}get movingAverages(){return this._global.movingAverages}forPeer(t){let e=t.toString();return this._peers.get(e)}push(t,e,n){if(this._enabled&&(this._global.push(e,n),t!=null)){let i=this._peers.get(t);i==null&&(i=new qt(this._initialCounters,this._options),this._peers.set(t,i)),i.push(e,n)}}disconnected(t){let e=t.toString(),n=this._peers.get(e);n!=null&&(n.stop(),this._peers.delete(e))}};var _s=L(bs(),1);function vc(r){return r[Symbol.asyncIterator]!=null}function xc(r,t){if(vc(r))return async function*(){for await(let a of r)await t(a),yield a}();let e=fe(r),{value:n,done:i}=e.next();if(i===!0)return function*(){}();if(typeof t(n)?.then=="function")return async function*(){yield n;for await(let a of e)await t(a),yield a}();let o=t;return function*(){yield n;for(let a of e)o(a),yield a}()}var ws=xc;var kc={async getHasher(){throw new Error("Not implemented")}},Sc={maxInboundStreams:32,maxOutboundStreams:128,incomingStreamTimeout:3e4,hashLoader:kc,statsEnabled:!1,statsComputeThrottleTimeout:1e3,statsComputeThrottleMaxQueueSize:1e3},Ec=["blocksReceived","dataReceived","dupBlksReceived","dupDataReceived","blocksSent","dataSent","providesBufferLength","wantListLength","peerCount"],ke=class{constructor(t,e,n={}){this._libp2p=t,this._log=U(this.peerId),this._options=Object.assign({},Sc,n),this.stats=new xe(t,Ec,{enabled:this._options.statsEnabled,computeThrottleTimeout:this._options.statsComputeThrottleTimeout,computeThrottleMaxQueueSize:this._options.statsComputeThrottleMaxQueueSize}),this.network=new de(t,this,this.stats,{hashLoader:n.hashLoader,maxInboundStreams:n.maxInboundStreams,maxOutboundStreams:n.maxOutboundStreams,incomingStreamTimeout:n.incomingStreamTimeout}),this.blockstore=e,this.engine=new ye(this.peerId,e,this.network,this.stats,t),this.wm=new ne(this.peerId,this.network,this.stats,t),this.notifications=new ve(this.peerId),this.started=!1}isStarted(){return this.started}get peerId(){return this._libp2p.peerId}async _receiveMessage(t,e){try{await this.engine.messageReceived(t,e)}catch{this._log("failed to receive message",e)}if(e.blocks.size===0)return;let n=[];for(let[i,s]of e.blocks.entries()){let o=w.parse(i);n.push({wasWanted:this.wm.wantlist.contains(o),cid:o,data:s})}this.wm.cancelWants(n.filter(({wasWanted:i})=>i).map(({cid:i})=>i)),await Promise.all(n.map(async({cid:i,wasWanted:s,data:o})=>{await this._handleReceivedBlock(t,i,o,s)}))}async _handleReceivedBlock(t,e,n,i){this._log("received block");let s=await this.blockstore.has(e);this._updateReceiveCounters(t.toString(),e,n,s),i&&await this.put(e,n)}_updateReceiveCounters(t,e,n,i){this.stats.push(t,"blocksReceived",1),this.stats.push(t,"dataReceived",n.length),i&&(this.stats.push(t,"dupBlksReceived",1),this.stats.push(t,"dupDataReceived",n.length))}_receiveError(t){this._log.error("ReceiveError",t)}_onPeerConnected(t){this.wm.connected(t)}_onPeerDisconnected(t){this.wm.disconnected(t),this.engine.peerDisconnected(t),this.stats.disconnected(t)}enableStats(){this.stats.enable()}disableStats(){this.stats.disable()}wantlistForPeer(t,e){return this.engine.wantlistForPeer(t)}ledgerForPeer(t){return this.engine.ledgerForPeer(t)}async want(t,e={}){let n=async(c,u)=>(this.wm.wantBlocks([c],u),await this.notifications.wantBlock(c,u)),i=!1,s=async(c,u)=>{try{return await this.blockstore.get(c,u)}catch(l){if(l.code!=="ERR_NOT_FOUND")throw l;return i||(i=!0,this.network.findAndConnect(c,u).catch(h=>{this._log.error(h)})),await n(c,u)}},o=new AbortController,a=e.signal!=null?(0,_s.anySignal)([e.signal,o.signal]):o.signal;try{return await Promise.race([this.notifications.wantBlock(t,{...e,signal:a}),s(t,{...e,signal:a})])}finally{o.abort()}}unwant(t){let e=Array.isArray(t)?t:[t];this.wm.unwantBlocks(e),e.forEach(n=>{this.notifications.unwantBlock(n)})}cancelWants(t){this.wm.cancelWants(Array.isArray(t)?t:[t])}async put(t,e,n){await this.blockstore.put(t,e),this.notify(t,e)}async*putMany(t,e){yield*this.blockstore.putMany(ws(t,({cid:n,block:i})=>{this.notify(n,i)}),e)}notify(t,e,n={}){this.notifications.hasBlock(t,e),this.engine.receivedBlocks([{cid:t,block:e}]),this.network.provide(t,n).catch(i=>{this._log.error("Failed to provide: %s",i.message)})}getWantlist(){return this.wm.wantlist.entries()}get peers(){return this.engine.peers()}async start(){this.wm.start(),await this.network.start(),this.engine.start(),this.started=!0}async stop(){this.stats.stop(),this.wm.stop(),await this.network.stop(),this.engine.stop(),this.started=!1}};var Cc=(r,t,e={})=>new ke(r,t,e);return Cs(Ac);})();
+"use strict";var IpfsBitswap=(()=>{var zs=Object.create;var te=Object.defineProperty;var Us=Object.getOwnPropertyDescriptor;var Hs=Object.getOwnPropertyNames;var qs=Object.getPrototypeOf,Ws=Object.prototype.hasOwnProperty;var v=(r,t)=>()=>(t||r((t={exports:{}}).exports,t),t.exports),z=(r,t)=>{for(var e in t)te(r,e,{get:t[e],enumerable:!0})},Wr=(r,t,e,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of Hs(t))!Ws.call(r,i)&&i!==e&&te(r,i,{get:()=>t[i],enumerable:!(n=Us(t,i))||n.enumerable});return r};var F=(r,t,e)=>(e=r!=null?zs(qs(r)):{},Wr(t||!r||!r.__esModule?te(e,"default",{value:r,enumerable:!0}):e,r)),$s=r=>Wr(te({},"__esModule",{value:!0}),r);var ln=v((du,un)=>{un.exports=cn;var an=128,To=127,Oo=~To,Po=Math.pow(2,31);function cn(r,t,e){t=t||[],e=e||0;for(var n=e;r>=Po;)t[e++]=r&255|an,r/=128;for(;r&Oo;)t[e++]=r&255|an,r>>>=7;return t[e]=r|0,cn.bytes=e-n+1,t}});var dn=v((pu,fn)=>{fn.exports=Ve;var Do=128,hn=127;function Ve(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a)throw Ve.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&hn)<<i:(o&hn)*Math.pow(2,i),i+=7}while(o>=Do);return Ve.bytes=s-n,e}});var gn=v((gu,pn)=>{var No=Math.pow(2,7),Mo=Math.pow(2,14),Fo=Math.pow(2,21),Ro=Math.pow(2,28),Io=Math.pow(2,35),zo=Math.pow(2,42),Uo=Math.pow(2,49),Ho=Math.pow(2,56),qo=Math.pow(2,63);pn.exports=function(r){return r<No?1:r<Mo?2:r<Fo?3:r<Ro?4:r<Io?5:r<zo?6:r<Uo?7:r<Ho?8:r<qo?9:10}});var yn=v((mu,mn)=>{mn.exports={encode:ln(),decode:dn(),encodingLength:gn()}});var _n=v((yu,bn)=>{"use strict";var wn=yn();bn.exports=r=>{if(!(r instanceof Uint8Array))throw new Error("arg needs to be a Uint8Array");let t=[];for(;r.length>0;){let e=wn.decode(r);t.push(e),r=r.slice(wn.decode.bytes)}return t}});var kn=v((wu,xn)=>{xn.exports=Ge;var vn=128,Wo=127,$o=~Wo,Vo=Math.pow(2,31);function Ge(r,t,e){if(Number.MAX_SAFE_INTEGER&&r>Number.MAX_SAFE_INTEGER)throw Ge.bytes=0,new RangeError("Could not encode varint");t=t||[],e=e||0;for(var n=e;r>=Vo;)t[e++]=r&255|vn,r/=128;for(;r&$o;)t[e++]=r&255|vn,r>>>=7;return t[e]=r|0,Ge.bytes=e-n+1,t}});var Bn=v((bu,En)=>{En.exports=je;var Go=128,Sn=127;function je(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a||i>49)throw je.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&Sn)<<i:(o&Sn)*Math.pow(2,i),i+=7}while(o>=Go);return je.bytes=s-n,e}});var Ln=v((_u,Cn)=>{var jo=Math.pow(2,7),Qo=Math.pow(2,14),Xo=Math.pow(2,21),Jo=Math.pow(2,28),Ko=Math.pow(2,35),Zo=Math.pow(2,42),Yo=Math.pow(2,49),ta=Math.pow(2,56),ea=Math.pow(2,63);Cn.exports=function(r){return r<jo?1:r<Qo?2:r<Xo?3:r<Jo?4:r<Ko?5:r<Zo?6:r<Yo?7:r<ta?8:r<ea?9:10}});var Tn=v((vu,An)=>{An.exports={encode:kn(),decode:Bn(),encodingLength:Ln()}});var Dn=v((ku,Pn)=>{var At=1e3,Tt=At*60,Ot=Tt*60,pt=Ot*24,na=pt*7,ia=pt*365.25;Pn.exports=function(r,t){t=t||{};var e=typeof r;if(e==="string"&&r.length>0)return sa(r);if(e==="number"&&isFinite(r))return t.long?aa(r):oa(r);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(r))};function sa(r){if(r=String(r),!(r.length>100)){var t=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(r);if(t){var e=parseFloat(t[1]),n=(t[2]||"ms").toLowerCase();switch(n){case"years":case"year":case"yrs":case"yr":case"y":return e*ia;case"weeks":case"week":case"w":return e*na;case"days":case"day":case"d":return e*pt;case"hours":case"hour":case"hrs":case"hr":case"h":return e*Ot;case"minutes":case"minute":case"mins":case"min":case"m":return e*Tt;case"seconds":case"second":case"secs":case"sec":case"s":return e*At;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return e;default:return}}}}function oa(r){var t=Math.abs(r);return t>=pt?Math.round(r/pt)+"d":t>=Ot?Math.round(r/Ot)+"h":t>=Tt?Math.round(r/Tt)+"m":t>=At?Math.round(r/At)+"s":r+"ms"}function aa(r){var t=Math.abs(r);return t>=pt?re(r,t,pt,"day"):t>=Ot?re(r,t,Ot,"hour"):t>=Tt?re(r,t,Tt,"minute"):t>=At?re(r,t,At,"second"):r+" ms"}function re(r,t,e,n){var i=t>=e*1.5;return Math.round(r/e)+" "+n+(i?"s":"")}});var Mn=v((Su,Nn)=>{function ca(r){e.debug=e,e.default=e,e.coerce=c,e.disable=s,e.enable=i,e.enabled=o,e.humanize=Dn(),e.destroy=u,Object.keys(r).forEach(l=>{e[l]=r[l]}),e.names=[],e.skips=[],e.formatters={};function t(l){let h=0;for(let f=0;f<l.length;f++)h=(h<<5)-h+l.charCodeAt(f),h|=0;return e.colors[Math.abs(h)%e.colors.length]}e.selectColor=t;function e(l){let h,f=null,g,d;function p(...y){if(!p.enabled)return;let S=p,B=Number(new Date),O=B-(h||B);S.diff=O,S.prev=h,S.curr=B,h=B,y[0]=e.coerce(y[0]),typeof y[0]!="string"&&y.unshift("%O");let C=0;y[0]=y[0].replace(/%([a-zA-Z%])/g,(N,P)=>{if(N==="%%")return"%";C++;let R=e.formatters[P];if(typeof R=="function"){let Y=y[C];N=R.call(S,Y),y.splice(C,1),C--}return N}),e.formatArgs.call(S,y),(S.log||e.log).apply(S,y)}return p.namespace=l,p.useColors=e.useColors(),p.color=e.selectColor(l),p.extend=n,p.destroy=e.destroy,Object.defineProperty(p,"enabled",{enumerable:!0,configurable:!1,get:()=>f!==null?f:(g!==e.namespaces&&(g=e.namespaces,d=e.enabled(l)),d),set:y=>{f=y}}),typeof e.init=="function"&&e.init(p),p}function n(l,h){let f=e(this.namespace+(typeof h>"u"?":":h)+l);return f.log=this.log,f}function i(l){e.save(l),e.namespaces=l,e.names=[],e.skips=[];let h,f=(typeof l=="string"?l:"").split(/[\s,]+/),g=f.length;for(h=0;h<g;h++)f[h]&&(l=f[h].replace(/\*/g,".*?"),l[0]==="-"?e.skips.push(new RegExp("^"+l.slice(1)+"$")):e.names.push(new RegExp("^"+l+"$")))}function s(){let l=[...e.names.map(a),...e.skips.map(a).map(h=>"-"+h)].join(",");return e.enable(""),l}function o(l){if(l[l.length-1]==="*")return!0;let h,f;for(h=0,f=e.skips.length;h<f;h++)if(e.skips[h].test(l))return!1;for(h=0,f=e.names.length;h<f;h++)if(e.names[h].test(l))return!0;return!1}function a(l){return l.toString().substring(2,l.toString().length-2).replace(/\.\*\?$/,"*")}function c(l){return l instanceof Error?l.stack||l.message:l}function u(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return e.enable(e.load()),e}Nn.exports=ca});var Fn=v((U,ne)=>{U.formatArgs=la;U.save=ha;U.load=fa;U.useColors=ua;U.storage=da();U.destroy=(()=>{let r=!1;return()=>{r||(r=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})();U.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function ua(){return typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs)?!0:typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)?!1:typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function la(r){if(r[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+r[0]+(this.useColors?"%c ":" ")+"+"+ne.exports.humanize(this.diff),!this.useColors)return;let t="color: "+this.color;r.splice(1,0,t,"color: inherit");let e=0,n=0;r[0].replace(/%[a-zA-Z%]/g,i=>{i!=="%%"&&(e++,i==="%c"&&(n=e))}),r.splice(n,0,t)}U.log=console.debug||console.log||(()=>{});function ha(r){try{r?U.storage.setItem("debug",r):U.storage.removeItem("debug")}catch{}}function fa(){let r;try{r=U.storage.getItem("debug")}catch{}return!r&&typeof process<"u"&&"env"in process&&(r=process.env.DEBUG),r}function da(){try{return localStorage}catch{}}ne.exports=Mn()(U);var{formatters:pa}=ne.exports;pa.j=function(r){try{return JSON.stringify(r)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}});var zn=v((Uu,In)=>{"use strict";In.exports=ba;function ba(r,t){for(var e=new Array(arguments.length-1),n=0,i=2,s=!0;i<arguments.length;)e[n++]=arguments[i++];return new Promise(function(a,c){e[n]=function(l){if(s)if(s=!1,l)c(l);else{for(var h=new Array(arguments.length-1),f=0;f<h.length;)h[f++]=arguments[f];a.apply(null,h)}};try{r.apply(t||null,e)}catch(u){s&&(s=!1,c(u))}})}});var Wn=v(qn=>{"use strict";var oe=qn;oe.length=function(t){var e=t.length;if(!e)return 0;for(var n=0;--e%4>1&&t.charAt(e)==="=";)++n;return Math.ceil(t.length*3)/4-n};var Pt=new Array(64),Hn=new Array(123);for(j=0;j<64;)Hn[Pt[j]=j<26?j+65:j<52?j+71:j<62?j-4:j-59|43]=j++;var j;oe.encode=function(t,e,n){for(var i=null,s=[],o=0,a=0,c;e<n;){var u=t[e++];switch(a){case 0:s[o++]=Pt[u>>2],c=(u&3)<<4,a=1;break;case 1:s[o++]=Pt[c|u>>4],c=(u&15)<<2,a=2;break;case 2:s[o++]=Pt[c|u>>6],s[o++]=Pt[u&63],a=0;break}o>8191&&((i||(i=[])).push(String.fromCharCode.apply(String,s)),o=0)}return a&&(s[o++]=Pt[c],s[o++]=61,a===1&&(s[o++]=61)),i?(o&&i.push(String.fromCharCode.apply(String,s.slice(0,o))),i.join("")):String.fromCharCode.apply(String,s.slice(0,o))};var Un="invalid encoding";oe.decode=function(t,e,n){for(var i=n,s=0,o,a=0;a<t.length;){var c=t.charCodeAt(a++);if(c===61&&s>1)break;if((c=Hn[c])===void 0)throw Error(Un);switch(s){case 0:o=c,s=1;break;case 1:e[n++]=o<<2|(c&48)>>4,o=c,s=2;break;case 2:e[n++]=(o&15)<<4|(c&60)>>2,o=c,s=3;break;case 3:e[n++]=(o&3)<<6|c,s=0;break}}if(s===1)throw Error(Un);return n-i};oe.test=function(t){return/^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(t)}});var Vn=v((qu,$n)=>{"use strict";$n.exports=ae;function ae(){this._listeners={}}ae.prototype.on=function(t,e,n){return(this._listeners[t]||(this._listeners[t]=[])).push({fn:e,ctx:n||this}),this};ae.prototype.off=function(t,e){if(t===void 0)this._listeners={};else if(e===void 0)this._listeners[t]=[];else for(var n=this._listeners[t],i=0;i<n.length;)n[i].fn===e?n.splice(i,1):++i;return this};ae.prototype.emit=function(t){var e=this._listeners[t];if(e){for(var n=[],i=1;i<arguments.length;)n.push(arguments[i++]);for(i=0;i<e.length;)e[i].fn.apply(e[i++].ctx,n)}return this}});var Zn=v((Wu,Kn)=>{"use strict";Kn.exports=Gn(Gn);function Gn(r){return typeof Float32Array<"u"?function(){var t=new Float32Array([-0]),e=new Uint8Array(t.buffer),n=e[3]===128;function i(c,u,l){t[0]=c,u[l]=e[0],u[l+1]=e[1],u[l+2]=e[2],u[l+3]=e[3]}function s(c,u,l){t[0]=c,u[l]=e[3],u[l+1]=e[2],u[l+2]=e[1],u[l+3]=e[0]}r.writeFloatLE=n?i:s,r.writeFloatBE=n?s:i;function o(c,u){return e[0]=c[u],e[1]=c[u+1],e[2]=c[u+2],e[3]=c[u+3],t[0]}function a(c,u){return e[3]=c[u],e[2]=c[u+1],e[1]=c[u+2],e[0]=c[u+3],t[0]}r.readFloatLE=n?o:a,r.readFloatBE=n?a:o}():function(){function t(n,i,s,o){var a=i<0?1:0;if(a&&(i=-i),i===0)n(1/i>0?0:2147483648,s,o);else if(isNaN(i))n(2143289344,s,o);else if(i>34028234663852886e22)n((a<<31|2139095040)>>>0,s,o);else if(i<11754943508222875e-54)n((a<<31|Math.round(i/1401298464324817e-60))>>>0,s,o);else{var c=Math.floor(Math.log(i)/Math.LN2),u=Math.round(i*Math.pow(2,-c)*8388608)&8388607;n((a<<31|c+127<<23|u)>>>0,s,o)}}r.writeFloatLE=t.bind(null,jn),r.writeFloatBE=t.bind(null,Qn);function e(n,i,s){var o=n(i,s),a=(o>>31)*2+1,c=o>>>23&255,u=o&8388607;return c===255?u?NaN:a*(1/0):c===0?a*1401298464324817e-60*u:a*Math.pow(2,c-150)*(u+8388608)}r.readFloatLE=e.bind(null,Xn),r.readFloatBE=e.bind(null,Jn)}(),typeof Float64Array<"u"?function(){var t=new Float64Array([-0]),e=new Uint8Array(t.buffer),n=e[7]===128;function i(c,u,l){t[0]=c,u[l]=e[0],u[l+1]=e[1],u[l+2]=e[2],u[l+3]=e[3],u[l+4]=e[4],u[l+5]=e[5],u[l+6]=e[6],u[l+7]=e[7]}function s(c,u,l){t[0]=c,u[l]=e[7],u[l+1]=e[6],u[l+2]=e[5],u[l+3]=e[4],u[l+4]=e[3],u[l+5]=e[2],u[l+6]=e[1],u[l+7]=e[0]}r.writeDoubleLE=n?i:s,r.writeDoubleBE=n?s:i;function o(c,u){return e[0]=c[u],e[1]=c[u+1],e[2]=c[u+2],e[3]=c[u+3],e[4]=c[u+4],e[5]=c[u+5],e[6]=c[u+6],e[7]=c[u+7],t[0]}function a(c,u){return e[7]=c[u],e[6]=c[u+1],e[5]=c[u+2],e[4]=c[u+3],e[3]=c[u+4],e[2]=c[u+5],e[1]=c[u+6],e[0]=c[u+7],t[0]}r.readDoubleLE=n?o:a,r.readDoubleBE=n?a:o}():function(){function t(n,i,s,o,a,c){var u=o<0?1:0;if(u&&(o=-o),o===0)n(0,a,c+i),n(1/o>0?0:2147483648,a,c+s);else if(isNaN(o))n(0,a,c+i),n(2146959360,a,c+s);else if(o>17976931348623157e292)n(0,a,c+i),n((u<<31|2146435072)>>>0,a,c+s);else{var l;if(o<22250738585072014e-324)l=o/5e-324,n(l>>>0,a,c+i),n((u<<31|l/4294967296)>>>0,a,c+s);else{var h=Math.floor(Math.log(o)/Math.LN2);h===1024&&(h=1023),l=o*Math.pow(2,-h),n(l*4503599627370496>>>0,a,c+i),n((u<<31|h+1023<<20|l*1048576&1048575)>>>0,a,c+s)}}}r.writeDoubleLE=t.bind(null,jn,0,4),r.writeDoubleBE=t.bind(null,Qn,4,0);function e(n,i,s,o,a){var c=n(o,a+i),u=n(o,a+s),l=(u>>31)*2+1,h=u>>>20&2047,f=4294967296*(u&1048575)+c;return h===2047?f?NaN:l*(1/0):h===0?l*5e-324*f:l*Math.pow(2,h-1075)*(f+4503599627370496)}r.readDoubleLE=e.bind(null,Xn,0,4),r.readDoubleBE=e.bind(null,Jn,4,0)}(),r}function jn(r,t,e){t[e]=r&255,t[e+1]=r>>>8&255,t[e+2]=r>>>16&255,t[e+3]=r>>>24}function Qn(r,t,e){t[e]=r>>>24,t[e+1]=r>>>16&255,t[e+2]=r>>>8&255,t[e+3]=r&255}function Xn(r,t){return(r[t]|r[t+1]<<8|r[t+2]<<16|r[t+3]<<24)>>>0}function Jn(r,t){return(r[t]<<24|r[t+1]<<16|r[t+2]<<8|r[t+3])>>>0}});var Yn=v((exports,module)=>{"use strict";module.exports=inquire;function inquire(moduleName){try{var mod=eval("quire".replace(/^/,"re"))(moduleName);if(mod&&(mod.length||Object.keys(mod).length))return mod}catch(r){}return null}});var ei=v(ti=>{"use strict";var Je=ti;Je.length=function(t){for(var e=0,n=0,i=0;i<t.length;++i)n=t.charCodeAt(i),n<128?e+=1:n<2048?e+=2:(n&64512)===55296&&(t.charCodeAt(i+1)&64512)===56320?(++i,e+=4):e+=3;return e};Je.read=function(t,e,n){var i=n-e;if(i<1)return"";for(var s=null,o=[],a=0,c;e<n;)c=t[e++],c<128?o[a++]=c:c>191&&c<224?o[a++]=(c&31)<<6|t[e++]&63:c>239&&c<365?(c=((c&7)<<18|(t[e++]&63)<<12|(t[e++]&63)<<6|t[e++]&63)-65536,o[a++]=55296+(c>>10),o[a++]=56320+(c&1023)):o[a++]=(c&15)<<12|(t[e++]&63)<<6|t[e++]&63,a>8191&&((s||(s=[])).push(String.fromCharCode.apply(String,o)),a=0);return s?(a&&s.push(String.fromCharCode.apply(String,o.slice(0,a))),s.join("")):String.fromCharCode.apply(String,o.slice(0,a))};Je.write=function(t,e,n){for(var i=n,s,o,a=0;a<t.length;++a)s=t.charCodeAt(a),s<128?e[n++]=s:s<2048?(e[n++]=s>>6|192,e[n++]=s&63|128):(s&64512)===55296&&((o=t.charCodeAt(a+1))&64512)===56320?(s=65536+((s&1023)<<10)+(o&1023),++a,e[n++]=s>>18|240,e[n++]=s>>12&63|128,e[n++]=s>>6&63|128,e[n++]=s&63|128):(e[n++]=s>>12|224,e[n++]=s>>6&63|128,e[n++]=s&63|128);return n-i}});var ni=v((Vu,ri)=>{"use strict";ri.exports=_a;function _a(r,t,e){var n=e||8192,i=n>>>1,s=null,o=n;return function(c){if(c<1||c>i)return r(c);o+c>n&&(s=r(n),o=0);var u=t.call(s,o,o+=c);return o&7&&(o=(o|7)+1),u}}});var si=v((Gu,ii)=>{"use strict";ii.exports=D;var $t=yt();function D(r,t){this.lo=r>>>0,this.hi=t>>>0}var mt=D.zero=new D(0,0);mt.toNumber=function(){return 0};mt.zzEncode=mt.zzDecode=function(){return this};mt.length=function(){return 1};var va=D.zeroHash="\0\0\0\0\0\0\0\0";D.fromNumber=function(t){if(t===0)return mt;var e=t<0;e&&(t=-t);var n=t>>>0,i=(t-n)/4294967296>>>0;return e&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new D(n,i)};D.from=function(t){if(typeof t=="number")return D.fromNumber(t);if($t.isString(t))if($t.Long)t=$t.Long.fromString(t);else return D.fromNumber(parseInt(t,10));return t.low||t.high?new D(t.low>>>0,t.high>>>0):mt};D.prototype.toNumber=function(t){if(!t&&this.hi>>>31){var e=~this.lo+1>>>0,n=~this.hi>>>0;return e||(n=n+1>>>0),-(e+n*4294967296)}return this.lo+this.hi*4294967296};D.prototype.toLong=function(t){return $t.Long?new $t.Long(this.lo|0,this.hi|0,!!t):{low:this.lo|0,high:this.hi|0,unsigned:!!t}};var at=String.prototype.charCodeAt;D.fromHash=function(t){return t===va?mt:new D((at.call(t,0)|at.call(t,1)<<8|at.call(t,2)<<16|at.call(t,3)<<24)>>>0,(at.call(t,4)|at.call(t,5)<<8|at.call(t,6)<<16|at.call(t,7)<<24)>>>0)};D.prototype.toHash=function(){return String.fromCharCode(this.lo&255,this.lo>>>8&255,this.lo>>>16&255,this.lo>>>24,this.hi&255,this.hi>>>8&255,this.hi>>>16&255,this.hi>>>24)};D.prototype.zzEncode=function(){var t=this.hi>>31;return this.hi=((this.hi<<1|this.lo>>>31)^t)>>>0,this.lo=(this.lo<<1^t)>>>0,this};D.prototype.zzDecode=function(){var t=-(this.lo&1);return this.lo=((this.lo>>>1|this.hi<<31)^t)>>>0,this.hi=(this.hi>>>1^t)>>>0,this};D.prototype.length=function(){var t=this.lo,e=(this.lo>>>28|this.hi<<4)>>>0,n=this.hi>>>24;return n===0?e===0?t<16384?t<128?1:2:t<2097152?3:4:e<16384?e<128?5:6:e<2097152?7:8:n<128?9:10}});var yt=v(Ke=>{"use strict";var m=Ke;m.asPromise=zn();m.base64=Wn();m.EventEmitter=Vn();m.float=Zn();m.inquire=Yn();m.utf8=ei();m.pool=ni();m.LongBits=si();m.isNode=!!(typeof globalThis<"u"&&globalThis&&globalThis.process&&globalThis.process.versions&&globalThis.process.versions.node);m.global=m.isNode&&globalThis||typeof window<"u"&&window||typeof self<"u"&&self||Ke;m.emptyArray=Object.freeze?Object.freeze([]):[];m.emptyObject=Object.freeze?Object.freeze({}):{};m.isInteger=Number.isInteger||function(t){return typeof t=="number"&&isFinite(t)&&Math.floor(t)===t};m.isString=function(t){return typeof t=="string"||t instanceof String};m.isObject=function(t){return t&&typeof t=="object"};m.isset=m.isSet=function(t,e){var n=t[e];return n!=null&&t.hasOwnProperty(e)?typeof n!="object"||(Array.isArray(n)?n.length:Object.keys(n).length)>0:!1};m.Buffer=function(){try{var r=m.inquire("buffer").Buffer;return r.prototype.utf8Write?r:null}catch{return null}}();m._Buffer_from=null;m._Buffer_allocUnsafe=null;m.newBuffer=function(t){return typeof t=="number"?m.Buffer?m._Buffer_allocUnsafe(t):new m.Array(t):m.Buffer?m._Buffer_from(t):typeof Uint8Array>"u"?t:new Uint8Array(t)};m.Array=typeof Uint8Array<"u"?Uint8Array:Array;m.Long=m.global.dcodeIO&&m.global.dcodeIO.Long||m.global.Long||m.inquire("long");m.key2Re=/^true|false|0|1$/;m.key32Re=/^-?(?:0|[1-9][0-9]*)$/;m.key64Re=/^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;m.longToHash=function(t){return t?m.LongBits.from(t).toHash():m.LongBits.zeroHash};m.longFromHash=function(t,e){var n=m.LongBits.fromHash(t);return m.Long?m.Long.fromBits(n.lo,n.hi,e):n.toNumber(!!e)};function oi(r,t,e){for(var n=Object.keys(t),i=0;i<n.length;++i)(r[n[i]]===void 0||!e)&&(r[n[i]]=t[n[i]]);return r}m.merge=oi;m.lcFirst=function(t){return t.charAt(0).toLowerCase()+t.substring(1)};function ai(r){function t(e,n){if(!(this instanceof t))return new t(e,n);Object.defineProperty(this,"message",{get:function(){return e}}),Error.captureStackTrace?Error.captureStackTrace(this,t):Object.defineProperty(this,"stack",{value:new Error().stack||""}),n&&oi(this,n)}return t.prototype=Object.create(Error.prototype,{constructor:{value:t,writable:!0,enumerable:!1,configurable:!0},name:{get:function(){return r},set:void 0,enumerable:!1,configurable:!0},toString:{value:function(){return this.name+": "+this.message},writable:!0,enumerable:!1,configurable:!0}}),t}m.newError=ai;m.ProtocolError=ai("ProtocolError");m.oneOfGetter=function(t){for(var e={},n=0;n<t.length;++n)e[t[n]]=1;return function(){for(var i=Object.keys(this),s=i.length-1;s>-1;--s)if(e[i[s]]===1&&this[i[s]]!==void 0&&this[i[s]]!==null)return i[s]}};m.oneOfSetter=function(t){return function(e){for(var n=0;n<t.length;++n)t[n]!==e&&delete this[t[n]]}};m.toJSONOptions={longs:String,enums:String,bytes:String,json:!0};m._configure=function(){var r=m.Buffer;if(!r){m._Buffer_from=m._Buffer_allocUnsafe=null;return}m._Buffer_from=r.from!==Uint8Array.from&&r.from||function(e,n){return new r(e,n)},m._Buffer_allocUnsafe=r.allocUnsafe||function(e){return new r(e)}}});var tr=v((Qu,fi)=>{"use strict";fi.exports=T;var K=yt(),Ye,li=K.LongBits,xa=K.utf8;function Q(r,t){return RangeError("index out of range: "+r.pos+" + "+(t||1)+" > "+r.len)}function T(r){this.buf=r,this.pos=0,this.len=r.length}var ci=typeof Uint8Array<"u"?function(t){if(t instanceof Uint8Array||Array.isArray(t))return new T(t);throw Error("illegal buffer")}:function(t){if(Array.isArray(t))return new T(t);throw Error("illegal buffer")},hi=function(){return K.Buffer?function(e){return(T.create=function(i){return K.Buffer.isBuffer(i)?new Ye(i):ci(i)})(e)}:ci};T.create=hi();T.prototype._slice=K.Array.prototype.subarray||K.Array.prototype.slice;T.prototype.uint32=function(){var t=4294967295;return function(){if(t=(this.buf[this.pos]&127)>>>0,this.buf[this.pos++]<128||(t=(t|(this.buf[this.pos]&127)<<7)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<14)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&127)<<21)>>>0,this.buf[this.pos++]<128)||(t=(t|(this.buf[this.pos]&15)<<28)>>>0,this.buf[this.pos++]<128))return t;if((this.pos+=5)>this.len)throw this.pos=this.len,Q(this,10);return t}}();T.prototype.int32=function(){return this.uint32()|0};T.prototype.sint32=function(){var t=this.uint32();return t>>>1^-(t&1)|0};function Ze(){var r=new li(0,0),t=0;if(this.len-this.pos>4){for(;t<4;++t)if(r.lo=(r.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return r;if(r.lo=(r.lo|(this.buf[this.pos]&127)<<28)>>>0,r.hi=(r.hi|(this.buf[this.pos]&127)>>4)>>>0,this.buf[this.pos++]<128)return r;t=0}else{for(;t<3;++t){if(this.pos>=this.len)throw Q(this);if(r.lo=(r.lo|(this.buf[this.pos]&127)<<t*7)>>>0,this.buf[this.pos++]<128)return r}return r.lo=(r.lo|(this.buf[this.pos++]&127)<<t*7)>>>0,r}if(this.len-this.pos>4){for(;t<5;++t)if(r.hi=(r.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return r}else for(;t<5;++t){if(this.pos>=this.len)throw Q(this);if(r.hi=(r.hi|(this.buf[this.pos]&127)<<t*7+3)>>>0,this.buf[this.pos++]<128)return r}throw Error("invalid varint encoding")}T.prototype.bool=function(){return this.uint32()!==0};function ce(r,t){return(r[t-4]|r[t-3]<<8|r[t-2]<<16|r[t-1]<<24)>>>0}T.prototype.fixed32=function(){if(this.pos+4>this.len)throw Q(this,4);return ce(this.buf,this.pos+=4)};T.prototype.sfixed32=function(){if(this.pos+4>this.len)throw Q(this,4);return ce(this.buf,this.pos+=4)|0};function ui(){if(this.pos+8>this.len)throw Q(this,8);return new li(ce(this.buf,this.pos+=4),ce(this.buf,this.pos+=4))}T.prototype.float=function(){if(this.pos+4>this.len)throw Q(this,4);var t=K.float.readFloatLE(this.buf,this.pos);return this.pos+=4,t};T.prototype.double=function(){if(this.pos+8>this.len)throw Q(this,4);var t=K.float.readDoubleLE(this.buf,this.pos);return this.pos+=8,t};T.prototype.bytes=function(){var t=this.uint32(),e=this.pos,n=this.pos+t;if(n>this.len)throw Q(this,t);return this.pos+=t,Array.isArray(this.buf)?this.buf.slice(e,n):e===n?new this.buf.constructor(0):this._slice.call(this.buf,e,n)};T.prototype.string=function(){var t=this.bytes();return xa.read(t,0,t.length)};T.prototype.skip=function(t){if(typeof t=="number"){if(this.pos+t>this.len)throw Q(this,t);this.pos+=t}else do if(this.pos>=this.len)throw Q(this);while(this.buf[this.pos++]&128);return this};T.prototype.skipType=function(r){switch(r){case 0:this.skip();break;case 1:this.skip(8);break;case 2:this.skip(this.uint32());break;case 3:for(;(r=this.uint32()&7)!==4;)this.skipType(r);break;case 5:this.skip(4);break;default:throw Error("invalid wire type "+r+" at offset "+this.pos)}return this};T._configure=function(r){Ye=r,T.create=hi(),Ye._configure();var t=K.Long?"toLong":"toNumber";K.merge(T.prototype,{int64:function(){return Ze.call(this)[t](!1)},uint64:function(){return Ze.call(this)[t](!0)},sint64:function(){return Ze.call(this).zzDecode()[t](!1)},fixed64:function(){return ui.call(this)[t](!0)},sfixed64:function(){return ui.call(this)[t](!1)}})}});var mi=v((Xu,gi)=>{"use strict";gi.exports=wt;var pi=tr();(wt.prototype=Object.create(pi.prototype)).constructor=wt;var di=yt();function wt(r){pi.call(this,r)}wt._configure=function(){di.Buffer&&(wt.prototype._slice=di.Buffer.prototype.slice)};wt.prototype.string=function(){var t=this.uint32();return this.buf.utf8Slice?this.buf.utf8Slice(this.pos,this.pos=Math.min(this.pos+t,this.len)):this.buf.toString("utf-8",this.pos,this.pos=Math.min(this.pos+t,this.len))};wt._configure()});var ar=v((Ju,_i)=>{"use strict";_i.exports=_;var $=yt(),er,ue=$.LongBits,yi=$.base64,wi=$.utf8;function Vt(r,t,e){this.fn=r,this.len=t,this.next=void 0,this.val=e}function nr(){}function ka(r){this.head=r.head,this.tail=r.tail,this.len=r.len,this.next=r.states}function _(){this.len=0,this.head=new Vt(nr,0,0),this.tail=this.head,this.states=null}var bi=function(){return $.Buffer?function(){return(_.create=function(){return new er})()}:function(){return new _}};_.create=bi();_.alloc=function(t){return new $.Array(t)};$.Array!==Array&&(_.alloc=$.pool(_.alloc,$.Array.prototype.subarray));_.prototype._push=function(t,e,n){return this.tail=this.tail.next=new Vt(t,e,n),this.len+=e,this};function ir(r,t,e){t[e]=r&255}function Sa(r,t,e){for(;r>127;)t[e++]=r&127|128,r>>>=7;t[e]=r}function sr(r,t){this.len=r,this.next=void 0,this.val=t}sr.prototype=Object.create(Vt.prototype);sr.prototype.fn=Sa;_.prototype.uint32=function(t){return this.len+=(this.tail=this.tail.next=new sr((t=t>>>0)<128?1:t<16384?2:t<2097152?3:t<268435456?4:5,t)).len,this};_.prototype.int32=function(t){return t<0?this._push(or,10,ue.fromNumber(t)):this.uint32(t)};_.prototype.sint32=function(t){return this.uint32((t<<1^t>>31)>>>0)};function or(r,t,e){for(;r.hi;)t[e++]=r.lo&127|128,r.lo=(r.lo>>>7|r.hi<<25)>>>0,r.hi>>>=7;for(;r.lo>127;)t[e++]=r.lo&127|128,r.lo=r.lo>>>7;t[e++]=r.lo}_.prototype.uint64=function(t){var e=ue.from(t);return this._push(or,e.length(),e)};_.prototype.int64=_.prototype.uint64;_.prototype.sint64=function(t){var e=ue.from(t).zzEncode();return this._push(or,e.length(),e)};_.prototype.bool=function(t){return this._push(ir,1,t?1:0)};function rr(r,t,e){t[e]=r&255,t[e+1]=r>>>8&255,t[e+2]=r>>>16&255,t[e+3]=r>>>24}_.prototype.fixed32=function(t){return this._push(rr,4,t>>>0)};_.prototype.sfixed32=_.prototype.fixed32;_.prototype.fixed64=function(t){var e=ue.from(t);return this._push(rr,4,e.lo)._push(rr,4,e.hi)};_.prototype.sfixed64=_.prototype.fixed64;_.prototype.float=function(t){return this._push($.float.writeFloatLE,4,t)};_.prototype.double=function(t){return this._push($.float.writeDoubleLE,8,t)};var Ea=$.Array.prototype.set?function(t,e,n){e.set(t,n)}:function(t,e,n){for(var i=0;i<t.length;++i)e[n+i]=t[i]};_.prototype.bytes=function(t){var e=t.length>>>0;if(!e)return this._push(ir,1,0);if($.isString(t)){var n=_.alloc(e=yi.length(t));yi.decode(t,n,0),t=n}return this.uint32(e)._push(Ea,e,t)};_.prototype.string=function(t){var e=wi.length(t);return e?this.uint32(e)._push(wi.write,e,t):this._push(ir,1,0)};_.prototype.fork=function(){return this.states=new ka(this),this.head=this.tail=new Vt(nr,0,0),this.len=0,this};_.prototype.reset=function(){return this.states?(this.head=this.states.head,this.tail=this.states.tail,this.len=this.states.len,this.states=this.states.next):(this.head=this.tail=new Vt(nr,0,0),this.len=0),this};_.prototype.ldelim=function(){var t=this.head,e=this.tail,n=this.len;return this.reset().uint32(n),n&&(this.tail.next=t.next,this.tail=e,this.len+=n),this};_.prototype.finish=function(){for(var t=this.head.next,e=this.constructor.alloc(this.len),n=0;t;)t.fn(t.val,e,n),n+=t.len,t=t.next;return e};_._configure=function(r){er=r,_.create=bi(),er._configure()}});var ki=v((Ku,xi)=>{"use strict";xi.exports=Z;var vi=ar();(Z.prototype=Object.create(vi.prototype)).constructor=Z;var ct=yt();function Z(){vi.call(this)}Z._configure=function(){Z.alloc=ct._Buffer_allocUnsafe,Z.writeBytesBuffer=ct.Buffer&&ct.Buffer.prototype instanceof Uint8Array&&ct.Buffer.prototype.set.name==="set"?function(t,e,n){e.set(t,n)}:function(t,e,n){if(t.copy)t.copy(e,n,0,t.length);else for(var i=0;i<t.length;)e[n++]=t[i++]}};Z.prototype.bytes=function(t){ct.isString(t)&&(t=ct._Buffer_from(t,"base64"));var e=t.length>>>0;return this.uint32(e),e&&this._push(Z.writeBytesBuffer,e,t),this};function Ba(r,t,e){r.length<40?ct.utf8.write(r,t,e):t.utf8Write?t.utf8Write(r,e):t.write(r,e)}Z.prototype.string=function(t){var e=ct.Buffer.byteLength(t);return this.uint32(e),e&&this._push(Ba,e,t),this};Z._configure()});var zi=v((dh,Ii)=>{"use strict";function Ri(r,t){for(let e in t)Object.defineProperty(r,e,{value:t[e],enumerable:!0,configurable:!0});return r}function qa(r,t,e){if(!r||typeof r=="string")throw new TypeError("Please pass an Error to err-code");e||(e={}),typeof t=="object"&&(e=t,t=""),t&&(e.code=t);try{return Ri(r,e)}catch{e.message=r.message,e.stack=r.stack;let i=function(){};return i.prototype=Object.create(Object.getPrototypeOf(r)),Ri(new i,e)}}Ii.exports=qa});var Gi=v((Oh,Vi)=>{"use strict";Vi.exports=function(){return Date.now()}});var Qi=v((Ph,ji)=>{"use strict";var ve=Gi(),_r=class{constructor(t,e,n){let i=this;this._started=ve(),this._rescheduled=0,this._scheduled=e,this._args=n,this._triggered=!1,this._timerWrapper=()=>{i._rescheduled>0?(i._scheduled=i._rescheduled-(ve()-i._started),i._schedule(i._scheduled)):(i._triggered=!0,t.apply(null,i._args))},this._timer=setTimeout(this._timerWrapper,e)}reschedule(t){t||(t=this._scheduled);let e=ve();e+t-(this._started+this._scheduled)<0?(clearTimeout(this._timer),this._schedule(t)):this._triggered?this._schedule(t):(this._started=e,this._rescheduled=t)}_schedule(t){this._triggered=!1,this._started=ve(),this._rescheduled=0,this._scheduled=t,this._timer=setTimeout(this._timerWrapper,t)}clear(){clearTimeout(this._timer)}};function Ka(){if(typeof arguments[0]!="function")throw new Error("callback needed");if(typeof arguments[1]!="number")throw new Error("timeout needed");let r;if(arguments.length>0){r=new Array(arguments.length-2);for(var t=0;t<r.length;t++)r[t]=arguments[t+2]}return new _r(arguments[0],arguments[1],r)}ji.exports=Ka});var Ki=v((Dh,Ji)=>{"use strict";var{AbortController:Za}=globalThis,Xi=Qi(),Qt=class extends Za{constructor(t){super(),this._ms=t,this._timer=Xi(()=>this.abort(),t),Object.setPrototypeOf(this,Qt.prototype)}abort(){return this._timer.clear(),super.abort()}clear(){this._timer.clear()}reset(){this._timer.clear(),this._timer=Xi(()=>this.abort(),this._ms)}};Ji.exports={TimeoutController:Qt}});var Te=v((wf,Er)=>{"use strict";var Rt=typeof Reflect=="object"?Reflect:null,os=Rt&&typeof Rt.apply=="function"?Rt.apply:function(t,e,n){return Function.prototype.apply.call(t,e,n)},Le;Rt&&typeof Rt.ownKeys=="function"?Le=Rt.ownKeys:Object.getOwnPropertySymbols?Le=function(t){return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t))}:Le=function(t){return Object.getOwnPropertyNames(t)};function dc(r){console&&console.warn&&console.warn(r)}var cs=Number.isNaN||function(t){return t!==t};function k(){k.init.call(this)}Er.exports=k;Er.exports.once=yc;k.EventEmitter=k;k.prototype._events=void 0;k.prototype._eventsCount=0;k.prototype._maxListeners=void 0;var as=10;function Ae(r){if(typeof r!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof r)}Object.defineProperty(k,"defaultMaxListeners",{enumerable:!0,get:function(){return as},set:function(r){if(typeof r!="number"||r<0||cs(r))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+r+".");as=r}});k.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};k.prototype.setMaxListeners=function(t){if(typeof t!="number"||t<0||cs(t))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+t+".");return this._maxListeners=t,this};function us(r){return r._maxListeners===void 0?k.defaultMaxListeners:r._maxListeners}k.prototype.getMaxListeners=function(){return us(this)};k.prototype.emit=function(t){for(var e=[],n=1;n<arguments.length;n++)e.push(arguments[n]);var i=t==="error",s=this._events;if(s!==void 0)i=i&&s.error===void 0;else if(!i)return!1;if(i){var o;if(e.length>0&&(o=e[0]),o instanceof Error)throw o;var a=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw a.context=o,a}var c=s[t];if(c===void 0)return!1;if(typeof c=="function")os(c,this,e);else for(var u=c.length,l=ps(c,u),n=0;n<u;++n)os(l[n],this,e);return!0};function ls(r,t,e,n){var i,s,o;if(Ae(e),s=r._events,s===void 0?(s=r._events=Object.create(null),r._eventsCount=0):(s.newListener!==void 0&&(r.emit("newListener",t,e.listener?e.listener:e),s=r._events),o=s[t]),o===void 0)o=s[t]=e,++r._eventsCount;else if(typeof o=="function"?o=s[t]=n?[e,o]:[o,e]:n?o.unshift(e):o.push(e),i=us(r),i>0&&o.length>i&&!o.warned){o.warned=!0;var a=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");a.name="MaxListenersExceededWarning",a.emitter=r,a.type=t,a.count=o.length,dc(a)}return r}k.prototype.addListener=function(t,e){return ls(this,t,e,!1)};k.prototype.on=k.prototype.addListener;k.prototype.prependListener=function(t,e){return ls(this,t,e,!0)};function pc(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function hs(r,t,e){var n={fired:!1,wrapFn:void 0,target:r,type:t,listener:e},i=pc.bind(n);return i.listener=e,n.wrapFn=i,i}k.prototype.once=function(t,e){return Ae(e),this.on(t,hs(this,t,e)),this};k.prototype.prependOnceListener=function(t,e){return Ae(e),this.prependListener(t,hs(this,t,e)),this};k.prototype.removeListener=function(t,e){var n,i,s,o,a;if(Ae(e),i=this._events,i===void 0)return this;if(n=i[t],n===void 0)return this;if(n===e||n.listener===e)--this._eventsCount===0?this._events=Object.create(null):(delete i[t],i.removeListener&&this.emit("removeListener",t,n.listener||e));else if(typeof n!="function"){for(s=-1,o=n.length-1;o>=0;o--)if(n[o]===e||n[o].listener===e){a=n[o].listener,s=o;break}if(s<0)return this;s===0?n.shift():gc(n,s),n.length===1&&(i[t]=n[0]),i.removeListener!==void 0&&this.emit("removeListener",t,a||e)}return this};k.prototype.off=k.prototype.removeListener;k.prototype.removeAllListeners=function(t){var e,n,i;if(n=this._events,n===void 0)return this;if(n.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):n[t]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete n[t]),this;if(arguments.length===0){var s=Object.keys(n),o;for(i=0;i<s.length;++i)o=s[i],o!=="removeListener"&&this.removeAllListeners(o);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(e=n[t],typeof e=="function")this.removeListener(t,e);else if(e!==void 0)for(i=e.length-1;i>=0;i--)this.removeListener(t,e[i]);return this};function fs(r,t,e){var n=r._events;if(n===void 0)return[];var i=n[t];return i===void 0?[]:typeof i=="function"?e?[i.listener||i]:[i]:e?mc(i):ps(i,i.length)}k.prototype.listeners=function(t){return fs(this,t,!0)};k.prototype.rawListeners=function(t){return fs(this,t,!1)};k.listenerCount=function(r,t){return typeof r.listenerCount=="function"?r.listenerCount(t):ds.call(r,t)};k.prototype.listenerCount=ds;function ds(r){var t=this._events;if(t!==void 0){var e=t[r];if(typeof e=="function")return 1;if(e!==void 0)return e.length}return 0}k.prototype.eventNames=function(){return this._eventsCount>0?Le(this._events):[]};function ps(r,t){for(var e=new Array(t),n=0;n<t;++n)e[n]=r[n];return e}function gc(r,t){for(;t+1<r.length;t++)r[t]=r[t+1];r.pop()}function mc(r){for(var t=new Array(r.length),e=0;e<t.length;++e)t[e]=r[e].listener||r[e];return t}function yc(r,t){return new Promise(function(e,n){function i(o){r.removeListener(t,s),n(o)}function s(){typeof r.removeListener=="function"&&r.removeListener("error",i),e([].slice.call(arguments))}gs(r,t,s,{once:!0}),t!=="error"&&wc(r,i,{once:!0})})}function wc(r,t,e){typeof r.on=="function"&&gs(r,"error",t,e)}function gs(r,t,e,n){if(typeof r.on=="function")n.once?r.once(t,e):r.on(t,e);else if(typeof r.addEventListener=="function")r.addEventListener(t,function i(s){n.once&&r.removeEventListener(t,i),e(s)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof r)}});var Cs=v((Es,Bs)=>{"use strict";var Ic=Math.exp;Es=Bs.exports=function(t){if(typeof t!="number")throw new Error("must provide a timespan to the moving average constructor");if(t<=0)throw new Error("must provide a timespan > 0 to the moving average constructor");let e,n=0,i=0,s=0,o,a={};function c(u,l){return 1-Ic(-(u-l)/t)}return a.push=function(l,h){if(o){let f=c(l,o),g=h-e,d=f*g;e=f*h+(1-f)*e,n=(1-f)*(n+g*d),i=Math.sqrt(n),s=e+f*g}else e=h;o=l},a.movingAverage=function(){return e},a.variance=function(){return n},a.deviation=function(){return i},a.forecast=function(){return s},a}});var Ps=v((Jf,Ir)=>{function Os(r){let t=new globalThis.AbortController;function e(){t.abort();for(let n of r)!n||!n.removeEventListener||n.removeEventListener("abort",e)}for(let n of r)if(!(!n||!n.addEventListener)){if(n.aborted){e();break}n.addEventListener("abort",e)}return t.signal}Ir.exports=Os;Ir.exports.anySignal=Os});var Qc={};z(Qc,{createBitswap:()=>Gc,createBitswapWithHTTP:()=>jc});var Vs=Gr,$r=128,Gs=127,js=~Gs,Qs=Math.pow(2,31);function Gr(r,t,e){t=t||[],e=e||0;for(var n=e;r>=Qs;)t[e++]=r&255|$r,r/=128;for(;r&js;)t[e++]=r&255|$r,r>>>=7;return t[e]=r|0,Gr.bytes=e-n+1,t}var Xs=Ne,Js=128,Vr=127;function Ne(r,n){var e=0,n=n||0,i=0,s=n,o,a=r.length;do{if(s>=a)throw Ne.bytes=0,new RangeError("Could not decode varint");o=r[s++],e+=i<28?(o&Vr)<<i:(o&Vr)*Math.pow(2,i),i+=7}while(o>=Js);return Ne.bytes=s-n,e}var Ks=Math.pow(2,7),Zs=Math.pow(2,14),Ys=Math.pow(2,21),to=Math.pow(2,28),eo=Math.pow(2,35),ro=Math.pow(2,42),no=Math.pow(2,49),io=Math.pow(2,56),so=Math.pow(2,63),oo=function(r){return r<Ks?1:r<Zs?2:r<Ys?3:r<to?4:r<eo?5:r<ro?6:r<no?7:r<io?8:r<so?9:10},ao={encode:Vs,decode:Xs,encodingLength:oo},co=ao,It=co;var zt=(r,t=0)=>[It.decode(r,t),It.decode.bytes],Et=(r,t,e=0)=>(It.encode(r,t,e),t),Bt=r=>It.encodingLength(r);var Yc=new Uint8Array(0);var jr=(r,t)=>{if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let e=0;e<r.byteLength;e++)if(r[e]!==t[e])return!1;return!0},et=r=>{if(r instanceof Uint8Array&&r.constructor.name==="Uint8Array")return r;if(r instanceof ArrayBuffer)return new Uint8Array(r);if(ArrayBuffer.isView(r))return new Uint8Array(r.buffer,r.byteOffset,r.byteLength);throw new Error("Unknown type, must be binary type")};var Qr=r=>new TextEncoder().encode(r),Xr=r=>new TextDecoder().decode(r);var dt=(r,t)=>{let e=t.byteLength,n=Bt(r),i=n+Bt(e),s=new Uint8Array(i+e);return Et(r,s,0),Et(e,s,n),s.set(t,i),new Ct(r,e,t,s)},Kr=r=>{let t=et(r),[e,n]=zt(t),[i,s]=zt(t.subarray(n)),o=t.subarray(n+s);if(o.byteLength!==i)throw new Error("Incorrect length");return new Ct(e,i,o,t)},Zr=(r,t)=>{if(r===t)return!0;{let e=t;return r.code===e.code&&r.size===e.size&&e.bytes instanceof Uint8Array&&jr(r.bytes,e.bytes)}},Ct=class{constructor(t,e,n,i){this.code=t,this.size=e,this.digest=n,this.bytes=i}};var ze={};z(ze,{base58btc:()=>w,base58flickr:()=>go});function uo(r,t){if(r.length>=255)throw new TypeError("Alphabet too long");for(var e=new Uint8Array(256),n=0;n<e.length;n++)e[n]=255;for(var i=0;i<r.length;i++){var s=r.charAt(i),o=s.charCodeAt(0);if(e[o]!==255)throw new TypeError(s+" is ambiguous");e[o]=i}var a=r.length,c=r.charAt(0),u=Math.log(a)/Math.log(256),l=Math.log(256)/Math.log(a);function h(d){if(d instanceof Uint8Array||(ArrayBuffer.isView(d)?d=new Uint8Array(d.buffer,d.byteOffset,d.byteLength):Array.isArray(d)&&(d=Uint8Array.from(d))),!(d instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(d.length===0)return"";for(var p=0,y=0,S=0,B=d.length;S!==B&&d[S]===0;)S++,p++;for(var O=(B-S)*l+1>>>0,C=new Uint8Array(O);S!==B;){for(var E=d[S],N=0,P=O-1;(E!==0||N<y)&&P!==-1;P--,N++)E+=256*C[P]>>>0,C[P]=E%a>>>0,E=E/a>>>0;if(E!==0)throw new Error("Non-zero carry");y=N,S++}for(var R=O-y;R!==O&&C[R]===0;)R++;for(var Y=c.repeat(p);R<O;++R)Y+=r.charAt(C[R]);return Y}function f(d){if(typeof d!="string")throw new TypeError("Expected String");if(d.length===0)return new Uint8Array;var p=0;if(d[p]!==" "){for(var y=0,S=0;d[p]===c;)y++,p++;for(var B=(d.length-p)*u+1>>>0,O=new Uint8Array(B);d[p];){var C=e[d.charCodeAt(p)];if(C===255)return;for(var E=0,N=B-1;(C!==0||E<S)&&N!==-1;N--,E++)C+=a*O[N]>>>0,O[N]=C%256>>>0,C=C/256>>>0;if(C!==0)throw new Error("Non-zero carry");S=E,p++}if(d[p]!==" "){for(var P=B-S;P!==B&&O[P]===0;)P++;for(var R=new Uint8Array(y+(B-P)),Y=y;P!==B;)R[Y++]=O[P++];return R}}}function g(d){var p=f(d);if(p)return p;throw new Error(`Non-${t} character`)}return{encode:h,decodeUnsafe:f,decode:g}}var lo=uo,ho=lo,Yr=ho;var Me=class{constructor(t,e,n){this.name=t,this.prefix=e,this.baseEncode=n}encode(t){if(t instanceof Uint8Array)return`${this.prefix}${this.baseEncode(t)}`;throw Error("Unknown type, must be binary type")}},Fe=class{constructor(t,e,n){if(this.name=t,this.prefix=e,e.codePointAt(0)===void 0)throw new Error("Invalid prefix character");this.prefixCodePoint=e.codePointAt(0),this.baseDecode=n}decode(t){if(typeof t=="string"){if(t.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(t)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(t.slice(this.prefix.length))}else throw Error("Can only multibase decode strings")}or(t){return tn(this,t)}},Re=class{constructor(t){this.decoders=t}or(t){return tn(this,t)}decode(t){let e=t[0],n=this.decoders[e];if(n)return n.decode(t);throw RangeError(`Unable to decode multibase string ${JSON.stringify(t)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}},tn=(r,t)=>new Re({...r.decoders||{[r.prefix]:r},...t.decoders||{[t.prefix]:t}}),Ie=class{constructor(t,e,n,i){this.name=t,this.prefix=e,this.baseEncode=n,this.baseDecode=i,this.encoder=new Me(t,e,n),this.decoder=new Fe(t,e,i)}encode(t){return this.encoder.encode(t)}decode(t){return this.decoder.decode(t)}},Lt=({name:r,prefix:t,encode:e,decode:n})=>new Ie(r,t,e,n),it=({prefix:r,name:t,alphabet:e})=>{let{encode:n,decode:i}=Yr(e,t);return Lt({prefix:r,name:t,encode:n,decode:s=>et(i(s))})},fo=(r,t,e,n)=>{let i={};for(let l=0;l<t.length;++l)i[t[l]]=l;let s=r.length;for(;r[s-1]==="=";)--s;let o=new Uint8Array(s*e/8|0),a=0,c=0,u=0;for(let l=0;l<s;++l){let h=i[r[l]];if(h===void 0)throw new SyntaxError(`Non-${n} character`);c=c<<e|h,a+=e,a>=8&&(a-=8,o[u++]=255&c>>a)}if(a>=e||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return o},po=(r,t,e)=>{let n=t[t.length-1]==="=",i=(1<<e)-1,s="",o=0,a=0;for(let c=0;c<r.length;++c)for(a=a<<8|r[c],o+=8;o>e;)o-=e,s+=t[i&a>>o];if(o&&(s+=t[i&a<<e-o]),n)for(;s.length*e&7;)s+="=";return s},A=({name:r,prefix:t,bitsPerChar:e,alphabet:n})=>Lt({prefix:t,name:r,encode(i){return po(i,n,e)},decode(i){return fo(i,n,e,r)}});var w=it({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),go=it({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"});var Ue={};z(Ue,{base32:()=>st,base32hex:()=>bo,base32hexpad:()=>vo,base32hexpadupper:()=>xo,base32hexupper:()=>_o,base32pad:()=>yo,base32padupper:()=>wo,base32upper:()=>mo,base32z:()=>ko});var st=A({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),mo=A({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),yo=A({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),wo=A({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),bo=A({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),_o=A({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),vo=A({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),xo=A({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),ko=A({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5});var en=(r,t)=>{let{bytes:e,version:n}=r;switch(n){case 0:return Eo(e,He(r),t||w.encoder);default:return Bo(e,He(r),t||st.encoder)}};var rn=new WeakMap,He=r=>{let t=rn.get(r);if(t==null){let e=new Map;return rn.set(r,e),e}return t},b=class{constructor(t,e,n,i){this.code=e,this.version=t,this.multihash=n,this.bytes=i,this["/"]=i}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{let{code:t,multihash:e}=this;if(t!==Ht)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(e.code!==Co)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return b.createV0(e)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{let{code:t,digest:e}=this.multihash,n=dt(t,e);return b.createV1(this.code,n)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(t){return b.equals(this,t)}static equals(t,e){let n=e;return n&&t.code===n.code&&t.version===n.version&&Zr(t.multihash,n.multihash)}toString(t){return en(this,t)}toJSON(){return{"/":en(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(t){if(t==null)return null;let e=t;if(e instanceof b)return e;if(e["/"]!=null&&e["/"]===e.bytes||e.asCID===e){let{version:n,code:i,multihash:s,bytes:o}=e;return new b(n,i,s,o||nn(n,i,s.bytes))}else if(e[Lo]===!0){let{version:n,multihash:i,code:s}=e,o=Kr(i);return b.create(n,s,o)}else return null}static create(t,e,n){if(typeof e!="number")throw new Error("String codecs are no longer supported");if(!(n.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(t){case 0:{if(e!==Ht)throw new Error(`Version 0 CID must use dag-pb (code: ${Ht}) block encoding`);return new b(t,e,n,n.bytes)}case 1:{let i=nn(t,e,n.bytes);return new b(t,e,n,i)}default:throw new Error("Invalid version")}}static createV0(t){return b.create(0,Ht,t)}static createV1(t,e){return b.create(1,t,e)}static decode(t){let[e,n]=b.decodeFirst(t);if(n.length)throw new Error("Incorrect length");return e}static decodeFirst(t){let e=b.inspectBytes(t),n=e.size-e.multihashSize,i=et(t.subarray(n,n+e.multihashSize));if(i.byteLength!==e.multihashSize)throw new Error("Incorrect length");let s=i.subarray(e.multihashSize-e.digestSize),o=new Ct(e.multihashCode,e.digestSize,s,i);return[e.version===0?b.createV0(o):b.createV1(e.codec,o),t.subarray(e.size)]}static inspectBytes(t){let e=0,n=()=>{let[h,f]=zt(t.subarray(e));return e+=f,h},i=n(),s=Ht;if(i===18?(i=0,e=0):s=n(),i!==0&&i!==1)throw new RangeError(`Invalid CID version ${i}`);let o=e,a=n(),c=n(),u=e+c,l=u-o;return{version:i,codec:s,multihashCode:a,digestSize:c,multihashSize:l,size:u}}static parse(t,e){let[n,i]=So(t,e),s=b.decode(i);if(s.version===0&&t[0]!=="Q")throw Error("Version 0 CID string must not include multibase prefix");return He(s).set(n,t),s}},So=(r,t)=>{switch(r[0]){case"Q":{let e=t||w;return[w.prefix,e.decode(`${w.prefix}${r}`)]}case w.prefix:{let e=t||w;return[w.prefix,e.decode(r)]}case st.prefix:{let e=t||st;return[st.prefix,e.decode(r)]}default:{if(t==null)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[r[0],t.decode(r)]}}},Eo=(r,t,e)=>{let{prefix:n}=e;if(n!==w.prefix)throw Error(`Cannot string encode V0 in ${e.name} encoding`);let i=t.get(n);if(i==null){let s=e.encode(r).slice(1);return t.set(n,s),s}else return i},Bo=(r,t,e)=>{let{prefix:n}=e,i=t.get(n);if(i==null){let s=e.encode(r);return t.set(n,s),s}else return i},Ht=112,Co=18,nn=(r,t,e)=>{let n=Bt(r),i=n+Bt(t),s=new Uint8Array(i+e.byteLength);return Et(r,s,0),Et(t,s,n),s.set(e,i),s},Lo=Symbol.for("@ipld/js-cid/CID");var $e={};z($e,{sha256:()=>qt,sha512:()=>Ao});var We=({name:r,code:t,encode:e})=>new qe(r,t,e),qe=class{constructor(t,e,n){this.name=t,this.code=e,this.encode=n}digest(t){if(t instanceof Uint8Array){let e=this.encode(t);return e instanceof Uint8Array?dt(this.code,e):e.then(n=>dt(this.code,n))}else throw Error("Unknown type, must be binary type")}};var on=r=>async t=>new Uint8Array(await crypto.subtle.digest(r,t)),qt=We({name:"sha2-256",code:18,encode:on("SHA-256")}),Ao=We({name:"sha2-512",code:19,encode:on("SHA-512")});var Li=F(_n(),1);var Wt=F(Tn(),1);function ra(r){let t=new Uint8Array(r.reduce((n,i)=>n+Wt.default.encodingLength(i),0)),e=0;for(let n of r)t=Wt.encode(n,t,e),e+=Wt.default.encodingLength(n);return t}var On=ra;var q=F(Fn(),1);var Xe={};z(Xe,{base64:()=>Qe,base64pad:()=>ga,base64url:()=>ma,base64urlpad:()=>ya});var Qe=A({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),ga=A({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),ma=A({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),ya=A({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6});q.default.formatters.b=r=>r==null?"undefined":w.baseEncode(r);q.default.formatters.t=r=>r==null?"undefined":st.baseEncode(r);q.default.formatters.m=r=>r==null?"undefined":Qe.baseEncode(r);q.default.formatters.p=r=>r==null?"undefined":r.toString();q.default.formatters.c=r=>r==null?"undefined":r.toString();q.default.formatters.k=r=>r==null?"undefined":r.toString();function wa(r){let t=()=>{};return t.enabled=!1,t.color="",t.diff=0,t.log=()=>{},t.namespace=r,t.destroy=()=>!0,t.extend=()=>t,t}function Rn(r){let t=wa(`${r}:trace`);return q.default.enabled(`${r}:trace`)&&q.default.names.map(e=>e.toString()).find(e=>e.includes(":trace"))!=null&&(t=(0,q.default)(`${r}:trace`)),Object.assign((0,q.default)(r),{error:(0,q.default)(`${r}:error`),trace:t})}function ie(r,t){if(r===t)return!0;if(r.byteLength!==t.byteLength)return!1;for(let e=0;e<r.byteLength;e++)if(r[e]!==t[e])return!1;return!0}var gt=class{constructor(t,e,n){this._refCounter=1,this.cid=t,this.priority=e??1,this.wantType=n}inc(){this._refCounter+=1}dec(){this._refCounter=Math.max(0,this._refCounter-1)}hasRefs(){return this._refCounter>0}get[Symbol.toStringTag](){return`WantlistEntry <key: ${this.cid.toString(w)}, priority: ${this.priority}, refs: ${this._refCounter}>`}equals(t){return this._refCounter===t._refCounter&&this.cid.equals(t.cid)&&this.priority===t.priority&&this.wantType===t.wantType}};var ot=class{constructor(t,e,n,i,s){this.entry=new gt(t,e,n),this.cancel=!!i,this.sendDontHave=!!s}get cid(){return this.entry.cid}set cid(t){this.entry.cid=t}get priority(){return this.entry.priority}set priority(t){this.entry.priority=t}get wantType(){return this.entry.wantType}set wantType(t){this.entry.wantType=t}get[Symbol.toStringTag](){return`BitswapMessageEntry ${this.cid.toString(w)} <cancel: ${this.cancel}, priority: ${this.priority}>`}equals(t){return this.cancel===t.cancel&&this.sendDontHave===t.sendDontHave&&this.wantType===t.wantType&&this.entry.equals(t.entry)}};var W=(r,t)=>{let e=["bitswap"];return t!=null&&e.push(t),r!=null&&e.push(`${r.toString().slice(0,8)}`),Rn(e.join(":"))};var se=(r,t)=>{if(r.size!==t.size)return!1;for(let[e,n]of r){let i=t.get(e);if(i===void 0||n instanceof Uint8Array&&i instanceof Uint8Array&&!ie(n,i)||n instanceof ot&&i instanceof ot&&!n.equals(i))return!1}return!0};var cr=F(tr(),1),Si=F(mi(),1),Ei=F(yt(),1),ur=F(ar(),1),Bi=F(ki(),1);function Ca(){Ei.default._configure(),cr.default._configure(Si.default),ur.default._configure(Bi.default)}Ca();var Ci=["uint64","int64","sint64","fixed64","sfixed64"];function La(r){for(let t of Ci){if(r[t]==null)continue;let e=r[t];r[t]=function(){return BigInt(e.call(this).toString())}}return r}function lr(r){return La(new cr.default(r))}function Aa(r){for(let t of Ci){if(r[t]==null)continue;let e=r[t];r[t]=function(n){return e.call(this,n.toString())}}return r}function hr(){return Aa(ur.default.create())}function bt(r,t){let e=lr(r instanceof Uint8Array?r:r.subarray());return t.decode(e)}function _t(r,t){let e=hr();return t.encode(r,e,{lengthDelimited:!1}),e.finish()}var Dt;(function(r){r[r.VARINT=0]="VARINT",r[r.BIT64=1]="BIT64",r[r.LENGTH_DELIMITED=2]="LENGTH_DELIMITED",r[r.START_GROUP=3]="START_GROUP",r[r.END_GROUP=4]="END_GROUP",r[r.BIT32=5]="BIT32"})(Dt||(Dt={}));function le(r,t,e,n){return{name:r,type:t,encode:e,decode:n}}function he(r){function t(i){if(r[i.toString()]==null)throw new Error("Invalid enum value");return r[i]}let e=function(s,o){let a=t(s);o.int32(a)},n=function(s){let o=s.int32();return t(o)};return le("enum",Dt.VARINT,e,n)}function vt(r,t){return le("message",Dt.LENGTH_DELIMITED,r,t)}var I;(function(r){let t;(function(a){let c;(function(f){f.Block="Block",f.Have="Have"})(c=a.WantType||(a.WantType={}));let u;(function(f){f[f.Block=0]="Block",f[f.Have=1]="Have"})(u||(u={})),function(f){f.codec=()=>he(u)}(c=a.WantType||(a.WantType={}));let l;(function(f){let g;f.codec=()=>(g==null&&(g=vt((d,p,y={})=>{y.lengthDelimited!==!1&&p.fork(),d.block!=null&&d.block.byteLength>0&&(p.uint32(10),p.bytes(d.block)),d.priority!=null&&d.priority!==0&&(p.uint32(16),p.int32(d.priority)),d.cancel!=null&&d.cancel!==!1&&(p.uint32(24),p.bool(d.cancel)),d.wantType!=null&&u[d.wantType]!==0&&(p.uint32(32),r.Wantlist.WantType.codec().encode(d.wantType,p)),d.sendDontHave!=null&&d.sendDontHave!==!1&&(p.uint32(40),p.bool(d.sendDontHave)),y.lengthDelimited!==!1&&p.ldelim()},(d,p)=>{let y={block:new Uint8Array(0),priority:0,cancel:!1,wantType:c.Block,sendDontHave:!1},S=p==null?d.len:d.pos+p;for(;d.pos<S;){let B=d.uint32();switch(B>>>3){case 1:y.block=d.bytes();break;case 2:y.priority=d.int32();break;case 3:y.cancel=d.bool();break;case 4:y.wantType=r.Wantlist.WantType.codec().decode(d);break;case 5:y.sendDontHave=d.bool();break;default:d.skipType(B&7);break}}return y})),g),f.encode=d=>_t(d,f.codec()),f.decode=d=>bt(d,f.codec())})(l=a.Entry||(a.Entry={}));let h;a.codec=()=>(h==null&&(h=vt((f,g,d={})=>{if(d.lengthDelimited!==!1&&g.fork(),f.entries!=null)for(let p of f.entries)g.uint32(10),r.Wantlist.Entry.codec().encode(p,g);f.full!=null&&f.full!==!1&&(g.uint32(16),g.bool(f.full)),d.lengthDelimited!==!1&&g.ldelim()},(f,g)=>{let d={entries:[],full:!1},p=g==null?f.len:f.pos+g;for(;f.pos<p;){let y=f.uint32();switch(y>>>3){case 1:d.entries.push(r.Wantlist.Entry.codec().decode(f,f.uint32()));break;case 2:d.full=f.bool();break;default:f.skipType(y&7);break}}return d})),h),a.encode=f=>_t(f,a.codec()),a.decode=f=>bt(f,a.codec())})(t=r.Wantlist||(r.Wantlist={}));let e;(function(a){let c;a.codec=()=>(c==null&&(c=vt((u,l,h={})=>{h.lengthDelimited!==!1&&l.fork(),u.prefix!=null&&u.prefix.byteLength>0&&(l.uint32(10),l.bytes(u.prefix)),u.data!=null&&u.data.byteLength>0&&(l.uint32(18),l.bytes(u.data)),h.lengthDelimited!==!1&&l.ldelim()},(u,l)=>{let h={prefix:new Uint8Array(0),data:new Uint8Array(0)},f=l==null?u.len:u.pos+l;for(;u.pos<f;){let g=u.uint32();switch(g>>>3){case 1:h.prefix=u.bytes();break;case 2:h.data=u.bytes();break;default:u.skipType(g&7);break}}return h})),c),a.encode=u=>_t(u,a.codec()),a.decode=u=>bt(u,a.codec())})(e=r.Block||(r.Block={}));let n;(function(a){a.Have="Have",a.DontHave="DontHave"})(n=r.BlockPresenceType||(r.BlockPresenceType={}));let i;(function(a){a[a.Have=0]="Have",a[a.DontHave=1]="DontHave"})(i||(i={})),function(a){a.codec=()=>he(i)}(n=r.BlockPresenceType||(r.BlockPresenceType={}));let s;(function(a){let c;a.codec=()=>(c==null&&(c=vt((u,l,h={})=>{h.lengthDelimited!==!1&&l.fork(),u.cid!=null&&u.cid.byteLength>0&&(l.uint32(10),l.bytes(u.cid)),u.type!=null&&i[u.type]!==0&&(l.uint32(16),r.BlockPresenceType.codec().encode(u.type,l)),h.lengthDelimited!==!1&&l.ldelim()},(u,l)=>{let h={cid:new Uint8Array(0),type:n.Have},f=l==null?u.len:u.pos+l;for(;u.pos<f;){let g=u.uint32();switch(g>>>3){case 1:h.cid=u.bytes();break;case 2:h.type=r.BlockPresenceType.codec().decode(u);break;default:u.skipType(g&7);break}}return h})),c),a.encode=u=>_t(u,a.codec()),a.decode=u=>bt(u,a.codec())})(s=r.BlockPresence||(r.BlockPresence={}));let o;r.codec=()=>(o==null&&(o=vt((a,c,u={})=>{if(u.lengthDelimited!==!1&&c.fork(),a.wantlist!=null&&(c.uint32(10),r.Wantlist.codec().encode(a.wantlist,c)),a.blocks!=null)for(let l of a.blocks)c.uint32(18),c.bytes(l);if(a.payload!=null)for(let l of a.payload)c.uint32(26),r.Block.codec().encode(l,c);if(a.blockPresences!=null)for(let l of a.blockPresences)c.uint32(34),r.BlockPresence.codec().encode(l,c);a.pendingBytes!=null&&a.pendingBytes!==0&&(c.uint32(40),c.int32(a.pendingBytes)),u.lengthDelimited!==!1&&c.ldelim()},(a,c)=>{let u={blocks:[],payload:[],blockPresences:[],pendingBytes:0},l=c==null?a.len:a.pos+c;for(;a.pos<l;){let h=a.uint32();switch(h>>>3){case 1:u.wantlist=r.Wantlist.codec().decode(a,a.uint32());break;case 2:u.blocks.push(a.bytes());break;case 3:u.payload.push(r.Block.codec().decode(a,a.uint32()));break;case 4:u.blockPresences.push(r.BlockPresence.codec().decode(a,a.uint32()));break;case 5:u.pendingBytes=a.int32();break;default:a.skipType(h&7);break}}return u})),o),r.encode=a=>_t(a,r.codec()),r.decode=a=>bt(a,r.codec())})(I||(I={}));var fe=class extends Error{constructor(t,e,n){super(t),this.code=e,this.name=n?.name??"CodeError",this.props=n??{}}};var Ta,x=class{constructor(t){this.full=t,this.wantlist=new Map,this.blocks=new Map,this.blockPresences=new Map,this.pendingBytes=0}get empty(){return this.blocks.size===0&&this.wantlist.size===0&&this.blockPresences.size===0}addEntry(t,e,n,i,s){n==null&&(n=x.WantType.Block);let o=t.toString(w),a=this.wantlist.get(o);a!=null?(a.wantType===n&&(a.priority=e),i===!0&&(a.cancel=!!i),s===!0&&(a.sendDontHave=!!s),n===x.WantType.Block&&a.wantType===x.WantType.Have&&(a.wantType=n)):this.wantlist.set(o,new ot(t,e,n,i,s))}addBlock(t,e){let n=t.toString(w);this.blocks.set(n,e)}addHave(t){let e=t.toString(w);this.blockPresences.has(e)||this.blockPresences.set(e,x.BlockPresenceType.Have)}addDontHave(t){let e=t.toString(w);this.blockPresences.has(e)||this.blockPresences.set(e,x.BlockPresenceType.DontHave)}cancel(t){let e=t.toString(w);this.wantlist.delete(e),this.addEntry(t,0,x.WantType.Block,!0,!1)}setPendingBytes(t){this.pendingBytes=t}serializeToBitswap100(){return I.encode({wantlist:{entries:Array.from(this.wantlist.values()).map(t=>({block:t.cid.bytes,priority:Number(t.priority),cancel:!!t.cancel,wantType:I.Wantlist.WantType.Block,sendDontHave:!1})),full:!!this.full},blocks:Array.from(this.blocks.values())})}serializeToBitswap110(){let t={wantlist:{entries:Array.from(this.wantlist.values()).map(e=>({block:e.cid.bytes,priority:Number(e.priority),wantType:e.wantType,cancel:!!e.cancel,sendDontHave:!!e.sendDontHave})),full:!!this.full},blockPresences:[],payload:[],pendingBytes:this.pendingBytes,blocks:[]};for(let[e,n]of this.blocks.entries()){let i=b.parse(e),s=i.version,o=i.code,a=i.multihash.code,c=i.multihash.digest.length,u=On([s,o,a,c]);t.payload.push({prefix:u,data:n})}for(let[e,n]of this.blockPresences)t.blockPresences.push({cid:b.parse(e).bytes,type:n});return this.pendingBytes>0&&(t.pendingBytes=this.pendingBytes),I.encode(t)}equals(t){return!(this.full!==t.full||this.pendingBytes!==t.pendingBytes||!se(this.wantlist,t.wantlist)||!se(this.blocks,t.blocks)||!se(this.blockPresences,t.blockPresences))}get[Symbol.toStringTag](){let t=Array.from(this.wantlist.keys()),e=Array.from(this.blocks.keys());return`BitswapMessage <full: ${this.full}, list: ${t}, blocks: ${e}>`}};Ta=x;x.Entry=ot;x.WantType={Block:I.Wantlist.WantType.Block,Have:I.Wantlist.WantType.Have};x.BlockPresenceType={Have:I.BlockPresenceType.Have,DontHave:I.BlockPresenceType.DontHave};x.deserialize=async(r,t)=>{let e=I.decode(r),n=e.wantlist?.full===!0,i=new x(n);return e.wantlist?.entries.forEach(s=>{if(s.block==null)return;let o=b.decode(s.block);i.addEntry(o,s.priority??0,s.wantType,!!s.cancel,!!s.sendDontHave)}),e.blockPresences.forEach(s=>{if(s.cid==null)return;let o=b.decode(s.cid);s.type===x.BlockPresenceType.Have?i.addHave(o):i.addDontHave(o)}),e.blocks.length>0?(await Promise.all(e.blocks.map(async s=>{let o=await qt.digest(s),a=b.createV0(o);i.addBlock(a,s)})),i):(e.payload.length>0&&(await Promise.all(e.payload.map(async s=>{if(s.prefix==null||s.data==null)return;let o=(0,Li.default)(s.prefix),a=o[0],c=o[1],u=o[2],l=u===qt.code?qt:await t?.getHasher(u);if(l==null)throw new fe("Unknown hash algorithm","ERR_UNKNOWN_HASH_ALG");let h=await l.digest(s.data),f=b.create(a,c,h);i.addBlock(f,s.data)})),i.setPendingBytes(e.pendingBytes)),i)};x.blockPresenceSize=r=>r.bytes.length+1;var fr=class extends Map{constructor(t){super();let{name:e,metrics:n}=t;this.metric=n.registerMetric(e),this.updateComponentMetric()}set(t,e){return super.set(t,e),this.updateComponentMetric(),this}delete(t){let e=super.delete(t);return this.updateComponentMetric(),e}clear(){super.clear(),this.updateComponentMetric()}updateComponentMetric(){this.metric.update(this.size)}};function ut(r){let{name:t,metrics:e}=r,n;return e!=null?n=new fr({name:t,metrics:e}):n=new Map,n}var Ai={Block:I.Wantlist.WantType.Block,Have:I.Wantlist.WantType.Have},Oa=(r,t)=>Array.prototype.slice.call(t,0).sort((e,n)=>{let i=r(e),s=r(n);return i<s?-1:i>s?1:0}),rt=class{constructor(t,e){this.set=e!=null?ut({name:"ipfs_bitswap_wantlist",metrics:e.metrics}):new Map,this._stats=t}get length(){return this.set.size}add(t,e,n){let i=t.toString(w),s=this.set.get(i);s!=null?(s.inc(),s.priority=e,s.wantType===Ai.Have&&n===Ai.Block&&(s.wantType=n)):(this.set.set(i,new gt(t,e,n)),this._stats!=null&&this._stats.push(void 0,"wantListSize",1))}remove(t){let e=t.toString(w),n=this.set.get(e);n!=null&&(n.dec(),!n.hasRefs()&&(this.set.delete(e),this._stats!=null&&this._stats.push(void 0,"wantListSize",-1)))}removeForce(t){this.set.has(t)&&this.set.delete(t)}forEach(t){this.set.forEach(t)}entries(){return this.set.entries()}sortedEntries(){return new Map(Oa(t=>t[1].key,Array.from(this.set.entries())))}contains(t){let e=t.toString(w);return this.set.has(e)}get(t){let e=t.toString(w);return this.set.get(e)}};rt.Entry=gt;var Ti=Math.pow(2,31)-1,Oi=1e3,Pi=1;var Di=Pa;function Pa(r,t,e){var n=null,i=null,s=function(){n&&(clearTimeout(n),i=null,n=null)},o=function(){var c=i;s(),c&&c()},a=function(){if(!t)return r.apply(this,arguments);var c=this,u=arguments,l=e&&!n;if(s(),i=function(){r.apply(c,u)},n=setTimeout(function(){if(n=null,!l){var h=i;return i=null,h()}},t),l)return i()};return a.cancel=s,a.flush=o,a}var de=class{constructor(t,e,n){this.peerId=e,this.network=n,this.refcnt=1,this._entries=[],this._log=W(t,"msgqueue"),this.sendEntries=Di(this.sendEntries.bind(this),Pi)}addMessage(t,e={}){t.empty||this.send(t,e)}addEntries(t,e={}){this._entries=this._entries.concat(t),this.sendEntries(e)}sendEntries(t={}){if(this._entries.length===0)return;let e=new x(!1);this._entries.forEach(n=>{n.cancel===!0?e.cancel(n.cid):e.addEntry(n.cid,n.priority)}),this._entries=[],this.addMessage(e,t)}async send(t,e={}){try{await this.network.connectTo(this.peerId,e)}catch(n){this._log.error("cant connect to peer %p: %s",this.peerId,n.message);return}this._log("sending message to peer %p",this.peerId),this.network.sendMessage(this.peerId,t,e).catch(n=>{this._log.error("send error",n)})}};var pe=class{constructor(t,e,n,i){this.peers=ut({name:"ipfs_bitswap_want_manager_peers",metrics:i.metrics}),this.wantlist=new rt(n,i),this.network=e,this._peerId=t,this._log=W(t,"want")}_addEntries(t,e,n,i={}){let s=t.map((o,a)=>new x.Entry(o,Ti-a,x.WantType.Block,e));s.forEach(o=>{o.cancel?n===!0?this.wantlist.removeForce(o.cid.toString(w)):this.wantlist.remove(o.cid):(this._log("adding to wantlist"),this.wantlist.add(o.cid,o.priority))});for(let o of this.peers.values())o.addEntries(s,i)}_startPeerHandler(t){let e=this.peers.get(t.toString());if(e!=null){e.refcnt++;return}e=new de(this._peerId,t,this.network);let n=new x(!0);for(let i of this.wantlist.entries())n.addEntry(i[1].cid,i[1].priority);return e.addMessage(n),this.peers.set(t.toString(),e),e}_stopPeerHandler(t){let e=this.peers.get(t.toString());e!=null&&(e.refcnt--,!(e.refcnt>0)&&this.peers.delete(t.toString()))}wantBlocks(t,e={}){this._addEntries(t,!1,!1,e),e.signal?.addEventListener("abort",()=>{this.cancelWants(t)})}unwantBlocks(t){this._log("unwant blocks: %s",t.length),this._addEntries(t,!0,!0)}cancelWants(t){this._log("cancel wants: %s",t.length),this._addEntries(t,!0)}connectedPeers(){return Array.from(this.peers.keys())}connected(t){this._startPeerHandler(t)}disconnected(t){this._stopPeerHandler(t)}start(){}stop(){this.peers.forEach(t=>{this.disconnected(t.peerId)})}};function Gt(r){return globalThis.Buffer!=null?new Uint8Array(r.buffer,r.byteOffset,r.byteLength):r}function nt(r=0){return globalThis.Buffer?.alloc!=null?Gt(globalThis.Buffer.alloc(r)):new Uint8Array(r)}function X(r=0){return globalThis.Buffer?.allocUnsafe!=null?Gt(globalThis.Buffer.allocUnsafe(r)):new Uint8Array(r)}function pr(r,t){t==null&&(t=r.reduce((i,s)=>i+s.length,0));let e=X(t),n=0;for(let i of r)e.set(i,n),n+=i.length;return Gt(e)}var Mi=Symbol.for("@achingbrain/uint8arraylist");function Ni(r,t){if(t==null||t<0)throw new RangeError("index is out of bounds");let e=0;for(let n of r){let i=e+n.byteLength;if(t<i)return{buf:n,index:t-e};e=i}throw new RangeError("index is out of bounds")}function Nt(r){return!!r?.[Mi]}var V=class{constructor(...t){Object.defineProperty(this,Mi,{value:!0}),this.bufs=[],this.length=0,t.length>0&&this.appendAll(t)}*[Symbol.iterator](){yield*this.bufs}get byteLength(){return this.length}append(...t){this.appendAll(t)}appendAll(t){let e=0;for(let n of t)if(n instanceof Uint8Array)e+=n.byteLength,this.bufs.push(n);else if(Nt(n))e+=n.byteLength,this.bufs.push(...n.bufs);else throw new Error("Could not append value, must be an Uint8Array or a Uint8ArrayList");this.length+=e}prepend(...t){this.prependAll(t)}prependAll(t){let e=0;for(let n of t.reverse())if(n instanceof Uint8Array)e+=n.byteLength,this.bufs.unshift(n);else if(Nt(n))e+=n.byteLength,this.bufs.unshift(...n.bufs);else throw new Error("Could not prepend value, must be an Uint8Array or a Uint8ArrayList");this.length+=e}get(t){let e=Ni(this.bufs,t);return e.buf[e.index]}set(t,e){let n=Ni(this.bufs,t);n.buf[n.index]=e}write(t,e=0){if(t instanceof Uint8Array)for(let n=0;n<t.length;n++)this.set(e+n,t[n]);else if(Nt(t))for(let n=0;n<t.length;n++)this.set(e+n,t.get(n));else throw new Error("Could not write value, must be an Uint8Array or a Uint8ArrayList")}consume(t){if(t=Math.trunc(t),!(Number.isNaN(t)||t<=0)){if(t===this.byteLength){this.bufs=[],this.length=0;return}for(;this.bufs.length>0;)if(t>=this.bufs[0].byteLength)t-=this.bufs[0].byteLength,this.length-=this.bufs[0].byteLength,this.bufs.shift();else{this.bufs[0]=this.bufs[0].subarray(t),this.length-=t;break}}}slice(t,e){let{bufs:n,length:i}=this._subList(t,e);return pr(n,i)}subarray(t,e){let{bufs:n,length:i}=this._subList(t,e);return n.length===1?n[0]:pr(n,i)}sublist(t,e){let{bufs:n,length:i}=this._subList(t,e),s=new V;return s.length=i,s.bufs=n,s}_subList(t,e){if(t=t??0,e=e??this.length,t<0&&(t=this.length+t),e<0&&(e=this.length+e),t<0||e>this.length)throw new RangeError("index is out of bounds");if(t===e)return{bufs:[],length:0};if(t===0&&e===this.length)return{bufs:[...this.bufs],length:this.length};let n=[],i=0;for(let s=0;s<this.bufs.length;s++){let o=this.bufs[s],a=i,c=a+o.byteLength;if(i=c,t>=c)continue;let u=t>=a&&t<c,l=e>a&&e<=c;if(u&&l){if(t===a&&e===c){n.push(o);break}let h=t-a;n.push(o.subarray(h,h+(e-t)));break}if(u){if(t===0){n.push(o);continue}n.push(o.subarray(t-a));continue}if(l){if(e===c){n.push(o);break}n.push(o.subarray(0,e-a));break}n.push(o)}return{bufs:n,length:e-t}}indexOf(t,e=0){if(!Nt(t)&&!(t instanceof Uint8Array))throw new TypeError('The "value" argument must be a Uint8ArrayList or Uint8Array');let n=t instanceof Uint8Array?t:t.subarray();if(e=Number(e??0),isNaN(e)&&(e=0),e<0&&(e=this.length+e),e<0&&(e=0),t.length===0)return e>this.length?this.length:e;let i=n.byteLength;if(i===0)throw new TypeError("search must be at least 1 byte long");let s=256,o=new Int32Array(s);for(let h=0;h<s;h++)o[h]=-1;for(let h=0;h<i;h++)o[n[h]]=h;let a=o,c=this.byteLength-n.byteLength,u=n.byteLength-1,l;for(let h=e;h<=c;h+=l){l=0;for(let f=u;f>=0;f--){let g=this.get(h+f);if(n[f]!==g){l=Math.max(1,f-a[g]);break}}if(l===0)return h}return-1}getInt8(t){let e=this.subarray(t,t+1);return new DataView(e.buffer,e.byteOffset,e.byteLength).getInt8(0)}setInt8(t,e){let n=X(1);new DataView(n.buffer,n.byteOffset,n.byteLength).setInt8(0,e),this.write(n,t)}getInt16(t,e){let n=this.subarray(t,t+2);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt16(0,e)}setInt16(t,e,n){let i=nt(2);new DataView(i.buffer,i.byteOffset,i.byteLength).setInt16(0,e,n),this.write(i,t)}getInt32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getInt32(0,e)}setInt32(t,e,n){let i=nt(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setInt32(0,e,n),this.write(i,t)}getBigInt64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getBigInt64(0,e)}setBigInt64(t,e,n){let i=nt(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setBigInt64(0,e,n),this.write(i,t)}getUint8(t){let e=this.subarray(t,t+1);return new DataView(e.buffer,e.byteOffset,e.byteLength).getUint8(0)}setUint8(t,e){let n=X(1);new DataView(n.buffer,n.byteOffset,n.byteLength).setUint8(0,e),this.write(n,t)}getUint16(t,e){let n=this.subarray(t,t+2);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint16(0,e)}setUint16(t,e,n){let i=nt(2);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint16(0,e,n),this.write(i,t)}getUint32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getUint32(0,e)}setUint32(t,e,n){let i=nt(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setUint32(0,e,n),this.write(i,t)}getBigUint64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getBigUint64(0,e)}setBigUint64(t,e,n){let i=nt(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setBigUint64(0,e,n),this.write(i,t)}getFloat32(t,e){let n=this.subarray(t,t+4);return new DataView(n.buffer,n.byteOffset,n.byteLength).getFloat32(0,e)}setFloat32(t,e,n){let i=nt(4);new DataView(i.buffer,i.byteOffset,i.byteLength).setFloat32(0,e,n),this.write(i,t)}getFloat64(t,e){let n=this.subarray(t,t+8);return new DataView(n.buffer,n.byteOffset,n.byteLength).getFloat64(0,e)}setFloat64(t,e,n){let i=nt(8);new DataView(i.buffer,i.byteOffset,i.byteLength).setFloat64(0,e,n),this.write(i,t)}equals(t){if(t==null||!(t instanceof V)||t.bufs.length!==this.bufs.length)return!1;for(let e=0;e<this.bufs.length;e++)if(!ie(this.bufs[e],t.bufs[e]))return!1;return!0}static fromUint8Arrays(t,e){let n=new V;return n.bufs=t,e==null&&(e=t.reduce((i,s)=>i+s.byteLength,0)),n.length=e,n}};function ge(r){return r instanceof Uint8Array?{get(t){return r[t]},set(t,e){r[t]=e}}:{get(t){return r.get(t)},set(t,e){r.set(t,e)}}}var Fi=4294967296,H=class{constructor(t=0,e=0){this.hi=t,this.lo=e}toBigInt(t){if(t===!0)return BigInt(this.lo>>>0)+(BigInt(this.hi>>>0)<<32n);if(this.hi>>>31){let e=~this.lo+1>>>0,n=~this.hi>>>0;return e===0&&(n=n+1>>>0),-(BigInt(e)+(BigInt(n)<<32n))}return BigInt(this.lo>>>0)+(BigInt(this.hi>>>0)<<32n)}toNumber(t){return Number(this.toBigInt(t))}zzDecode(){let t=-(this.lo&1),e=((this.lo>>>1|this.hi<<31)^t)>>>0,n=(this.hi>>>1^t)>>>0;return new H(n,e)}zzEncode(){let t=this.hi>>31,e=((this.hi<<1|this.lo>>>31)^t)>>>0,n=(this.lo<<1^t)>>>0;return new H(e,n)}toBytes(t,e=0){let n=ge(t);for(;this.hi>0;)n.set(e++,this.lo&127|128),this.lo=(this.lo>>>7|this.hi<<25)>>>0,this.hi>>>=7;for(;this.lo>127;)n.set(e++,this.lo&127|128),this.lo=this.lo>>>7;n.set(e++,this.lo)}static fromBigInt(t){if(t===0n)return new H;let e=t<0;e&&(t=-t);let n=Number(t>>32n)|0,i=Number(t-(BigInt(n)<<32n))|0;return e&&(n=~n>>>0,i=~i>>>0,++i>Fi&&(i=0,++n>Fi&&(n=0))),new H(n,i)}static fromNumber(t){if(t===0)return new H;let e=t<0;e&&(t=-t);let n=t>>>0,i=(t-n)/4294967296>>>0;return e&&(i=~i>>>0,n=~n>>>0,++n>4294967295&&(n=0,++i>4294967295&&(i=0))),new H(i,n)}static fromBytes(t,e=0){let n=ge(t),i=new H,s=0;if(t.length-e>4){for(;s<4;++s)if(i.lo=(i.lo|(n.get(e)&127)<<s*7)>>>0,n.get(e++)<128)return i;if(i.lo=(i.lo|(n.get(e)&127)<<28)>>>0,i.hi=(i.hi|(n.get(e)&127)>>4)>>>0,n.get(e++)<128)return i;s=0}else for(;s<4;++s){if(e>=t.length)throw RangeError(`index out of range: ${e} > ${t.length}`);if(i.lo=(i.lo|(n.get(e)&127)<<s*7)>>>0,n.get(e++)<128)return i}if(t.length-e>4){for(;s<5;++s)if(i.hi=(i.hi|(n.get(e)&127)<<s*7+3)>>>0,n.get(e++)<128)return i}else if(e<t.byteLength)for(;s<5;++s){if(e>=t.length)throw RangeError(`index out of range: ${e} > ${t.length}`);if(i.hi=(i.hi|(n.get(e)&127)<<s*7+3)>>>0,n.get(e++)<128)return i}throw RangeError("invalid varint encoding")}};var Da=Math.pow(2,7),Na=Math.pow(2,14),Ma=Math.pow(2,21),Fa=Math.pow(2,28),Ra=Math.pow(2,35),Ia=Math.pow(2,42),za=Math.pow(2,49),Ua=Math.pow(2,56),Ha=Math.pow(2,63),xt={encodingLength(r){return r<Da?1:r<Na?2:r<Ma?3:r<Fa?4:r<Ra?5:r<Ia?6:r<za?7:r<Ua?8:r<Ha?9:10},encode(r,t,e=0){if(Number.MAX_SAFE_INTEGER!=null&&r>Number.MAX_SAFE_INTEGER)throw new RangeError("Could not encode varint");return t==null&&(t=X(xt.encodingLength(r))),H.fromNumber(r).toBytes(t,e),t},decode(r,t=0){return H.fromBytes(r,t).toNumber(!0)}};function me(r){return r[Symbol.asyncIterator]!=null}var ye=r=>{let t=xt.encodingLength(r),e=X(t);return xt.encode(r,e),ye.bytes=t,e};ye.bytes=0;function we(r,t){t=t??{};let e=t.lengthEncoder??ye;function*n(i){let s=e(i.byteLength);s instanceof Uint8Array?yield s:yield*s,i instanceof Uint8Array?yield i:yield*i}return me(r)?async function*(){for await(let i of r)yield*n(i)}():function*(){for(let i of r)yield*n(i)}()}we.single=(r,t)=>{t=t??{};let e=t.lengthEncoder??ye;return new V(e(r.byteLength),r)};var Mt=F(zi(),1);var Wa=8,$a=1024*1024*4,kt;(function(r){r[r.LENGTH=0]="LENGTH",r[r.DATA=1]="DATA"})(kt||(kt={}));var gr=r=>{let t=xt.decode(r);return gr.bytes=xt.encodingLength(t),t};gr.bytes=0;function jt(r,t){let e=new V,n=kt.LENGTH,i=-1,s=t?.lengthDecoder??gr,o=t?.maxLengthLength??Wa,a=t?.maxDataLength??$a;function*c(){for(;e.byteLength>0;){if(n===kt.LENGTH)try{if(i=s(e),i<0)throw(0,Mt.default)(new Error("invalid message length"),"ERR_INVALID_MSG_LENGTH");if(i>a)throw(0,Mt.default)(new Error("message length too long"),"ERR_MSG_DATA_TOO_LONG");let u=s.bytes;e.consume(u),t?.onLength!=null&&t.onLength(i),n=kt.DATA}catch(u){if(u instanceof RangeError){if(e.byteLength>o)throw(0,Mt.default)(new Error("message length length too long"),"ERR_MSG_LENGTH_TOO_LONG");break}throw u}if(n===kt.DATA){if(e.byteLength<i)break;let u=e.sublist(0,i);e.consume(i),t?.onData!=null&&t.onData(u),yield u,n=kt.LENGTH}}}return me(r)?async function*(){for await(let u of r)e.append(u),yield*c();if(e.byteLength>0)throw(0,Mt.default)(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}():function*(){for(let u of r)e.append(u),yield*c();if(e.byteLength>0)throw(0,Mt.default)(new Error("unexpected end of input"),"ERR_UNEXPECTED_EOF")}()}jt.fromReader=(r,t)=>{let e=1,n=async function*(){for(;;)try{let{done:s,value:o}=await r.next(e);if(s===!0)return;o!=null&&(yield o)}catch(s){if(s.code==="ERR_UNDER_READ")return{done:!0,value:null};throw s}finally{e=1}}();return jt(n,{...t??{},onLength:s=>{e=s}})};var be=class{constructor(t){if(!(t>0)||t-1&t)throw new Error("Max size for a FixedFIFO should be a power of two");this.buffer=new Array(t),this.mask=t-1,this.top=0,this.btm=0,this.next=null}push(t){return this.buffer[this.top]!==void 0?!1:(this.buffer[this.top]=t,this.top=this.top+1&this.mask,!0)}shift(){let t=this.buffer[this.btm];if(t!==void 0)return this.buffer[this.btm]=void 0,this.btm=this.btm+1&this.mask,t}isEmpty(){return this.buffer[this.btm]===void 0}},Ft=class{constructor(t={}){this.hwm=t.splitLimit??16,this.head=new be(this.hwm),this.tail=this.head,this.size=0}calculateSize(t){return t?.byteLength!=null?t.byteLength:1}push(t){if(t?.value!=null&&(this.size+=this.calculateSize(t.value)),!this.head.push(t)){let e=this.head;this.head=e.next=new be(2*this.head.buffer.length),this.head.push(t)}}shift(){let t=this.tail.shift();if(t===void 0&&this.tail.next!=null){let e=this.tail.next;this.tail.next=null,this.tail=e,t=this.tail.shift()}return t?.value!=null&&(this.size-=this.calculateSize(t.value)),t}isEmpty(){return this.head.isEmpty()}};function _e(r={}){return Ga(e=>{let n=e.shift();if(n==null)return{done:!0};if(n.error!=null)throw n.error;return{done:n.done===!0,value:n.value}},r)}function Ga(r,t){t=t??{};let e=t.onEnd,n=new Ft,i,s,o,a=async()=>n.isEmpty()?o?{done:!0}:await new Promise((p,y)=>{s=S=>{s=null,n.push(S);try{p(r(n))}catch(B){y(B)}return i}}):r(n),c=p=>s!=null?s(p):(n.push(p),i),u=p=>(n=new Ft,s!=null?s({error:p}):(n.push({error:p}),i)),l=p=>{if(o)return i;if(t?.objectMode!==!0&&p?.byteLength==null)throw new Error("objectMode was not true but tried to push non-Uint8Array value");return c({done:!1,value:p})},h=p=>o?i:(o=!0,p!=null?u(p):c({done:!0})),f=()=>(n=new Ft,h(),{done:!0}),g=p=>(h(p),{done:!0});if(i={[Symbol.asyncIterator](){return this},next:a,return:f,throw:g,push:l,end:h,get readableLength(){return n.size}},e==null)return i;let d=i;return i={[Symbol.asyncIterator](){return this},next(){return d.next()},throw(p){return d.throw(p),e!=null&&(e(p),e=void 0),{done:!0}},return(){return d.return(),e!=null&&(e(),e=void 0),{done:!0}},push:l,end(p){return d.end(p),e!=null&&(e(p),e=void 0),i},get readableLength(){return d.readableLength}},i}function ja(r){return r[Symbol.asyncIterator]!=null}function Qa(...r){let t=[];for(let e of r)ja(e)||t.push(e);return t.length===r.length?function*(){for(let e of t)yield*e}():async function*(){let e=_e({objectMode:!0});Promise.resolve().then(async()=>{try{await Promise.all(r.map(async n=>{for await(let i of n)e.push(i)})),e.end()}catch(n){e.end(n)}}),yield*e}()}var Ui=Qa;function yr(r,...t){if(r==null)throw new Error("Empty pipeline");if(mr(r)){let n=r;r=()=>n.source}else if(qi(r)||Hi(r)){let n=r;r=()=>n}let e=[r,...t];if(e.length>1&&mr(e[e.length-1])&&(e[e.length-1]=e[e.length-1].sink),e.length>2)for(let n=1;n<e.length-1;n++)mr(e[n])&&(e[n]=Ja(e[n]));return Xa(...e)}var Xa=(...r)=>{let t;for(;r.length>0;)t=r.shift()(t);return t},Hi=r=>r?.[Symbol.asyncIterator]!=null,qi=r=>r?.[Symbol.iterator]!=null,mr=r=>r==null?!1:r.sink!=null&&r.source!=null,Ja=r=>t=>{let e=r.sink(t);if(e?.then!=null){let n=_e({objectMode:!0});e.then(()=>{n.end()},o=>{n.end(o)});let i,s=r.source;if(Hi(s))i=async function*(){yield*s,n.end()};else if(qi(s))i=function*(){yield*s,n.end()};else throw new Error("Unknown duplex source type - must be Iterable or AsyncIterable");return Ui(n,i())}return r.source};var wr=Symbol.for("@libp2p/topology");var Wi=()=>{},br=class{constructor(t){this.min=t.min??0,this.max=t.max??1/0,this.peers=new Set,this.onConnect=t.onConnect??Wi,this.onDisconnect=t.onDisconnect??Wi}get[Symbol.toStringTag](){return wr.toString()}get[wr](){return!0}async setRegistrar(t){this.registrar=t}disconnect(t){this.onDisconnect(t)}};function $i(r){return new br(r)}var ns=F(Ki(),1);var Xt=class extends Error{constructor(t,e){super(t??"The operation was aborted"),this.type="aborted",this.code=e??"ABORT_ERR"}};function Zi(r){if(r!=null){if(typeof r[Symbol.iterator]=="function")return r[Symbol.iterator]();if(typeof r[Symbol.asyncIterator]=="function")return r[Symbol.asyncIterator]();if(typeof r.next=="function")return r}throw new Error("argument is not an iterator or iterable")}function Yi(r,t,e){let n=e??{},i=Zi(r);async function*s(){let o,a=()=>{o?.()};for(t.addEventListener("abort",a);;){let c;try{if(t.aborted){let{abortMessage:l,abortCode:h}=n;throw new Xt(l,h)}let u=new Promise((l,h)=>{o=()=>{let{abortMessage:f,abortCode:g}=n;h(new Xt(f,g))}});c=await Promise.race([u,i.next()]),o=null}catch(u){t.removeEventListener("abort",a);let l=u.type==="aborted"&&t.aborted;if(l&&n.onAbort!=null&&await n.onAbort(r),typeof i.return=="function")try{let h=i.return();h instanceof Promise&&h.catch(f=>{n.onReturnError!=null&&n.onReturnError(f)})}catch(h){n.onReturnError!=null&&n.onReturnError(h)}if(l&&n.returnOnAbort===!0)return;throw u}if(c.done===!0)break;yield c.value}t.removeEventListener("abort",a)}return s()}var J=class extends Event{constructor(t,e){super(t),this.detail=e}};function Ya(r){return r[Symbol.asyncIterator]!=null}function tc(r,t){return Ya(r)?async function*(){let e=0;if(!(t<1)){for await(let n of r)if(yield n,e++,e===t)return}}():function*(){let e=0;if(!(t<1)){for(let n of r)if(yield n,e++,e===t)return}}()}var ts=tc;function ec(r){return r[Symbol.asyncIterator]!=null}function rc(r){if(ec(r))return(async()=>{for await(let t of r);})();for(let t of r);}var es=rc;function nc(r){let[t,e]=r[Symbol.asyncIterator]!=null?[r[Symbol.asyncIterator](),Symbol.asyncIterator]:[r[Symbol.iterator](),Symbol.iterator],n=[];return{peek:()=>t.next(),push:i=>{n.push(i)},next:()=>n.length>0?{done:!1,value:n.shift()}:t.next(),[e](){return this}}}var xe=nc;function ic(r){return r[Symbol.asyncIterator]!=null}function sc(r,t){if(ic(r))return async function*(){for await(let a of r)yield t(a)}();let e=xe(r),{value:n,done:i}=e.next();if(i===!0)return function*(){}();let s=t(n);if(typeof s.then=="function")return async function*(){yield await s;for await(let a of e)yield t(a)}();let o=t;return function*(){yield s;for(let a of e)yield o(a)}()}var rs=sc;var vr="/ipfs/bitswap/1.0.0",xr="/ipfs/bitswap/1.1.0",kr="/ipfs/bitswap/1.2.0",ac=32,cc=128,uc=3e4,ke=class{constructor(t,e,n,i={}){this._log=W(t.peerId,"network"),this._libp2p=t,this._bitswap=e,this._protocols=[vr],i.b100Only!==!0&&(this._protocols.unshift(xr),this._protocols.unshift(kr)),this._stats=n,this._running=!1,this._onPeerConnect=this._onPeerConnect.bind(this),this._onPeerDisconnect=this._onPeerDisconnect.bind(this),this._onConnection=this._onConnection.bind(this),this._hashLoader=i.hashLoader??{async getHasher(){throw new Error("Not implemented")}},this._maxInboundStreams=i.maxInboundStreams??ac,this._maxOutboundStreams=i.maxOutboundStreams??cc,this._incomingStreamTimeout=i.incomingStreamTimeout??uc}async start(){this._running=!0,await this._libp2p.handle(this._protocols,this._onConnection,{maxInboundStreams:this._maxInboundStreams,maxOutboundStreams:this._maxOutboundStreams});let t=$i({onConnect:this._onPeerConnect,onDisconnect:this._onPeerDisconnect});this._registrarIds=[];for(let e of this._protocols)this._registrarIds.push(await this._libp2p.register(e,t));this._libp2p.getConnections().forEach(e=>{this._onPeerConnect(e.remotePeer)})}async stop(){if(this._running=!1,await this._libp2p.unhandle(this._protocols),this._registrarIds!=null){for(let t of this._registrarIds)this._libp2p.unregister(t);this._registrarIds=[]}}_onConnection(t){if(!this._running)return;let{stream:e,connection:n}=t,i=new ns.TimeoutController(this._incomingStreamTimeout);Promise.resolve().then(async()=>{this._log("incoming new bitswap %s connection from %p",e.stat.protocol,n.remotePeer),await yr(Yi(e.source,i.signal),s=>jt(s),async s=>{for await(let o of s){try{let a=await x.deserialize(o.subarray(),this._hashLoader);await this._bitswap._receiveMessage(n.remotePeer,a)}catch(a){this._bitswap._receiveError(a);break}i.reset()}})}).catch(s=>{this._log(s),e.abort(s)}).finally(()=>{i.clear(),e.close()})}_onPeerConnect(t){this._bitswap._onPeerConnected(t)}_onPeerDisconnect(t){this._bitswap._onPeerDisconnected(t)}findProviders(t,e={}){return e.onProgress?.(new J("bitswap:network:find-providers",t)),this._libp2p.contentRouting.findProviders(t,e)}async findAndConnect(t,e){await es(ts(rs(this.findProviders(t,e),async n=>await this.connectTo(n.id,e).catch(i=>{this._log.error(i)})),3)).catch(n=>{this._log.error(n)})}async provide(t,e={}){e.onProgress?.(new J("bitswap:network:provide",t)),await this._libp2p.contentRouting.provide(t,e)}async sendMessage(t,e,n={}){if(!this._running)throw new Error("network isn't running");let i=t.toString();this._log("sendMessage to %s",i,e),n.onProgress?.(new J("bitswap:network:send-wantlist",t)),await this._writeMessage(t,e,n),this._updateSentStats(t,e.blocks)}async connectTo(t,e={}){if(!this._running)throw new Error("network isn't running");return e.onProgress?.(new J("bitswap:network:dial",t)),await this._libp2p.dial(t,e)}_updateSentStats(t,e){let n=t.toString();if(this._stats!=null){for(let i of e.values())this._stats.push(n,"dataSent",i.length);this._stats.push(n,"blocksSent",e.size)}}async _writeMessage(t,e,n={}){let i=await this._libp2p.dialProtocol(t,[kr,xr,vr]);try{let s;switch(i.stat.protocol){case vr:s=e.serializeToBitswap100();break;case xr:case kr:s=e.serializeToBitswap110();break;default:throw new Error(`Unknown protocol: ${i.stat.protocol}`)}await yr([s],o=>we(o),i)}catch(s){n.onProgress?.(new J("bitswap:network:send-wantlist:error",{peer:t,error:s})),this._log(s)}finally{i.close()}}};var Se=class{constructor(t){this.partner=t,this.wantlist=new rt,this.exchangeCount=0,this.accounting={bytesSent:0,bytesRecv:0}}sentBytes(t){this.exchangeCount++,this.lastExchange=new Date().getTime(),this.accounting.bytesSent+=t}receivedBytes(t){this.exchangeCount++,this.lastExchange=new Date().getTime(),this.accounting.bytesRecv+=t}wants(t,e,n){this.wantlist.add(t,e,n)}cancelWant(t){this.wantlist.remove(t)}wantlistContains(t){return this.wantlist.get(t)}debtRatio(){return this.accounting.bytesSent/(this.accounting.bytesRecv+1)}};var Jt=class extends Map{constructor(t,e){super(),this._cmp=e??this._defaultSort,this._keys=[];for(let[n,i]of t??[])this.set(n,i)}update(t){if(t<0||t>=this._keys.length)return;let e=this._keys[t];this._keys.splice(t,1);let n=this._find(e);this._keys.splice(n,0,e)}set(t,e){if(this.has(t)){let i=this.indexOf(t);this._keys.splice(i,1)}super.set(t,e);let n=this._find(t);return this._keys.splice(n,0,t),this}clear(){super.clear(),this._keys=[]}delete(t){if(!this.has(t))return!1;let e=this.indexOf(t);return this._keys.splice(e,1),super.delete(t)}indexOf(t){if(!this.has(t))return-1;let e=this._find(t);if(this._keys[e]===t)return e;for(let n=1;n<this._keys.length;n++){if(this._keys[e+n]===t)return e+n;if(this._keys[e-n]===t)return e-n}return-1}_find(t){let e=0,n=this._keys.length;for(;e<n;){let i=e+n>>>1,s=this._kCmp(this._keys[i],t);if(s<0)e=i+1;else if(s>0)n=i;else return i}return e}*keys(){for(let t of this._keys)yield t}*values(){for(let t of this._keys)yield this.get(t)}*entries(){for(let t of this._keys)yield[t,this.get(t)]}*[Symbol.iterator](){yield*this.entries()}forEach(t,e=this){if(t!=null)for(let n of this._keys){let i=this.get(n);if(i==null)throw new Error("Value cannot be undefined");t.apply(e,[[n,i]])}}_defaultSort(t,e){return t[0]<e[0]?-1:e[0]<t[0]?1:0}_kCmp(t,e){return this._cmp([t,this.get(t)],[e,this.get(e)])}};var lc={hasNewInfo(){return!1},merge(){}},Ee=class{constructor(t=lc){this._taskMerger=t,this._byPeer=new Jt([],Be.compare)}pushTasks(t,e){let n=this._byPeer.get(t.toString());n==null&&(n=new Be(t,this._taskMerger)),n.pushTasks(e),this._byPeer.set(t.toString(),n)}popTasks(t){let e=this._head();if(e===void 0)return{tasks:[],pendingSize:0};let{tasks:n,pendingSize:i}=e.popTasks(t);if(n.length===0)return{tasks:n,pendingSize:i};let s=e.peerId;return e.isIdle()?this._byPeer.delete(s.toString()):this._byPeer.update(0),{peerId:s,tasks:n,pendingSize:i}}_head(){if(this._byPeer.size!==0)for(let[,t]of this._byPeer)return t}remove(t,e){this._byPeer.get(e.toString())?.remove(t)}tasksDone(t,e){let n=this._byPeer.get(t.toString());if(n==null)return;let i=this._byPeer.indexOf(t.toString());for(let s of e)n.taskDone(s);this._byPeer.update(i)}},Be=class{constructor(t,e){this.peerId=t,this._taskMerger=e,this._activeTotalSize=0,this._pending=new Sr,this._active=new Set}pushTasks(t){for(let e of t)this._pushTask(e)}_pushTask(t){if(!this._taskHasMoreInfoThanActiveTasks(t))return;let e=this._pending.get(t.topic);if(e!=null){t.priority>e.priority&&this._pending.updatePriority(t.topic,t.priority),this._taskMerger.merge(t,e);return}this._pending.add(t)}_taskHasMoreInfoThanActiveTasks(t){let e=[];for(let n of this._active)n.topic===t.topic&&e.push(n);return e.length===0?!0:this._taskMerger.hasNewInfo(t,e)}popTasks(t){let e=0,n=[],i=this._pending.tasks();for(let s=0;s<i.length&&e<t;s++){let o=i[s];n.push(o),e+=o.size,this._pending.delete(o.topic),this._activeTotalSize+=o.size,this._active.add(o)}return{tasks:n,pendingSize:this._pending.totalSize}}taskDone(t){this._active.has(t)&&(this._activeTotalSize-=t.size,this._active.delete(t))}remove(t){this._pending.delete(t)}isIdle(){return this._pending.length===0&&this._active.size===0}static compare(t,e){return t[1]._pending.length===0?1:e[1]._pending.length===0?-1:t[1]._activeTotalSize===e[1]._activeTotalSize?e[1]._pending.length-t[1]._pending.length:t[1]._activeTotalSize-e[1]._activeTotalSize}},Sr=class{constructor(){this._tasks=new Jt([],this._compare)}get length(){return this._tasks.size}get totalSize(){return[...this._tasks.values()].reduce((t,e)=>t+e.task.size,0)}get(t){return this._tasks?.get(t)?.task}add(t){this._tasks.set(t.topic,{created:Date.now(),task:t})}delete(t){this._tasks.delete(t)}tasks(){return[...this._tasks.values()].map(t=>t.task)}updatePriority(t,e){let n=this._tasks.get(t);if(n==null)return;let i=this._tasks.indexOf(t);n.task.priority=e,this._tasks.update(i)}_compare(t,e){return t[1].task.priority===e[1].task.priority?t[1].created-e[1].created:e[1].task.priority-t[1].task.priority}};var is={hasNewInfo(r,t){let e=!1,n=!1;for(let i of t)i.data.haveBlock&&(e=!0),i.data.isWantBlock&&(n=!0);return!!(!n&&r.data.isWantBlock||!e&&r.data.haveBlock)},merge(r,t){let e=r.data,n=t.data;!n.haveBlock&&e.haveBlock&&(n.haveBlock=e.haveBlock,n.blockSize=e.blockSize),!n.isWantBlock&&e.isWantBlock&&(n.isWantBlock=!0,(!n.haveBlock||e.haveBlock)&&(n.haveBlock=e.haveBlock,t.size=r.size)),n.isWantBlock&&n.haveBlock&&(t.size=n.blockSize)}};var ss=x.WantType,hc=16*1024,fc=1024,Ce=class{constructor(t,e,n,i,s,o={}){this._log=W(t,"engine"),this.blockstore=e,this.network=n,this._stats=i,this._opts=this._processOpts(o),this.ledgerMap=ut({name:"ipfs_bitswap_ledger_map",metrics:s.metrics}),this._running=!1,this._requestQueue=new Ee(is)}_processOpts(t){return{maxSizeReplaceHasWithBlock:fc,targetMessageSize:hc,...t}}_scheduleProcessTasks(){setTimeout(()=>{this._processTasks().catch(t=>{this._log.error("error processing stats",t)})})}async _processTasks(){if(!this._running)return;let{peerId:t,tasks:e,pendingSize:n}=this._requestQueue.popTasks(this._opts.targetMessageSize);if(e.length===0)return;let i=new x(!1);i.setPendingBytes(n);let s=[],o=new Map;for(let c of e){let u=b.parse(c.topic);c.data.haveBlock?c.data.isWantBlock?(s.push(u),o.set(c.topic,c.data)):i.addHave(u):i.addDontHave(u)}let a=await this._getBlocks(s);for(let[c,u]of o){let l=b.parse(c),h=a.get(c);h!=null?i.addBlock(l,h):u.sendDontHave&&i.addDontHave(l)}if(i.empty){t!=null&&this._requestQueue.tasksDone(t,e),this._scheduleProcessTasks();return}try{t!=null&&await this.network.sendMessage(t,i);for(let[c,u]of a.entries())t!=null&&this.messageSent(t,b.parse(c),u)}catch(c){this._log.error(c)}t!=null&&this._requestQueue.tasksDone(t,e),this._scheduleProcessTasks()}wantlistForPeer(t){let e=t.toString(),n=this.ledgerMap.get(e);return n!=null?n.wantlist.sortedEntries():new Map}ledgerForPeer(t){let e=t.toString(),n=this.ledgerMap.get(e);if(n!=null)return{peer:n.partner,value:n.debtRatio(),sent:n.accounting.bytesSent,recv:n.accounting.bytesRecv,exchanged:n.exchangeCount}}peers(){return Array.from(this.ledgerMap.values()).map(t=>t.partner)}receivedBlocks(t){if(t.length!==0){for(let e of this.ledgerMap.values())for(let{cid:n,block:i}of t){let s=e.wantlistContains(n);if(s==null)continue;let o=i.length,a=this._sendAsBlock(s.wantType,o),c=o;a||(c=x.blockPresenceSize(s.cid)),this._requestQueue.pushTasks(e.partner,[{topic:s.cid.toString(w),priority:s.priority,size:c,data:{blockSize:o,isWantBlock:a,haveBlock:!0,sendDontHave:!1}}])}this._scheduleProcessTasks()}}async messageReceived(t,e){let n=this._findOrCreate(t);if(e.empty)return;if(e.full&&(n.wantlist=new rt),this._updateBlockAccounting(e.blocks,n),e.wantlist.size===0){this._scheduleProcessTasks();return}let i=[],s=[];e.wantlist.forEach(o=>{o.cancel?(n.cancelWant(o.cid),i.push(o.cid)):(n.wants(o.cid,o.priority,o.wantType),s.push(o))}),this._cancelWants(t,i),await this._addWants(t,s),this._scheduleProcessTasks()}_cancelWants(t,e){for(let n of e)this._requestQueue.remove(n.toString(w),t)}async _addWants(t,e){let n=await this._getBlockSizes(e.map(s=>s.cid)),i=[];for(let s of e){let o=s.cid.toString(w),a=n.get(o);if(a==null)s.sendDontHave&&i.push({topic:o,priority:s.priority,size:x.blockPresenceSize(s.cid),data:{isWantBlock:s.wantType===ss.Block,blockSize:0,haveBlock:!1,sendDontHave:s.sendDontHave}});else{let c=this._sendAsBlock(s.wantType,a),u=a;c||(u=x.blockPresenceSize(s.cid)),i.push({topic:o,priority:s.priority,size:u,data:{isWantBlock:c,blockSize:a,haveBlock:!0,sendDontHave:s.sendDontHave}})}this._requestQueue.pushTasks(t,i)}}_sendAsBlock(t,e){return t===ss.Block||e<=this._opts.maxSizeReplaceHasWithBlock}async _getBlockSizes(t){let e=await this._getBlocks(t);return new Map([...e].map(([n,i])=>[n,i.length]))}async _getBlocks(t){let e=new Map;return await Promise.all(t.map(async n=>{try{let i=await this.blockstore.get(n);e.set(n.toString(w),i)}catch(i){i.code!=="ERR_NOT_FOUND"&&this._log.error("failed to query blockstore for %s: %s",n,i)}})),e}_updateBlockAccounting(t,e){for(let n of t.values())this._log("got block (%s bytes)",n.length),e.receivedBytes(n.length)}messageSent(t,e,n){let i=this._findOrCreate(t);i.sentBytes(n.length),i.wantlist.remove(e)}numBytesSentTo(t){return this._findOrCreate(t).accounting.bytesSent}numBytesReceivedFrom(t){return this._findOrCreate(t).accounting.bytesRecv}peerDisconnected(t){this.ledgerMap.delete(t.toString())}_findOrCreate(t){let e=t.toString(),n=this.ledgerMap.get(e);if(n!=null)return n;let i=new Se(t);return this.ledgerMap.set(e,i),this._stats!=null&&this._stats.push(e,"peerCount",1),i}start(){this._running=!0}stop(){this._running=!1}};var Ss=F(Te(),1);var Br={};z(Br,{identity:()=>bc});var bc=Lt({prefix:"\0",name:"identity",encode:r=>Xr(r),decode:r=>Qr(r)});var Cr={};z(Cr,{base2:()=>_c});var _c=A({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1});var Lr={};z(Lr,{base8:()=>vc});var vc=A({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3});var Ar={};z(Ar,{base10:()=>xc});var xc=it({prefix:"9",name:"base10",alphabet:"0123456789"});var Tr={};z(Tr,{base16:()=>kc,base16upper:()=>Sc});var kc=A({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),Sc=A({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4});var Or={};z(Or,{base36:()=>Ec,base36upper:()=>Bc});var Ec=it({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),Bc=it({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"});var Pr={};z(Pr,{base256emoji:()=>Oc});var ms=Array.from("\u{1F680}\u{1FA90}\u2604\u{1F6F0}\u{1F30C}\u{1F311}\u{1F312}\u{1F313}\u{1F314}\u{1F315}\u{1F316}\u{1F317}\u{1F318}\u{1F30D}\u{1F30F}\u{1F30E}\u{1F409}\u2600\u{1F4BB}\u{1F5A5}\u{1F4BE}\u{1F4BF}\u{1F602}\u2764\u{1F60D}\u{1F923}\u{1F60A}\u{1F64F}\u{1F495}\u{1F62D}\u{1F618}\u{1F44D}\u{1F605}\u{1F44F}\u{1F601}\u{1F525}\u{1F970}\u{1F494}\u{1F496}\u{1F499}\u{1F622}\u{1F914}\u{1F606}\u{1F644}\u{1F4AA}\u{1F609}\u263A\u{1F44C}\u{1F917}\u{1F49C}\u{1F614}\u{1F60E}\u{1F607}\u{1F339}\u{1F926}\u{1F389}\u{1F49E}\u270C\u2728\u{1F937}\u{1F631}\u{1F60C}\u{1F338}\u{1F64C}\u{1F60B}\u{1F497}\u{1F49A}\u{1F60F}\u{1F49B}\u{1F642}\u{1F493}\u{1F929}\u{1F604}\u{1F600}\u{1F5A4}\u{1F603}\u{1F4AF}\u{1F648}\u{1F447}\u{1F3B6}\u{1F612}\u{1F92D}\u2763\u{1F61C}\u{1F48B}\u{1F440}\u{1F62A}\u{1F611}\u{1F4A5}\u{1F64B}\u{1F61E}\u{1F629}\u{1F621}\u{1F92A}\u{1F44A}\u{1F973}\u{1F625}\u{1F924}\u{1F449}\u{1F483}\u{1F633}\u270B\u{1F61A}\u{1F61D}\u{1F634}\u{1F31F}\u{1F62C}\u{1F643}\u{1F340}\u{1F337}\u{1F63B}\u{1F613}\u2B50\u2705\u{1F97A}\u{1F308}\u{1F608}\u{1F918}\u{1F4A6}\u2714\u{1F623}\u{1F3C3}\u{1F490}\u2639\u{1F38A}\u{1F498}\u{1F620}\u261D\u{1F615}\u{1F33A}\u{1F382}\u{1F33B}\u{1F610}\u{1F595}\u{1F49D}\u{1F64A}\u{1F639}\u{1F5E3}\u{1F4AB}\u{1F480}\u{1F451}\u{1F3B5}\u{1F91E}\u{1F61B}\u{1F534}\u{1F624}\u{1F33C}\u{1F62B}\u26BD\u{1F919}\u2615\u{1F3C6}\u{1F92B}\u{1F448}\u{1F62E}\u{1F646}\u{1F37B}\u{1F343}\u{1F436}\u{1F481}\u{1F632}\u{1F33F}\u{1F9E1}\u{1F381}\u26A1\u{1F31E}\u{1F388}\u274C\u270A\u{1F44B}\u{1F630}\u{1F928}\u{1F636}\u{1F91D}\u{1F6B6}\u{1F4B0}\u{1F353}\u{1F4A2}\u{1F91F}\u{1F641}\u{1F6A8}\u{1F4A8}\u{1F92C}\u2708\u{1F380}\u{1F37A}\u{1F913}\u{1F619}\u{1F49F}\u{1F331}\u{1F616}\u{1F476}\u{1F974}\u25B6\u27A1\u2753\u{1F48E}\u{1F4B8}\u2B07\u{1F628}\u{1F31A}\u{1F98B}\u{1F637}\u{1F57A}\u26A0\u{1F645}\u{1F61F}\u{1F635}\u{1F44E}\u{1F932}\u{1F920}\u{1F927}\u{1F4CC}\u{1F535}\u{1F485}\u{1F9D0}\u{1F43E}\u{1F352}\u{1F617}\u{1F911}\u{1F30A}\u{1F92F}\u{1F437}\u260E\u{1F4A7}\u{1F62F}\u{1F486}\u{1F446}\u{1F3A4}\u{1F647}\u{1F351}\u2744\u{1F334}\u{1F4A3}\u{1F438}\u{1F48C}\u{1F4CD}\u{1F940}\u{1F922}\u{1F445}\u{1F4A1}\u{1F4A9}\u{1F450}\u{1F4F8}\u{1F47B}\u{1F910}\u{1F92E}\u{1F3BC}\u{1F975}\u{1F6A9}\u{1F34E}\u{1F34A}\u{1F47C}\u{1F48D}\u{1F4E3}\u{1F942}"),Cc=ms.reduce((r,t,e)=>(r[e]=t,r),[]),Lc=ms.reduce((r,t,e)=>(r[t.codePointAt(0)]=e,r),[]);function Ac(r){return r.reduce((t,e)=>(t+=Cc[e],t),"")}function Tc(r){let t=[];for(let e of r){let n=Lc[e.codePointAt(0)];if(n===void 0)throw new Error(`Non-base256emoji character: ${e}`);t.push(n)}return new Uint8Array(t)}var Oc=Lt({prefix:"\u{1F680}",name:"base256emoji",encode:Ac,decode:Tc});var Dr={};z(Dr,{identity:()=>Nc});var ys=0,Pc="identity",ws=et,Dc=r=>dt(ys,ws(r)),Nc={code:ys,name:Pc,encode:ws,digest:Dc};var Af=new TextEncoder,Tf=new TextDecoder;var Nr={...Br,...Cr,...Lr,...Ar,...Tr,...Ue,...Or,...ze,...Xe,...Pr},Mf={...$e,...Dr};function _s(r,t,e,n){return{name:r,prefix:t,encoder:{name:r,prefix:t,encode:e},decoder:{decode:n}}}var bs=_s("utf8","u",r=>"u"+new TextDecoder("utf8").decode(r),r=>new TextEncoder().encode(r.substring(1))),Mr=_s("ascii","a",r=>{let t="a";for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return t},r=>{r=r.substring(1);let t=X(r.length);for(let e=0;e<r.length;e++)t[e]=r.charCodeAt(e);return t}),Rc={utf8:bs,"utf-8":bs,hex:Nr.base16,latin1:Mr,ascii:Mr,binary:Mr,...Nr},vs=Rc;function Fr(r,t="utf8"){let e=vs[t];if(e==null)throw new Error(`Unsupported encoding "${t}"`);return(t==="utf8"||t==="utf-8")&&globalThis.Buffer!=null&&globalThis.Buffer.from!=null?globalThis.Buffer.from(r.buffer,r.byteOffset,r.byteLength).toString("utf8"):e.encoder.encode(r).substring(1)}var xs=r=>`unwant:${Fr(r.multihash.bytes,"base64")}`,ks=r=>`block:${Fr(r.multihash.bytes,"base64")}`,Oe=class extends Ss.EventEmitter{constructor(t){super(),this.setMaxListeners(Oi),this._log=W(t,"notif")}hasBlock(t,e){let n=ks(t);this._log(n),this.emit(n,e)}async wantBlock(t,e={}){if(t==null)throw new Error("Not a valid cid");let n=ks(t),i=xs(t);return this._log(`wantBlock:${t}`),await new Promise((s,o)=>{let a=()=>{this.removeListener(n,c),e.onProgress?.(new J("bitswap:want-block:unwant",t)),o(new Error(`Block for ${t} unwanted`))},c=u=>{this.removeListener(i,a),e.onProgress?.(new J("bitswap:want-block:block",t)),s(u)};this.once(i,a),this.once(n,c),e.signal?.addEventListener("abort",()=>{this.removeListener(n,c),this.removeListener(i,a),o(new Error(`Want for ${t} aborted`))})})}unwantBlock(t){let e=xs(t);this._log(e),this.emit(e)}};var Ts=F(Te(),1);var Ls=F(Te(),1),Rr=F(Cs(),1),Kt=class extends Ls.EventEmitter{constructor(t,e){super(),this._options=e,this._queue=[],this._stats={},this._frequencyLastTime=Date.now(),this._frequencyAccumulators={},this._movingAverages={},this._update=this._update.bind(this),t.forEach(n=>{this._stats[n]=BigInt(0),this._movingAverages[n]={},this._options.movingAverageIntervals.forEach(i=>{(this._movingAverages[n][i]=(0,Rr.default)(i)).push(this._frequencyLastTime,0)})}),this._enabled=this._options.enabled}enable(){this._enabled=!0}disable(){this._enabled=!1}stop(){this._timeout!=null&&clearTimeout(this._timeout)}get snapshot(){return Object.assign({},this._stats)}get movingAverages(){return Object.assign({},this._movingAverages)}push(t,e){this._enabled&&(this._queue.push([t,e,Date.now()]),this._resetComputeTimeout())}_resetComputeTimeout(){this._timeout!=null&&clearTimeout(this._timeout),this._timeout=setTimeout(this._update,this._nextTimeout())}_nextTimeout(){let t=this._queue.length/this._options.computeThrottleMaxQueueSize;return Math.max(this._options.computeThrottleTimeout*(1-t),0)}_update(){if(this._timeout=void 0,this._queue.length>0){let t;for(;this._queue.length>0;){let e=t=this._queue.shift();e!=null&&this._applyOp(e)}t!=null&&this._updateFrequency(t[2]),this.emit("update",this._stats)}}_updateFrequency(t){let e=t-this._frequencyLastTime;e>0&&Object.keys(this._stats).forEach(n=>{this._updateFrequencyFor(n,e,t)}),this._frequencyLastTime=t}_updateFrequencyFor(t,e,n){let i=this._frequencyAccumulators[t]??0;this._frequencyAccumulators[t]=0;let s=i/e*1e3,o=this._movingAverages[t];o==null&&(o=this._movingAverages[t]={}),this._options.movingAverageIntervals.forEach(a=>{let c=o[a];c==null&&(c=o[a]=(0,Rr.default)(a)),c.push(n,s)})}_applyOp(t){let e=t[0],n=t[1];if(typeof n!="number")throw new Error(`invalid increment number: ${n}`);Object.prototype.hasOwnProperty.call(this._stats,e)||(this._stats[e]=BigInt(0)),this._stats[e]=BigInt(this._stats[e])+BigInt(n),this._frequencyAccumulators[e]==null&&(this._frequencyAccumulators[e]=0),this._frequencyAccumulators[e]+=n}};var As={enabled:!1,computeThrottleTimeout:1e3,computeThrottleMaxQueueSize:1e3,movingAverageIntervals:[60*1e3,5*60*1e3,15*60*1e3]},Pe=class extends Ts.EventEmitter{constructor(t,e=[],n=As){super();let i=Object.assign({},As,n);if(typeof i.computeThrottleTimeout!="number")throw new Error("need computeThrottleTimeout");if(typeof i.computeThrottleMaxQueueSize!="number")throw new Error("need computeThrottleMaxQueueSize");this._initialCounters=e,this._options=i,this._enabled=this._options.enabled,this._global=new Kt(e,i),this._global.on("update",s=>this.emit("update",s)),this._peers=ut({name:"ipfs_bitswap_stats_peers",metrics:t.metrics})}enable(){this._enabled=!0,this._options.enabled=!0,this._global.enable()}disable(){this._enabled=!1,this._options.enabled=!1,this._global.disable()}stop(){this._enabled=!1,this._global.stop();for(let t of this._peers)t[1].stop()}get snapshot(){return this._global.snapshot}get movingAverages(){return this._global.movingAverages}forPeer(t){let e=t.toString();return this._peers.get(e)}push(t,e,n){if(this._enabled&&(this._global.push(e,n),t!=null)){let i=this._peers.get(t);i==null&&(i=new Kt(this._initialCounters,this._options),this._peers.set(t,i)),i.push(e,n)}}disconnected(t){let e=t.toString(),n=this._peers.get(e);n!=null&&(n.stop(),this._peers.delete(e))}};var Ns=F(Ps(),1);function zc(r){return r[Symbol.asyncIterator]!=null}function Uc(r,t){if(zc(r))return async function*(){for await(let a of r)await t(a),yield a}();let e=xe(r),{value:n,done:i}=e.next();if(i===!0)return function*(){}();if(typeof t(n)?.then=="function")return async function*(){yield n;for await(let a of e)await t(a),yield a}();let o=t;return function*(){yield n;for(let a of e)o(a),yield a}()}var Ds=Uc;var Hc={async getHasher(){throw new Error("Not implemented")}},qc={maxInboundStreams:32,maxOutboundStreams:128,incomingStreamTimeout:3e4,hashLoader:Hc,statsEnabled:!1,statsComputeThrottleTimeout:1e3,statsComputeThrottleMaxQueueSize:1e3},Wc=["blocksReceived","dataReceived","dupBlksReceived","dupDataReceived","blocksSent","dataSent","providesBufferLength","wantListLength","peerCount"],Zt=class{constructor(t,e,n={}){this._libp2p=t,this._log=W(this.peerId),this._options=Object.assign({},qc,n),this.stats=new Pe(t,Wc,{enabled:this._options.statsEnabled,computeThrottleTimeout:this._options.statsComputeThrottleTimeout,computeThrottleMaxQueueSize:this._options.statsComputeThrottleMaxQueueSize}),this.network=new ke(t,this,this.stats,{hashLoader:n.hashLoader,maxInboundStreams:n.maxInboundStreams,maxOutboundStreams:n.maxOutboundStreams,incomingStreamTimeout:n.incomingStreamTimeout}),this.blockstore=e,this.engine=new Ce(this.peerId,e,this.network,this.stats,t),this.wm=new pe(this.peerId,this.network,this.stats,t),this.notifications=new Oe(this.peerId),this.started=!1}isStarted(){return this.started}get peerId(){return this._libp2p.peerId}async _receiveMessage(t,e){try{await this.engine.messageReceived(t,e)}catch{this._log("failed to receive message",e)}if(e.blocks.size===0)return;let n=[];for(let[i,s]of e.blocks.entries()){let o=b.parse(i);n.push({wasWanted:this.wm.wantlist.contains(o),cid:o,data:s})}this.wm.cancelWants(n.filter(({wasWanted:i})=>i).map(({cid:i})=>i)),await Promise.all(n.map(async({cid:i,wasWanted:s,data:o})=>{await this._handleReceivedBlock(t,i,o,s)}))}async _handleReceivedBlock(t,e,n,i){this._log("received block");let s=await this.blockstore.has(e);this._updateReceiveCounters(t.toString(),e,n,s),i&&await this.put(e,n)}_updateReceiveCounters(t,e,n,i){this.stats.push(t,"blocksReceived",1),this.stats.push(t,"dataReceived",n.length),i&&(this.stats.push(t,"dupBlksReceived",1),this.stats.push(t,"dupDataReceived",n.length))}_receiveError(t){this._log.error("ReceiveError",t)}_onPeerConnected(t){this.wm.connected(t)}_onPeerDisconnected(t){this.wm.disconnected(t),this.engine.peerDisconnected(t),this.stats.disconnected(t)}enableStats(){this.stats.enable()}disableStats(){this.stats.disable()}wantlistForPeer(t,e){return this.engine.wantlistForPeer(t)}ledgerForPeer(t){return this.engine.ledgerForPeer(t)}async want(t,e={}){let n=async(c,u)=>(this.wm.wantBlocks([c],u),await this.notifications.wantBlock(c,u)),i=!1,s=async(c,u)=>{try{return await this.blockstore.get(c,u)}catch(l){if(l.code!=="ERR_NOT_FOUND")throw l;return i||(i=!0,this.network.findAndConnect(c,u).catch(h=>{this._log.error(h)})),await n(c,u)}},o=new AbortController,a=e.signal!=null?(0,Ns.anySignal)([e.signal,o.signal]):o.signal;try{return await Promise.race([this.notifications.wantBlock(t,{...e,signal:a}),s(t,{...e,signal:a})])}finally{o.abort()}}unwant(t){let e=Array.isArray(t)?t:[t];this.wm.unwantBlocks(e),e.forEach(n=>{this.notifications.unwantBlock(n)})}cancelWants(t){this.wm.cancelWants(Array.isArray(t)?t:[t])}async put(t,e,n){await this.blockstore.put(t,e),this.notify(t,e)}async*putMany(t,e){yield*this.blockstore.putMany(Ds(t,({cid:n,block:i})=>{this.notify(n,i)}),e)}notify(t,e,n={}){this.notifications.hasBlock(t,e),this.engine.receivedBlocks([{cid:t,block:e}]),this.network.provide(t,n).catch(i=>{this._log.error("Failed to provide: %s",i.message)})}getWantlist(){return this.wm.wantlist.entries()}get peers(){return this.engine.peers()}async start(){this.wm.start(),await this.network.start(),this.engine.start(),this.started=!0}async stop(){this.stats.stop(),this.wm.stop(),await this.network.stop(),this.engine.stop(),this.started=!1}};var Rs=`\r
+`,Ms=new TextEncoder().encode(Rs);function zr(r){return async t=>{let e=t.method,n=new URL(t.url),i=t.headers,s=n.pathname,o=n.search,a=`${e} ${s}${o} HTTP/1.1${Rs}`;i.forEach((St,Hr)=>{a+=`${Hr}: ${St}\r
+`}),i.has("Host")||(a+=`Host: ${n.host}\r
+`);let c=null;(t.method==="POST"||t.method==="PUT"||t.method==="PATCH")&&t.body!==null&&(c=await t.arrayBuffer(),a+=`Content-Length: ${c.byteLength}\r
+`),a+=`\r
+`,r.sink(async function*(){yield new TextEncoder().encode(a),c!=null&&(yield new Uint8Array(c))}());let u=r.source,l="",h=!1,f="",g=!1,d=new Headers,p=!1,y="",S=new TextDecoder,B=$c(),O=B.writableStream.getWriter(),C=new ArrayBuffer(4<<10),E=new Uint8Array(C,0,0);await new Promise((St,Hr)=>{(async()=>{for await(let lt of u){Nt(lt)||(lt=new V(lt));for(let ht of lt){let Yt=0;if(!h||!g){let L=S.decode(ht);if(y!==""&&(L=y+L,y=""),!h){let M=L.indexOf(`\r
+`);M!==-1?(h=!0,l=L.substring(0,M),L=L.substring(M+2),Yt+=M+2):y=L}if(h&&!g){let M=L.indexOf(`\r
+`);if(M===0){if(g=!0,St(),L=L.substring(M+2),Yt+=M+2,L!==""){let G=new TextEncoder().encode(L);await O.write(G)}continue}let tt=L.indexOf(`\r
+\r
+`);if(tt!==-1){if(f=L.substring(0,tt),g=!0,f!==""&&f.split(`\r
+`).forEach(G=>{let[ft,qr]=G.split(": ");try{d.set(ft,qr)}catch(Is){console.warn("Couldn't set header",ft,qr,Is)}}),d.get("Transfer-Encoding")==="chunked"&&(p=!0),St(),L=L.substring(tt+4),Yt+=tt+4,L!==""){let G=ht.subarray(Yt);if(p){if(G=await Fs(G,O),G.byteLength>0){E=new Uint8Array(C,0,G.byteLength);for(let ft=0;ft<G.byteLength;ft++)E[ft]=G[ft]}}else await O.write(G)}}else y=L}}else if(p){if(E.length>0){let M=E.length;E=new Uint8Array(C,0,E.length+ht.length);for(let tt=0;tt<ht.length;tt++)E[M+tt]=ht[tt]}else E=ht;let L=await Fs(E,O);if(L.byteLength>0){E=new Uint8Array(C,0,L.byteLength);for(let M=0;M<L.byteLength;M++)E[M]=L[M]}else E=new Uint8Array(C,0,0)}else await O.write(ht)}}g||(g=!0,St()),await O.close()})().catch(async lt=>{console.error("Consumer errored:",lt),await O.abort(lt)})});let N=l.split(" ");if(N.length<2)throw new Error("Invalid status line");if(N.shift()!=="HTTP/1.1")throw new Error("Invalid HTTP version");let P=parseInt(N.shift(),10),R=N.join(" "),Y=B.readableStream;return(P===204||P===205||P===304)&&(Y=null),new Response(Y,{status:P,statusText:R,headers:d})}}function $c(){let r=new ByteLengthQueuingStrategy({highWaterMark:1}),t=16<<10,e=[],n=[],i=!1,s=new WritableStream({async write(c){let u=0,l;for(c instanceof Uint8Array?l=c:l=new Uint8Array(c.buffer,c.byteOffset,c.byteLength);l.length>0;){for(;e.length===0;)await new Promise((g,d)=>{n.push({resolve:g,reject:d})});let h=e.pop();if(i){h.reject(new Error("Writer closed"));return}let f;h.buf instanceof Uint8Array?f=h.buf:f=new Uint8Array(h.buf.buffer,h.buf.byteOffset,h.buf.byteLength),u=Math.min(f.length,l.length);for(let g=0;g<u;g++)f[g]=l[g];l=l.slice(u),h.resolve(u)}},close(){i=!0,e.length>0&&e.forEach(c=>{c.reject(new Error("Writer closed"))})},abort(c){i=!0,e.length>0&&e.forEach(u=>{u.reject(new Error("Writer closed"))}),console.error("Writer aborted",c)}},r),o=typeof ReadableByteStreamController<"u";return{readableStream:new ReadableStream({type:o?"bytes":void 0,autoAllocateChunkSize:o?t:void 0,start(c){},async pull(c){if(i){c.close();return}if(c.byobRequest?.view!=null){let u=c.byobRequest,l=new Promise((h,f)=>{e.push({buf:u.view,resolve:h,reject:f})});n.length>0&&n.pop()?.resolve(void 0);try{let h=await l;u.respond(h)}catch(h){if(i){c.close();return}c.error(h)}}else{let u=new ArrayBuffer(t),l=new Uint8Array(u),h=new Promise((f,g)=>{e.push({buf:l,resolve:f,reject:g})});n.length>0&&n.pop()?.resolve(void 0);try{let f=await h;c.enqueue(new Uint8Array(u,0,f))}catch(f){if(i){c.close();return}c.error(f)}}}}),writableStream:s}}async function Fs(r,t){let e;(function(o){o[o.ReadingChunkSize=1]="ReadingChunkSize",o[o.ReadingContent=2]="ReadingContent"})(e||(e={}));let n=e.ReadingChunkSize,i=0,s=0;for(;r.length>0;)if(n===e.ReadingChunkSize){let o=r.indexOf(Ms[0]);if(o===-1||r[o+1]!==Ms[1])return r;n=e.ReadingContent,i=parseInt(new TextDecoder().decode(r.slice(0,o)),16),s=o}else{let o=r.subarray(s+2);if(o.length<i+2)return r;await t.write(o.subarray(0,i)),r=o.subarray(i+2),n=e.ReadingChunkSize}return r}var Vc="/libp2p-http",Ur={httpOverLibp2pPeersLimit:5,bootstrapHttpOnlyPeers:[],bitswapOptions:{}},De=class{constructor(t,e,n,i=Ur){this.libp2p=t,this.innerBitswap=e,this.blockstore=n,this.stats=this.innerBitswap.stats,this.peers=this.innerBitswap.peers,this.httpOverLibp2pPeers=[],this.httpOnlyPeers=[],this.httpOverLibp2pPeersLimit=i.httpOverLibp2pPeersLimit??Ur.httpOverLibp2pPeersLimit;let s=i.bootstrapHttpOnlyPeers??Ur.bootstrapHttpOnlyPeers;t.peerStore.addEventListener("change:protocols",o=>{let{peerId:a,protocols:c}=o.detail;c.includes(Vc)&&this.newHttpOverLibp2pPeer(a)}),this.httpOnlyPeers=[...s]}newHttpOnlyPeer(t){this.httpOnlyPeers.push(t)}newHttpOverLibp2pPeer(t){if(this.httpOverLibp2pPeers.length<this.httpOverLibp2pPeersLimit){this.httpOverLibp2pPeers.push({val:t,timestamp:Date.now()});return}let e=0,n=this.httpOverLibp2pPeers[0].timestamp,i=0;for(let{timestamp:s,val:o}of this.httpOverLibp2pPeers){if(o===t)return;s<n&&(n=s,i=e),e++}this.httpOverLibp2pPeers[i]={val:t,timestamp:Date.now()}}wantlistForPeer(t){return this.innerBitswap.wantlistForPeer(t)}ledgerForPeer(t){return this.innerBitswap.ledgerForPeer(t)}unwant(t){this.innerBitswap.unwant(t)}cancelWants(t){this.innerBitswap.cancelWants(t)}getWantlist(){return this.innerBitswap.getWantlist()}notify(t,e,n){this.innerBitswap.notify(t,e,n)}async want(t,e){let n=new AbortController;e?.signal!=null&&e.signal.addEventListener("abort",()=>{n.abort()});let i=this.innerBitswap.want(t,{...e,signal:n.signal}),s=this.httpOverLibp2pPeers.map(async({val:c})=>{try{let u=await this.libp2p.dial(c,{signal:e?.signal});{let g=await u.newStream("/libp2p-http",{signal:e?.signal});if(!(await zr(g)(new Request(`https://example.com/ipfs/${t.toString()}/`,{method:"HEAD",headers:{"Cache-Control":"only-if-cached"}}))).ok)throw new Error("Not found")}let l=await u.newStream("/libp2p-http",{signal:e?.signal}),f=await zr(l)(new Request(`https://example.com/ipfs/${t.toString()}/?format=raw`));if(f.ok){let g=new Uint8Array(await f.arrayBuffer());return await this.blockstore.put(t,g),g}throw new Error("Not found")}catch(u){throw await new Promise(l=>{e?.signal?.addEventListener("abort",l)}),u}}),o=this.httpOnlyPeers.map(async c=>{try{if(!(await fetch(new Request(`${c}/ipfs/${t.toString()}/`,{method:"HEAD"}),{signal:e?.signal})).ok)throw new Error("Not found");let u=await fetch(new Request(`${c}/ipfs/${t.toString()}/?format=raw`),{signal:e?.signal});if(u.ok){let l=new Uint8Array(await u.arrayBuffer());return await this.blockstore.put(t,l),l}throw new Error("Not found")}catch(u){throw await new Promise(l=>{e?.signal?.addEventListener("abort",l)}),u}}),a=await Promise.race([i,...s,...o]);return this.innerBitswap.notify(t,a),n.abort(),a}isStarted(){return this.innerBitswap.isStarted()}beforeStart(){return this.innerBitswap.beforeStart?.()}start(){return this.innerBitswap.start()}afterStart(){return this.innerBitswap.afterStart?.()}beforeStop(){return this.innerBitswap.beforeStop?.()}stop(){return this.innerBitswap.stop()}afterStop(){return this.innerBitswap.afterStop?.()}};var Gc=(r,t,e={})=>new Zt(r,t,e),jc=(r,t,e={})=>{let n=new Zt(r,t,e.bitswapOptions);return new De(r,n,t,e)};return $s(Qc);})();
 return IpfsBitswap}));
diff --git a/node_modules/ipfs-bitswap/dist/src/http-bitswap.d.ts b/node_modules/ipfs-bitswap/dist/src/http-bitswap.d.ts
new file mode 100644
index 0000000..da3af29
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/src/http-bitswap.d.ts
@@ -0,0 +1,51 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { AbortOptions } from '@libp2p/interfaces';
+import type { CID, Version } from 'multiformats';
+import type { ProgressOptions } from 'progress-events';
+import type { Bitswap, WantListEntry, BitswapWantBlockProgressEvents, Ledger, Stats, BitswapOptions } from './index.js';
+import type { Blockstore } from 'interface-blockstore';
+import type { BitswapNetworkNotifyProgressEvents } from './network.js';
+import type { Libp2p } from 'libp2p';
+interface WithTimestamp<T> {
+    val: T;
+    timestamp: number;
+}
+export interface HttpBitswapOptions {
+    httpOverLibp2pPeersLimit?: number;
+    bootstrapHttpOnlyPeers?: string[];
+    bitswapOptions?: BitswapOptions;
+}
+export declare const defaultOptions: {
+    httpOverLibp2pPeersLimit: number;
+    bootstrapHttpOnlyPeers: never[];
+    bitswapOptions: {};
+};
+export declare class HttpBitswap implements Bitswap {
+    private readonly libp2p;
+    private readonly innerBitswap;
+    private readonly blockstore;
+    stats: Stats;
+    peers: PeerId[];
+    httpOverLibp2pPeersLimit: number;
+    httpOverLibp2pPeers: Array<WithTimestamp<PeerId>>;
+    httpOnlyPeers: string[];
+    constructor(libp2p: Libp2p, innerBitswap: Bitswap, blockstore: Blockstore, options?: HttpBitswapOptions);
+    newHttpOnlyPeer(url: string): void;
+    private newHttpOverLibp2pPeer;
+    wantlistForPeer(peerId: PeerId): Map<string, WantListEntry>;
+    ledgerForPeer(peerId: PeerId): Ledger | undefined;
+    unwant(cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void;
+    cancelWants(cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void;
+    getWantlist(): IterableIterator<[string, WantListEntry]>;
+    notify(cid: CID<unknown, number, number, Version>, block: Uint8Array, options?: ProgressOptions<BitswapNetworkNotifyProgressEvents>): void;
+    want(cid: CID<unknown, number, number, Version>, options?: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents>): Promise<Uint8Array>;
+    isStarted(): boolean;
+    beforeStart?(): void | Promise<void>;
+    start(): void | Promise<void>;
+    afterStart?(): void | Promise<void>;
+    beforeStop?(): void | Promise<void>;
+    stop(): void | Promise<void>;
+    afterStop?(): void | Promise<void>;
+}
+export {};
+//# sourceMappingURL=http-bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/http-bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/src/http-bitswap.d.ts.map
new file mode 100644
index 0000000..87783c7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/src/http-bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"http-bitswap.d.ts","sourceRoot":"","sources":["../../src/http-bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/http-bitswap.js b/node_modules/ipfs-bitswap/dist/src/http-bitswap.js
new file mode 100644
index 0000000..4bf69cb
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/src/http-bitswap.js
@@ -0,0 +1,162 @@
+import { fetchViaDuplex } from '@marcopolo_/libp2p-fetch';
+// TODO: this should be a different protocol id
+const IPFS_GATEWAY_PROTOCOL = '/libp2p-http';
+export const defaultOptions = {
+    httpOverLibp2pPeersLimit: 5,
+    bootstrapHttpOnlyPeers: [],
+    bitswapOptions: {}
+};
+export class HttpBitswap {
+    constructor(libp2p, innerBitswap, blockstore, options = defaultOptions) {
+        this.libp2p = libp2p;
+        this.innerBitswap = innerBitswap;
+        this.blockstore = blockstore;
+        this.stats = this.innerBitswap.stats;
+        this.peers = this.innerBitswap.peers;
+        this.httpOverLibp2pPeers = [];
+        this.httpOnlyPeers = [];
+        this.httpOverLibp2pPeersLimit = options.httpOverLibp2pPeersLimit ?? defaultOptions.httpOverLibp2pPeersLimit;
+        const bootstrapHttpOnlyPeers = options.bootstrapHttpOnlyPeers ?? defaultOptions.bootstrapHttpOnlyPeers;
+        libp2p.peerStore.addEventListener('change:protocols', (event) => {
+            const { peerId, protocols } = event.detail;
+            if (protocols.includes(IPFS_GATEWAY_PROTOCOL)) {
+                this.newHttpOverLibp2pPeer(peerId);
+            }
+        });
+        this.httpOnlyPeers = [...bootstrapHttpOnlyPeers];
+    }
+    newHttpOnlyPeer(url) {
+        this.httpOnlyPeers.push(url);
+    }
+    newHttpOverLibp2pPeer(peerId) {
+        if (this.httpOverLibp2pPeers.length < this.httpOverLibp2pPeersLimit) {
+            this.httpOverLibp2pPeers.push({ val: peerId, timestamp: Date.now() });
+            return;
+        }
+        let i = 0;
+        let minTimestamp = this.httpOverLibp2pPeers[0].timestamp;
+        let minIndex = 0;
+        for (const { timestamp, val } of this.httpOverLibp2pPeers) {
+            if (val === peerId) {
+                return; // Already have this peer
+            }
+            if (timestamp < minTimestamp) {
+                minTimestamp = timestamp;
+                minIndex = i;
+            }
+            i++;
+        }
+        this.httpOverLibp2pPeers[minIndex] = { val: peerId, timestamp: Date.now() };
+    }
+    wantlistForPeer(peerId) {
+        return this.innerBitswap.wantlistForPeer(peerId);
+    }
+    ledgerForPeer(peerId) {
+        return this.innerBitswap.ledgerForPeer(peerId);
+    }
+    unwant(cids) {
+        this.innerBitswap.unwant(cids);
+    }
+    cancelWants(cids) {
+        this.innerBitswap.cancelWants(cids);
+    }
+    getWantlist() {
+        return this.innerBitswap.getWantlist();
+    }
+    notify(cid, block, options) {
+        this.innerBitswap.notify(cid, block, options);
+    }
+    async want(cid, options) {
+        // Start a bitswap req
+        const abortController = new AbortController();
+        if ((options?.signal) != null) {
+            options.signal.addEventListener('abort', () => { abortController.abort(); });
+        }
+        const bitswapWantPromise = this.innerBitswap.want(cid, { ...options, signal: abortController.signal });
+        // Start a http req over libp2p
+        const httpOverLibp2pReqs = this.httpOverLibp2pPeers.map(async ({ val: peerId }) => {
+            try {
+                const conn = await this.libp2p.dial(peerId, { signal: options?.signal });
+                {
+                    const s = await conn.newStream('/libp2p-http', { signal: options?.signal });
+                    const fetch = fetchViaDuplex(s);
+                    const resp = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }));
+                    if (!resp.ok) {
+                        // We don't have the block here, block on the abort signal
+                        throw new Error('Not found');
+                    }
+                }
+                const s = await conn.newStream('/libp2p-http', { signal: options?.signal });
+                const fetch = fetchViaDuplex(s);
+                const resp = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/?format=raw`));
+                if (resp.ok) {
+                    const block = new Uint8Array(await resp.arrayBuffer());
+                    await this.blockstore.put(cid, block);
+                    return block;
+                }
+                // Otherwise, do nothing and block on the abort signal
+                throw new Error('Not found');
+            }
+            catch (err) {
+                // Wait for the abort so others can provide
+                await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve); });
+                throw err;
+            }
+        });
+        const httpOnlyReqs = this.httpOnlyPeers.map(async (url) => {
+            try {
+                {
+                    // We should be using the Cache-Control header, but this is not a CORS allowed header on some gateways
+                    // const resp: Response = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }), { signal: options?.signal })
+                    const resp = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD' }), { signal: options?.signal });
+                    if (!resp.ok) {
+                        throw new Error('Not found');
+                    }
+                }
+                const resp = await fetch(new Request(`${url}/ipfs/${cid.toString()}/?format=raw`), { signal: options?.signal });
+                if (resp.ok) {
+                    const block = new Uint8Array(await resp.arrayBuffer());
+                    await this.blockstore.put(cid, block);
+                    return block;
+                }
+                throw new Error('Not found');
+            }
+            catch (err) {
+                // Wait for the abort so others can provide the block
+                await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve); });
+                throw err;
+            }
+        });
+        // Wait for the first to finish
+        const block = await Promise.race([
+            bitswapWantPromise,
+            ...httpOverLibp2pReqs,
+            ...httpOnlyReqs
+        ]);
+        this.innerBitswap.notify(cid, block);
+        abortController.abort();
+        return block;
+    }
+    isStarted() {
+        return this.innerBitswap.isStarted();
+    }
+    beforeStart() {
+        return this.innerBitswap.beforeStart?.();
+    }
+    start() {
+        return this.innerBitswap.start();
+    }
+    afterStart() {
+        return this.innerBitswap.afterStart?.();
+    }
+    beforeStop() {
+        return this.innerBitswap.beforeStop?.();
+    }
+    stop() {
+        return this.innerBitswap.stop();
+    }
+    afterStop() {
+        return this.innerBitswap.afterStop?.();
+    }
+}
+//# sourceMappingURL=http-bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/http-bitswap.js.map b/node_modules/ipfs-bitswap/dist/src/http-bitswap.js.map
new file mode 100644
index 0000000..9c3e6b4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/src/http-bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"http-bitswap.js","sourceRoot":"","sources":["../../src/http-bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/index.d.ts b/node_modules/ipfs-bitswap/dist/src/index.d.ts
index 04a1500..80a7e3b 100644
--- a/node_modules/ipfs-bitswap/dist/src/index.d.ts
+++ b/node_modules/ipfs-bitswap/dist/src/index.d.ts
@@ -9,6 +9,7 @@ import type { AbortOptions } from '@libp2p/interfaces';
 import type { Startable } from '@libp2p/interfaces/startable';
 import type { ProgressEvent, ProgressOptions } from 'progress-events';
 import type { BitswapNetworkNotifyProgressEvents, BitswapNetworkWantProgressEvents } from './network.js';
+import { HttpBitswapOptions } from './http-bitswap.js';
 export interface WantListEntry {
     cid: CID;
     priority: number;
@@ -111,4 +112,5 @@ export interface BitswapOptions {
     hashLoader?: MultihashHasherLoader;
 }
 export declare const createBitswap: (libp2p: Libp2p, blockstore: Blockstore, options?: BitswapOptions) => Bitswap;
+export declare const createBitswapWithHTTP: (libp2p: Libp2p, blockstore: Blockstore, options?: HttpBitswapOptions) => Bitswap;
 //# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/index.d.ts.map b/node_modules/ipfs-bitswap/dist/src/index.d.ts.map
index 00c05f3..9aecaa6 100644
--- a/node_modules/ipfs-bitswap/dist/src/index.d.ts.map
+++ b/node_modules/ipfs-bitswap/dist/src/index.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/index.js b/node_modules/ipfs-bitswap/dist/src/index.js
index 377d149..80679c7 100644
--- a/node_modules/ipfs-bitswap/dist/src/index.js
+++ b/node_modules/ipfs-bitswap/dist/src/index.js
@@ -1,5 +1,10 @@
 import { DefaultBitswap } from './bitswap.js';
+import { HttpBitswap } from './http-bitswap.js';
 export const createBitswap = (libp2p, blockstore, options = {}) => {
     return new DefaultBitswap(libp2p, blockstore, options);
 };
+export const createBitswapWithHTTP = (libp2p, blockstore, options = {}) => {
+    const inner = new DefaultBitswap(libp2p, blockstore, options.bitswapOptions);
+    return new HttpBitswap(libp2p, inner, blockstore, options);
+};
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/src/index.js.map b/node_modules/ipfs-bitswap/dist/src/index.js.map
index a7aea2f..c0e1dc9 100644
--- a/node_modules/ipfs-bitswap/dist/src/index.js.map
+++ b/node_modules/ipfs-bitswap/dist/src/index.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAA;AA4I7C,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,UAAsB,EAAE,UAA0B,EAAE,EAAW,EAAE;IAC7G,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;AACxD,CAAC,CAAA"}
\ No newline at end of file
+{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAA;AAY7C,OAAO,EAAE,WAAW,EAAsB,MAAM,mBAAmB,CAAA;AAiInE,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,UAAsB,EAAE,UAA0B,EAAE,EAAW,EAAE;IAC7G,OAAO,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;AACxD,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,MAAc,EAAE,UAAsB,EAAE,UAA8B,EAAE,EAAW,EAAE;IACzH,MAAM,KAAK,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,cAAc,CAAC,CAAA;IAC5E,OAAO,IAAI,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAA;AAC5D,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.d.ts b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.d.ts
new file mode 100644
index 0000000..ba96f25
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=get-many.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.d.ts.map b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.d.ts.map
new file mode 100644
index 0000000..a629686
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"get-many.d.ts","sourceRoot":"","sources":["../../../test/benchmarks/get-many.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.js b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.js
new file mode 100644
index 0000000..cec35d1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.js
@@ -0,0 +1,11 @@
+/* eslint-disable no-console */
+import { distributionTest } from '../utils/distribution-test';
+import { print } from './helpers/print-swarm-results';
+import { EventEmitter } from 'events';
+void (async function () {
+    const emitter = new EventEmitter();
+    print('10 nodes, 10 blocks, 5 iterations', emitter);
+    await distributionTest(10, 10, 5, emitter);
+    console.log('Finished. Can kill now...');
+})();
+//# sourceMappingURL=get-many.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.js.map b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.js.map
new file mode 100644
index 0000000..2f54570
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/get-many.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"get-many.js","sourceRoot":"","sources":["../../../test/benchmarks/get-many.ts"],"names":[],"mappings":"AACA,+BAA+B;AAE/B,OAAO,EAAE,gBAAgB,EAAE,MAAM,4BAA4B,CAAA;AAC7D,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAA;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AAErC,KAAK,CAAC,KAAK;IACT,MAAM,OAAO,GAAG,IAAI,YAAY,EAAE,CAAA;IAElC,KAAK,CAAC,mCAAmC,EAAE,OAAO,CAAC,CAAA;IAEnD,MAAM,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAE1C,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAA;AAC1C,CAAC,CAAC,EAAE,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.d.ts b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.d.ts
new file mode 100644
index 0000000..2cc9b27
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.d.ts
@@ -0,0 +1,3 @@
+import type { EventEmitter } from 'node:events';
+export declare const print: (suite: any, emitter: EventEmitter) => void;
+//# sourceMappingURL=print-swarm-results.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.d.ts.map b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.d.ts.map
new file mode 100644
index 0000000..e554d02
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"print-swarm-results.d.ts","sourceRoot":"","sources":["../../../../test/benchmarks/helpers/print-swarm-results.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,aAAa,CAAA;AAG/C,eAAO,MAAM,KAAK,UAAW,GAAG,WAAW,YAAY,KAAG,IA+BzD,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.js b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.js
new file mode 100644
index 0000000..5d0f2a5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.js
@@ -0,0 +1,34 @@
+/* eslint-disable no-console */
+import stats from 'stats-lite';
+export const print = (suite, emitter) => {
+    const elapseds = [];
+    emitter.once('start', () => {
+        console.log('\n------------------------');
+        console.log(suite);
+        console.log('started');
+    });
+    emitter.once('all connected', () => {
+        console.log('all nodes connected to each other');
+    });
+    emitter.on('getting many', () => {
+        process.stdout.write('.');
+    });
+    emitter.once('stop', () => {
+        console.log('\nstopping');
+    });
+    emitter.once('stopped', () => {
+        console.log('stopped');
+        console.log('stats:');
+        console.log('---------');
+        console.log('mean: %s', stats.mean(elapseds));
+        console.log('median: %s', stats.median(elapseds));
+        console.log('variance: %s', stats.variance(elapseds));
+        console.log('standard deviation: %s', stats.stdev(elapseds));
+        console.log('85th percentile: %s', stats.percentile(elapseds, 0.85));
+    });
+    emitter.on('got block', (elapsed) => {
+        process.stdout.write('+');
+        elapseds.push(elapsed);
+    });
+};
+//# sourceMappingURL=print-swarm-results.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.js.map b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.js.map
new file mode 100644
index 0000000..46fe95b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/benchmarks/helpers/print-swarm-results.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"print-swarm-results.js","sourceRoot":"","sources":["../../../../test/benchmarks/helpers/print-swarm-results.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAG/B,OAAO,KAAK,MAAM,YAAY,CAAA;AAE9B,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,KAAU,EAAE,OAAqB,EAAQ,EAAE;IAC/D,MAAM,QAAQ,GAAa,EAAE,CAAA;IAC7B,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;QACzB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;QACzC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;QACjC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAA;IAClD,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,EAAE,CAAC,cAAc,EAAE,GAAG,EAAE;QAC9B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;QACxB,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;IAC3B,CAAC,CAAC,CAAA;IACF,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;QAC3B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACtB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;QACrB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;QACxB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC7C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;QACjD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrD,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;QAC5D,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAA;IACtE,CAAC,CAAC,CAAA;IAEF,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,EAAE;QAClC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACzB,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACxB,CAAC,CAAC,CAAA;AACJ,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.d.ts b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.d.ts
new file mode 100644
index 0000000..9f90843
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=bitswap-mock-internals.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.d.ts.map b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.d.ts.map
new file mode 100644
index 0000000..33a92f4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-mock-internals.d.ts","sourceRoot":"","sources":["../../test/bitswap-mock-internals.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.js b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.js
new file mode 100644
index 0000000..267281d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.js
@@ -0,0 +1,385 @@
+/* eslint-env mocha */
+/* eslint max-nested-callbacks: ["error", 5] */
+import { expect } from 'aegir/chai';
+import drain from 'it-drain';
+import { BitswapMessage as Message } from '../src/message/index.js';
+import { DefaultBitswap } from '../src/bitswap.js';
+import { CID } from 'multiformats/cid';
+import delay from 'delay';
+import { base58btc } from 'multiformats/bases/base58';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { isPeerId } from '@libp2p/interface-peer-id';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { mockNetwork, applyNetwork, mockLibp2pNode } from './utils/mocks.js';
+import { storeHasBlocks } from './utils/store-has-blocks.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { makePeerIds } from './utils/make-peer-id.js';
+import { orderedFinish } from './utils/helpers.js';
+const DAG_PB_CODEC = 0x70;
+const RAW_CODEC = 0x50;
+function wantsBlock(cid, bitswap) {
+    for (const [, value] of bitswap.getWantlist()) {
+        if (value.cid.equals(cid)) {
+            return true;
+        }
+    }
+    return false;
+}
+describe('bitswap with mocks', function () {
+    this.timeout(10 * 1000);
+    let blockstore;
+    let blocks;
+    let ids;
+    before(async () => {
+        blockstore = new MemoryBlockstore();
+        blocks = await makeBlocks(15);
+        ids = await makePeerIds(2);
+    });
+    describe('receive message', () => {
+        it('simple block message', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const other = ids[1];
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            bs.wm.wantBlocks([b1.cid, b2.cid]);
+            const msg = new Message(false);
+            msg.addBlock(b1.cid, b1.block);
+            msg.addBlock(b2.cid, b2.block);
+            await bs._receiveMessage(other, msg);
+            const blks = await Promise.all([
+                b1.cid, b2.cid
+            ].map(async (cid) => await blockstore.get(cid)));
+            expect(blks[0]).to.eql(b1.block);
+            expect(blks[1]).to.eql(b2.block);
+            const ledger = bs.ledgerForPeer(other);
+            if (ledger == null) {
+                throw new Error('No ledger found for peer');
+            }
+            expect(ledger.peer.toString()).to.equal(other.toString());
+            expect(ledger.value).to.equal(0);
+            expect(ledger.sent).to.equal(0);
+            expect(ledger.recv).to.equal(96);
+            expect(ledger.exchanged).to.equal(2);
+            await bs.stop();
+        });
+        it('simple want message', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const other = ids[1];
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            const msg = new Message(false);
+            msg.addEntry(b1.cid, 1);
+            msg.addEntry(b2.cid, 1);
+            await bs._receiveMessage(other, msg);
+            const wl = bs.wantlistForPeer(other);
+            expect(wl.has(b1.cid.toString(base58btc))).to.eql(true);
+            expect(wl.has(b2.cid.toString(base58btc))).to.eql(true);
+            await bs.stop();
+        });
+        it('multi peer', async function () {
+            this.timeout(80 * 1000);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const others = await makePeerIds(5);
+            const blocks = await makeBlocks(10);
+            const messages = await Promise.all(new Array(5).fill(0).map((_, i) => {
+                const msg = new Message(false);
+                msg.addBlock(blocks[i].cid, blocks[i].block);
+                msg.addBlock(blocks[i + 5].cid, blocks[i + 5].block);
+                return msg;
+            }));
+            let i = 0;
+            for (const other of others) {
+                const msg = messages[i];
+                i++;
+                const cids = [...msg.blocks.keys()].map(k => CID.parse(k));
+                bs.wm.wantBlocks(cids);
+                await bs._receiveMessage(other, msg);
+                await storeHasBlocks(msg, blockstore);
+            }
+            await bs.stop();
+        });
+        it('ignore unwanted blocks', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const other = ids[1];
+            const b1 = blocks[2];
+            const b2 = blocks[3];
+            const b3 = blocks[4];
+            bs.wm.wantBlocks([b2.cid]);
+            const msg = new Message(false);
+            msg.addBlock(b1.cid, b1.block);
+            msg.addBlock(b2.cid, b2.block);
+            msg.addBlock(b3.cid, b3.block);
+            await bs._receiveMessage(other, msg);
+            const res = await Promise.all([b1.cid, b2.cid, b3.cid]
+                .map(async (cid) => {
+                try {
+                    await blockstore.get(cid);
+                    return true;
+                }
+                catch {
+                    return false;
+                }
+            }));
+            expect(res).to.eql([false, true, false]);
+            const ledger = bs.ledgerForPeer(other);
+            if (ledger == null) {
+                throw new Error('No ledger found for peer');
+            }
+            expect(ledger.peer.toString()).to.equal(other.toString());
+            expect(ledger.value).to.equal(0);
+            // Note: Keeping track of received bytes for blocks affects the
+            // debt ratio, which in future may be used as part of fairness
+            // algorithms when prioritizing who to send blocks to.
+            // So we may want to revise whether we record received blocks from
+            // a peer even if we didn't ask for the blocks.
+            // For now keeping it liks this to match the go implementation:
+            // https://github.com/ipfs/go-bitswap/blob/acc22c283722c15436120ae522c8e8021d0b06f8/bitswap.go#L293
+            expect(ledger.sent).to.equal(0);
+            expect(ledger.recv).to.equal(144);
+            expect(ledger.exchanged).to.equal(3);
+            await bs.stop();
+        });
+    });
+    describe('get', () => {
+        it('fails on requesting empty block', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            try {
+                // @ts-expect-error we want this to fail
+                await bs.want(null);
+            }
+            catch (err) {
+                expect(err).to.exist();
+                expect(err.message).to.equal('Not a valid cid');
+            }
+        });
+        it('block exists locally', async () => {
+            const block = blocks[4];
+            await blockstore.put(block.cid, block.block);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            expect(await bs.want(block.cid)).to.equalBytes(block.block);
+        });
+        it('blocks exist locally', async () => {
+            const b1 = blocks[3];
+            const b2 = blocks[14];
+            const b3 = blocks[13];
+            await drain(blockstore.putMany([{ cid: b1.cid, block: b1.block }, { cid: b2.cid, block: b2.block }, { cid: b3.cid, block: b3.block }]));
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const retrievedBlocks = await Promise.all([b1.cid, b2.cid, b3.cid].map(async (cid) => await bs.want(cid)));
+            expect(retrievedBlocks).to.be.eql([b1.block, b2.block, b3.block]);
+        });
+        it('getMany', async () => {
+            const b1 = blocks[5];
+            const b2 = blocks[6];
+            const b3 = blocks[7];
+            await drain(blockstore.putMany([{ cid: b1.cid, block: b1.block }, { cid: b2.cid, block: b2.block }, { cid: b3.cid, block: b3.block }]));
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const block1 = await bs.want(b1.cid);
+            expect(block1).to.equalBytes(b1.block);
+            const block2 = await bs.want(b2.cid);
+            expect(block2).to.equalBytes(b2.block);
+            const block3 = await bs.want(b3.cid);
+            expect(block3).to.equalBytes(b3.block);
+        });
+        it('block is added locally afterwards', async () => {
+            const finish = orderedFinish(2);
+            const block = blocks[9];
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const net = mockNetwork();
+            bs.network = net;
+            bs.wm.network = net;
+            bs.engine.network = net;
+            await bs.start();
+            const get = bs.want(block.cid);
+            setTimeout(() => {
+                finish(1);
+                void bs.put(block.cid, block.block);
+            }, 200);
+            const res = await get;
+            expect(res).to.equalBytes(block.block);
+            finish(2);
+            finish.assert();
+            await bs.stop();
+        });
+        it('block is sent after local add', async () => {
+            const me = ids[0];
+            const other = ids[1];
+            const block = blocks[10];
+            const n1 = {
+                // @ts-expect-error incorrect return type
+                async connectTo(id) {
+                    if (!(isPeerId(id))) {
+                        throw new Error('Not a peer id');
+                    }
+                    if (id.toString() !== other.toString()) {
+                        throw new Error('unknown peer');
+                    }
+                    await Promise.resolve();
+                },
+                async sendMessage(id, msg) {
+                    if (id.toString() === other.toString()) {
+                        await bs2._receiveMessage(me, msg);
+                        return;
+                    }
+                    throw new Error('unknown peer');
+                },
+                async start() {
+                    await Promise.resolve();
+                },
+                async stop() {
+                    await Promise.resolve();
+                },
+                async findAndConnect(cid) {
+                    await Promise.resolve();
+                },
+                async provide(cid) {
+                    await Promise.resolve();
+                }
+            };
+            const n2 = {
+                // @ts-expect-error incorrect return type
+                async connectTo(id) {
+                    if (!(isPeerId(id))) {
+                        throw new Error('Not a peer id');
+                    }
+                    if (id.toString() !== me.toString()) {
+                        throw new Error('unknown peer');
+                    }
+                    await Promise.resolve();
+                },
+                async sendMessage(id, msg) {
+                    if (id.toString() === me.toString()) {
+                        await bs1._receiveMessage(other, msg);
+                        return;
+                    }
+                    throw new Error('unknown peer');
+                },
+                async start() {
+                    await Promise.resolve();
+                },
+                async stop() {
+                    await Promise.resolve();
+                },
+                async findAndConnect(cid) {
+                    await Promise.resolve();
+                },
+                async provide(cid) {
+                    await Promise.resolve();
+                }
+            };
+            // Create and start bs1
+            const bs1 = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            applyNetwork(bs1, n1);
+            await bs1.start();
+            // Create and start bs2
+            const bs2 = new DefaultBitswap(mockLibp2pNode(), new MemoryBlockstore());
+            applyNetwork(bs2, n2);
+            await bs2.start();
+            bs1._onPeerConnected(other);
+            bs2._onPeerConnected(me);
+            const p1 = bs1.want(block.cid);
+            setTimeout(() => {
+                void bs2.put(block.cid, block.block);
+            }, 1000);
+            const b1 = await p1;
+            expect(b1).to.equalBytes(block.block);
+            await bs1.stop();
+            await bs2.stop();
+        });
+        it('double get', async () => {
+            const block = blocks[11];
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const resP = Promise.all([
+                bs.want(block.cid),
+                bs.want(block.cid)
+            ]);
+            void bs.put(block.cid, block.block);
+            const res = await resP;
+            expect(res[0]).to.equalBytes(block.block);
+            expect(res[1]).to.equalBytes(block.block);
+        });
+        it('gets the same block data with different CIDs', async () => {
+            const block = blocks[11];
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            expect(block).to.have.nested.property('cid.code', DAG_PB_CODEC);
+            expect(block).to.have.nested.property('cid.version', 0);
+            const cid1 = CID.create(0, DAG_PB_CODEC, block.cid.multihash);
+            const cid2 = CID.createV1(DAG_PB_CODEC, block.cid.multihash);
+            const cid3 = CID.createV1(RAW_CODEC, block.cid.multihash);
+            const resP = Promise.all([
+                bs.want(cid1),
+                bs.want(cid2),
+                bs.want(cid3)
+            ]);
+            void bs.put(block.cid, block.block);
+            const res = await resP;
+            // blocks should have the requested CID but with the same data
+            expect(res[0]).to.equalBytes(block.block);
+            expect(res[1]).to.equalBytes(block.block);
+            expect(res[2]).to.equalBytes(block.block);
+        });
+        it('removes a block from the wantlist when the request is aborted', async () => {
+            const [block] = await makeBlocks(1);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const controller = new AbortController();
+            const p = bs.want(block.cid, {
+                signal: controller.signal
+            });
+            await delay(1000);
+            expect(wantsBlock(block.cid, bs)).to.be.true();
+            controller.abort();
+            await expect(p).to.eventually.rejectedWith(/aborted/);
+            expect(wantsBlock(block.cid, bs)).to.be.false();
+        });
+        it('block should still be in the wantlist if only one request is aborted', async () => {
+            const [block] = await makeBlocks(1);
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const controller = new AbortController();
+            // request twice
+            const p1 = bs.want(block.cid, {
+                signal: controller.signal
+            });
+            const p2 = bs.want(block.cid);
+            await delay(100);
+            // should want the block
+            expect(wantsBlock(block.cid, bs)).to.be.true();
+            // abort one request
+            controller.abort();
+            await expect(p1).to.eventually.rejectedWith(/aborted/);
+            // here comes the block
+            await bs.put(block.cid, block.block);
+            // should still want it
+            expect(wantsBlock(block.cid, bs)).to.be.true();
+            // second request should resolve with the block
+            expect(await p2).to.equalBytes(block.block);
+            // should not be in the want list any more
+            expect(wantsBlock(block.cid, bs)).to.be.false();
+        });
+    });
+    describe('unwant', () => {
+        it('removes blocks that are wanted multiple times', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            await bs.start();
+            const b = blocks[12];
+            const p = Promise.all([
+                bs.want(b.cid),
+                bs.want(b.cid)
+            ]);
+            setTimeout(() => { bs.unwant(b.cid); }, 1e3);
+            await expect(p).to.eventually.be.rejected();
+            await bs.stop();
+        });
+    });
+    describe('ledgerForPeer', () => {
+        it('returns null for unknown peer', async () => {
+            const bs = new DefaultBitswap(mockLibp2pNode(), blockstore);
+            const id = await createEd25519PeerId();
+            const ledger = bs.ledgerForPeer(id);
+            expect(ledger).to.be.undefined();
+        });
+    });
+});
+//# sourceMappingURL=bitswap-mock-internals.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.js.map b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.js.map
new file mode 100644
index 0000000..e7def7d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-mock-internals.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-mock-internals.js","sourceRoot":"","sources":["../../test/bitswap-mock-internals.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-stats.d.ts b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.d.ts
new file mode 100644
index 0000000..8ae1ac4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=bitswap-stats.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-stats.d.ts.map b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.d.ts.map
new file mode 100644
index 0000000..c222183
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-stats.d.ts","sourceRoot":"","sources":["../../test/bitswap-stats.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-stats.js b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.js
new file mode 100644
index 0000000..d5251e3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.js
@@ -0,0 +1,189 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { pEvent } from 'p-event';
+import { BitswapMessage as Message } from '../src/message/index.js';
+import { DefaultBitswap } from '../src/bitswap.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { createLibp2pNode } from './utils/create-libp2p-node.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { makePeerIds } from './utils/make-peer-id.js';
+/**
+ * @typedef {import('@libp2p/interface-libp2p').Libp2p} Libp2p
+ * @typedef {import('multiformats/cid').CID} CID
+ */
+const expectedStats = [
+    'blocksReceived',
+    'dataReceived',
+    'dupBlksReceived',
+    'dupDataReceived',
+    'blocksSent',
+    'dataSent',
+    'providesBufferLength',
+    'wantListLength'
+];
+const expectedTimeWindows = [
+    1000 * 60,
+    1000 * 60 * 5,
+    1000 * 60 * 15
+];
+describe('bitswap stats', () => {
+    let libp2pNodes;
+    let bitswaps;
+    let bs;
+    let blocks;
+    let ids;
+    before(async () => {
+        const nodes = [0, 1];
+        blocks = await makeBlocks(2);
+        ids = await makePeerIds(2);
+        // create 2 libp2p nodes
+        libp2pNodes = await Promise.all(nodes.map(async (i) => await createLibp2pNode({
+            DHT: true
+        })));
+        // create bitswaps
+        bitswaps = libp2pNodes.map((node, i) => new DefaultBitswap(node, new MemoryBlockstore(), {
+            statsEnabled: true,
+            statsComputeThrottleTimeout: 500 // fast update interval for tests
+        }));
+        bs = bitswaps[0];
+        bs.wm.wantBlocks(blocks.map(b => b.cid));
+        // start the first bitswap
+        await bs.start();
+    });
+    after(async () => {
+        await Promise.all(bitswaps.map(async (bs) => { await bs.stop(); }));
+        await Promise.all(libp2pNodes.map(async (n) => { await n.stop(); }));
+    });
+    it('has initial stats', () => {
+        const stats = bs.stats;
+        const snapshot = stats.snapshot;
+        expectedStats.forEach((key) => {
+            expect(snapshot).to.have.property(key);
+            expect(snapshot[key]).to.equal(BigInt(0));
+        });
+        const movingAverages = stats.movingAverages;
+        expectedStats.forEach((key) => {
+            expectedTimeWindows.forEach((timeWindow) => {
+                expect(movingAverages).to.have.property(key);
+                expect(stats.movingAverages[key]).to.have.property(`${timeWindow}`);
+                const ma = stats.movingAverages[key][timeWindow];
+                expect(ma.movingAverage()).to.eql(0);
+                expect(ma.variance()).to.eql(0);
+            });
+        });
+    });
+    it('updates blocks received', (done) => {
+        bs.stats.once('update', (stats) => {
+            expect(stats.blocksReceived).to.equal(BigInt(2));
+            expect(stats.dataReceived).to.equal(BigInt(96));
+            expect(stats.dupBlksReceived).to.equal(BigInt(0));
+            expect(stats.dupDataReceived).to.equal(BigInt(0));
+            expect(stats.blocksSent).to.equal(BigInt(0));
+            expect(stats.dataSent).to.equal(BigInt(0));
+            expect(stats.providesBufferLength).to.equal(BigInt(0));
+            expect(stats.wantListLength).to.equal(BigInt(0));
+            expect(stats.peerCount).to.equal(BigInt(1));
+            // test moving averages
+            const movingAverages = bs.stats.movingAverages;
+            const blocksReceivedMA = movingAverages.blocksReceived;
+            expectedTimeWindows.forEach((timeWindow) => {
+                expect(blocksReceivedMA).to.have.property(`${timeWindow}`);
+                const ma = blocksReceivedMA[timeWindow];
+                expect(ma.movingAverage()).to.be.above(0);
+                expect(ma.variance()).to.be.above(0);
+            });
+            const dataReceivedMA = movingAverages.dataReceived;
+            expectedTimeWindows.forEach((timeWindow) => {
+                expect(dataReceivedMA).to.have.property(`${timeWindow}`);
+                const ma = dataReceivedMA[timeWindow];
+                expect(ma.movingAverage()).to.be.above(0);
+                expect(ma.variance()).to.be.above(0);
+            });
+            done();
+        });
+        const other = ids[1];
+        const msg = new Message(false);
+        blocks.forEach((block) => { msg.addBlock(block.cid, block.block); });
+        void bs._receiveMessage(other, msg);
+    });
+    it('updates duplicate blocks counters', (done) => {
+        bs.stats.once('update', (stats) => {
+            expect(stats.blocksReceived).to.equal(BigInt(4));
+            expect(stats.dataReceived).to.equal(BigInt(192));
+            expect(stats.dupBlksReceived).to.equal(BigInt(2));
+            expect(stats.dupDataReceived).to.equal(BigInt(96));
+            expect(stats.blocksSent).to.equal(BigInt(0));
+            expect(stats.dataSent).to.equal(BigInt(0));
+            expect(stats.providesBufferLength).to.equal(BigInt(0));
+            done();
+        });
+        const other = ids[1];
+        const msg = new Message(false);
+        blocks.forEach((block) => { msg.addBlock(block.cid, block.block); });
+        void bs._receiveMessage(other, msg);
+    });
+    describe('connected to another bitswap', () => {
+        let bs2;
+        let block;
+        before(async () => {
+            bs2 = bitswaps[1];
+            await bs2.start();
+            const ma = libp2pNodes[1].getMultiaddrs()[0];
+            await libp2pNodes[0].dial(ma);
+            block = (await makeBlocks(1))[0];
+            await bs.put(block.cid, block.block);
+        });
+        after(async () => {
+            await bs2.stop();
+        });
+        it('updates stats on transfer', async () => {
+            const originalStats = bs.stats.snapshot;
+            expect(originalStats.blocksReceived).to.equal(BigInt(4));
+            expect(originalStats.dataReceived).to.equal(BigInt(192));
+            expect(originalStats.dupBlksReceived).to.equal(BigInt(2));
+            expect(originalStats.dupDataReceived).to.equal(BigInt(96));
+            expect(originalStats.blocksSent).to.equal(BigInt(0));
+            expect(originalStats.dataSent).to.equal(BigInt(0));
+            expect(originalStats.providesBufferLength).to.equal(BigInt(0));
+            expect(originalStats.wantListLength).to.equal(BigInt(0));
+            expect(originalStats.peerCount).to.equal(BigInt(1));
+            const deferred = pEvent(bs.stats, 'update');
+            // pull block from bs to bs2
+            await bs2.want(block.cid);
+            const nextStats = await deferred;
+            expect(nextStats.blocksReceived).to.equal(BigInt(4));
+            expect(nextStats.dataReceived).to.equal(BigInt(192));
+            expect(nextStats.dupBlksReceived).to.equal(BigInt(2));
+            expect(nextStats.dupDataReceived).to.equal(BigInt(96));
+            expect(nextStats.blocksSent).to.equal(BigInt(1));
+            expect(nextStats.dataSent).to.equal(BigInt(48));
+            expect(nextStats.providesBufferLength).to.equal(BigInt(0));
+            expect(nextStats.wantListLength).to.equal(BigInt(0));
+            expect(nextStats.peerCount).to.equal(BigInt(2));
+        });
+        it('has peer stats', async () => {
+            const peerStats = bs2.stats.forPeer(libp2pNodes[0].peerId);
+            expect(peerStats).to.exist();
+            if (peerStats == null) {
+                // needed for ts
+                throw new Error('No stats found for peer');
+            }
+            // trigger an update
+            peerStats.push('dataReceived', 1);
+            const stats = await pEvent(peerStats, 'update');
+            expect(stats.blocksReceived).to.equal(BigInt(1));
+            expect(stats.dataReceived).to.equal(BigInt(49));
+            expect(stats.dupBlksReceived).to.equal(BigInt(0));
+            expect(stats.dupDataReceived).to.equal(BigInt(0));
+            expect(stats.blocksSent).to.equal(BigInt(0));
+            expect(stats.dataSent).to.equal(BigInt(0));
+            expect(stats.providesBufferLength).to.equal(BigInt(0));
+            expect(stats.wantListLength).to.equal(BigInt(0));
+            expect(stats.peerCount).to.equal(BigInt(1));
+            const ma = peerStats.movingAverages.dataReceived[60000];
+            expect(ma.movingAverage()).to.be.above(0);
+            expect(ma.variance()).to.be.above(0);
+        });
+    });
+});
+//# sourceMappingURL=bitswap-stats.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap-stats.js.map b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.js.map
new file mode 100644
index 0000000..9a814b1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap-stats.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap-stats.js","sourceRoot":"","sources":["../../test/bitswap-stats.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap.d.ts b/node_modules/ipfs-bitswap/dist/test/bitswap.d.ts
new file mode 100644
index 0000000..fb240a5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/test/bitswap.d.ts.map
new file mode 100644
index 0000000..a907af2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap.d.ts","sourceRoot":"","sources":["../../test/bitswap.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap.js b/node_modules/ipfs-bitswap/dist/test/bitswap.js
new file mode 100644
index 0000000..f5e4741
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap.js
@@ -0,0 +1,171 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import sinon from 'sinon';
+import pWaitFor from 'p-wait-for';
+import { DefaultBitswap } from '../src/bitswap.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { createLibp2pNode } from './utils/create-libp2p-node.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { orderedFinish } from './utils/helpers.js';
+import { BitswapMessage as Message } from '../src/message/index.js';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import drain from 'it-drain';
+import { CID } from 'multiformats/cid';
+/**
+ * Creates a repo + libp2pNode + Bitswap with or without DHT
+ */
+async function createThing(dht) {
+    const libp2pNode = await createLibp2pNode({
+        DHT: dht
+    });
+    const bitswap = new DefaultBitswap(libp2pNode, new MemoryBlockstore());
+    await bitswap.start();
+    return { libp2pNode, bitswap };
+}
+describe('start/stop', () => {
+    it('should tell us if the node is started or not', async () => {
+        const libp2p = {
+            handle: async () => { },
+            unhandle: async () => { },
+            register: async () => { },
+            unregister: async () => { },
+            getConnections: () => []
+        };
+        // @ts-expect-error not a full libp2p
+        const bitswap = new DefaultBitswap(libp2p, new MemoryBlockstore());
+        expect(bitswap.isStarted()).to.be.false();
+        await bitswap.start();
+        expect(bitswap.isStarted()).to.be.true();
+        await bitswap.stop();
+        expect(bitswap.isStarted()).to.be.false();
+    });
+    it('notify should be a noop if not started', () => {
+        const libp2p = {
+            handle: async () => { },
+            unhandle: async () => { },
+            register: async () => { },
+            unregister: async () => { },
+            getConnections: () => []
+        };
+        // @ts-expect-error not a full libp2p
+        const bitswap = new DefaultBitswap(libp2p, new MemoryBlockstore());
+        expect(bitswap.isStarted()).to.be.false();
+        bitswap.notify(CID.parse('QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn'), new Uint8Array(0));
+    });
+});
+describe('bitswap without DHT', function () {
+    this.timeout(20 * 1000);
+    let nodes;
+    before(async () => {
+        nodes = await Promise.all([
+            createThing(false),
+            createThing(false),
+            createThing(false)
+        ]);
+        // connect 0 -> 1 && 1 -> 2
+        const ma1 = nodes[1].libp2pNode.getMultiaddrs()[0];
+        const ma2 = nodes[2].libp2pNode.getMultiaddrs()[0];
+        await Promise.all([
+            nodes[0].libp2pNode.dial(ma1),
+            nodes[1].libp2pNode.dial(ma2)
+        ]);
+    });
+    after(async () => {
+        await Promise.all(nodes.map(async (node) => await Promise.all([
+            node.bitswap.stop(),
+            node.libp2pNode.stop()
+        ])));
+    });
+    it('put a block in 2, fail to get it in 0', async () => {
+        const finish = orderedFinish(2);
+        const [block] = await makeBlocks(1);
+        await nodes[2].bitswap.put(block.cid, block.block);
+        const node0Get = nodes[0].bitswap.want(block.cid);
+        setTimeout(() => {
+            finish(1);
+            nodes[0].bitswap.unwant(block.cid);
+        }, 200);
+        await expect(node0Get).to.eventually.be.rejectedWith(/unwanted/);
+        finish(2);
+        finish.assert();
+    });
+    it('wants a block, receives a block, wants it again before the blockstore has it, receives it after the blockstore has it', async () => {
+        // the block we want
+        const [block] = await makeBlocks(1);
+        // id of a peer with the block we want
+        const peerId = await createEd25519PeerId();
+        // incoming message with requested block from the other peer
+        const message = new Message(false);
+        message.addEntry(block.cid, 1, Message.WantType.Block);
+        message.addBlock(block.cid, block.block);
+        const mockBlockstore = {
+            get: sinon.stub().withArgs(block.cid).throws({ code: 'ERR_NOT_FOUND' }),
+            has: sinon.stub().withArgs(block.cid).returns(false),
+            put: sinon.stub()
+        };
+        // slow blockstore
+        nodes[0].bitswap.blockstore = mockBlockstore;
+        // add the block to our want list
+        const wantBlockPromise1 = nodes[0].bitswap.want(block.cid);
+        // oh look, a peer has sent it to us - this will trigger a `blockstore.put` which
+        // is an async operation so `self.blockstore.get(cid)` will still throw
+        // until the write has completed
+        await nodes[0].bitswap._receiveMessage(peerId, message);
+        // block store did not have it
+        expect(mockBlockstore.get.calledWith(block.cid)).to.be.true();
+        // another context wants the same block
+        const wantBlockPromise2 = nodes[0].bitswap.want(block.cid);
+        // meanwhile the blockstore has written the block
+        nodes[0].bitswap.blockstore.has = sinon.stub().withArgs(block.cid).returns(true);
+        // here it comes again
+        await nodes[0].bitswap._receiveMessage(peerId, message);
+        // block store had it this time
+        expect(mockBlockstore.get.calledWith(block.cid)).to.be.true();
+        // both requests should get the block
+        expect(await wantBlockPromise1).to.equalBytes(block.block);
+        expect(await wantBlockPromise2).to.equalBytes(block.block);
+    });
+});
+describe('bitswap with DHT', function () {
+    this.timeout(60 * 1000);
+    let nodes;
+    before(async () => {
+        nodes = await Promise.all([
+            createThing(true),
+            createThing(true),
+            createThing(true)
+        ]);
+        // connect 0 -> 1 && 1 -> 2
+        const ma1 = nodes[1].libp2pNode.getMultiaddrs()[0];
+        const ma2 = nodes[2].libp2pNode.getMultiaddrs()[0];
+        await Promise.all([
+            nodes[0].libp2pNode.dial(ma1),
+            nodes[1].libp2pNode.dial(ma2)
+        ]);
+        // wait until dht routing tables are updated
+        await Promise.all([
+            pWaitFor(() => nodes[0].libp2pNode.dht?.lan?.routingTable?.size != null && nodes[0].libp2pNode.dht?.lan?.routingTable?.size >= 1),
+            pWaitFor(() => nodes[1].libp2pNode.dht?.lan?.routingTable?.size != null && nodes[1].libp2pNode.dht?.lan?.routingTable?.size >= 2),
+            pWaitFor(() => nodes[2].libp2pNode.dht?.lan?.routingTable?.size != null && nodes[2].libp2pNode.dht?.lan?.routingTable?.size >= 1)
+        ]);
+    });
+    after(async () => {
+        await Promise.all(nodes.map(async (node) => await Promise.all([
+            node.bitswap.stop(),
+            node.libp2pNode.stop()
+        ])));
+    });
+    it('put a block in 2, get it in 0', async () => {
+        const [block] = await makeBlocks(1);
+        if (nodes[2].libp2pNode.dht == null) {
+            throw new Error('DHT was not configured');
+        }
+        const provideSpy = sinon.spy(nodes[2].libp2pNode.dht, 'provide');
+        await nodes[2].bitswap.put(block.cid, block.block);
+        // wait for the DHT to finish providing
+        await drain(provideSpy.returnValues[0]);
+        const blockRetrieved = await nodes[0].bitswap.want(block.cid);
+        expect(block.block).to.eql(blockRetrieved);
+    });
+});
+//# sourceMappingURL=bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/bitswap.js.map b/node_modules/ipfs-bitswap/dist/test/bitswap.js.map
new file mode 100644
index 0000000..38588de
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"bitswap.js","sourceRoot":"","sources":["../../test/bitswap.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/browser.d.ts b/node_modules/ipfs-bitswap/dist/test/browser.d.ts
new file mode 100644
index 0000000..76b041f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/browser.d.ts
@@ -0,0 +1,3 @@
+import './bitswap-mock-internals.js';
+import './decision-engine/decision-engine.js';
+//# sourceMappingURL=browser.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/browser.d.ts.map b/node_modules/ipfs-bitswap/dist/test/browser.d.ts.map
new file mode 100644
index 0000000..59ac80a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/browser.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"browser.d.ts","sourceRoot":"","sources":["../../test/browser.ts"],"names":[],"mappings":"AACA,OAAO,6BAA6B,CAAA;AACpC,OAAO,sCAAsC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/browser.js b/node_modules/ipfs-bitswap/dist/test/browser.js
new file mode 100644
index 0000000..78deb60
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/browser.js
@@ -0,0 +1,3 @@
+import './bitswap-mock-internals.js';
+import './decision-engine/decision-engine.js';
+//# sourceMappingURL=browser.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/browser.js.map b/node_modules/ipfs-bitswap/dist/test/browser.js.map
new file mode 100644
index 0000000..40043d1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/browser.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"browser.js","sourceRoot":"","sources":["../../test/browser.ts"],"names":[],"mappings":"AACA,OAAO,6BAA6B,CAAA;AACpC,OAAO,sCAAsC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.d.ts b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.d.ts
new file mode 100644
index 0000000..b291d53
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=decision-engine.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.d.ts.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.d.ts.map
new file mode 100644
index 0000000..d64ab0c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"decision-engine.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/decision-engine.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.js b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.js
new file mode 100644
index 0000000..aa7f275
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.js
@@ -0,0 +1,666 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+// @ts-expect-error no types
+import range from 'lodash.range';
+// @ts-expect-error no types
+import difference from 'lodash.difference';
+// @ts-expect-error no types
+import flatten from 'lodash.flatten';
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { base58btc } from 'multiformats/bases/base58';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
+import drain from 'it-drain';
+import defer from 'p-defer';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { DecisionEngine } from '../../src/decision-engine/index.js';
+import { Stats } from '../../src/stats/index.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { makePeerId, makePeerIds } from '../utils/make-peer-id.js';
+import { mockNetwork } from '../utils/mocks.js';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+const sum = (nums) => nums.reduce((a, b) => a + b, 0);
+function messageToString(m) {
+    return Array.from(m.blocks.values())
+        .map((b) => uint8ArrayToString(b));
+}
+function stringifyMessages(messages) {
+    return flatten(messages.map(messageToString));
+}
+async function newEngine(network) {
+    const peerId = await createEd25519PeerId();
+    // @ts-expect-error {} is not a real libp2p
+    const engine = new DecisionEngine(peerId, new MemoryBlockstore(), network, new Stats({}), {});
+    engine.start();
+    return { peer: peerId, engine };
+}
+describe('Engine', () => {
+    it('consistent accounting', async () => {
+        const res = await Promise.all([
+            newEngine(mockNetwork()),
+            newEngine(mockNetwork())
+        ]);
+        const sender = res[0];
+        const receiver = res[1];
+        await Promise.all(range(1000).map(async (i) => {
+            const data = uint8ArrayFromString(`this is message ${i}`);
+            const hash = await sha256.digest(data);
+            const m = new Message(false);
+            const cid = CID.createV0(hash);
+            m.addBlock(cid, data);
+            sender.engine.messageSent(receiver.peer, cid, data);
+            await receiver.engine.messageReceived(sender.peer, m);
+        }));
+        expect(sender.engine.numBytesSentTo(receiver.peer))
+            .to.be.above(0);
+        expect(sender.engine.numBytesSentTo(receiver.peer))
+            .to.eql(receiver.engine.numBytesReceivedFrom(sender.peer));
+        expect(receiver.engine.numBytesSentTo(sender.peer))
+            .to.eql(0);
+        expect(sender.engine.numBytesReceivedFrom(receiver.peer))
+            .to.eql(0);
+    });
+    it('peer is added to peers when message received or sent', async () => {
+        const res = await Promise.all([
+            newEngine(mockNetwork()),
+            newEngine(mockNetwork())
+        ]);
+        const sanfrancisco = res[0];
+        const seattle = res[1];
+        const m = new Message(true);
+        sanfrancisco.engine.messageSent(seattle.peer, CID.parse('QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn'), new Uint8Array());
+        await seattle.engine.messageReceived(sanfrancisco.peer, m);
+        expect(seattle.peer.toString())
+            .to.not.eql(sanfrancisco.peer.toString());
+        expect(sanfrancisco.engine.peers()).to.include(seattle.peer);
+        expect(seattle.engine.peers()).to.include(sanfrancisco.peer);
+    });
+    it('partner wants then cancels', async function () {
+        this.timeout(40 * 1000);
+        const numRounds = 10;
+        const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');
+        const vowels = 'aeiou'.split('');
+        const testCases = [{
+                set: alphabet,
+                cancels: vowels
+            }, {
+                set: alphabet,
+                cancels: difference(alphabet, vowels)
+            }];
+        async function partnerWants(dEngine, values, partner) {
+            const message = new Message(false);
+            const hashes = await Promise.all(values.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+            hashes.forEach((hash, i) => {
+                message.addEntry(CID.createV0(hash), Math.pow(2, 32) - 1 - i);
+            });
+            await dEngine.messageReceived(partner, message);
+        }
+        async function partnerCancels(dEngine, values, partner) {
+            const message = new Message(false);
+            const hashes = await Promise.all(values.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+            hashes.forEach((hash) => {
+                message.cancel(CID.createV0(hash));
+            });
+            await dEngine.messageReceived(partner, message);
+        }
+        async function peerSendsBlocks(dEngine, blockstore, blocks) {
+            // Bitswap puts blocks into the blockstore then passes the blocks to the
+            // Decision Engine
+            await drain(blockstore.putMany(blocks));
+            dEngine.receivedBlocks(blocks);
+        }
+        const hashes = await Promise.all(alphabet.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+        const blocks = hashes.map((h, i) => {
+            return {
+                cid: CID.createV0(h),
+                block: uint8ArrayFromString(alphabet[i])
+            };
+        });
+        const partner = await createEd25519PeerId();
+        for (let i = 0; i < numRounds; i++) {
+            // 2 test cases
+            //   a) want alphabet - cancel vowels
+            //   b) want alphabet - cancels everything except vowels
+            for (const { set, cancels } of testCases) {
+                const keeps = difference(set, cancels);
+                const deferred = defer();
+                const network = mockNetwork(1, (res) => {
+                    const msgs = stringifyMessages(res.messages.map(([_, message]) => message));
+                    expect(msgs.sort()).to.eql(keeps.sort());
+                    deferred.resolve();
+                });
+                const id = await createEd25519PeerId();
+                const blockstore = new MemoryBlockstore();
+                // @ts-expect-error {} is not a real libp2p
+                const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {});
+                dEngine.start();
+                // Send wants then cancels for some of the wants
+                await partnerWants(dEngine, set, partner);
+                await partnerCancels(dEngine, cancels, partner);
+                // Simulate receiving blocks from the network
+                await peerSendsBlocks(dEngine, blockstore, blocks);
+                await deferred.promise;
+            }
+        }
+    });
+    it('round-robins incoming wants', async () => {
+        const id = await makePeerId();
+        const peers = await makePeerIds(3);
+        const blockSize = 256 * 1024;
+        const blocks = await makeBlocks(20, blockSize);
+        const blockIndex = (cid) => {
+            for (const [i, b] of blocks.entries()) {
+                if (b.cid.equals(cid)) {
+                    return i;
+                }
+            }
+            return -1;
+        };
+        const blockstore = new MemoryBlockstore();
+        await drain(blockstore.putMany(blocks));
+        let rcvdBlockCount = 0;
+        const received = new Map(peers.map(p => [p.toString(), { count: 0, bytes: 0 }]));
+        const deferred = defer();
+        const network = mockNetwork(blocks.length, undefined, (peer, msg) => {
+            const pid = peer.toString();
+            const rcvd = received.get(pid);
+            if (rcvd == null) {
+                deferred.reject(new Error(`Could not get received for peer ${pid}`));
+                return;
+            }
+            // Blocks should arrive in priority order.
+            // Note: we requested the blocks such that the priority order was
+            // highest at the start to lowest at the end.
+            for (const cidStr of msg.blocks.keys()) {
+                expect(blockIndex(CID.parse(cidStr))).to.gte(rcvd.count);
+            }
+            rcvd.count += msg.blocks.size;
+            rcvd.bytes += sum([...msg.blocks.values()].map(b => b.length));
+            // pendingBytes should be equal to the remaining data we're expecting
+            expect(msg.pendingBytes).to.eql(blockSize * blocks.length - rcvd.bytes);
+            // Expect each peer to receive blocks in a roughly round-robin fashion,
+            // in other words one peer shouldn't receive a bunch more blocks than
+            // the others at any given time.
+            for (const p of peers) {
+                if (p !== peer) {
+                    const peerCount = received.get(p.toString());
+                    if (peerCount == null) {
+                        deferred.reject(new Error(`Could not get peer count for ${p.toString()}`));
+                        return;
+                    }
+                    const pCount = peerCount.count;
+                    expect(rcvd.count - pCount).to.lt(blocks.length * 0.8);
+                }
+            }
+            // When all peers have received all the blocks, we're done
+            rcvdBlockCount += msg.blocks.size;
+            if (rcvdBlockCount === blocks.length * peers.length) {
+                // Make sure each peer received all blocks it was expecting
+                for (const peer of peers) {
+                    const pid = peer.toString();
+                    const rcvd = received.get(pid);
+                    if (rcvd == null) {
+                        deferred.reject(new Error(`Could not get peer count for ${pid}`));
+                        return;
+                    }
+                    expect(rcvd.count).to.eql(blocks.length);
+                }
+                deferred.resolve();
+            }
+        });
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {});
+        dEngine.start();
+        // Each peer requests all blocks
+        for (const peer of peers) {
+            const message = new Message(false);
+            for (const [i, block] of blocks.entries()) {
+                message.addEntry(block.cid, blocks.length - i);
+            }
+            await dEngine.messageReceived(peer, message);
+        }
+        await deferred.promise;
+    });
+    it('sends received blocks to peers that want them', async () => {
+        const [id, peer] = await makePeerIds(2);
+        const blocks = await makeBlocks(4, 8 * 1024);
+        const deferred = defer();
+        const network = mockNetwork(blocks.length, undefined, (peer, msg) => { deferred.resolve([peer, msg]); });
+        const blockstore = new MemoryBlockstore();
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {}, { maxSizeReplaceHasWithBlock: 0 });
+        dEngine.start();
+        const message = new Message(false);
+        message.addEntry(blocks[0].cid, 4, Message.WantType.Have, false);
+        message.addEntry(blocks[1].cid, 3, Message.WantType.Have, false);
+        message.addEntry(blocks[2].cid, 2, Message.WantType.Block, false);
+        message.addEntry(blocks[3].cid, 1, Message.WantType.Block, false);
+        await dEngine.messageReceived(peer, message);
+        // Simulate receiving message - put blocks into the blockstore then pass
+        // them to the Decision Engine
+        const rcvdBlocks = [blocks[0], blocks[2]];
+        await drain(blockstore.putMany(rcvdBlocks));
+        dEngine.receivedBlocks(rcvdBlocks);
+        // Wait till the engine sends a message
+        const [toPeer, msg] = await deferred.promise;
+        // Expect the message to be sent to the peer that wanted the blocks
+        expect(toPeer.toString()).to.eql(peer.toString());
+        // Expect the correct wanted block
+        expect(msg.blocks.size).to.eql(1);
+        expect(msg.blocks.has(blocks[2].cid.toString(base58btc))).to.eql(true);
+        // Expect the correct wanted HAVE
+        expect(msg.blockPresences.size).to.eql(1);
+        expect(msg.blockPresences.has(blocks[0].cid.toString(base58btc))).to.eql(true);
+        expect(msg.blockPresences.get(blocks[0].cid.toString(base58btc))).to.eql(Message.BlockPresenceType.Have);
+    });
+    it('sends DONT_HAVE', async () => {
+        const [id, peer] = await makePeerIds(2);
+        const blocks = await makeBlocks(4, 8 * 1024);
+        let onMsg;
+        const receiveMessage = async () => await new Promise(resolve => {
+            onMsg = resolve;
+        });
+        const network = mockNetwork(blocks.length, undefined, (peerId, message) => {
+            onMsg([peerId, message]);
+        });
+        const blockstore = new MemoryBlockstore();
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {}, { maxSizeReplaceHasWithBlock: 0 });
+        dEngine.start();
+        const message = new Message(false);
+        message.addEntry(blocks[0].cid, 4, Message.WantType.Have, false, false);
+        message.addEntry(blocks[1].cid, 3, Message.WantType.Have, false, true); // send dont have
+        message.addEntry(blocks[2].cid, 2, Message.WantType.Block, false, false);
+        message.addEntry(blocks[3].cid, 1, Message.WantType.Block, false, true); // send dont have
+        await dEngine.messageReceived(peer, message);
+        // Wait till the engine sends a message
+        const [toPeer, msg] = await receiveMessage();
+        // Expect DONT_HAVEs for blocks 1 and 3
+        expect(toPeer.toString()).to.eql(peer.toString());
+        expect(msg.blockPresences.size).to.eql(2);
+        for (const block of [blocks[1], blocks[3]]) {
+            const cid = block.cid.toString(base58btc);
+            expect(msg.blockPresences.has(cid)).to.eql(true);
+            expect(msg.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.DontHave);
+        }
+        // Simulate receiving message with blocks - put blocks into the blockstore
+        // then pass them to the Decision Engine
+        await drain(blockstore.putMany(blocks));
+        dEngine.receivedBlocks(blocks);
+        const [toPeer2, msg2] = await receiveMessage();
+        expect(toPeer2.toString()).to.eql(peer.toString());
+        expect(msg2.blocks.size).to.eql(2);
+        expect(msg2.blockPresences.size).to.eql(2);
+        for (const block of [blocks[0], blocks[1]]) {
+            const cid = block.cid.toString(base58btc);
+            expect(msg2.blockPresences.has(cid)).to.eql(true);
+            expect(msg2.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.Have);
+        }
+    });
+    it('handles want-have and want-block', async () => {
+        const [id, partner] = await makePeerIds(2);
+        const alphabet = 'abcdefghijklmnopqrstuvwxyz';
+        const vowels = 'aeiou';
+        const alphabetLs = alphabet.split('');
+        const hashes = await Promise.all(alphabetLs.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+        const blocks = hashes.map((h, i) => {
+            return {
+                cid: CID.createV0(h),
+                block: uint8ArrayFromString(alphabetLs[i])
+            };
+        });
+        let testCases = [
+            // Just send want-blocks
+            {
+                only: false,
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: '',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: vowels
+                }
+            },
+            // Send want-blocks and want-haves
+            {
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: 'fgh',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: vowels,
+                    haves: 'fgh'
+                }
+            },
+            // Send want-blocks and want-haves, with some want-haves that are not
+            // present, but without requesting DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: 'fgh123',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: vowels,
+                    haves: 'fgh'
+                }
+            },
+            // Send want-blocks and want-haves, with some want-haves that are not
+            // present, and request DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: vowels,
+                        wantHaves: 'fgh123',
+                        sendDontHave: true
+                    }
+                ],
+                exp: {
+                    blks: vowels,
+                    haves: 'fgh',
+                    dontHaves: '123'
+                }
+            },
+            // Send want-blocks and want-haves, with some want-blocks and want-haves that are not
+            // present, but without requesting DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: 'aeiou123',
+                        wantHaves: 'fgh456',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'fgh',
+                    dontHaves: ''
+                }
+            },
+            // Send want-blocks and want-haves, with some want-blocks and want-haves that are not
+            // present, and request DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: 'aeiou123',
+                        wantHaves: 'fgh456',
+                        sendDontHave: true
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'fgh',
+                    dontHaves: '123456'
+                }
+            },
+            // Send repeated want-blocks
+            {
+                wls: [
+                    {
+                        wantBlks: 'ae',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'io',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'u',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou'
+                }
+            },
+            // Send repeated want-blocks and want-haves
+            {
+                wls: [
+                    {
+                        wantBlks: 'ae',
+                        wantHaves: 'jk',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'io',
+                        wantHaves: 'lm',
+                        sendDontHave: false
+                    },
+                    {
+                        wantBlks: 'u',
+                        sendDontHave: false
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'jklm'
+                }
+            },
+            // Send repeated want-blocks and want-haves, with some want-blocks and want-haves that are not
+            // present, and request DONT_HAVES
+            {
+                wls: [
+                    {
+                        wantBlks: 'ae12',
+                        wantHaves: 'jk5',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'io34',
+                        wantHaves: 'lm',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'u',
+                        wantHaves: '6',
+                        sendDontHave: true
+                    }
+                ],
+                exp: {
+                    blks: 'aeiou',
+                    haves: 'jklm',
+                    dontHaves: '123456'
+                }
+            },
+            // Send want-block then want-have for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: 'a',
+                        sendDontHave: true
+                    },
+                    {
+                        wantHaves: 'a',
+                        sendDontHave: true
+                    }
+                ],
+                // want-have should be ignored because there was already a
+                // want-block for the same CID in the queue
+                exp: {
+                    blks: 'a'
+                }
+            },
+            // Send want-have then want-block for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: '',
+                        wantHaves: 'b',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'b',
+                        wantHaves: '',
+                        sendDontHave: true
+                    }
+                ],
+                // want-block should overwrite existing want-have
+                exp: {
+                    blks: 'b'
+                }
+            },
+            // Send want-block then want-block for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: 'a',
+                        wantHaves: '',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: 'a',
+                        wantHaves: '',
+                        sendDontHave: true
+                    }
+                ],
+                // second want-block should be ignored
+                exp: {
+                    blks: 'a'
+                }
+            },
+            // Send want-have then want-have for same CID
+            {
+                wls: [
+                    {
+                        wantBlks: '',
+                        wantHaves: 'a',
+                        sendDontHave: true
+                    },
+                    {
+                        wantBlks: '',
+                        wantHaves: 'a',
+                        sendDontHave: true
+                    }
+                ],
+                // second want-have should be ignored
+                exp: {
+                    haves: 'a'
+                }
+            }
+        ];
+        async function partnerWantBlocksHaves(dEngine, wantBlks, wantHaves, sendDontHave, partner) {
+            const wantTypes = [{
+                    type: Message.WantType.Block,
+                    blocks: wantBlks
+                }, {
+                    type: Message.WantType.Have,
+                    blocks: wantHaves
+                }];
+            let i = wantBlks.length + wantHaves.length;
+            const message = new Message(false);
+            for (const { type, blocks } of wantTypes) {
+                const hashes = await Promise.all(blocks.map(async (v) => await sha256.digest(uint8ArrayFromString(v))));
+                for (const hash of hashes) {
+                    message.addEntry(CID.createV0(hash), i--, type, false, sendDontHave);
+                }
+            }
+            await dEngine.messageReceived(partner, message);
+        }
+        let onMsg;
+        const nextMessage = async () => {
+            return await new Promise(resolve => {
+                onMsg = resolve;
+                void dEngine._processTasks();
+            });
+        };
+        const network = mockNetwork(blocks.length, undefined, (peer, msg) => {
+            onMsg?.(msg);
+            onMsg = undefined;
+        });
+        const blockstore = new MemoryBlockstore();
+        await drain(blockstore.putMany(blocks));
+        // @ts-expect-error {} is not a real libp2p
+        const dEngine = new DecisionEngine(id, blockstore, network, new Stats({}), {}, { maxSizeReplaceHasWithBlock: 0 });
+        dEngine._scheduleProcessTasks = () => { };
+        dEngine.start();
+        const onlyCases = [];
+        for (const testCase of testCases) {
+            // eslint-disable-next-line
+            if (testCase.only) {
+                onlyCases.push(testCase);
+            }
+        }
+        if (onlyCases.length > 0) {
+            testCases = onlyCases;
+        }
+        for (const [, testCase] of Object.entries(testCases)) {
+            // console.log("Test case %d:", i)
+            for (const wl of testCase.wls) {
+                // console.log("  want-blocks '%s' / want-haves '%s' / sendDontHave %s",
+                //   wl.wantBlks || '', wl.wantHaves || '', wl.sendDontHave)
+                const wantBlks = (wl.wantBlks ?? '').split('');
+                const wantHaves = (wl.wantHaves ?? '').split('');
+                await partnerWantBlocksHaves(dEngine, wantBlks, wantHaves, wl.sendDontHave, partner);
+            }
+            const expBlks = (testCase.exp.blks ?? '').split('');
+            const expHaves = (testCase.exp.haves ?? '').split('');
+            const expDontHaves = (testCase.exp.dontHaves ?? '').split('');
+            const msg = await nextMessage();
+            // Expect the correct number of blocks and block presences
+            expect(msg.blocks.size).to.eql(expBlks.length);
+            expect(msg.blockPresences.size).to.eql(expHaves.length + expDontHaves.length);
+            // Expect the correct block contents
+            for (const expBlk of expBlks) {
+                const hash = await sha256.digest(uint8ArrayFromString(expBlk));
+                expect(msg.blocks.has(CID.createV0(hash).toString(base58btc)));
+            }
+            // Expect the correct HAVEs
+            for (const expHave of expHaves) {
+                const hash = await sha256.digest(uint8ArrayFromString(expHave));
+                const cid = CID.createV0(hash).toString(base58btc);
+                expect(msg.blockPresences.has(cid)).to.eql(true);
+                expect(msg.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.Have);
+            }
+            // Expect the correct DONT_HAVEs
+            for (const expDontHave of expDontHaves) {
+                const hash = await sha256.digest(uint8ArrayFromString(expDontHave));
+                const cid = CID.createV0(hash).toString(base58btc);
+                expect(msg.blockPresences.has(cid)).to.eql(true);
+                expect(msg.blockPresences.get(cid)).to.eql(Message.BlockPresenceType.DontHave);
+            }
+        }
+    });
+    it('survives not being able to send a message to peer', async () => {
+        /** @type {} */
+        let r;
+        const failToSendPromise = new Promise((resolve) => {
+            r = resolve;
+        });
+        const network = mockNetwork();
+        network.sendMessage = () => {
+            r();
+            throw new Error('Something is b0rken');
+        };
+        // who is in the network
+        const us = await newEngine(network);
+        const them = await newEngine(mockNetwork());
+        // add a block to our blockstore
+        const data = uint8ArrayFromString(`this is message ${Date.now()}`);
+        const hash = await sha256.digest(data);
+        const cid = CID.createV0(hash);
+        await us.engine.blockstore.put(cid, data);
+        const message = new Message(false);
+        message.addEntry(cid, 1, Message.WantType.Block, false, false);
+        // receive a message with a want for our block
+        await us.engine.messageReceived(them.peer, message);
+        // should have added a task for the remote peer
+        const tasks = us.engine._requestQueue._byPeer.get(them.peer.toString());
+        expect(tasks).to.have.property('_pending').that.has.property('length', 1);
+        // wait for us.network.sendMessage to be called
+        await failToSendPromise;
+        // should be done processing
+        expect(tasks).to.have.property('_pending').that.has.property('length', 0);
+        expect(tasks).to.have.property('_active').that.has.property('size', 0);
+    });
+});
+//# sourceMappingURL=decision-engine.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.js.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.js.map
new file mode 100644
index 0000000..b63ea5e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/decision-engine.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"decision-engine.js","sourceRoot":"","sources":["../../../test/decision-engine/decision-engine.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.d.ts
new file mode 100644
index 0000000..cee8da7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=ledger.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.d.ts.map
new file mode 100644
index 0000000..51410d4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"ledger.spec.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/ledger.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.js b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.js
new file mode 100644
index 0000000..39ce3a2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.js
@@ -0,0 +1,31 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { Ledger } from '../../src/decision-engine/ledger.js';
+describe('Ledger', () => {
+    /** @type {} */
+    let peerId;
+    /** @type {} */
+    let ledger;
+    before(async () => {
+        peerId = await createEd25519PeerId();
+    });
+    beforeEach(() => {
+        ledger = new Ledger(peerId);
+    });
+    it('accounts', () => {
+        expect(ledger.debtRatio()).to.eql(0);
+        ledger.sentBytes(100);
+        ledger.sentBytes(12000);
+        ledger.receivedBytes(223432);
+        ledger.receivedBytes(2333);
+        expect(ledger.accounting)
+            .to.eql({
+            bytesSent: 100 + 12000,
+            bytesRecv: 223432 + 2333
+        });
+        expect(ledger.debtRatio())
+            .to.eql((100 + 12000) / (223432 + 2333 + 1));
+    });
+});
+//# sourceMappingURL=ledger.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.js.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.js.map
new file mode 100644
index 0000000..7f07372
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/ledger.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"ledger.spec.js","sourceRoot":"","sources":["../../../test/decision-engine/ledger.spec.ts"],"names":[],"mappings":"AAAA,sBAAsB;AAEtB,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AACnC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAC7D,OAAO,EAAE,MAAM,EAAE,MAAM,qCAAqC,CAAA;AAG5D,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;IACtB,eAAe;IACf,IAAI,MAAc,CAAA;IAClB,eAAe;IACf,IAAI,MAAc,CAAA;IAElB,MAAM,CAAC,KAAK,IAAI,EAAE;QAChB,MAAM,GAAG,MAAM,mBAAmB,EAAE,CAAA;IACtC,CAAC,CAAC,CAAA;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAA;IAC7B,CAAC,CAAC,CAAA;IAEF,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE;QAClB,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;QAEpC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;QACrB,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACvB,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;QAC5B,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QAE1B,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC;aACtB,EAAE,CAAC,GAAG,CAAC;YACN,SAAS,EAAE,GAAG,GAAG,KAAK;YACtB,SAAS,EAAE,MAAM,GAAG,IAAI;SACzB,CAAC,CAAA;QACJ,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;aACvB,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAA;IAChD,CAAC,CAAC,CAAA;AACJ,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.d.ts
new file mode 100644
index 0000000..1a5a348
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=req-queue.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.d.ts.map
new file mode 100644
index 0000000..642eb17
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"req-queue.spec.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/req-queue.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.js b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.js
new file mode 100644
index 0000000..e8a029d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.js
@@ -0,0 +1,543 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { RequestQueue } from '../../src/decision-engine/req-queue.js';
+describe('Request Queue', () => {
+    let peerIds;
+    before(async () => {
+        peerIds = await Promise.all([
+            createEd25519PeerId(),
+            createEd25519PeerId(),
+            createEd25519PeerId()
+        ]);
+    });
+    describe('push / pop', () => {
+        it('pop empty queue returns no tasks', () => {
+            const rq = new RequestQueue();
+            const { peerId, tasks, pendingSize } = rq.popTasks(1);
+            expect(peerId).to.be.undefined();
+            expect(tasks.length).to.eql(0);
+            expect(pendingSize).to.eql(0);
+        });
+        it('pops correct number of tasks', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 10,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 5,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 5,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { peerId, tasks, pendingSize } = rq.popTasks(11);
+            expect(peerId).to.eql(peerIds[0]);
+            expect(tasks.map(t => t.topic)).to.eql(['a', 'b']);
+            expect(pendingSize).to.eql(5);
+            const res = rq.popTasks(1);
+            expect(res.tasks.length).to.eql(1);
+            expect(res.pendingSize).to.eql(0);
+        });
+        it('pops nothing for zero targetMinSize', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { tasks, pendingSize } = rq.popTasks(0);
+            expect(tasks.length).to.eql(0);
+            expect(pendingSize).to.eql(2);
+        });
+        it('pops no tasks for empty peer', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const res = rq.popTasks(1);
+            expect(res.tasks.length).to.eql(1);
+            expect(res.pendingSize).to.eql(0);
+            const res2 = rq.popTasks(1);
+            expect(res2.tasks.length).to.eql(0);
+            expect(res2.pendingSize).to.eql(0);
+        });
+        it('pops tasks in priority order', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 10,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 5,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 1,
+                    priority: 7,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { peerId, tasks, pendingSize } = rq.popTasks(10);
+            expect(peerId).to.eql(peerIds[0]);
+            expect(pendingSize).to.eql(0);
+            expect(tasks.map(t => t.topic)).to.eql(['a', 'c', 'b']);
+        });
+        it('can push more tasks after exhausting tasks for peer', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            // Pop all tasks for peer0
+            let { tasks } = rq.popTasks(10);
+            expect(tasks.length).eql(1);
+            // Push some more tasks for peer0
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            // Pop tasks for peer0
+            tasks = rq.popTasks(10).tasks;
+            expect(tasks.length).eql(1);
+        });
+        it('pops peers in order of active size increasing, then pending tasks decreasing', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 5,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[1], [{
+                    topic: 'b',
+                    size: 10,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 3,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'd',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[2], [{
+                    topic: 'e',
+                    size: 7,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'f',
+                    size: 2,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            //          Active   Pending
+            // peer0:            5
+            // peer1:            10, 3, 1
+            // peer2:            7. 2
+            // No active tasks and peer1 has most pending tasks so expect peer1
+            let { peerId } = rq.popTasks(1);
+            expect(peerId).to.eql(peerIds[1]);
+            //          Active   Pending
+            // peer0:            5
+            // peer1:   10       3, 1
+            // peer2:            7. 2
+            // peer0 and peer2 have least active size and peer2 has more pending
+            // tasks so expect peer2
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[2]);
+            //          Active   Pending
+            // peer0:            5
+            // peer1:   10       3, 1
+            // peer2:   7        2
+            // peer0 has least active size so expect peer0
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[0]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10       3, 1
+            // peer2:   7        2
+            // peer0 has least active size but no pending tasks.
+            // peer2 has smaller active size than peer 1 so expect peer2
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[2]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10       3, 1
+            // peer2:   7, 2
+            // peer1 is only peer with pending tasks so expect peer1
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[1]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10, 3    1
+            // peer2:   7, 2
+            // peer1 is only peer with pending tasks so expect peer1
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[1]);
+            //          Active   Pending
+            // peer0:   5
+            // peer1:   10, 3, 1
+            // peer2:   7, 2
+            // peer1 is only peer with pending tasks so expect peer1
+            peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.be.undefined();
+        });
+    });
+    it('resorts queue when new peer tasks are added where peer tasks already exist', () => {
+        const rq = new RequestQueue();
+        rq.pushTasks(peerIds[0], [{
+                topic: 'a',
+                size: 0,
+                priority: 1,
+                data: {
+                    blockSize: 0,
+                    haveBlock: false,
+                    isWantBlock: false,
+                    sendDontHave: false
+                }
+            }]);
+        rq.pushTasks(peerIds[1], [{
+                topic: 'a',
+                size: 0,
+                priority: 1,
+                data: {
+                    blockSize: 0,
+                    haveBlock: false,
+                    isWantBlock: false,
+                    sendDontHave: false
+                }
+            }]);
+        rq.pushTasks(peerIds[0], [{
+                topic: 'a',
+                size: 1,
+                priority: 1,
+                data: {
+                    blockSize: 0,
+                    haveBlock: false,
+                    isWantBlock: false,
+                    sendDontHave: false
+                }
+            }]);
+        // _byPeer map should have been resorted to put peer0
+        // fist in the queue
+        const { peerId } = rq.popTasks(16);
+        expect(peerId).to.eql(peerIds[0]);
+    });
+    describe('remove', () => {
+        it('removes tasks by peer and topic', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[1], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'c',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.remove('a', peerIds[0]);
+            rq.remove('b', peerIds[1]);
+            const res = rq.popTasks(10);
+            expect(res.peerId).to.eql(peerIds[1]);
+            expect(res.tasks.length).to.eql(2);
+            expect(res.tasks.map(t => t.topic)).to.eql(['a', 'c']);
+            const res2 = rq.popTasks(10);
+            expect(res2.peerId).to.eql(peerIds[0]);
+            expect(res2.tasks.length).to.eql(1);
+            expect(res2.tasks.map(t => t.topic)).to.eql(['b']);
+        });
+        it('ignores remove non-existent peer', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.remove('a', peerIds[1]);
+            const res = rq.popTasks(10);
+            expect(res.tasks.length).to.eql(1);
+        });
+        it('ignores remove non-existent topic', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.remove('b', peerIds[0]);
+            const res = rq.popTasks(10);
+            expect(res.tasks.length).to.eql(1);
+        });
+    });
+    describe('update tasks', () => {
+        it('updates priority of existing pending tasks', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'b',
+                    size: 1,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            const { tasks } = rq.popTasks(10);
+            expect(tasks.map(t => t.topic)).to.eql(['b', 'a']);
+        });
+        it('taskDone removes active task', () => {
+            const rq = new RequestQueue();
+            rq.pushTasks(peerIds[0], [{
+                    topic: 'a',
+                    size: 2,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'b',
+                    size: 1,
+                    priority: 1,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            rq.pushTasks(peerIds[1], [{
+                    topic: 'c',
+                    size: 1,
+                    priority: 3,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }, {
+                    topic: 'd',
+                    size: 1,
+                    priority: 2,
+                    data: {
+                        blockSize: 0,
+                        haveBlock: false,
+                        isWantBlock: false,
+                        sendDontHave: false
+                    }
+                }]);
+            // Pop one task for each peer
+            const res1 = rq.popTasks(1);
+            const res2 = rq.popTasks(1);
+            //          Active       Pending
+            // peer0:   a (size 2)   b
+            // peer1:   c (size 1)   d, e
+            // Mark peer0's task as done
+            for (const res of [res1, res2]) {
+                if (res.peerId === peerIds[0]) {
+                    rq.tasksDone(peerIds[0], res.tasks);
+                }
+            }
+            //          Active       Pending
+            // peer0:     (size 0)   b
+            // peer1:   c (size 1)   d, e
+            // peer0 has less active data (zero bytes) so the next pop should come
+            // from peer0's tasks
+            const peerId = rq.popTasks(1).peerId;
+            expect(peerId).to.eql(peerIds[0]);
+        });
+    });
+});
+//# sourceMappingURL=req-queue.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.js.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.js.map
new file mode 100644
index 0000000..ff863b3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/req-queue.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"req-queue.spec.js","sourceRoot":"","sources":["../../../test/decision-engine/req-queue.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.d.ts
new file mode 100644
index 0000000..b09bbd5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=task-merger.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.d.ts.map
new file mode 100644
index 0000000..608a852
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"task-merger.spec.d.ts","sourceRoot":"","sources":["../../../test/decision-engine/task-merger.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.js b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.js
new file mode 100644
index 0000000..cd75d52
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.js
@@ -0,0 +1,298 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { RequestQueue } from '../../src/decision-engine/req-queue.js';
+import { DefaultTaskMerger } from '../../src/decision-engine/task-merger.js';
+describe('Task Merger', () => {
+    let peerId;
+    before(async () => {
+        peerId = await createEd25519PeerId();
+    });
+    it('push have vs block', () => {
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expIsWantBlock) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            rq.pushTasks(peerId, tasks);
+            const popped = rq.popTasks(100).tasks;
+            expect(popped.length).to.eql(1);
+            expect(popped[0].data.isWantBlock).to.eql(expIsWantBlock);
+        };
+        const wantBlockType = true;
+        const wantHaveType = false;
+        // should ignore second want-have
+        runTestCase([wantHave, wantHave], wantHaveType);
+        // should ignore second want-block
+        runTestCase([wantBlock, wantBlock], wantBlockType);
+        // want-have does not overwrite want-block
+        runTestCase([wantBlock, wantHave], wantBlockType);
+        // want-block overwrites want-have
+        runTestCase([wantHave, wantBlock], wantBlockType);
+    });
+    it('push size info', () => {
+        const wantBlockBlockSize = 10;
+        const wantBlockDontHaveBlockSize = 0;
+        const wantHaveBlockSize = 10;
+        const wantHaveDontHaveBlockSize = 0;
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: wantBlockBlockSize,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantBlockDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 2,
+            data: {
+                isWantBlock: true,
+                blockSize: wantBlockDontHaveBlockSize,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: wantHaveBlockSize,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantHaveDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: wantHaveDontHaveBlockSize,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expSize, expBlockSize, expIsWantBlock) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            rq.pushTasks(peerId, tasks);
+            const popped = rq.popTasks(100).tasks;
+            expect(popped.length).to.eql(1);
+            expect(popped[0].size).to.eql(expSize);
+            expect(popped[0].data.blockSize).to.eql(expBlockSize);
+            expect(popped[0].data.isWantBlock).to.eql(expIsWantBlock);
+        };
+        const isWantBlock = true;
+        const isWantHave = false;
+        // want-block (DONT_HAVE) should have no effect on existing want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantBlockDontHave], wantBlockDontHave.size, wantBlockDontHaveBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should have no effect on existing want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantHaveDontHave], wantBlockDontHave.size, wantBlockDontHaveBlockSize, isWantBlock);
+        // want-block with size should update existing want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have with size should update existing want-block (DONT_HAVE) size,
+        // but leave it as a want-block (ie should not change it to want-have)
+        runTestCase([wantBlockDontHave, wantHave], wantHaveBlockSize, wantHaveBlockSize, isWantBlock);
+        // want-block (DONT_HAVE) size should not update existing want-block with size
+        runTestCase([wantBlock, wantBlockDontHave], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should have no effect on existing want-block with size
+        runTestCase([wantBlock, wantHaveDontHave], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-block with size should have no effect on existing want-block with size
+        runTestCase([wantBlock, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have with size should have no effect on existing want-block with size
+        runTestCase([wantBlock, wantHave], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-block (DONT_HAVE) should update type and entry size of existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlockDontHave], wantBlockDontHave.size, wantBlockDontHaveBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should have no effect on existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHaveDontHave], wantHaveDontHave.size, wantHaveDontHaveBlockSize, isWantHave);
+        // want-block with size should update existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have with size should update existing want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHave], wantHave.size, wantHaveBlockSize, isWantHave);
+        // want-block (DONT_HAVE) should update type and entry size of existing want-have with size
+        runTestCase([wantHave, wantBlockDontHave], wantHaveBlockSize, wantHaveBlockSize, isWantBlock);
+        // want-have (DONT_HAVE) should not update existing want-have with size
+        runTestCase([wantHave, wantHaveDontHave], wantHave.size, wantHaveBlockSize, isWantHave);
+        // want-block with size should update type and entry size of existing want-have with size
+        runTestCase([wantHave, wantBlock], wantBlock.size, wantBlockBlockSize, isWantBlock);
+        // want-have should have no effect on existing want-have
+        runTestCase([wantHave, wantHave], wantHave.size, wantHaveBlockSize, isWantHave);
+    });
+    it('push have vs block active', () => {
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expCount) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            const popped = [];
+            for (const task of tasks) {
+                // Push the task
+                rq.pushTasks(peerId, [task]);
+                // Pop the task (which makes it active)
+                const res = rq.popTasks(10);
+                popped.push(...res.tasks);
+            }
+            expect(popped.length).to.eql(expCount);
+        };
+        // should ignore second want-have
+        runTestCase([wantHave, wantHave], 1);
+        // should ignore second want-block
+        runTestCase([wantBlock, wantBlock], 1);
+        // want-have does not overwrite want-block
+        runTestCase([wantBlock, wantHave], 1);
+        // can't replace want-have with want-block because want-have is active
+        runTestCase([wantHave, wantBlock], 2);
+    });
+    it('push size info active', () => {
+        const wantBlock = {
+            topic: '1',
+            priority: 10,
+            size: 10,
+            data: {
+                isWantBlock: true,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantBlockDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 2,
+            data: {
+                isWantBlock: true,
+                blockSize: 0,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const wantHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 10,
+                haveBlock: true,
+                sendDontHave: false
+            }
+        };
+        const wantHaveDontHave = {
+            topic: '1',
+            priority: 10,
+            size: 1,
+            data: {
+                isWantBlock: false,
+                blockSize: 0,
+                haveBlock: false,
+                sendDontHave: false
+            }
+        };
+        const runTestCase = (tasks, expTasks) => {
+            tasks = cloneTasks(tasks);
+            const rq = new RequestQueue(DefaultTaskMerger);
+            const popped = [];
+            for (const task of tasks) {
+                // Push the task
+                rq.pushTasks(peerId, [task]);
+                // Pop the task (which makes it active)
+                const res = rq.popTasks(10);
+                popped.push(...res.tasks);
+            }
+            expect(popped.length).to.eql(expTasks.length);
+            for (let i = 0; i < popped.length; i++) {
+                const task = popped[i];
+                const exp = expTasks[i];
+                expect(task.size).to.eql(exp.size);
+                expect(task.data.isWantBlock).to.eql(exp.data.isWantBlock);
+            }
+        };
+        // second want-block (DONT_HAVE) should be ignored
+        runTestCase([wantBlockDontHave, wantBlockDontHave], [wantBlockDontHave]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantHaveDontHave], [wantBlockDontHave]);
+        // want-block with size should be added if there is existing active want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantBlock], [wantBlockDontHave, wantBlock]);
+        // want-have with size should be added if there is existing active want-block (DONT_HAVE)
+        runTestCase([wantBlockDontHave, wantHave], [wantBlockDontHave, wantHave]);
+        // want-block (DONT_HAVE) should be added if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlockDontHave], [wantHaveDontHave, wantBlockDontHave]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHaveDontHave], [wantHaveDontHave]);
+        // want-block with size should be added if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantBlock], [wantHaveDontHave, wantBlock]);
+        // want-have with size should be added if there is existing active want-have (DONT_HAVE)
+        runTestCase([wantHaveDontHave, wantHave], [wantHaveDontHave, wantHave]);
+        // want-block (DONT_HAVE) should be ignored if there is existing active want-block with size
+        runTestCase([wantBlock, wantBlockDontHave], [wantBlock]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-block with size
+        runTestCase([wantBlock, wantHaveDontHave], [wantBlock]);
+        // second want-block with size should be ignored
+        runTestCase([wantBlock, wantBlock], [wantBlock]);
+        // want-have with size should be ignored if there is existing active want-block with size
+        runTestCase([wantBlock, wantHave], [wantBlock]);
+        // want-block (DONT_HAVE) should be added if there is existing active want-have with size
+        runTestCase([wantHave, wantBlockDontHave], [wantHave, wantBlockDontHave]);
+        // want-have (DONT_HAVE) should be ignored if there is existing active want-have with size
+        runTestCase([wantHave, wantHaveDontHave], [wantHave]);
+        // second want-have with size should be ignored
+        runTestCase([wantHave, wantHave], [wantHave]);
+        // want-block with size should be added if there is existing active want-have with size
+        runTestCase([wantHave, wantBlock], [wantHave, wantBlock]);
+    });
+});
+function cloneTasks(tasks) {
+    const clone = [];
+    for (const t of tasks) {
+        clone.push({ ...t, ...{ data: { ...t.data } } });
+    }
+    return clone;
+}
+//# sourceMappingURL=task-merger.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.js.map b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.js.map
new file mode 100644
index 0000000..28e774c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/decision-engine/task-merger.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"task-merger.spec.js","sourceRoot":"","sources":["../../../test/decision-engine/task-merger.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.d.ts b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.d.ts
new file mode 100644
index 0000000..e565cde
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=gen-bitswap-network.node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.d.ts.map b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.d.ts.map
new file mode 100644
index 0000000..6ed8763
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"gen-bitswap-network.node.d.ts","sourceRoot":"","sources":["../../../test/network/gen-bitswap-network.node.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.js b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.js
new file mode 100644
index 0000000..aeded83
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.js
@@ -0,0 +1,43 @@
+/* eslint-env mocha */
+/* eslint-disable no-console */
+import { expect } from 'aegir/chai';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { genBitswapNetwork } from '../utils/mocks.js';
+describe('gen Bitswap network', function () {
+    // CI is very slow
+    this.timeout(300 * 1000);
+    describe('distributed blocks', () => {
+        it('with 2 nodes', async () => {
+            const numNodes = 2;
+            const blocksPerNode = 10;
+            const nodeArr = await genBitswapNetwork(numNodes);
+            // -- actual test
+            await exchangeBlocks(nodeArr, blocksPerNode);
+            await Promise.all(nodeArr.map(async (node) => {
+                await node.bitswap.stop();
+                await node.libp2p.stop();
+            }));
+        });
+    });
+});
+async function exchangeBlocks(nodes, blocksPerNode = 10) {
+    const blocks = await makeBlocks(nodes.length * blocksPerNode);
+    const cids = blocks.map((b) => b.cid);
+    // put blocksPerNode amount of blocks per node
+    await Promise.all(nodes.map(async (node, i) => {
+        await node.bitswap.start();
+        const data = new Array(blocksPerNode).fill(0).map((_, j) => {
+            const index = i * blocksPerNode + j;
+            return blocks[index];
+        });
+        await Promise.all(data.map((d) => node.bitswap.put(d.cid, d.block)));
+    }));
+    const d = Date.now();
+    // fetch all blocks on every node
+    await Promise.all(nodes.map(async (node) => {
+        const bs = await Promise.all(cids.map((cid) => node.bitswap.want(cid)));
+        expect(bs).to.deep.equal(blocks.map(b => b.block));
+    }));
+    console.log('  time -- %s', (Date.now() - d));
+}
+//# sourceMappingURL=gen-bitswap-network.node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.js.map b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.js.map
new file mode 100644
index 0000000..a44e24f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/gen-bitswap-network.node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"gen-bitswap-network.node.js","sourceRoot":"","sources":["../../../test/network/gen-bitswap-network.node.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/network.node.d.ts b/node_modules/ipfs-bitswap/dist/test/network/network.node.d.ts
new file mode 100644
index 0000000..3f7ddd5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/network.node.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=network.node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/network.node.d.ts.map b/node_modules/ipfs-bitswap/dist/test/network/network.node.d.ts.map
new file mode 100644
index 0000000..5dbc5c7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/network.node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"network.node.d.ts","sourceRoot":"","sources":["../../../test/network/network.node.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/network.node.js b/node_modules/ipfs-bitswap/dist/test/network/network.node.js
new file mode 100644
index 0000000..205038e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/network.node.js
@@ -0,0 +1,280 @@
+/* eslint-env mocha */
+import { expect, assert } from 'aegir/chai';
+import * as lp from 'it-length-prefixed';
+import { pipe } from 'it-pipe';
+import pDefer from 'p-defer';
+import { createLibp2pNode } from '../utils/create-libp2p-node.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { Network } from '../../src/network.js';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { Stats } from '../../src/stats/index.js';
+import sinon from 'sinon';
+import { CID } from 'multiformats/cid';
+import delay from 'delay';
+function createBitswapMock() {
+    // @ts-expect-error incomplete implementation
+    return {
+        _receiveMessage: async () => { },
+        _receiveError: () => { },
+        _onPeerConnected: () => { },
+        _onPeerDisconnected: () => { }
+    };
+}
+describe('network', () => {
+    let p2pA;
+    let networkA;
+    let bitswapMockA;
+    let p2pB;
+    let networkB;
+    let bitswapMockB;
+    let p2pC;
+    let networkC;
+    let bitswapMockC;
+    let blocks;
+    beforeEach(async () => {
+        [p2pA, p2pB, p2pC] = await Promise.all([
+            createLibp2pNode(),
+            createLibp2pNode(),
+            createLibp2pNode()
+        ]);
+        blocks = await makeBlocks(2);
+        bitswapMockA = createBitswapMock();
+        bitswapMockB = createBitswapMock();
+        bitswapMockC = createBitswapMock();
+        // @ts-expect-error {} is not a real libp2p
+        networkA = new Network(p2pA, bitswapMockA, new Stats({}));
+        // @ts-expect-error {} is not a real libp2p
+        networkB = new Network(p2pB, bitswapMockB, new Stats({}));
+        // only bitswap100
+        // @ts-expect-error {} is not a real libp2p
+        networkC = new Network(p2pC, bitswapMockC, new Stats({}), { b100Only: true });
+        await networkA.start();
+        await networkB.start();
+        await networkC.start();
+    });
+    afterEach(async () => {
+        await p2pA.stop();
+        await p2pB.stop();
+        await p2pC.stop();
+    });
+    it('connectTo fail', async () => {
+        try {
+            await networkA.connectTo(p2pB.peerId);
+            assert.fail();
+        }
+        catch (err) {
+            expect(err).to.exist();
+        }
+    });
+    it('onPeerConnected success', async () => {
+        const p2pAConnected = pDefer();
+        const p2pBConnected = pDefer();
+        bitswapMockA._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pB.peerId.toString());
+            p2pBConnected.resolve();
+        };
+        bitswapMockB._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pA.peerId.toString());
+            p2pAConnected.resolve();
+        };
+        const ma = p2pB.getMultiaddrs()[0];
+        await p2pA.dial(ma);
+        await Promise.all([
+            p2pAConnected,
+            p2pBConnected
+        ]);
+    });
+    it('connectTo success', async () => {
+        await p2pA.peerStore.addressBook.add(p2pB.peerId, p2pB.getMultiaddrs());
+        await networkA.connectTo(p2pB.peerId);
+    });
+    it('sets up peer handlers for previously connected peers', async () => {
+        let p2pAConnected = pDefer();
+        let p2pBConnected = pDefer();
+        bitswapMockA._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pB.peerId.toString());
+            p2pBConnected.resolve();
+        };
+        bitswapMockB._onPeerConnected = (peerId) => {
+            expect(peerId.toString()).to.equal(p2pA.peerId.toString());
+            p2pAConnected.resolve();
+        };
+        const ma = p2pB.getMultiaddrs()[0];
+        await p2pA.dial(ma);
+        await Promise.all([
+            p2pAConnected,
+            p2pBConnected
+        ]);
+        await networkA.stop();
+        await networkB.stop();
+        p2pAConnected = pDefer();
+        p2pBConnected = pDefer();
+        await networkA.start();
+        await networkB.start();
+        await Promise.all([
+            p2pAConnected,
+            p2pBConnected
+        ]);
+    });
+    const versions = [{
+            num: '1.0.0', serialize: (msg) => msg.serializeToBitswap100()
+        }, {
+            num: '1.1.0', serialize: (msg) => msg.serializeToBitswap110()
+        }, {
+            num: '1.2.0', serialize: (msg) => msg.serializeToBitswap110()
+        }];
+    for (const version of versions) {
+        it('._receiveMessage success from Bitswap ' + version.num, async () => {
+            const msg = new Message(true);
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            const deferred = pDefer();
+            msg.addEntry(b1.cid, 0);
+            msg.addBlock(b1.cid, b1.block);
+            msg.addBlock(b2.cid, b2.block);
+            bitswapMockB._receiveMessage = async (peerId, msgReceived) => {
+                // cannot do deep comparison on objects as one has Buffers and one has Uint8Arrays
+                expect(msg.serializeToBitswap110()).to.equalBytes(msgReceived.serializeToBitswap110());
+                bitswapMockB._receiveMessage = async () => { };
+                bitswapMockB._receiveError = () => { };
+                deferred.resolve();
+            };
+            bitswapMockB._receiveError = (err) => { deferred.reject(err); };
+            const ma = p2pB.getMultiaddrs()[0];
+            const stream = await p2pA.dialProtocol(ma, '/ipfs/bitswap/' + version.num);
+            await pipe([version.serialize(msg)], (source) => lp.encode(source), stream);
+            await deferred.promise;
+        });
+    }
+    // From p2pA to p2pB
+    it('.sendMessage on Bitswap 1.1.0', async () => {
+        const msg = new Message(true);
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        const deferred = pDefer();
+        msg.addEntry(b1.cid, 0);
+        msg.addBlock(b1.cid, b1.block);
+        msg.addBlock(b2.cid, b2.block);
+        // In a real network scenario, peers will be discovered and their addresses
+        // will be added to the addressBook before bitswap kicks in
+        await p2pA.peerStore.addressBook.set(p2pB.peerId, p2pB.getMultiaddrs());
+        bitswapMockB._receiveMessage = async (peerId, msgReceived) => {
+            // cannot do deep comparison on objects as one has Buffers and one has Uint8Arrays
+            expect(msg.serializeToBitswap110()).to.equalBytes(msgReceived.serializeToBitswap110());
+            bitswapMockB._receiveMessage = async () => { };
+            bitswapMockB._receiveError = () => { };
+            deferred.resolve();
+        };
+        bitswapMockB._receiveError = deferred.reject;
+        await networkA.sendMessage(p2pB.peerId, msg);
+    });
+    it('dial to peer on Bitswap 1.0.0', async () => {
+        const ma = p2pC.getMultiaddrs()[0];
+        const stream = await p2pA.dialProtocol(ma, ['/ipfs/bitswap/1.1.0', '/ipfs/bitswap/1.0.0']);
+        expect(stream).to.have.nested.property('stat.protocol', '/ipfs/bitswap/1.0.0');
+    });
+    // From p2pA to p2pC
+    it('.sendMessage on Bitswap 1.1.0', async () => {
+        const msg = new Message(true);
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        const deferred = pDefer();
+        msg.addEntry(b1.cid, 0);
+        msg.addBlock(b1.cid, b1.block);
+        msg.addBlock(b2.cid, b2.block);
+        // In a real network scenario, peers will be discovered and their addresses
+        // will be added to the addressBook before bitswap kicks in
+        await p2pA.peerStore.addressBook.set(p2pC.peerId, p2pC.getMultiaddrs());
+        bitswapMockC._receiveMessage = async (peerId, msgReceived) => {
+            // cannot do deep comparison on objects as one has Buffers and one has Uint8Arrays
+            expect(msg.serializeToBitswap110()).to.equalBytes(msgReceived.serializeToBitswap110());
+            bitswapMockC._receiveMessage = async () => { };
+            bitswapMockC._receiveError = () => { };
+            deferred.resolve();
+        };
+        bitswapMockC._receiveError = deferred.reject;
+        await networkA.sendMessage(p2pC.peerId, msg);
+        await deferred.promise;
+    });
+    it('dials to peer using Bitswap 1.2.0', async () => {
+        await networkA.stop();
+        await networkB.stop();
+        // only supports 1.2.0
+        networkB._protocols = ['/ipfs/bitswap/1.2.0'];
+        await networkA.start();
+        await networkB.start();
+        // In a real network scenario, peers will be discovered and their addresses
+        // will be added to the addressBook before bitswap kicks in
+        await p2pA.peerStore.addressBook.set(p2pB.peerId, p2pB.getMultiaddrs());
+        const deferred = pDefer();
+        bitswapMockB._receiveMessage = async () => {
+            deferred.resolve();
+        };
+        await networkA.sendMessage(p2pB.peerId, new Message(true));
+        return deferred;
+    });
+    it('survives connection failures', async () => {
+        const mockFindProviders = sinon.stub();
+        const mockDial = sinon.stub();
+        const libp2p = {
+            // @ts-expect-error incomplete implementation
+            contentRouting: {
+                findProviders: mockFindProviders
+            },
+            register: sinon.stub(),
+            unregister: sinon.stub(),
+            getConnections: () => [],
+            dial: mockDial,
+            handle: sinon.stub()
+        };
+        const network = new Network(libp2p, bitswapMockA, new Stats(libp2p));
+        const cid = CID.parse('QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn');
+        const provider1 = {
+            id: 'provider1'
+        };
+        const provider2 = {
+            id: 'provider2'
+        };
+        mockFindProviders.withArgs(cid).returns([
+            provider1,
+            provider2
+        ]);
+        mockDial.withArgs(provider1.id).returns(Promise.reject(new Error('Could not dial')));
+        mockDial.withArgs(provider2.id).returns(Promise.resolve());
+        await network.start();
+        await network.findAndConnect(cid);
+        expect(mockDial.calledWith(provider1.id)).to.be.true();
+        expect(mockDial.calledWith(provider2.id)).to.be.true();
+    });
+    it('times out slow senders', async () => {
+        const deferred = pDefer();
+        const libp2p = {
+            handle: sinon.stub(),
+            register: sinon.stub(),
+            unregister: sinon.stub(),
+            getConnections: () => []
+        };
+        // @ts-expect-error not a complete libp2p implementation
+        const network = new Network(libp2p, {}, {}, {
+            incomingStreamTimeout: 1
+        });
+        await network.start();
+        const stream = {
+            source: (async function* () {
+                await delay(100);
+                yield 'hello';
+            }()),
+            abort: (err) => {
+                deferred.resolve(err);
+            },
+            stat: {
+                protocol: 'hello'
+            }
+        };
+        const handler = libp2p.handle.getCall(0).args[1];
+        handler({ stream, connection: {} });
+        const err = await deferred.promise;
+        expect(err).to.have.property('code', 'ABORT_ERR');
+    });
+});
+//# sourceMappingURL=network.node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/network/network.node.js.map b/node_modules/ipfs-bitswap/dist/test/network/network.node.js.map
new file mode 100644
index 0000000..94e4c75
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/network/network.node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"network.node.js","sourceRoot":"","sources":["../../../test/network/network.node.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/node.d.ts b/node_modules/ipfs-bitswap/dist/test/node.d.ts
new file mode 100644
index 0000000..1f6eb2e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/node.d.ts
@@ -0,0 +1,8 @@
+import './bitswap.js';
+import './bitswap-mock-internals.js';
+import './bitswap-stats.js';
+import './decision-engine/decision-engine.js';
+import './network/network.node.js';
+import './network/gen-bitswap-network.node.js';
+import './swarms.js';
+//# sourceMappingURL=node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/node.d.ts.map b/node_modules/ipfs-bitswap/dist/test/node.d.ts.map
new file mode 100644
index 0000000..0c776f8
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"node.d.ts","sourceRoot":"","sources":["../../test/node.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,CAAA;AACrB,OAAO,6BAA6B,CAAA;AACpC,OAAO,oBAAoB,CAAA;AAC3B,OAAO,sCAAsC,CAAA;AAC7C,OAAO,2BAA2B,CAAA;AAClC,OAAO,uCAAuC,CAAA;AAC9C,OAAO,aAAa,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/node.js b/node_modules/ipfs-bitswap/dist/test/node.js
new file mode 100644
index 0000000..972186f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/node.js
@@ -0,0 +1,8 @@
+import './bitswap.js';
+import './bitswap-mock-internals.js';
+import './bitswap-stats.js';
+import './decision-engine/decision-engine.js';
+import './network/network.node.js';
+import './network/gen-bitswap-network.node.js';
+import './swarms.js';
+//# sourceMappingURL=node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/node.js.map b/node_modules/ipfs-bitswap/dist/test/node.js.map
new file mode 100644
index 0000000..80847ba
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"node.js","sourceRoot":"","sources":["../../test/node.ts"],"names":[],"mappings":"AAAA,OAAO,cAAc,CAAA;AACrB,OAAO,6BAA6B,CAAA;AACpC,OAAO,oBAAoB,CAAA;AAC3B,OAAO,sCAAsC,CAAA;AAC7C,OAAO,2BAA2B,CAAA;AAClC,OAAO,uCAAuC,CAAA;AAC9C,OAAO,aAAa,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/notifications.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/notifications.spec.d.ts
new file mode 100644
index 0000000..4bc416c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/notifications.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=notifications.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/notifications.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/notifications.spec.d.ts.map
new file mode 100644
index 0000000..6caa722
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/notifications.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"notifications.spec.d.ts","sourceRoot":"","sources":["../../test/notifications.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/notifications.spec.js b/node_modules/ipfs-bitswap/dist/test/notifications.spec.js
new file mode 100644
index 0000000..eb58246
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/notifications.spec.js
@@ -0,0 +1,83 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { base32 } from 'multiformats/bases/base32';
+import { toString as uint8ArrayToString } from 'uint8arrays/to-string';
+import { Notifications } from '../src/notifications.js';
+import { makeBlocks } from './utils/make-blocks.js';
+import { makePeerId } from './utils/make-peer-id.js';
+describe('Notifications', () => {
+    let blocks;
+    let peerId;
+    before(async () => {
+        blocks = await makeBlocks(3);
+        peerId = await makePeerId();
+    });
+    it('hasBlock', (done) => {
+        const n = new Notifications(peerId);
+        const b = blocks[0];
+        n.once(`block:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`, (block) => {
+            expect(b.block).to.equalBytes(block);
+            done();
+        });
+        n.hasBlock(b.cid, b.block);
+    });
+    describe('wantBlock', () => {
+        it('receive block', async () => {
+            const n = new Notifications(peerId);
+            const b = blocks[0];
+            const p = n.wantBlock(b.cid);
+            // check that listeners have been set up
+            expect(n.listenerCount(`block:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(1);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(1);
+            n.hasBlock(b.cid, b.block);
+            const block = await p;
+            expect(b.block).to.equalBytes(block);
+            // check that internal cleanup works as expected
+            expect(n.listenerCount(`block:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(0);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(b.cid.multihash.bytes, 'base64')}`)).to.equal(0);
+        });
+        it('unwant block', async () => {
+            const n = new Notifications(peerId);
+            const b = blocks[0];
+            const p = n.wantBlock(b.cid);
+            n.unwantBlock(b.cid);
+            await expect(p).to.eventually.be.rejectedWith(/unwanted/);
+        });
+        it('abort block want', async () => {
+            const n = new Notifications(peerId);
+            const b = blocks[0];
+            const controller = new AbortController();
+            const p = n.wantBlock(b.cid, {
+                signal: controller.signal
+            });
+            controller.abort();
+            await expect(p).to.eventually.be.rejectedWith(/aborted/);
+        });
+    });
+    describe('wantBlock with same cid derived from distinct encodings', () => {
+        it('receive block', async () => {
+            const n = new Notifications(peerId);
+            const cid = CID.parse(blocks[0].cid.toV1().toString());
+            const cid2 = CID.parse(cid.toString(base32));
+            const p = n.wantBlock(cid2);
+            // check that listeners have been set up
+            expect(n.listenerCount(`block:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(1);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(1);
+            n.hasBlock(cid, blocks[0].block);
+            await expect(p).to.eventually.deep.equal(blocks[0].block);
+            // check that internal cleanup works as expected
+            expect(n.listenerCount(`block:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(0);
+            expect(n.listenerCount(`unwant:${uint8ArrayToString(cid2.multihash.bytes, 'base64')}`)).to.equal(0);
+        });
+        it('unwant block', async () => {
+            const n = new Notifications(peerId);
+            const cid = CID.parse(blocks[0].cid.toV1().toString());
+            const cid2 = CID.parse(cid.toString(base32));
+            const p = n.wantBlock(cid2);
+            n.unwantBlock(cid);
+            await expect(p).to.eventually.be.rejectedWith(/unwanted/);
+        });
+    });
+});
+//# sourceMappingURL=notifications.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/notifications.spec.js.map b/node_modules/ipfs-bitswap/dist/test/notifications.spec.js.map
new file mode 100644
index 0000000..4621c92
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/notifications.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"notifications.spec.js","sourceRoot":"","sources":["../../test/notifications.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/swarms.d.ts b/node_modules/ipfs-bitswap/dist/test/swarms.d.ts
new file mode 100644
index 0000000..d6a6a26
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/swarms.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=swarms.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/swarms.d.ts.map b/node_modules/ipfs-bitswap/dist/test/swarms.d.ts.map
new file mode 100644
index 0000000..13086b1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/swarms.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"swarms.d.ts","sourceRoot":"","sources":["../../test/swarms.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/swarms.js b/node_modules/ipfs-bitswap/dist/test/swarms.js
new file mode 100644
index 0000000..7e75388
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/swarms.js
@@ -0,0 +1,82 @@
+/* eslint-env mocha */
+/* eslint-disable no-console */
+import stats from 'stats-lite';
+import { distributionTest } from './utils/distribution-test.js';
+import { EventEmitter } from 'events';
+const test = it;
+describe.skip('swarms', () => {
+    const print = Boolean(process.env.PRINT);
+    let emitter;
+    before(() => {
+        emitter = new EventEmitter();
+    });
+    after(() => {
+        process.exit();
+    });
+    test('2 nodes, 2 blocks', async function () {
+        this.timeout(10 * 1000);
+        maybePrint('2 nodes, 2 blocks', emitter);
+        await distributionTest(2, 2, 1, emitter);
+    });
+    test('10 nodes, 2 blocks', async function () {
+        this.timeout(30 * 1000);
+        maybePrint('10 nodes, 2 blocks', emitter);
+        await distributionTest(10, 2, 1, emitter);
+    });
+    test('10 nodes, 10 blocks', async function () {
+        this.timeout(30 * 1000);
+        maybePrint('10 nodes, 10 blocks', emitter);
+        await distributionTest(10, 10, 1, emitter);
+    });
+    test('10 nodes, 20 blocks', async function () {
+        this.timeout(30 * 1000);
+        maybePrint('10 nodes, 20 blocks', emitter);
+        await distributionTest(10, 20, 1, emitter);
+    });
+    test('50 nodes, 2 blocks', async function () {
+        this.timeout(600 * 1000);
+        maybePrint('50 nodes, 2 blocks', emitter);
+        await distributionTest(50, 2, 1, emitter);
+    });
+    test.skip('100 nodes, 2 blocks', async function () {
+        this.timeout(600 * 1000);
+        maybePrint('100 nodes, 2 blocks', emitter);
+        await distributionTest(100, 2, 1, emitter);
+    });
+    test('10 nodes, 100 blocks', async function () {
+        this.timeout(600 * 1000);
+        maybePrint('10 nodes, 100 blocks', emitter);
+        await distributionTest(10, 100, 1, emitter);
+    });
+    function maybePrint(suite, emitter) {
+        if (!print) {
+            return;
+        }
+        const elapseds = [];
+        emitter.once('start', () => {
+            console.log('\n------------------------');
+            console.log(suite);
+            console.log('started');
+        });
+        emitter.once('all connected', () => {
+            console.log('all nodes connected to each other');
+        });
+        emitter.once('stop', () => {
+            console.log('stopping');
+        });
+        emitter.once('stopped', () => {
+            console.log('stopped');
+            console.log('stats:');
+            console.log('---------');
+            console.log('mean: %s', stats.mean(elapseds));
+            console.log('median: %s', stats.median(elapseds));
+            console.log('variance: %s', stats.variance(elapseds));
+            console.log('standard deviation: %s', stats.stdev(elapseds));
+            console.log('85th percentile: %s', stats.percentile(elapseds, 0.85));
+        });
+        emitter.on('got block', (elapsed) => {
+            elapseds.push(elapsed);
+        });
+    }
+});
+//# sourceMappingURL=swarms.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/swarms.js.map b/node_modules/ipfs-bitswap/dist/test/swarms.js.map
new file mode 100644
index 0000000..c7dc286
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/swarms.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"swarms.js","sourceRoot":"","sources":["../../test/swarms.ts"],"names":[],"mappings":"AACA,sBAAsB;AACtB,+BAA+B;AAE/B,OAAO,KAAK,MAAM,YAAY,CAAA;AAC9B,OAAO,EAAE,gBAAgB,EAAE,MAAM,8BAA8B,CAAA;AAC/D,OAAO,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAA;AAErC,MAAM,IAAI,GAAG,EAAE,CAAA;AAEf,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;IAC3B,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;IACxC,IAAI,OAAqB,CAAA;IAEzB,MAAM,CAAC,GAAG,EAAE;QACV,OAAO,GAAG,IAAI,YAAY,EAAE,CAAA;IAC9B,CAAC,CAAC,CAAA;IAEF,KAAK,CAAC,GAAG,EAAE;QACT,OAAO,CAAC,IAAI,EAAE,CAAA;IAChB,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,mBAAmB,EAAE,KAAK;QAC7B,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAA;QAEvB,UAAU,CAAC,mBAAmB,EAAE,OAAO,CAAC,CAAA;QAExC,MAAM,gBAAgB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC1C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,oBAAoB,EAAE,KAAK;QAC9B,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAA;QAEvB,UAAU,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAA;QAEzC,MAAM,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qBAAqB,EAAE,KAAK;QAC/B,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAA;QAEvB,UAAU,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAA;QAE1C,MAAM,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,qBAAqB,EAAE,KAAK;QAC/B,IAAI,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,CAAC,CAAA;QAEvB,UAAU,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAA;QAE1C,MAAM,gBAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,oBAAoB,EAAE,KAAK;QAC9B,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;QAExB,UAAU,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAA;QAEzC,MAAM,gBAAgB,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC3C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,KAAK;QACpC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;QACxB,UAAU,CAAC,qBAAqB,EAAE,OAAO,CAAC,CAAA;QAE1C,MAAM,gBAAgB,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC5C,CAAC,CAAC,CAAA;IAEF,IAAI,CAAC,sBAAsB,EAAE,KAAK;QAChC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,CAAA;QACxB,UAAU,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAA;QAE3C,MAAM,gBAAgB,CAAC,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,CAAA;IAC7C,CAAC,CAAC,CAAA;IAEF,SAAS,UAAU,CAAE,KAAU,EAAE,OAAqB;QACpD,IAAI,CAAC,KAAK,EAAE;YACV,OAAM;SACP;QACD,MAAM,QAAQ,GAAa,EAAE,CAAA;QAC7B,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE;YACzB,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAA;YACzC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YAClB,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,IAAI,CAAC,eAAe,EAAE,GAAG,EAAE;YACjC,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;YACxB,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;QACzB,CAAC,CAAC,CAAA;QACF,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;YAC3B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;YACtB,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;YACrB,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAA;YACxB,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAA;YAC7C,OAAO,CAAC,GAAG,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAA;YACjD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;YACrD,OAAO,CAAC,GAAG,CAAC,wBAAwB,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAA;YAC5D,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAA;QACtE,CAAC,CAAC,CAAA;QAEF,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,EAAE;YAClC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACxB,CAAC,CAAC,CAAA;IACJ,CAAC;AACH,CAAC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/message.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/types/message.spec.d.ts
new file mode 100644
index 0000000..35f5cbb
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/message.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=message.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/message.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/types/message.spec.d.ts.map
new file mode 100644
index 0000000..04d6b0a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/message.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"message.spec.d.ts","sourceRoot":"","sources":["../../../test/types/message.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/message.spec.js b/node_modules/ipfs-bitswap/dist/test/types/message.spec.js
new file mode 100644
index 0000000..a6e9aa2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/message.spec.js
@@ -0,0 +1,307 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { base32 } from 'multiformats/bases/base32';
+import { base64 } from 'multiformats/bases/base64';
+import { base58btc } from 'multiformats/bases/base58';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import loadFixture from 'aegir/fixtures';
+import { Message } from '../../src/message/message.js';
+import { BitswapMessage } from '../../src/message/index.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import varintEncoder from '../../src/utils/varint-encoder.js';
+const testDataPath = 'test/fixtures/serialized-from-go';
+const rawMessageFullWantlist = loadFixture(testDataPath + '/bitswap110-message-full-wantlist');
+const rawMessageOneBlock = loadFixture(testDataPath + '/bitswap110-message-one-block');
+describe('BitswapMessage', () => {
+    let blocks;
+    let cids;
+    before(async () => {
+        blocks = await makeBlocks(4);
+        cids = blocks.map((b) => b.cid);
+    });
+    describe('.addEntry', () => {
+        it('want type defaults to want block', async () => {
+            const cid = cids[1];
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cid, 1);
+            const serialized = msg.serializeToBitswap100();
+            const deserialized = await BitswapMessage.deserialize(serialized);
+            expect(deserialized.wantlist.get(cid.toString(base58btc))).to.have.nested.property('entry.wantType', Message.Wantlist.WantType.Block);
+        });
+        it('updates priority only if same want type', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[0], 2, BitswapMessage.WantType.Have, true, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('priority', 1);
+            msg.addEntry(cids[0], 2, BitswapMessage.WantType.Block, true, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('priority', 2);
+        });
+        it('only changes from dont cancel to do cancel', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, true, false);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('cancel', true);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, true, false);
+            expect(msg.wantlist.get(cids[1].toString(base58btc))).to.have.property('cancel', true);
+        });
+        it('only changes from dont send to do send DONT_HAVE', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, true);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('sendDontHave', true);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, true);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, false);
+            expect(msg.wantlist.get(cids[1].toString(base58btc))).to.have.property('sendDontHave', true);
+        });
+        it('only override want-have with want-block (not vice versa)', () => {
+            const msg = new BitswapMessage(true);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Block, false, false);
+            msg.addEntry(cids[0], 1, BitswapMessage.WantType.Have, false, false);
+            expect(msg.wantlist.get(cids[0].toString(base58btc))).to.have.property('wantType', BitswapMessage.WantType.Block);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Have, false, false);
+            msg.addEntry(cids[1], 1, BitswapMessage.WantType.Block, false, false);
+            expect(msg.wantlist.get(cids[1].toString(base58btc))).to.have.property('wantType', BitswapMessage.WantType.Block);
+        });
+    });
+    it('.serializeToBitswap100', () => {
+        const block = blocks[1];
+        const msg = new BitswapMessage(true);
+        msg.addBlock(block.cid, block.block);
+        const serialized = msg.serializeToBitswap100();
+        expect(Message.decode(serialized).blocks).to.eql([block.block]);
+    });
+    it('.serializeToBitswap110', () => {
+        const block = blocks[1];
+        const msg = new BitswapMessage(true);
+        msg.addBlock(block.cid, block.block);
+        msg.setPendingBytes(10);
+        msg.addEntry(cids[0], 10, BitswapMessage.WantType.Have, false, true);
+        msg.addHave(cids[1]);
+        msg.addDontHave(cids[2]);
+        const serialized = msg.serializeToBitswap110();
+        const decoded = Message.decode(serialized);
+        expect(decoded.payload[0].data).to.eql(block.block);
+        expect(decoded.pendingBytes).to.eql(10);
+        expect(decoded).to.have.nested.property('wantlist.entries').with.lengthOf(1);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].priority', 10);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].wantType', BitswapMessage.WantType.Have);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].cancel', false);
+        expect(decoded).to.have.nested.property('wantlist.entries[0].sendDontHave', true);
+        expect(decoded.blockPresences.length).to.eql(2);
+        for (const bp of decoded.blockPresences) {
+            if (bp.type === BitswapMessage.BlockPresenceType.Have) {
+                expect(bp.cid).to.equalBytes(cids[1].bytes);
+            }
+            else {
+                expect(bp.cid).to.equalBytes(cids[2].bytes);
+            }
+        }
+    });
+    it('.deserialize a Bitswap100 Message', async () => {
+        const cid0 = cids[0];
+        const cid1 = cids[1];
+        const cid2 = cids[2];
+        const b1 = blocks[1];
+        const b2 = blocks[2];
+        const raw = Message.encode({
+            wantlist: {
+                entries: [{
+                        block: cid0.bytes,
+                        cancel: false,
+                        priority: 0,
+                        sendDontHave: false,
+                        wantType: Message.Wantlist.WantType.Block
+                    }],
+                full: true
+            },
+            blocks: [
+                b1.block,
+                b2.block
+            ]
+        });
+        const msg = await BitswapMessage.deserialize(raw);
+        expect(msg.full).to.equal(true);
+        expect(Array.from(msg.wantlist))
+            .to.eql([[
+                cid0.toString(base58btc),
+                new BitswapMessage.Entry(cid0, 0, BitswapMessage.WantType.Block, false)
+            ]]);
+        expect(Array.from(msg.blocks).map((b) => [b[0], b[1]])).to.eql([
+            [cid1.toString(base58btc), b1.block],
+            [cid2.toString(base58btc), b2.block]
+        ]);
+    });
+    it('.deserialize a Bitswap110 Message', async () => {
+        const cid0 = cids[0];
+        const cid1 = cids[1];
+        const cid2 = cids[2];
+        const cid3 = cids[3];
+        const b1 = blocks[1];
+        const b2 = blocks[2];
+        const raw = Message.encode({
+            wantlist: {
+                entries: [{
+                        block: cid0.bytes,
+                        cancel: false,
+                        wantType: BitswapMessage.WantType.Block,
+                        sendDontHave: true,
+                        priority: 0
+                    }],
+                full: true
+            },
+            payload: [{
+                    data: b1.block,
+                    prefix: varintEncoder([
+                        cid1.version,
+                        cid1.code,
+                        cid1.multihash.code,
+                        cid1.multihash.digest.length
+                    ])
+                }, {
+                    data: b2.block,
+                    prefix: varintEncoder([
+                        cid2.version,
+                        cid2.code,
+                        cid2.multihash.code,
+                        cid2.multihash.digest.length
+                    ])
+                }],
+            blockPresences: [{
+                    cid: cid3.bytes,
+                    type: BitswapMessage.BlockPresenceType.Have
+                }],
+            pendingBytes: 10
+        });
+        const msg = await BitswapMessage.deserialize(raw);
+        expect(msg.full).to.equal(true);
+        expect(Array.from(msg.wantlist))
+            .to.eql([[
+                cid0.toString(base58btc),
+                new BitswapMessage.Entry(cid0, 0, BitswapMessage.WantType.Block, false, true)
+            ]]);
+        expect(Array.from(msg.blocks).map((b) => [b[0], b[1]])).to.eql([
+            [cid1.toString(base58btc), b1.block],
+            [cid2.toString(base58btc), b2.block]
+        ]);
+        expect(Array.from(msg.blockPresences))
+            .to.eql([[
+                cid3.toString(base58btc),
+                BitswapMessage.BlockPresenceType.Have
+            ]]);
+        expect(msg.pendingBytes).to.equal(10);
+    });
+    it('ignores duplicates', () => {
+        const b = blocks[0];
+        const cid = cids[0];
+        const m = new BitswapMessage(true);
+        m.addEntry(cid, 1);
+        m.addEntry(cid, 1);
+        expect(m.wantlist.size).to.be.eql(1);
+        m.addBlock(b.cid, b.block);
+        m.addBlock(b.cid, b.block);
+        expect(m.blocks.size).to.be.eql(1);
+    });
+    it('.empty', () => {
+        const m = new BitswapMessage(true);
+        expect(m.empty).to.equal(true);
+    });
+    it('non-full wantlist message', () => {
+        const msg = new BitswapMessage(false);
+        const serialized = msg.serializeToBitswap100();
+        expect(Message.decode(serialized)).to.have.nested.property('wantlist.full', false);
+    });
+    describe('.equals', () => {
+        it('true, same message', () => {
+            const b = blocks[0];
+            const cid = cids[0];
+            const m1 = new BitswapMessage(true);
+            const m2 = new BitswapMessage(true);
+            m1.addEntry(cid, 1);
+            m2.addEntry(cid, 1);
+            m1.addBlock(b.cid, b.block);
+            m2.addBlock(b.cid, b.block);
+            expect(m1.equals(m2)).to.equal(true);
+        });
+        it('false, different entries', () => {
+            const b = blocks[0];
+            const cid = cids[0];
+            const m1 = new BitswapMessage(true);
+            const m2 = new BitswapMessage(true);
+            m1.addEntry(cid, 100);
+            m2.addEntry(cid, 3750);
+            m1.addBlock(b.cid, b.block);
+            m2.addBlock(b.cid, b.block);
+            expect(m1.equals(m2)).to.equal(false);
+        });
+        it('true, same cid derived from distinct encoding', () => {
+            const b = blocks[0];
+            const cid = cids[0].toV1();
+            const cid1 = CID.parse(cid.toString(base32));
+            const cid2 = CID.parse(cid.toString(base64), base64);
+            const m1 = new BitswapMessage(true);
+            const m2 = new BitswapMessage(true);
+            m1.addEntry(cid1, 1);
+            m2.addEntry(cid2, 1);
+            m1.addBlock(b.cid, b.block);
+            m2.addBlock(b.cid, b.block);
+            expect(m1.equals(m2)).to.equal(true);
+        });
+    });
+    describe('BitswapMessageEntry', () => {
+        it('exposes the wantlist entry properties', () => {
+            const cid = cids[0];
+            const entry = new BitswapMessage.Entry(cid, 5, BitswapMessage.WantType.Block, false, false);
+            expect(entry).to.have.property('cid');
+            expect(entry).to.have.property('priority', 5);
+            expect(entry).to.have.property('wantType', BitswapMessage.WantType.Block);
+            expect(entry).to.have.property('cancel', false);
+            expect(entry).to.have.property('sendDontHave', false);
+        });
+        it('allows setting properties on the wantlist entry', () => {
+            const cid1 = cids[0];
+            const cid2 = cids[1];
+            const entry = new BitswapMessage.Entry(cid1, 5, BitswapMessage.WantType.Block, false, false);
+            expect(entry.entry).to.have.property('cid');
+            expect(entry.entry).to.have.property('priority', 5);
+            entry.cid = cid2;
+            entry.priority = 2;
+            expect(entry.entry).to.have.property('cid');
+            expect(entry.entry.cid.equals(cid2));
+            expect(entry.entry).to.have.property('priority', 2);
+        });
+    });
+    describe('go interop', () => {
+        it('bitswap 1.0.0 message', async () => {
+            const goEncoded = uint8ArrayFromString('CioKKAoiEiAs8k26X7CjDiboOyrFueKeGxYeXB+nQl5zBDNik4uYJBAKGAA=', 'base64pad');
+            const msg = new BitswapMessage(false);
+            const cid = CID.parse('QmRN6wdp1S2A5EtjW9A3M1vKSBuQQGcgvuhoMUoEz4iiT5');
+            msg.addEntry(cid, 10);
+            const res = await BitswapMessage.deserialize(goEncoded);
+            expect(res).to.eql(msg);
+            // TODO: this go bitswap 1.0.0 message was created when the most of the fields were `optional`
+            // https://github.com/ipfs/go-libipfs/blob/a43c8829ef499c6ddab4f10d56a7c45738224e7f/bitswap/message/pb/message.proto
+            // They've since reverted to being `singular` which means they can be omitted from the buffer
+            // if they are set to the default value so compliant protobuf encoders wont produce bytes that
+            // match any more.
+            // expect(msg.serializeToBitswap100()).to.equalBytes(goEncoded)
+        });
+        describe.skip('bitswap 1.1.0 message', () => {
+            // TODO check with whyrusleeping the quality of the raw protobufs
+            // deserialization is just failing on the first and the second has a
+            // payload but empty
+            it('full wantlist message', async () => {
+                await BitswapMessage.deserialize(rawMessageFullWantlist);
+                // TODO
+                //   check the deserialised message
+            });
+            it('one block message', async () => {
+                await BitswapMessage.deserialize(rawMessageOneBlock);
+                // TODO
+                //   check the deserialised message
+            });
+        });
+    });
+});
+//# sourceMappingURL=message.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/message.spec.js.map b/node_modules/ipfs-bitswap/dist/test/types/message.spec.js.map
new file mode 100644
index 0000000..a167a70
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/message.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"message.spec.js","sourceRoot":"","sources":["../../../test/types/message.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.d.ts
new file mode 100644
index 0000000..7877bd9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=wantlist.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.d.ts.map
new file mode 100644
index 0000000..e04bc8b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"wantlist.spec.d.ts","sourceRoot":"","sources":["../../../test/types/wantlist.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.js b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.js
new file mode 100644
index 0000000..22fa646
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.js
@@ -0,0 +1,106 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { base58btc } from 'multiformats/bases/base58';
+import { base64 } from 'multiformats/bases/base64';
+import { Wantlist } from '../../src/wantlist/index.js';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+const DAG_PB_CODEC = 0x70;
+describe('Wantlist', () => {
+    let wm;
+    let blocks;
+    before(async () => {
+        blocks = await makeBlocks(2);
+    });
+    beforeEach(() => {
+        wm = new Wantlist();
+    });
+    it('length', () => {
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        wm.add(b1.cid, 2, Message.WantType.Block);
+        wm.add(b2.cid, 1, Message.WantType.Block);
+        expect(wm).to.have.length(2);
+    });
+    describe('remove', () => {
+        it('removes with a single ref', () => {
+            const b = blocks[0];
+            wm.add(b.cid, 1, Message.WantType.Block);
+            wm.remove(b.cid);
+            expect(wm).to.have.length(0);
+        });
+        it('removes with multiple refs', () => {
+            const b1 = blocks[0];
+            const b2 = blocks[1];
+            wm.add(b1.cid, 1, Message.WantType.Block);
+            wm.add(b2.cid, 2, Message.WantType.Block);
+            expect(wm).to.have.length(2);
+            wm.remove(b2.cid);
+            expect(wm).to.have.length(1);
+            wm.add(b1.cid, 2, Message.WantType.Block);
+            wm.remove(b1.cid);
+            expect(wm).to.have.length(1);
+            wm.remove(b1.cid);
+            expect(wm).to.have.length(0);
+        });
+        it('ignores non existing removes', () => {
+            const b = blocks[0];
+            wm.add(b.cid, 1, Message.WantType.Block);
+            wm.remove(b.cid);
+            wm.remove(b.cid);
+            expect(wm).to.have.length(0);
+        });
+    });
+    it('entries', () => {
+        const b = blocks[0];
+        wm.add(b.cid, 2, Message.WantType.Have);
+        expect(Array.from(wm.entries())).to.be.eql([[
+                b.cid.toString(base58btc),
+                new Wantlist.Entry(b.cid, 2, Message.WantType.Have)
+            ]]);
+    });
+    it('sortedEntries', () => {
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        wm.add(b1.cid, 1, Message.WantType.Block);
+        wm.add(b2.cid, 1, Message.WantType.Block);
+        expect(Array.from(wm.sortedEntries())).to.be.eql([
+            [b1.cid.toString(base58btc), new Wantlist.Entry(b1.cid, 1, Message.WantType.Block)],
+            [b2.cid.toString(base58btc), new Wantlist.Entry(b2.cid, 1, Message.WantType.Block)]
+        ]);
+    });
+    it('contains', () => {
+        const b1 = blocks[0];
+        const b2 = blocks[1];
+        wm.add(b1.cid, 2, Message.WantType.Block);
+        expect(wm.contains(b1.cid)).to.be.true();
+        expect(wm.contains(b2.cid)).to.be.false();
+    });
+    it('with cidV1', async () => {
+        const b = blocks[0];
+        const digest = await sha256.digest(b.block);
+        const cid = CID.createV1(DAG_PB_CODEC, digest);
+        wm.add(cid, 2, Message.WantType.Block);
+        expect(Array.from(wm.entries())).to.be.eql([[
+                cid.toString(base58btc),
+                new Wantlist.Entry(cid, 2, Message.WantType.Block)
+            ]]);
+    });
+    it('matches same cid derived from distinct encodings', () => {
+        // Base 64
+        const id1 = 'mAVUSIKlIkE8vD0ebj4GXaUswGEsNLtHBzSoewPuF0pmhkqRH';
+        // Base 32
+        const id2 = 'bafkreifjjcie6lypi6ny7amxnfftagclbuxndqonfipmb64f2km2devei4';
+        const cid1 = CID.parse(id1, base64);
+        const cid2 = CID.parse(id2);
+        wm.add(cid1, 2, Message.WantType.Block);
+        expect(wm.contains(cid1)).to.be.true();
+        expect(wm.contains(cid2)).to.be.true();
+        wm.remove(cid1);
+        expect(wm.contains(cid1)).to.be.false();
+        expect(wm.contains(cid2)).to.be.false();
+    });
+});
+//# sourceMappingURL=wantlist.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.js.map b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.js.map
new file mode 100644
index 0000000..d8c5d56
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/types/wantlist.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"wantlist.spec.js","sourceRoot":"","sources":["../../../test/types/wantlist.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/utils.spec.d.ts
new file mode 100644
index 0000000..defd4da
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=utils.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils.spec.d.ts.map
new file mode 100644
index 0000000..8f252e3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.spec.d.ts","sourceRoot":"","sources":["../../test/utils.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils.spec.js b/node_modules/ipfs-bitswap/dist/test/utils.spec.js
new file mode 100644
index 0000000..87f9b77
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils.spec.js
@@ -0,0 +1,272 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { BitswapMessageEntry } from '../src/message/entry.js';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+import { BitswapMessage } from '../src/message/index.js';
+import { groupBy, uniqWith, pullAllWith, includesWith, sortBy, isMapEqual } from '../src/utils/index.js';
+import { SortedMap } from '../src/utils/sorted-map.js';
+import varintEncoder from '../src/utils/varint-encoder.js';
+// @ts-expect-error no types
+import varintDecoder from 'varint-decoder';
+const DAG_PB_CODEC = 0x70;
+describe('utils spec', function () {
+    it('groupBy', () => {
+        const list = [
+            { name: 'name1', score: 1 },
+            { name: 'name2', score: 1 },
+            { name: 'name3', score: 2 }
+        ];
+        const actual = groupBy(p => p.score === 1 ? 'a' : 'b', list);
+        expect(actual).to.deep.equal({
+            a: [
+                { name: 'name1', score: 1 },
+                { name: 'name2', score: 1 }
+            ],
+            b: [{ name: 'name3', score: 2 }]
+        });
+    });
+    it('pullAllWith', () => {
+        const array = [{ x: 1, y: 2 }, { x: 3, y: 4 }, { x: 5, y: 6 }];
+        const actual = pullAllWith((a, b) => (a.x === b.x && a.y === b.y), array, [{ x: 3, y: 4 }]);
+        expect(actual).to.deep.equal([{ x: 1, y: 2 }, { x: 5, y: 6 }]);
+    });
+    it('uniqWith', () => {
+        class T {
+            constructor(id) {
+                this.id = id;
+            }
+            equals(instance) {
+                return instance.id === this.id;
+            }
+        }
+        const list = [new T(1), new T(1), new T(2)];
+        const r = uniqWith((a, b) => a.equals(b), list);
+        if (r[0].id === 1 && r[1].id === 2) {
+            return;
+        }
+        throw new Error('no match');
+    });
+    it('includesWith', () => {
+        class T {
+            constructor(id) {
+                this.id = id;
+            }
+            equals(instance) {
+                return instance.id === this.id;
+            }
+        }
+        const list = [new T(1), new T(2), new T(3)];
+        const r1 = includesWith((a, b) => a.equals(b), new T(2), list);
+        const r2 = includesWith((a, b) => a.equals(b), new T(4), list);
+        expect(r1).to.be.true();
+        expect(r2).to.be.false();
+    });
+    it('sortBy', () => {
+        const list = [
+            {
+                id: 3,
+                name: 'b'
+            },
+            {
+                id: 2,
+                name: 'a'
+            },
+            {
+                id: 1,
+                name: 'c'
+            }
+        ];
+        const groupedList1 = sortBy(o => o.name.charCodeAt(0), list);
+        const groupedList2 = sortBy(o => o.id, list);
+        expect(groupedList1).to.be.deep.equal([{ id: 2, name: 'a' },
+            { id: 3, name: 'b' },
+            { id: 1, name: 'c' }]);
+        expect(groupedList2).to.be.deep.equal([{ id: 1, name: 'c' },
+            { id: 2, name: 'a' },
+            { id: 3, name: 'b' }]);
+    });
+    describe('isMapEqual', () => {
+        it('should on be false when !== size', () => {
+            expect(isMapEqual(new Map([['key1', uint8ArrayFromString('value1')], ['key2', uint8ArrayFromString('value2')]]), new Map([['key1', uint8ArrayFromString('value1')]]))).to.be.false();
+        });
+        it('should on be false if one key is missing', () => {
+            expect(isMapEqual(new Map([['key1', uint8ArrayFromString('value1')], ['key2', uint8ArrayFromString('value2')]]), new Map([['key1', uint8ArrayFromString('value1')], ['key3', uint8ArrayFromString('value2')]]))).to.be.false();
+        });
+        it('should on be false if BitswapMessageEntry don\'t match', async () => {
+            const hash1 = await sha256.digest(uint8ArrayFromString('OMG!1'));
+            const cid1 = CID.createV1(DAG_PB_CODEC, hash1);
+            expect(isMapEqual(new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 2, BitswapMessage.WantType.Block)]]), new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)]]))).to.be.false();
+        });
+        it('should on be true if BitswapMessageEntry match', async () => {
+            const hash1 = await sha256.digest(uint8ArrayFromString('OMG!1'));
+            const cid1 = CID.createV1(DAG_PB_CODEC, hash1);
+            expect(isMapEqual(new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)]]), new Map([['key1', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)], ['key2', new BitswapMessageEntry(cid1, 1, BitswapMessage.WantType.Block)]]))).to.be.true();
+        });
+        it('should on be false if data does not match', async () => {
+            const block1 = uint8ArrayFromString('hello world');
+            const block2 = uint8ArrayFromString('hello world 2');
+            expect(isMapEqual(new Map([['key1', block1], ['key2', block1]]), new Map([['key1', block1], ['key2', block2]]))).to.be.false();
+        });
+        it('should on be true if data matches', async () => {
+            const data = uint8ArrayFromString('hello world');
+            expect(isMapEqual(new Map([['key1', data], ['key2', data]]), new Map([['key1', data], ['key2', data]]))).to.be.true();
+        });
+    });
+    describe('SortedMap', () => {
+        it('size', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.size).to.eql(3);
+        });
+        it('get / set', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.get('one')).to.eql(1);
+            expect(sm.get('two')).to.eql(2);
+            expect(sm.get('three')).to.eql(3);
+        });
+        it('delete', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.get('two')).to.eql(2);
+            sm.delete('two');
+            expect(sm.get('two')).to.be.undefined();
+            expect(sm.size).to.eql(2);
+            sm.delete('two');
+            expect(sm.size).to.eql(2);
+        });
+        it('clear', () => {
+            const sm = new SortedMap();
+            sm.set('one', 1);
+            sm.set('two', 2);
+            sm.set('three', 3);
+            expect(sm.get('two')).to.eql(2);
+            sm.clear();
+            expect(sm.get('two')).to.be.undefined();
+            expect(sm.size).to.eql(0);
+            expect([...sm.keys()]).to.eql([]);
+        });
+        it('default order', async () => {
+            const sm = new SortedMap();
+            sm.set(1, 'a');
+            sm.set(3, 'c');
+            sm.set(2, 'b');
+            expect(sm.size).to.eql(3);
+            expect([...sm.keys()]).to.eql([1, 2, 3]);
+            expect([...sm.values()]).to.eql(['a', 'b', 'c']);
+            expect([...sm.entries()]).to.eql([[1, 'a'], [2, 'b'], [3, 'c']]);
+            expect([...sm]).to.eql([...sm.entries()]);
+            const collected = [];
+            sm.forEach(i => { collected.push(i); });
+            expect(collected).to.eql([...sm]);
+        });
+        describe('custom order', () => {
+            const prioritySort = (a, b) => b[1].priority - a[1].priority;
+            it('forward', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 2 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'low']);
+            });
+            it('backward', () => {
+                const sm = new SortedMap([
+                    ['high', { priority: 2 }],
+                    ['low', { priority: 1 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'low']);
+            });
+            it('insert start', () => {
+                const sm = new SortedMap([
+                    ['mid', { priority: 2 }],
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 3 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'mid', 'low']);
+            });
+            it('insert end', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['mid', { priority: 2 }],
+                    ['high', { priority: 3 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'mid', 'low']);
+            });
+            it('insert middle', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 3 }],
+                    ['mid', { priority: 2 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'mid', 'low']);
+            });
+            it('insert same priority start', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high-a', { priority: 3 }],
+                    ['high-b', { priority: 3 }]
+                ], prioritySort);
+                expect([...sm.keys()].map(s => s.substring(0, 4))).to.eql(['high', 'high', 'low']);
+            });
+            it('insert same priority end', () => {
+                const sm = new SortedMap([
+                    ['hi', { priority: 3 }],
+                    ['low-a', { priority: 1 }],
+                    ['low-b', { priority: 1 }]
+                ], prioritySort);
+                expect([...sm.keys()].map(s => s.substring(0, 3))).to.eql(['hi', 'low', 'low']);
+            });
+            it('insert same key', () => {
+                const sm = new SortedMap([
+                    ['low', { priority: 1 }],
+                    ['high', { priority: 3 }],
+                    ['high', { priority: 4 }]
+                ], prioritySort);
+                expect([...sm.keys()]).to.eql(['high', 'low']);
+            });
+            it('update', () => {
+                const sm = new SortedMap([], prioritySort);
+                const data1 = { k: 'v1', priority: 1 };
+                const data2 = { k: 'v2', priority: 3 };
+                const data3 = { k: 'v3', priority: 2 };
+                sm.set('one', data1);
+                sm.set('two', data2);
+                sm.set('three', data3);
+                expect([...sm.keys()]).to.eql(['two', 'three', 'one']);
+                expect([...sm.values()].map(v => v.k)).to.eql(['v2', 'v3', 'v1']);
+                // After changing data that affects the sort order, need to call update
+                // to actually trigger the sort
+                data3.priority = 5;
+                sm.update(1); // 'three'
+                expect([...sm.keys()]).to.eql(['three', 'two', 'one']);
+                expect([...sm.values()].map(v => v.k)).to.eql(['v3', 'v2', 'v1']);
+            });
+            it('delete same priority', () => {
+                const sm = new SortedMap([
+                    ['a', { priority: 1 }],
+                    ['b', { priority: 1 }],
+                    ['c', { priority: 1 }]
+                ], prioritySort);
+                sm.delete('a');
+                expect([...sm.keys()].sort()).to.eql(['b', 'c']);
+            });
+        });
+    });
+});
+describe('varint encoder', () => {
+    it('should encode and decode', () => {
+        const input = [1, 112, 18];
+        const encoded = varintEncoder(input);
+        const decoded = varintDecoder(encoded);
+        expect(decoded).to.deep.equal(input);
+    });
+});
+//# sourceMappingURL=utils.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils.spec.js.map b/node_modules/ipfs-bitswap/dist/test/utils.spec.js.map
new file mode 100644
index 0000000..e1bce23
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../test/utils.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/connect-all.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.d.ts
new file mode 100644
index 0000000..4b12ea4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.d.ts
@@ -0,0 +1,2 @@
+export declare const connectAll: (nodes: any[]) => Promise<void>;
+//# sourceMappingURL=connect-all.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/connect-all.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.d.ts.map
new file mode 100644
index 0000000..5f5a047
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"connect-all.d.ts","sourceRoot":"","sources":["../../../test/utils/connect-all.ts"],"names":[],"mappings":"AAIA,eAAO,MAAM,UAAU,UAAiB,GAAG,EAAE,KAAG,QAAQ,IAAI,CAM3D,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/connect-all.js b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.js
new file mode 100644
index 0000000..94f8914
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.js
@@ -0,0 +1,10 @@
+// @ts-expect-error no types
+import without from 'lodash.without';
+export const connectAll = async (nodes) => {
+    for (const node of nodes) {
+        for (const otherNode of without(nodes, node)) {
+            await node.libp2pNode.dial(otherNode.bitswap.peerId);
+        }
+    }
+};
+//# sourceMappingURL=connect-all.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/connect-all.js.map b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.js.map
new file mode 100644
index 0000000..0be15a6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/connect-all.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"connect-all.js","sourceRoot":"","sources":["../../../test/utils/connect-all.ts"],"names":[],"mappings":"AACA,4BAA4B;AAC5B,OAAO,OAAO,MAAM,gBAAgB,CAAA;AAEpC,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,KAAY,EAAiB,EAAE;IAC9D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;QACxB,KAAK,MAAM,SAAS,IAAI,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YAC5C,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;SACrD;KACF;AACH,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.d.ts
new file mode 100644
index 0000000..b935508
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.d.ts
@@ -0,0 +1,3 @@
+import type { BitswapNode } from './mocks.js';
+export declare const createBitswap: () => Promise<BitswapNode>;
+//# sourceMappingURL=create-bitswap.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.d.ts.map
new file mode 100644
index 0000000..a734461
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-bitswap.d.ts","sourceRoot":"","sources":["../../../test/utils/create-bitswap.ts"],"names":[],"mappings":"AAIA,OAAO,KAAK,EAAE,WAAW,EAAE,MAAM,YAAY,CAAA;AAE7C,eAAO,MAAM,aAAa,QAAa,QAAQ,WAAW,CAQzD,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.js b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.js
new file mode 100644
index 0000000..7c8a19b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.js
@@ -0,0 +1,13 @@
+import { DefaultBitswap } from '../../src/bitswap.js';
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { createLibp2pNode } from './create-libp2p-node.js';
+export const createBitswap = async () => {
+    const libp2p = await createLibp2pNode({
+        DHT: true
+    });
+    const blockstore = new MemoryBlockstore();
+    const bitswap = new DefaultBitswap(libp2p, blockstore);
+    await bitswap.start();
+    return { bitswap, libp2p, blockstore };
+};
+//# sourceMappingURL=create-bitswap.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.js.map b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.js.map
new file mode 100644
index 0000000..35b795c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-bitswap.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-bitswap.js","sourceRoot":"","sources":["../../../test/utils/create-bitswap.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAA;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAA;AACzD,OAAO,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAA;AAG1D,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,IAA0B,EAAE;IAC5D,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC;QACpC,GAAG,EAAE,IAAI;KACV,CAAC,CAAA;IACF,MAAM,UAAU,GAAG,IAAI,gBAAgB,EAAE,CAAA;IACzC,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAA;IACtD,MAAM,OAAO,CAAC,KAAK,EAAE,CAAA;IACrB,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,CAAA;AACxC,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.d.ts
new file mode 100644
index 0000000..4fb829c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.d.ts
@@ -0,0 +1,7 @@
+import { Libp2pOptions } from 'libp2p';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+export interface NodeOptions extends Libp2pOptions {
+    DHT?: boolean;
+}
+export declare function createLibp2pNode(options?: NodeOptions): Promise<Libp2p>;
+//# sourceMappingURL=create-libp2p-node.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.d.ts.map
new file mode 100644
index 0000000..8226932
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-libp2p-node.d.ts","sourceRoot":"","sources":["../../../test/utils/create-libp2p-node.ts"],"names":[],"mappings":"AAIA,OAAO,EAAgB,aAAa,EAAE,MAAM,QAAQ,CAAA;AAGpD,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AAKtD,MAAM,WAAW,WAAY,SAAQ,aAAa;IAChD,GAAG,CAAC,EAAE,OAAO,CAAA;CACd;AAED,wBAAsB,gBAAgB,CAAE,OAAO,GAAE,WAAgB,GAAG,OAAO,CAAC,MAAM,CAAC,CAyBlF"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.js b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.js
new file mode 100644
index 0000000..830576b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.js
@@ -0,0 +1,33 @@
+import { tcp } from '@libp2p/tcp';
+import { mplex } from '@libp2p/mplex';
+import { noise } from '@chainsafe/libp2p-noise';
+import { createLibp2p } from 'libp2p';
+import { kadDHT } from '@libp2p/kad-dht';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+// @ts-expect-error no types
+import defaultsDeep from '@nodeutils/defaults-deep';
+export async function createLibp2pNode(options = {}) {
+    const node = await createLibp2p(defaultsDeep({
+        peerId: await createEd25519PeerId(),
+        addresses: {
+            listen: ['/ip4/0.0.0.0/tcp/0']
+        },
+        transports: [
+            tcp()
+        ],
+        streamMuxers: [
+            mplex()
+        ],
+        connectionEncryption: [
+            noise()
+        ],
+        dht: options.DHT === true
+            ? kadDHT({
+                clientMode: false
+            })
+            : undefined
+    }, options));
+    await node.start();
+    return node;
+}
+//# sourceMappingURL=create-libp2p-node.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.js.map b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.js.map
new file mode 100644
index 0000000..aad5a22
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/create-libp2p-node.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"create-libp2p-node.js","sourceRoot":"","sources":["../../../test/utils/create-libp2p-node.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAA;AACjC,OAAO,EAAE,KAAK,EAAE,MAAM,eAAe,CAAA;AACrC,OAAO,EAAE,KAAK,EAAE,MAAM,yBAAyB,CAAA;AAC/C,OAAO,EAAE,YAAY,EAAiB,MAAM,QAAQ,CAAA;AACpD,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACxC,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAG7D,4BAA4B;AAC5B,OAAO,YAAY,MAAM,0BAA0B,CAAA;AAMnD,MAAM,CAAC,KAAK,UAAU,gBAAgB,CAAE,UAAuB,EAAE;IAC/D,MAAM,IAAI,GAAG,MAAM,YAAY,CAAC,YAAY,CAAC;QAC3C,MAAM,EAAE,MAAM,mBAAmB,EAAE;QACnC,SAAS,EAAE;YACT,MAAM,EAAE,CAAC,oBAAoB,CAAC;SAC/B;QACD,UAAU,EAAE;YACV,GAAG,EAAE;SACN;QACD,YAAY,EAAE;YACZ,KAAK,EAAE;SACR;QACD,oBAAoB,EAAE;YACpB,KAAK,EAAE;SACR;QACD,GAAG,EAAE,OAAO,CAAC,GAAG,KAAK,IAAI;YACvB,CAAC,CAAC,MAAM,CAAC;gBACP,UAAU,EAAE,KAAK;aAClB,CAAC;YACF,CAAC,CAAC,SAAS;KACd,EAAE,OAAO,CAAC,CAAC,CAAA;IAEZ,MAAM,IAAI,CAAC,KAAK,EAAE,CAAA;IAElB,OAAO,IAAI,CAAA;AACb,CAAC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.d.ts
new file mode 100644
index 0000000..841dff9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.d.ts
@@ -0,0 +1,2 @@
+export declare const distributionTest: (instanceCount: number, blockCount: number, repeats: number, events: any) => Promise<void>;
+//# sourceMappingURL=distribution-test.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.d.ts.map
new file mode 100644
index 0000000..a73d281
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"distribution-test.d.ts","sourceRoot":"","sources":["../../../test/utils/distribution-test.ts"],"names":[],"mappings":"AAUA,eAAO,MAAM,gBAAgB,kBAAyB,MAAM,cAAc,MAAM,WAAW,MAAM,UAAU,GAAG,KAAG,QAAQ,IAAI,CA0D5H,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.js b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.js
new file mode 100644
index 0000000..598de3d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.js
@@ -0,0 +1,48 @@
+/** @type {(n:number) => any[]} */
+// @ts-expect-error no types
+import range from 'lodash.range';
+import { expect } from 'aegir/chai';
+import { createBitswap } from './create-bitswap.js';
+import { makeBlocks } from './make-blocks.js';
+import { connectAll } from './connect-all.js';
+export const distributionTest = async (instanceCount, blockCount, repeats, events) => {
+    let pendingRepeats = repeats;
+    const nodes = await Promise.all(range(instanceCount).map(async () => await createBitswap()));
+    events.emit('start');
+    await connectAll(nodes);
+    events.emit('all connected');
+    while (pendingRepeats > 0) {
+        const first = nodes[0];
+        const blocks = await makeBlocks(blockCount);
+        await Promise.all(blocks.map(async (block) => { await first.blockstore.put(block.cid, block.block); }));
+        events.emit('first put');
+        const results = await Promise.all(nodes.map(async (node) => {
+            events.emit('getting many');
+            const cids = blocks.map((block) => block.cid);
+            const start = Date.now();
+            const result = await Promise.all(cids.map(async (cid) => await node.bitswap.want(cid)));
+            const elapsed = Date.now() - start;
+            events.emit('got block', elapsed);
+            return result;
+        }));
+        try {
+            expect(results).have.lengthOf(instanceCount);
+            for (const nodeBlocks of results) {
+                expect(nodeBlocks).to.have.lengthOf(blocks.length);
+                nodeBlocks.forEach((block, i) => {
+                    expect(block).to.deep.equal(blocks[i].block);
+                });
+            }
+        }
+        finally {
+            pendingRepeats--;
+        }
+    }
+    events.emit('stop');
+    await Promise.all(nodes.map(async (node) => {
+        await node.bitswap.stop();
+        await node.libp2p.stop();
+    }));
+    events.emit('stopped');
+};
+//# sourceMappingURL=distribution-test.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.js.map b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.js.map
new file mode 100644
index 0000000..d9a3a8b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/distribution-test.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"distribution-test.js","sourceRoot":"","sources":["../../../test/utils/distribution-test.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/helpers.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/helpers.d.ts
new file mode 100644
index 0000000..68e0da2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/helpers.d.ts
@@ -0,0 +1,9 @@
+export declare const orderedFinish: (n: number) => {
+    (i: number): void;
+    assert: () => void;
+};
+export declare const countToFinish: (n: number) => {
+    (): void;
+    assert: () => void;
+};
+//# sourceMappingURL=helpers.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/helpers.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/helpers.d.ts.map
new file mode 100644
index 0000000..f6e479a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/helpers.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"helpers.d.ts","sourceRoot":"","sources":["../../../test/utils/helpers.ts"],"names":[],"mappings":"AAKA,eAAO,MAAM,aAAa,MAAO,MAAM;QAAS,MAAM,GAAG,IAAI;YAAU,MAAM,IAAI;CAchF,CAAA;AAED,eAAO,MAAM,aAAa,MAAO,MAAM,KAAG;IAAE,IAAI,IAAI,CAAC;IAAC,MAAM,EAAE,MAAM,IAAI,CAAA;CAYvE,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/helpers.js b/node_modules/ipfs-bitswap/dist/test/utils/helpers.js
new file mode 100644
index 0000000..d90c612
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/helpers.js
@@ -0,0 +1,26 @@
+// @ts-expect-error no types
+import range from 'lodash.range';
+import { expect } from 'aegir/chai';
+export const orderedFinish = (n) => {
+    const r = range(1, n + 1);
+    const finishes = [];
+    const output = (i) => {
+        finishes.push(i);
+    };
+    output.assert = () => {
+        expect(finishes.length).to.equal(n);
+        expect(r).to.deep.equal(finishes, `Invalid finish order: ${finishes}`);
+    };
+    return output;
+};
+export const countToFinish = (n) => {
+    let pending = n;
+    const output = () => {
+        pending--;
+    };
+    output.assert = () => {
+        expect(pending).to.equal(0, `too many finishes, expected only ${n}`);
+    };
+    return output;
+};
+//# sourceMappingURL=helpers.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/helpers.js.map b/node_modules/ipfs-bitswap/dist/test/utils/helpers.js.map
new file mode 100644
index 0000000..d3be4eb
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/helpers.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../test/utils/helpers.ts"],"names":[],"mappings":"AACA,4BAA4B;AAC5B,OAAO,KAAK,MAAM,cAAc,CAAA;AAChC,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AAEnC,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,CAAS,EAA6C,EAAE;IACpF,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;IACzB,MAAM,QAAQ,GAAa,EAAE,CAAA;IAE7B,MAAM,MAAM,GAAG,CAAC,CAAS,EAAQ,EAAE;QACjC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;IAClB,CAAC,CAAA;IAED,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;QACnB,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QACnC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,yBAAyB,QAAQ,EAAE,CAAC,CAAA;IACxE,CAAC,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,CAAS,EAAoC,EAAE;IAC3E,IAAI,OAAO,GAAG,CAAC,CAAA;IAEf,MAAM,MAAM,GAAG,GAAS,EAAE;QACxB,OAAO,EAAE,CAAA;IACX,CAAC,CAAA;IAED,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;QACnB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,oCAAoC,CAAC,EAAE,CAAC,CAAA;IACtE,CAAC,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.d.ts
new file mode 100644
index 0000000..cb26fe2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.d.ts
@@ -0,0 +1,6 @@
+import { CID } from 'multiformats/cid';
+export declare const makeBlocks: (count: number, size?: number) => Promise<Array<{
+    cid: CID;
+    block: Uint8Array;
+}>>;
+//# sourceMappingURL=make-blocks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.d.ts.map
new file mode 100644
index 0000000..9a33fd7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-blocks.d.ts","sourceRoot":"","sources":["../../../test/utils/make-blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAStC,eAAO,MAAM,UAAU,UAAiB,MAAM,SAAS,MAAM,KAAG,QAAQ,MAAM;IAAE,GAAG,EAAE,GAAG,CAAC;IAAC,KAAK,EAAE,UAAU,CAAA;CAAE,CAAC,CAa7G,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.js b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.js
new file mode 100644
index 0000000..838fdc7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.js
@@ -0,0 +1,20 @@
+import { CID } from 'multiformats/cid';
+import { sha256 } from 'multiformats/hashes/sha2';
+import { randomBytes } from 'iso-random-stream';
+// @ts-expect-error no types
+import range from 'lodash.range';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+// @ts-expect-error no types
+import { v4 as uuid } from 'uuid';
+export const makeBlocks = async (count, size) => {
+    const blocks = await Promise.all(range(count ?? 1).map(async () => {
+        const block = size != null ? randomBytes(size) : uint8ArrayFromString(`hello world ${uuid()}`);
+        const hash = await sha256.digest(block);
+        return {
+            cid: CID.createV0(hash),
+            block
+        };
+    }));
+    return blocks;
+};
+//# sourceMappingURL=make-blocks.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.js.map b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.js.map
new file mode 100644
index 0000000..6c200b7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-blocks.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-blocks.js","sourceRoot":"","sources":["../../../test/utils/make-blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AACjD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAA;AAC/C,4BAA4B;AAC5B,OAAO,KAAK,MAAM,cAAc,CAAA;AAChC,OAAO,EAAE,UAAU,IAAI,oBAAoB,EAAE,MAAM,yBAAyB,CAAA;AAC5E,4BAA4B;AAC5B,OAAO,EAAE,EAAE,IAAI,IAAI,EAAE,MAAM,MAAM,CAAA;AAEjC,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,KAAa,EAAE,IAAa,EAAmD,EAAE;IAChH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;QAC/B,MAAM,KAAK,GAAG,IAAI,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,eAAe,IAAI,EAAE,EAAE,CAAC,CAAA;QAC9F,MAAM,IAAI,GAAG,MAAM,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;QACvC,OAAO;YACL,GAAG,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC;YACvB,KAAK;SACN,CAAA;IACH,CAAC,CAAC,CACH,CAAA;IAED,OAAO,MAAM,CAAA;AACf,CAAC,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.d.ts
new file mode 100644
index 0000000..8048a1f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.d.ts
@@ -0,0 +1,4 @@
+import type { PeerId } from '@libp2p/interface-peer-id';
+export declare function makePeerId(): Promise<PeerId>;
+export declare function makePeerIds(count: number): Promise<PeerId[]>;
+//# sourceMappingURL=make-peer-id.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.d.ts.map
new file mode 100644
index 0000000..1265c79
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-peer-id.d.ts","sourceRoot":"","sources":["../../../test/utils/make-peer-id.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AAGvD,wBAAsB,UAAU,IAAK,OAAO,CAAC,MAAM,CAAC,CAEnD;AAED,wBAAsB,WAAW,CAAE,KAAK,EAAE,MAAM,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,CAKnE"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.js b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.js
new file mode 100644
index 0000000..8b18f4e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.js
@@ -0,0 +1,11 @@
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+export async function makePeerId() {
+    return (await makePeerIds(1))[0];
+}
+export async function makePeerIds(count) {
+    const peerIds = await Promise.all([...new Array(count ?? 1)].map(async () => {
+        return await createEd25519PeerId();
+    }));
+    return peerIds;
+}
+//# sourceMappingURL=make-peer-id.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.js.map b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.js.map
new file mode 100644
index 0000000..8aa1f5c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/make-peer-id.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"make-peer-id.js","sourceRoot":"","sources":["../../../test/utils/make-peer-id.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAA;AAE7D,MAAM,CAAC,KAAK,UAAU,UAAU;IAC9B,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;AAClC,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,WAAW,CAAE,KAAa;IAC9C,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;QAC1E,OAAO,MAAM,mBAAmB,EAAE,CAAA;IACpC,CAAC,CAAC,CAAC,CAAA;IACH,OAAO,OAAO,CAAA;AAChB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/mocks.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/mocks.d.ts
new file mode 100644
index 0000000..1ecdb06
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/mocks.d.ts
@@ -0,0 +1,34 @@
+import type { Blockstore } from 'interface-blockstore';
+import { DefaultBitswap } from '../../src/bitswap.js';
+import { Network } from '../../src/network.js';
+import type { Libp2p } from '@libp2p/interface-libp2p';
+import type { PeerId } from '@libp2p/interface-peer-id';
+import type { Multiaddr } from '@multiformats/multiaddr';
+import type { BitswapMessage } from '../../src/message/index.js';
+import type { Bitswap } from '../../src/index.js';
+/**
+ * Create a mock libp2p node
+ */
+export declare const mockLibp2pNode: () => Libp2p;
+interface OnDone {
+    (args: {
+        connects: Array<PeerId | Multiaddr>;
+        messages: Array<[PeerId, BitswapMessage]>;
+    }): void;
+}
+interface OnMessage {
+    (peerId: PeerId, message: BitswapMessage): void;
+}
+/**
+ * Create a mock network instance
+ */
+export declare const mockNetwork: (calls?: number, done?: OnDone, onMsg?: OnMessage) => Network;
+export declare const applyNetwork: (bs: DefaultBitswap, n: Network) => void;
+export interface BitswapNode {
+    libp2p: Libp2p;
+    bitswap: Bitswap;
+    blockstore: Blockstore;
+}
+export declare const genBitswapNetwork: (n: number, enableDHT?: boolean) => Promise<BitswapNode[]>;
+export {};
+//# sourceMappingURL=mocks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/mocks.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/mocks.d.ts.map
new file mode 100644
index 0000000..cac2b64
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/mocks.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"mocks.d.ts","sourceRoot":"","sources":["../../../test/utils/mocks.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAA;AAGtD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAA;AACrD,OAAO,EAAE,OAAO,EAAE,MAAM,sBAAsB,CAAA;AAM9C,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,0BAA0B,CAAA;AAEtD,OAAO,KAAK,EAAE,MAAM,EAAE,MAAM,2BAA2B,CAAA;AACvD,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAA;AAExD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAA;AAChE,OAAO,KAAK,EAAE,OAAO,EAAE,MAAM,oBAAoB,CAAA;AAEjD;;GAEG;AACH,eAAO,MAAM,cAAc,QAAO,MAgCjC,CAAA;AAED,UAAU,MAAM;IACd,CAAC,IAAI,EAAE;QAAE,QAAQ,EAAE,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;QAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAA;KAAE,GAAG,IAAI,CAAA;CACjG;AAED,UAAU,SAAS;IACjB,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,cAAc,GAAG,IAAI,CAAA;CAChD;AAED;;GAEG;AACH,eAAO,MAAM,WAAW,WAAW,MAAM,SAAmB,MAAM,UAAyC,SAAS,KAAmC,OA8DtJ,CAAA;AAED,eAAO,MAAM,YAAY,OAAQ,cAAc,KAAK,OAAO,KAAG,IAI7D,CAAA;AAED,MAAM,WAAW,WAAW;IAC1B,MAAM,EAAE,MAAM,CAAA;IACd,OAAO,EAAE,OAAO,CAAA;IAChB,UAAU,EAAE,UAAU,CAAA;CACvB;AAED,eAAO,MAAM,iBAAiB,MAAa,MAAM,cAAa,OAAO,KAAW,QAAQ,WAAW,EAAE,CA6CpG,CAAA"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/mocks.js b/node_modules/ipfs-bitswap/dist/test/utils/mocks.js
new file mode 100644
index 0000000..73540ce
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/mocks.js
@@ -0,0 +1,131 @@
+import { MemoryBlockstore } from 'blockstore-core/memory';
+import { EventEmitter } from 'events';
+import { DefaultBitswap } from '../../src/bitswap.js';
+import { Network } from '../../src/network.js';
+import { Stats } from '../../src/stats/index.js';
+import { peerIdFromBytes } from '@libp2p/peer-id';
+import { createLibp2pNode } from './create-libp2p-node.js';
+import { createEd25519PeerId } from '@libp2p/peer-id-factory';
+import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';
+/**
+ * Create a mock libp2p node
+ */
+export const mockLibp2pNode = () => {
+    const buf = uint8ArrayFromString('122019318b6e5e0cf93a2314bf01269a2cc23cd3dcd452d742cdb9379d8646f6e4a9', 'base16');
+    const peerId = peerIdFromBytes(buf);
+    const libp2p = Object.assign(new EventEmitter(), {
+        peerId,
+        multiaddrs: [],
+        handle() { },
+        unhandle() { },
+        register() { },
+        unregister() { },
+        contentRouting: {
+            provide: async (cid) => { },
+            findProviders: async (cid, timeout) => { return []; } // eslint-disable-line require-await
+        },
+        connectionManager: {
+            on() { },
+            removeListener() { }
+        },
+        async dial(peer) {
+        },
+        async dialProtocol(peer, protocol) {
+            return {};
+        },
+        swarm: {
+            setMaxListeners() { }
+        },
+        getConnections: () => []
+    });
+    // @ts-expect-error not all libp2p fields are implemented
+    return libp2p;
+};
+/**
+ * Create a mock network instance
+ */
+export const mockNetwork = (calls = Infinity, done = async () => { }, onMsg = async () => { }) => {
+    const connects = [];
+    const messages = [];
+    let i = 0;
+    const finish = (peerId, message) => {
+        onMsg?.(peerId, message);
+        if (++i === calls) {
+            done?.({ connects, messages });
+        }
+    };
+    class MockNetwork extends Network {
+        constructor() {
+            // @ts-expect-error - {} is not an instance of libp2p
+            super({}, new DefaultBitswap({}, new MemoryBlockstore()), new Stats({}));
+            this.connects = connects;
+            this.messages = messages;
+        }
+        async connectTo(p) {
+            setTimeout(() => {
+                connects.push(p);
+            });
+            // @ts-expect-error not all connection fields are implemented
+            return await Promise.resolve({ id: '', remotePeer: '' });
+        }
+        async sendMessage(p, msg) {
+            messages.push([p, msg]);
+            setTimeout(() => {
+                finish(p, msg);
+            });
+            await Promise.resolve();
+        }
+        async start() {
+            await Promise.resolve();
+        }
+        async stop() {
+            await Promise.resolve();
+        }
+        async findAndConnect() {
+            await Promise.resolve();
+        }
+        async provide() {
+            await Promise.resolve();
+        }
+    }
+    return new MockNetwork();
+};
+export const applyNetwork = (bs, n) => {
+    bs.network = n;
+    bs.wm.network = n;
+    bs.engine.network = n;
+};
+export const genBitswapNetwork = async (n, enableDHT = false) => {
+    // create PeerId and libp2p.Node for each
+    const peers = await Promise.all(new Array(n).fill(0).map(async () => await createEd25519PeerId()));
+    /** @type {{ libp2p: Libp2p, bitswap: Bitswap }[]} */
+    const netArray = await Promise.all(peers.map(async (peerId, i) => {
+        const libp2p = await createLibp2pNode({
+            peerId,
+            DHT: enableDHT,
+            nat: {
+                enabled: false
+            }
+        });
+        await libp2p.start();
+        const blockstore = new MemoryBlockstore();
+        return {
+            libp2p,
+            bitswap: new DefaultBitswap(libp2p, blockstore),
+            blockstore
+        };
+    }));
+    // populate peerStores
+    for (let i = 0; i < netArray.length; i++) {
+        const netA = netArray[i];
+        for (let j = 0; j < netArray.length; j++) {
+            if (i === j) {
+                continue;
+            }
+            const netB = netArray[j];
+            await netA.libp2p.peerStore.addressBook.set(netB.libp2p.peerId, netB.libp2p.getMultiaddrs());
+        }
+    }
+    return netArray;
+};
+//# sourceMappingURL=mocks.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/mocks.js.map b/node_modules/ipfs-bitswap/dist/test/utils/mocks.js.map
new file mode 100644
index 0000000..c8c0751
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/mocks.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"mocks.js","sourceRoot":"","sources":["../../../test/utils/mocks.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.d.ts b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.d.ts
new file mode 100644
index 0000000..64356e3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.d.ts
@@ -0,0 +1,4 @@
+import type { Blockstore } from 'interface-blockstore';
+import type { BitswapMessage } from '../../src/message';
+export declare function storeHasBlocks(message: BitswapMessage, store: Blockstore): Promise<void>;
+//# sourceMappingURL=store-has-blocks.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.d.ts.map b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.d.ts.map
new file mode 100644
index 0000000..faeccee
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"store-has-blocks.d.ts","sourceRoot":"","sources":["../../../test/utils/store-has-blocks.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAA;AAEtD,OAAO,KAAK,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAA;AAEvD,wBAAsB,cAAc,CAAE,OAAO,EAAE,cAAc,EAAE,KAAK,EAAE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,CAI/F"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.js b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.js
new file mode 100644
index 0000000..252bb9e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.js
@@ -0,0 +1,8 @@
+import { expect } from 'aegir/chai';
+import { CID } from 'multiformats/cid';
+export async function storeHasBlocks(message, store) {
+    for (const k of message.blocks.keys()) {
+        expect(await store.has(CID.parse(k))).to.be.true('missing block');
+    }
+}
+//# sourceMappingURL=store-has-blocks.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.js.map b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.js.map
new file mode 100644
index 0000000..82c64c0
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/utils/store-has-blocks.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"store-has-blocks.js","sourceRoot":"","sources":["../../../test/utils/store-has-blocks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAA;AAEnC,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAA;AAGtC,MAAM,CAAC,KAAK,UAAU,cAAc,CAAE,OAAuB,EAAE,KAAiB;IAC9E,KAAK,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE;QACrC,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;KAClE;AACH,CAAC"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.d.ts
new file mode 100644
index 0000000..b37c2d2
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=index.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.d.ts.map
new file mode 100644
index 0000000..4f1b2ee
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.spec.d.ts","sourceRoot":"","sources":["../../../test/wantmanager/index.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.js b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.js
new file mode 100644
index 0000000..fbc94d6
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.js
@@ -0,0 +1,60 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import * as CONSTANTS from '../../src/constants.js';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { WantManager } from '../../src/want-manager/index.js';
+import { Stats } from '../../src/stats/index.js';
+import { mockNetwork } from '../utils/mocks.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { makePeerIds } from '../utils/make-peer-id.js';
+describe('WantManager', () => {
+    it('sends wantlist to all connected peers', async function () {
+        this.timeout(80 * 1000);
+        const peerIds = await makePeerIds(3);
+        const blocks = await makeBlocks(3);
+        const cids = blocks.map((b) => b.cid);
+        const peer1 = peerIds[0];
+        const peer2 = peerIds[1];
+        const cid1 = cids[0];
+        const cid2 = cids[1];
+        const cid3 = cids[2];
+        const m1 = new Message(true);
+        m1.addEntry(cid1, CONSTANTS.kMaxPriority);
+        m1.addEntry(cid2, CONSTANTS.kMaxPriority - 1);
+        const m2 = new Message(false);
+        m2.cancel(cid2);
+        const m3 = new Message(false);
+        m3.addEntry(cid3, CONSTANTS.kMaxPriority);
+        const msgs = [m1, m1, m2, m2, m3, m3];
+        await new Promise((resolve, reject) => {
+            const network = mockNetwork(6, (calls) => {
+                expect(calls.connects).to.have.length(6);
+                expect(calls.messages).to.have.length(6);
+                for (let ii = 0; ii < calls.messages.length; ii++) {
+                    const message = calls.messages[ii];
+                    const connect = calls.connects[ii];
+                    expect(message[0]).to.be.eql(connect);
+                    if (!message[1].equals(msgs[ii])) {
+                        reject(new Error('expected messages to match'));
+                        return;
+                    }
+                }
+                resolve();
+            });
+            // @ts-expect-error {} is not a real libp2p
+            const wantManager = new WantManager(peerIds[2], network, new Stats({}), {});
+            wantManager.start();
+            wantManager.wantBlocks([cid1, cid2]);
+            wantManager.connected(peer1);
+            wantManager.connected(peer2);
+            new Promise(resolve => setTimeout(resolve, 200))
+                .then(async () => {
+                wantManager.cancelWants([cid2]);
+                await new Promise(resolve => setTimeout(resolve, 200));
+                wantManager.wantBlocks([cid3]);
+            })
+                .catch(reject);
+        });
+    });
+});
+//# sourceMappingURL=index.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.js.map b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.js.map
new file mode 100644
index 0000000..42adfe7
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/index.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.spec.js","sourceRoot":"","sources":["../../../test/wantmanager/index.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.d.ts b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.d.ts
new file mode 100644
index 0000000..0aca3b9
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.d.ts
@@ -0,0 +1,2 @@
+export {};
+//# sourceMappingURL=msg-queue.spec.d.ts.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.d.ts.map b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.d.ts.map
new file mode 100644
index 0000000..f7f4bd3
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"msg-queue.spec.d.ts","sourceRoot":"","sources":["../../../test/wantmanager/msg-queue.spec.ts"],"names":[],"mappings":""}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.js b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.js
new file mode 100644
index 0000000..e5378d8
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.js
@@ -0,0 +1,56 @@
+/* eslint-env mocha */
+import { expect } from 'aegir/chai';
+import { BitswapMessage as Message } from '../../src/message/index.js';
+import { MsgQueue } from '../../src/want-manager/msg-queue.js';
+import defer from 'p-defer';
+import { mockNetwork } from '../utils/mocks.js';
+import { makeBlocks } from '../utils/make-blocks.js';
+import { makePeerId } from '../utils/make-peer-id.js';
+describe('MessageQueue', () => {
+    let peerIds;
+    let cids;
+    before(async () => {
+        peerIds = await Promise.all([0, 1].map(async () => await makePeerId()));
+        cids = (await makeBlocks(6)).map(({ cid }) => cid);
+    });
+    it('connects and sends messages', async () => {
+        const msg = new Message(true);
+        const cid1 = cids[0];
+        const cid2 = cids[1];
+        const cid3 = cids[2];
+        const cid4 = cids[3];
+        const cid5 = cids[4];
+        const cid6 = cids[5];
+        msg.addEntry(cid1, 3);
+        msg.addEntry(cid2, 1);
+        const deferred = defer();
+        const network = mockNetwork(2, ({ connects, messages }) => {
+            expect(connects).to.be.eql([peerIds[1], peerIds[1]]);
+            const m1 = new Message(false);
+            m1.addEntry(cid3, 1);
+            m1.addEntry(cid4, 2);
+            m1.cancel(cid5);
+            m1.cancel(cid6);
+            expect(messages).to.be.eql([
+                [peerIds[1], msg],
+                [peerIds[1], m1]
+            ]);
+            deferred.resolve();
+        });
+        const mq = new MsgQueue(peerIds[0], peerIds[1], network);
+        expect(mq.refcnt).to.equal(1);
+        const batch1 = [
+            new Message.Entry(cid3, 1, Message.WantType.Block, false),
+            new Message.Entry(cid4, 2, Message.WantType.Block, false)
+        ];
+        const batch2 = [
+            new Message.Entry(cid5, 1, Message.WantType.Block, true),
+            new Message.Entry(cid6, 2, Message.WantType.Block, true)
+        ];
+        mq.addEntries(batch1);
+        mq.addEntries(batch2);
+        mq.addMessage(msg);
+        await deferred.promise;
+    });
+});
+//# sourceMappingURL=msg-queue.spec.js.map
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.js.map b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.js.map
new file mode 100644
index 0000000..a1cca97
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/test/wantmanager/msg-queue.spec.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"msg-queue.spec.js","sourceRoot":"","sources":["../../../test/wantmanager/msg-queue.spec.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/dist/tsconfig.tsbuildinfo b/node_modules/ipfs-bitswap/dist/tsconfig.tsbuildinfo
new file mode 100644
index 0000000..d220f92
--- /dev/null
+++ b/node_modules/ipfs-bitswap/dist/tsconfig.tsbuildinfo
@@ -0,0 +1 @@
+{"program":{"fileNames":["../node_modules/typescript/lib/lib.es5.d.ts","../node_modules/typescript/lib/lib.es2015.d.ts","../node_modules/typescript/lib/lib.es2016.d.ts","../node_modules/typescript/lib/lib.es2017.d.ts","../node_modules/typescript/lib/lib.es2018.d.ts","../node_modules/typescript/lib/lib.es2019.d.ts","../node_modules/typescript/lib/lib.es2020.d.ts","../node_modules/typescript/lib/lib.es2021.d.ts","../node_modules/typescript/lib/lib.dom.d.ts","../node_modules/typescript/lib/lib.dom.iterable.d.ts","../node_modules/typescript/lib/lib.webworker.d.ts","../node_modules/typescript/lib/lib.es2015.core.d.ts","../node_modules/typescript/lib/lib.es2015.collection.d.ts","../node_modules/typescript/lib/lib.es2015.generator.d.ts","../node_modules/typescript/lib/lib.es2015.iterable.d.ts","../node_modules/typescript/lib/lib.es2015.promise.d.ts","../node_modules/typescript/lib/lib.es2015.proxy.d.ts","../node_modules/typescript/lib/lib.es2015.reflect.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.d.ts","../node_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2016.array.include.d.ts","../node_modules/typescript/lib/lib.es2017.object.d.ts","../node_modules/typescript/lib/lib.es2017.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2017.string.d.ts","../node_modules/typescript/lib/lib.es2017.intl.d.ts","../node_modules/typescript/lib/lib.es2017.typedarrays.d.ts","../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts","../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts","../node_modules/typescript/lib/lib.es2018.intl.d.ts","../node_modules/typescript/lib/lib.es2018.promise.d.ts","../node_modules/typescript/lib/lib.es2018.regexp.d.ts","../node_modules/typescript/lib/lib.es2019.array.d.ts","../node_modules/typescript/lib/lib.es2019.object.d.ts","../node_modules/typescript/lib/lib.es2019.string.d.ts","../node_modules/typescript/lib/lib.es2019.symbol.d.ts","../node_modules/typescript/lib/lib.es2019.intl.d.ts","../node_modules/typescript/lib/lib.es2020.bigint.d.ts","../node_modules/typescript/lib/lib.es2020.date.d.ts","../node_modules/typescript/lib/lib.es2020.promise.d.ts","../node_modules/typescript/lib/lib.es2020.sharedmemory.d.ts","../node_modules/typescript/lib/lib.es2020.string.d.ts","../node_modules/typescript/lib/lib.es2020.symbol.wellknown.d.ts","../node_modules/typescript/lib/lib.es2020.intl.d.ts","../node_modules/typescript/lib/lib.es2020.number.d.ts","../node_modules/typescript/lib/lib.es2021.promise.d.ts","../node_modules/typescript/lib/lib.es2021.string.d.ts","../node_modules/typescript/lib/lib.es2021.weakref.d.ts","../node_modules/typescript/lib/lib.es2021.intl.d.ts","../node_modules/typescript/lib/lib.esnext.intl.d.ts","../node_modules/multiformats/dist/types/src/hashes/interface.d.ts","../node_modules/multiformats/dist/types/src/bases/interface.d.ts","../node_modules/multiformats/dist/types/src/block/interface.d.ts","../node_modules/multiformats/dist/types/src/link/interface.d.ts","../node_modules/multiformats/dist/types/src/cid.d.ts","../node_modules/multiformats/dist/types/src/hashes/digest.d.ts","../node_modules/multiformats/dist/types/src/hashes/hasher.d.ts","../node_modules/multiformats/dist/types/src/hashes/sha2.d.ts","../node_modules/multiformats/dist/types/src/bases/base.d.ts","../node_modules/multiformats/dist/types/src/bases/base58.d.ts","../node_modules/@types/node/assert.d.ts","../node_modules/@types/node/assert/strict.d.ts","../node_modules/@types/node/globals.d.ts","../node_modules/@types/node/async_hooks.d.ts","../node_modules/@types/node/buffer.d.ts","../node_modules/@types/node/child_process.d.ts","../node_modules/@types/node/cluster.d.ts","../node_modules/@types/node/console.d.ts","../node_modules/@types/node/constants.d.ts","../node_modules/@types/node/crypto.d.ts","../node_modules/@types/node/dgram.d.ts","../node_modules/@types/node/diagnostics_channel.d.ts","../node_modules/@types/node/dns.d.ts","../node_modules/@types/node/dns/promises.d.ts","../node_modules/@types/node/domain.d.ts","../node_modules/@types/node/dom-events.d.ts","../node_modules/@types/node/events.d.ts","../node_modules/@types/node/fs.d.ts","../node_modules/@types/node/fs/promises.d.ts","../node_modules/@types/node/http.d.ts","../node_modules/@types/node/http2.d.ts","../node_modules/@types/node/https.d.ts","../node_modules/@types/node/inspector.d.ts","../node_modules/@types/node/module.d.ts","../node_modules/@types/node/net.d.ts","../node_modules/@types/node/os.d.ts","../node_modules/@types/node/path.d.ts","../node_modules/@types/node/perf_hooks.d.ts","../node_modules/@types/node/process.d.ts","../node_modules/@types/node/punycode.d.ts","../node_modules/@types/node/querystring.d.ts","../node_modules/@types/node/readline.d.ts","../node_modules/@types/node/readline/promises.d.ts","../node_modules/@types/node/repl.d.ts","../node_modules/@types/node/stream.d.ts","../node_modules/@types/node/stream/promises.d.ts","../node_modules/@types/node/stream/consumers.d.ts","../node_modules/@types/node/stream/web.d.ts","../node_modules/@types/node/string_decoder.d.ts","../node_modules/@types/node/test.d.ts","../node_modules/@types/node/timers.d.ts","../node_modules/@types/node/timers/promises.d.ts","../node_modules/@types/node/tls.d.ts","../node_modules/@types/node/trace_events.d.ts","../node_modules/@types/node/tty.d.ts","../node_modules/@types/node/url.d.ts","../node_modules/@types/node/util.d.ts","../node_modules/@types/node/v8.d.ts","../node_modules/@types/node/vm.d.ts","../node_modules/@types/node/wasi.d.ts","../node_modules/@types/node/worker_threads.d.ts","../node_modules/@types/node/zlib.d.ts","../node_modules/@types/node/globals.global.d.ts","../node_modules/@types/node/index.d.ts","../node_modules/@types/varint/index.d.ts","../src/utils/varint-encoder.ts","../node_modules/@libp2p/interface-peer-id/dist/src/index.d.ts","../node_modules/@libp2p/logger/dist/src/index.d.ts","../node_modules/uint8arrays/dist/src/equals.d.ts","../node_modules/protons-runtime/dist/src/codec.d.ts","../node_modules/uint8arraylist/dist/src/index.d.ts","../node_modules/protons-runtime/dist/src/decode.d.ts","../node_modules/protons-runtime/dist/src/encode.d.ts","../node_modules/protons-runtime/dist/src/codecs/enum.d.ts","../node_modules/protons-runtime/dist/src/codecs/message.d.ts","../node_modules/protons-runtime/dist/src/utils.d.ts","../node_modules/protons-runtime/dist/src/index.d.ts","../src/message/message.ts","../src/wantlist/entry.ts","../src/message/entry.ts","../src/utils/index.ts","../node_modules/@libp2p/interfaces/dist/src/errors.d.ts","../node_modules/interface-store/dist/src/index.d.ts","../node_modules/interface-blockstore/dist/src/index.d.ts","../node_modules/@vascosantos/moving-average/index.d.ts","../node_modules/@libp2p/interfaces/dist/src/index.d.ts","../node_modules/@libp2p/interfaces/dist/src/events.d.ts","../node_modules/@libp2p/interfaces/dist/src/startable.d.ts","../node_modules/@multiformats/multiaddr/dist/src/protocols-table.d.ts","../node_modules/@multiformats/multiaddr/dist/src/filter/multiaddr-filter.d.ts","../node_modules/@multiformats/multiaddr/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-info/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-discovery/dist/src/index.d.ts","../node_modules/@libp2p/interface-dht/dist/src/index.d.ts","../node_modules/@libp2p/interface-record/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-store/dist/src/index.d.ts","../node_modules/@libp2p/interface-libp2p/node_modules/@libp2p/interface-connection/dist/src/status.d.ts","../node_modules/it-stream-types/dist/src/index.d.ts","../node_modules/@libp2p/interface-libp2p/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-peer-routing/dist/src/index.d.ts","../node_modules/@libp2p/interface-content-routing/dist/src/index.d.ts","../node_modules/it-pushable/dist/src/index.d.ts","../node_modules/@libp2p/interface-pubsub/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-pubsub/dist/src/index.d.ts","../node_modules/@libp2p/interface-registrar/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-registrar/dist/src/index.d.ts","../node_modules/@libp2p/interface-metrics/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-metrics/dist/src/index.d.ts","../node_modules/@libp2p/interface-keychain/dist/src/index.d.ts","../node_modules/@libp2p/interface-libp2p/dist/src/index.d.ts","../node_modules/progress-events/dist/src/index.d.ts","../node_modules/it-length-prefixed/dist/src/encode.d.ts","../node_modules/it-reader/dist/src/index.d.ts","../node_modules/it-length-prefixed/dist/src/decode.d.ts","../node_modules/it-length-prefixed/dist/src/index.d.ts","../node_modules/it-pipe/node_modules/it-stream-types/dist/src/index.d.ts","../node_modules/it-pipe/dist/src/index.d.ts","../node_modules/@libp2p/topology/dist/src/index.d.ts","../src/constants.ts","../node_modules/timeout-abort-controller/dist/index.d.ts","../node_modules/abortable-iterator/dist/src/abort-error.d.ts","../node_modules/abortable-iterator/dist/src/index.d.ts","../src/stats/stat.ts","../node_modules/@libp2p/tracked-map/dist/src/index.d.ts","../node_modules/@libp2p/interface-stream-muxer/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-stream-muxer/dist/src/index.d.ts","../node_modules/@libp2p/interface-transport/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-transport/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection/dist/src/status.d.ts","../node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-address-manager/dist/src/index.d.ts","../node_modules/libp2p/dist/src/transport-manager.d.ts","../node_modules/libp2p/dist/src/identify/pb/message.d.ts","../node_modules/libp2p/node_modules/@libp2p/interface-connection-manager/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/libp2p/node_modules/@libp2p/interface-connection-manager/dist/src/index.d.ts","../node_modules/libp2p/dist/src/identify/index.d.ts","../node_modules/multiformats/dist/types/src/codecs/interface.d.ts","../node_modules/multiformats/dist/types/src/interface.d.ts","../node_modules/multiformats/dist/types/src/varint.d.ts","../node_modules/multiformats/dist/types/src/bytes.d.ts","../node_modules/multiformats/dist/types/src/index.d.ts","../node_modules/multiformats/dist/types/src/codecs/raw.d.ts","../node_modules/multiformats/dist/types/src/codecs/json.d.ts","../node_modules/multiformats/dist/types/src/basics.d.ts","../node_modules/uint8arrays/dist/src/util/bases.d.ts","../node_modules/uint8arrays/dist/src/to-string.d.ts","../node_modules/interface-datastore/dist/src/key.d.ts","../node_modules/interface-datastore/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-gater/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-gater/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-encrypter/dist/src/index.d.ts","../node_modules/libp2p/dist/src/ping/index.d.ts","../node_modules/libp2p/dist/src/fetch/index.d.ts","../node_modules/libp2p/dist/src/autonat/index.d.ts","../node_modules/libp2p/dist/src/components.d.ts","../node_modules/@libp2p/keychain/dist/src/index.d.ts","../node_modules/@achingbrain/nat-port-mapper/dist/src/index.d.ts","../node_modules/libp2p/dist/src/nat-manager.d.ts","../node_modules/libp2p/dist/src/address-manager/index.d.ts","../node_modules/libp2p/dist/src/peer-routing.d.ts","../node_modules/libp2p/dist/src/connection-manager/latency-monitor.d.ts","../node_modules/libp2p/dist/src/connection-manager/index.d.ts","../node_modules/@libp2p/peer-collections/dist/src/map.d.ts","../node_modules/@libp2p/peer-collections/dist/src/set.d.ts","../node_modules/@libp2p/peer-collections/dist/src/list.d.ts","../node_modules/@libp2p/peer-collections/dist/src/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/pb/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/server/reservation-store.d.ts","../node_modules/libp2p/dist/src/circuit-relay/server/advert-service.d.ts","../node_modules/it-pb-stream/dist/src/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/server/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/transport/reservation-store.d.ts","../node_modules/libp2p/dist/src/circuit-relay/transport/discovery.d.ts","../node_modules/libp2p/dist/src/circuit-relay/transport/index.d.ts","../node_modules/libp2p/dist/src/circuit-relay/index.d.ts","../node_modules/libp2p/dist/src/index.d.ts","../src/stats/index.ts","../node_modules/it-take/dist/src/index.d.ts","../node_modules/it-drain/dist/src/index.d.ts","../node_modules/it-map/dist/src/index.d.ts","../src/network.ts","../node_modules/@marcopolo_/libp2p-fetch/dist/src/index.d.ts","../src/http-bitswap.ts","../src/index.ts","../src/message/index.ts","../src/wantlist/index.ts","../node_modules/just-debounce-it/index.d.ts","../src/want-manager/msg-queue.ts","../src/want-manager/index.ts","../src/decision-engine/ledger.ts","../src/utils/sorted-map.ts","../src/decision-engine/req-queue.ts","../src/decision-engine/task-merger.ts","../src/decision-engine/index.ts","../src/notifications.ts","../node_modules/any-signal/index.d.ts","../node_modules/it-foreach/dist/src/index.d.ts","../src/bitswap.ts","../node_modules/@types/chai/index.d.ts","../node_modules/@types/chai-as-promised/index.d.ts","../node_modules/chai-parentheses/index.d.ts","../node_modules/@types/chai-subset/index.d.ts","../node_modules/chai-bites/index.d.ts","../node_modules/@types/chai-string/index.d.ts","../node_modules/aegir/dist/utils/chai.d.ts","../node_modules/delay/index.d.ts","../node_modules/@libp2p/interface-keys/dist/src/index.d.ts","../node_modules/@libp2p/peer-id-factory/dist/src/index.d.ts","../node_modules/blockstore-core/dist/src/base.d.ts","../node_modules/blockstore-core/dist/src/memory.d.ts","../node_modules/@libp2p/peer-id/dist/src/index.d.ts","../node_modules/@libp2p/tcp/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/tcp/dist/src/listener.d.ts","../node_modules/@libp2p/tcp/dist/src/index.d.ts","../node_modules/@libp2p/mplex/dist/src/index.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/@types/basic.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/proto/payload.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/@types/libp2p.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/nonce.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/@types/handshake.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/crypto.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/noise.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/crypto/stablelib.d.ts","../node_modules/@chainsafe/libp2p-noise/dist/src/index.d.ts","../node_modules/eventemitter3/index.d.ts","../node_modules/p-queue/dist/queue.d.ts","../node_modules/p-queue/dist/options.d.ts","../node_modules/p-queue/dist/priority-queue.d.ts","../node_modules/p-queue/dist/index.d.ts","../node_modules/@libp2p/interface-connection-manager/node_modules/@libp2p/interface-connection/dist/src/index.d.ts","../node_modules/@libp2p/interface-connection-manager/dist/src/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/routing-table/index.d.ts","../node_modules/@libp2p/record/dist/src/record.d.ts","../node_modules/@libp2p/record/dist/src/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/message/dht.d.ts","../node_modules/@libp2p/kad-dht/dist/src/message/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/network.d.ts","../node_modules/@libp2p/kad-dht/dist/src/query/types.d.ts","../node_modules/@libp2p/kad-dht/dist/src/query/manager.d.ts","../node_modules/@libp2p/kad-dht/dist/src/peer-routing/index.d.ts","../node_modules/@libp2p/kad-dht/dist/src/providers.d.ts","../node_modules/@libp2p/kad-dht/dist/src/kad-dht.d.ts","../node_modules/@libp2p/kad-dht/dist/src/dual-kad-dht.d.ts","../node_modules/@libp2p/kad-dht/dist/src/index.d.ts","../test/utils/create-libp2p-node.ts","../node_modules/uint8arrays/dist/src/from-string.d.ts","../test/utils/mocks.ts","../test/utils/store-has-blocks.ts","../node_modules/iso-random-stream/dist/src/index.d.ts","../test/utils/make-blocks.ts","../test/utils/make-peer-id.ts","../test/utils/helpers.ts","../test/bitswap-mock-internals.ts","../node_modules/p-timeout/index.d.ts","../node_modules/p-event/index.d.ts","../test/bitswap-stats.ts","../node_modules/@types/sinonjs__fake-timers/index.d.ts","../node_modules/@types/sinon/index.d.ts","../node_modules/p-wait-for/node_modules/p-timeout/index.d.ts","../node_modules/p-wait-for/index.d.ts","../test/bitswap.ts","../node_modules/p-defer/index.d.ts","../test/decision-engine/decision-engine.ts","../test/browser.ts","../test/network/network.node.ts","../test/network/gen-bitswap-network.node.ts","../node_modules/@types/stats-lite/index.d.ts","../test/utils/create-bitswap.ts","../test/utils/connect-all.ts","../test/utils/distribution-test.ts","../test/swarms.ts","../test/node.ts","../node_modules/multiformats/dist/types/src/bases/base32.d.ts","../test/notifications.spec.ts","../test/utils.spec.ts","../test/benchmarks/helpers/print-swarm-results.ts","../test/benchmarks/get-many.ts","../test/decision-engine/ledger.spec.ts","../test/decision-engine/req-queue.spec.ts","../test/decision-engine/task-merger.spec.ts","../node_modules/multiformats/dist/types/src/bases/base64.d.ts","../node_modules/aegir/dist/utils/fixtures.d.ts","../test/types/message.spec.ts","../test/types/wantlist.spec.ts","../test/wantmanager/index.spec.ts","../test/wantmanager/msg-queue.spec.ts","../node_modules/keyv/src/index.d.ts","../node_modules/@types/http-cache-semantics/index.d.ts","../node_modules/@types/responselike/index.d.ts","../node_modules/@types/cacheable-request/index.d.ts","../node_modules/@types/ms/index.d.ts","../node_modules/@types/debug/index.d.ts","../node_modules/@types/extend/index.d.ts","../node_modules/@types/istanbul-lib-coverage/index.d.ts","../node_modules/@types/json-schema/index.d.ts","../node_modules/@types/json5/index.d.ts","../node_modules/@types/keyv/index.d.ts","../node_modules/@types/linkify-it/index.d.ts","../node_modules/@types/mdurl/encode.d.ts","../node_modules/@types/mdurl/decode.d.ts","../node_modules/@types/mdurl/parse.d.ts","../node_modules/@types/mdurl/format.d.ts","../node_modules/@types/mdurl/index.d.ts","../node_modules/@types/markdown-it/lib/common/utils.d.ts","../node_modules/@types/markdown-it/lib/token.d.ts","../node_modules/@types/markdown-it/lib/rules_inline/state_inline.d.ts","../node_modules/@types/markdown-it/lib/helpers/parse_link_label.d.ts","../node_modules/@types/markdown-it/lib/helpers/parse_link_destination.d.ts","../node_modules/@types/markdown-it/lib/helpers/parse_link_title.d.ts","../node_modules/@types/markdown-it/lib/helpers/index.d.ts","../node_modules/@types/markdown-it/lib/ruler.d.ts","../node_modules/@types/markdown-it/lib/rules_block/state_block.d.ts","../node_modules/@types/markdown-it/lib/parser_block.d.ts","../node_modules/@types/markdown-it/lib/rules_core/state_core.d.ts","../node_modules/@types/markdown-it/lib/parser_core.d.ts","../node_modules/@types/markdown-it/lib/parser_inline.d.ts","../node_modules/@types/markdown-it/lib/renderer.d.ts","../node_modules/@types/markdown-it/lib/index.d.ts","../node_modules/@types/markdown-it/index.d.ts","../node_modules/@types/unist/index.d.ts","../node_modules/@types/mdast/index.d.ts","../node_modules/@types/minimatch/index.d.ts","../node_modules/@types/minimist/index.d.ts","../node_modules/@types/mocha/index.d.ts","../node_modules/@types/normalize-package-data/index.d.ts","../node_modules/@types/parse-json/index.d.ts","../node_modules/@types/retry/index.d.ts","../node_modules/@types/semver/classes/semver.d.ts","../node_modules/@types/semver/functions/parse.d.ts","../node_modules/@types/semver/functions/valid.d.ts","../node_modules/@types/semver/functions/clean.d.ts","../node_modules/@types/semver/functions/inc.d.ts","../node_modules/@types/semver/functions/diff.d.ts","../node_modules/@types/semver/functions/major.d.ts","../node_modules/@types/semver/functions/minor.d.ts","../node_modules/@types/semver/functions/patch.d.ts","../node_modules/@types/semver/functions/prerelease.d.ts","../node_modules/@types/semver/functions/compare.d.ts","../node_modules/@types/semver/functions/rcompare.d.ts","../node_modules/@types/semver/functions/compare-loose.d.ts","../node_modules/@types/semver/functions/compare-build.d.ts","../node_modules/@types/semver/functions/sort.d.ts","../node_modules/@types/semver/functions/rsort.d.ts","../node_modules/@types/semver/functions/gt.d.ts","../node_modules/@types/semver/functions/lt.d.ts","../node_modules/@types/semver/functions/eq.d.ts","../node_modules/@types/semver/functions/neq.d.ts","../node_modules/@types/semver/functions/gte.d.ts","../node_modules/@types/semver/functions/lte.d.ts","../node_modules/@types/semver/functions/cmp.d.ts","../node_modules/@types/semver/functions/coerce.d.ts","../node_modules/@types/semver/classes/comparator.d.ts","../node_modules/@types/semver/classes/range.d.ts","../node_modules/@types/semver/functions/satisfies.d.ts","../node_modules/@types/semver/ranges/max-satisfying.d.ts","../node_modules/@types/semver/ranges/min-satisfying.d.ts","../node_modules/@types/semver/ranges/to-comparators.d.ts","../node_modules/@types/semver/ranges/min-version.d.ts","../node_modules/@types/semver/ranges/valid.d.ts","../node_modules/@types/semver/ranges/outside.d.ts","../node_modules/@types/semver/ranges/gtr.d.ts","../node_modules/@types/semver/ranges/ltr.d.ts","../node_modules/@types/semver/ranges/intersects.d.ts","../node_modules/@types/semver/ranges/simplify.d.ts","../node_modules/@types/semver/ranges/subset.d.ts","../node_modules/@types/semver/internals/identifiers.d.ts","../node_modules/@types/semver/index.d.ts","../node_modules/@types/strip-bom/index.d.ts","../node_modules/@types/strip-json-comments/index.d.ts","../node_modules/@types/yargs-parser/index.d.ts","../node_modules/@types/yargs/index.d.ts","../node_modules/@types/yauzl/index.d.ts","../../../node_modules/@types/connect/index.d.ts","../../../node_modules/@types/body-parser/index.d.ts","../../../node_modules/@types/bonjour/index.d.ts","../../../node_modules/@types/range-parser/index.d.ts","../../../node_modules/@types/qs/index.d.ts","../../../node_modules/@types/express-serve-static-core/index.d.ts","../../../node_modules/@types/connect-history-api-fallback/index.d.ts","../../../node_modules/@types/eslint/helpers.d.ts","../../../node_modules/@types/estree/index.d.ts","../../../node_modules/@types/json-schema/index.d.ts","../../../node_modules/@types/eslint/index.d.ts","../../../node_modules/@types/eslint-scope/index.d.ts","../../../node_modules/@types/mime/mime.d.ts","../../../node_modules/@types/mime/index.d.ts","../../../node_modules/@types/serve-static/index.d.ts","../../../node_modules/@types/express/index.d.ts","../../../node_modules/@types/html-minifier-terser/index.d.ts","../../../node_modules/@types/http-proxy/index.d.ts","../../../node_modules/@types/prop-types/index.d.ts","../../../node_modules/@types/react/global.d.ts","../../../node_modules/csstype/index.d.ts","../../../node_modules/@types/scheduler/tracing.d.ts","../../../node_modules/@types/react/index.d.ts","../../../node_modules/@types/scheduler/index.d.ts","../../../node_modules/@types/serve-index/index.d.ts","../../../node_modules/@types/sockjs/index.d.ts","../../../node_modules/@types/ws/index.d.ts"],"fileInfos":[{"version":"8730f4bf322026ff5229336391a18bcaa1f94d4f82416c8b2f3954e2ccaae2ba","affectsGlobalScope":true},"dc47c4fa66b9b9890cf076304de2a9c5201e94b740cffdf09f87296d877d71f6","7a387c58583dfca701b6c85e0adaf43fb17d590fb16d5b2dc0a2fbd89f35c467","8a12173c586e95f4433e0c6dc446bc88346be73ffe9ca6eec7aa63c8f3dca7f9","5f4e733ced4e129482ae2186aae29fde948ab7182844c3a5a51dd346182c7b06","4b421cbfb3a38a27c279dec1e9112c3d1da296f77a1a85ddadf7e7a425d45d18","1fc5ab7a764205c68fa10d381b08417795fc73111d6dd16b5b1ed36badb743d9","746d62152361558ea6d6115cf0da4dd10ede041d14882ede3568bce5dc4b4f1f",{"version":"3aafcb693fe5b5c3bd277bd4c3a617b53db474fe498fc5df067c5603b1eebde7","affectsGlobalScope":true},{"version":"f3d4da15233e593eacb3965cde7960f3fddf5878528d882bcedd5cbaba0193c7","affectsGlobalScope":true},{"version":"d3f4771304b6b07e5a2bb992e75af76ac060de78803b1b21f0475ffc5654d817","affectsGlobalScope":true},{"version":"adb996790133eb33b33aadb9c09f15c2c575e71fb57a62de8bf74dbf59ec7dfb","affectsGlobalScope":true},{"version":"8cc8c5a3bac513368b0157f3d8b31cfdcfe78b56d3724f30f80ed9715e404af8","affectsGlobalScope":true},{"version":"cdccba9a388c2ee3fd6ad4018c640a471a6c060e96f1232062223063b0a5ac6a","affectsGlobalScope":true},{"version":"c5c05907c02476e4bde6b7e76a79ffcd948aedd14b6a8f56e4674221b0417398","affectsGlobalScope":true},{"version":"5f406584aef28a331c36523df688ca3650288d14f39c5d2e555c95f0d2ff8f6f","affectsGlobalScope":true},{"version":"22f230e544b35349cfb3bd9110b6ef37b41c6d6c43c3314a31bd0d9652fcec72","affectsGlobalScope":true},{"version":"7ea0b55f6b315cf9ac2ad622b0a7813315bb6e97bf4bb3fbf8f8affbca7dc695","affectsGlobalScope":true},{"version":"3013574108c36fd3aaca79764002b3717da09725a36a6fc02eac386593110f93","affectsGlobalScope":true},{"version":"eb26de841c52236d8222f87e9e6a235332e0788af8c87a71e9e210314300410a","affectsGlobalScope":true},{"version":"3be5a1453daa63e031d266bf342f3943603873d890ab8b9ada95e22389389006","affectsGlobalScope":true},{"version":"17bb1fc99591b00515502d264fa55dc8370c45c5298f4a5c2083557dccba5a2a","affectsGlobalScope":true},{"version":"7ce9f0bde3307ca1f944119f6365f2d776d281a393b576a18a2f2893a2d75c98","affectsGlobalScope":true},{"version":"6a6b173e739a6a99629a8594bfb294cc7329bfb7b227f12e1f7c11bc163b8577","affectsGlobalScope":true},{"version":"81cac4cbc92c0c839c70f8ffb94eb61e2d32dc1c3cf6d95844ca099463cf37ea","affectsGlobalScope":true},{"version":"b0124885ef82641903d232172577f2ceb5d3e60aed4da1153bab4221e1f6dd4e","affectsGlobalScope":true},{"version":"0eb85d6c590b0d577919a79e0084fa1744c1beba6fd0d4e951432fa1ede5510a","affectsGlobalScope":true},{"version":"da233fc1c8a377ba9e0bed690a73c290d843c2c3d23a7bd7ec5cd3d7d73ba1e0","affectsGlobalScope":true},{"version":"d154ea5bb7f7f9001ed9153e876b2d5b8f5c2bb9ec02b3ae0d239ec769f1f2ae","affectsGlobalScope":true},{"version":"bb2d3fb05a1d2ffbca947cc7cbc95d23e1d053d6595391bd325deb265a18d36c","affectsGlobalScope":true},{"version":"c80df75850fea5caa2afe43b9949338ce4e2de086f91713e9af1a06f973872b8","affectsGlobalScope":true},{"version":"9d57b2b5d15838ed094aa9ff1299eecef40b190722eb619bac4616657a05f951","affectsGlobalScope":true},{"version":"6c51b5dd26a2c31dbf37f00cfc32b2aa6a92e19c995aefb5b97a3a64f1ac99de","affectsGlobalScope":true},{"version":"6e7997ef61de3132e4d4b2250e75343f487903ddf5370e7ce33cf1b9db9a63ed","affectsGlobalScope":true},{"version":"2ad234885a4240522efccd77de6c7d99eecf9b4de0914adb9a35c0c22433f993","affectsGlobalScope":true},{"version":"5e5e095c4470c8bab227dbbc61374878ecead104c74ab9960d3adcccfee23205","affectsGlobalScope":true},{"version":"09aa50414b80c023553090e2f53827f007a301bc34b0495bfb2c3c08ab9ad1eb","affectsGlobalScope":true},{"version":"d7f680a43f8cd12a6b6122c07c54ba40952b0c8aa140dcfcf32eb9e6cb028596","affectsGlobalScope":true},{"version":"3787b83e297de7c315d55d4a7c546ae28e5f6c0a361b7a1dcec1f1f50a54ef11","affectsGlobalScope":true},{"version":"e7e8e1d368290e9295ef18ca23f405cf40d5456fa9f20db6373a61ca45f75f40","affectsGlobalScope":true},{"version":"faf0221ae0465363c842ce6aa8a0cbda5d9296940a8e26c86e04cc4081eea21e","affectsGlobalScope":true},{"version":"06393d13ea207a1bfe08ec8d7be562549c5e2da8983f2ee074e00002629d1871","affectsGlobalScope":true},{"version":"2768ef564cfc0689a1b76106c421a2909bdff0acbe87da010785adab80efdd5c","affectsGlobalScope":true},{"version":"b248e32ca52e8f5571390a4142558ae4f203ae2f94d5bac38a3084d529ef4e58","affectsGlobalScope":true},{"version":"6c55633c733c8378db65ac3da7a767c3cf2cf3057f0565a9124a16a3a2019e87","affectsGlobalScope":true},{"version":"fb4416144c1bf0323ccbc9afb0ab289c07312214e8820ad17d709498c865a3fe","affectsGlobalScope":true},{"version":"5b0ca94ec819d68d33da516306c15297acec88efeb0ae9e2b39f71dbd9685ef7","affectsGlobalScope":true},{"version":"34c839eaaa6d78c8674ae2c37af2236dee6831b13db7b4ef4df3ec889a04d4f2","affectsGlobalScope":true},{"version":"52d1bb7ab7a3306fd0375c8bff560feed26ed676a5b0457fa8027b563aecb9a4","affectsGlobalScope":true},"65da6f0b8f50b27e05ebf35c88a8757eb4308751cdf2b1064a0e310a2a485895","2e3dc1d28f2467b2af0c931a3b0d2c595746a2f21818fc3c7b5d050996ace788","237be372eeb9a7ce07c6b2a21358f22772cde924614d67de175a4ac0ba3eb486","862eacc247d6c92524d7879feac6da363f55428cc78270bce7b14f2d3d0b0cef","f55f3ab9485b5fd1a3ba3a5a53e680cb8d3acc3552816a5d58a1fa26324262d0","635e7c978a30ab2013a37c4d05d0d081e58e4ad867db46a009412ad24ee426d7","b27c2a28daf3e502ae6b631cbf51881247fffd3e0163520bc5904604f9e48096","2f686fbec43c87bc9b9c3d0e237f780e0e822d2c3a9a25fc99a16030a294b764","4a8ce4a308482d69bd9032ee59f895a9d91e28ac5324665b31ea3a374b45e686","66621f74fca4ce5aee46018ab7a7c262f7b203cf81a6fe674a2865d60b48863f","7e771891adaa85b690266bc37bd6eb43bc57eecc4b54693ead36467e7369952a","a69c09dbea52352f479d3e7ac949fde3d17b195abe90b045d619f747b38d6d1a",{"version":"57b6cb95756d1fe3bfeb20205de27b0c5406e4a86e130c6dfa6bd92af641e09d","affectsGlobalScope":true},"11e2d554398d2bd460e7d06b2fa5827a297c8acfbe00b4f894a224ac0862857f",{"version":"e193e634a99c9c1d71f1c6e4e1567a4a73584328d21ea02dd5cddbaad6693f61","affectsGlobalScope":true},"374ca798f244e464346f14301dc2a8b4b111af1a83b49fffef5906c338a1f922","5a94487653355b56018122d92392beb2e5f4a6c63ba5cef83bbe1c99775ef713",{"version":"d5135ad93b33adcce80b18f8065087934cdc1730d63db58562edcf017e1aad9b","affectsGlobalScope":true},"82408ed3e959ddc60d3e9904481b5a8dc16469928257af22a3f7d1a3bc7fd8c4","e596c9bb2f29a2699fdd4ae89139612652245192f67f45617c5a4b20832aaae9","bb9c4ffa5e6290c6980b63c815cdd1625876dadb2efaf77edbe82984be93e55e","1cdcfc1f624d6c08aa12c73935f6e13f095919cd99edf95752951796eb225729","216717f17c095cde1dc19375e1ab3af0a4a485355860c077a4f9d6ea59fab5b5","14b5aa23c5d0ae1907bc696ac7b6915d88f7d85799cc0dc2dcf98fbce2c5a67c","5c439dafdc09abe4d6c260a96b822fa0ba5be7203c71a63ab1f1423cd9e838ea",{"version":"6b526a5ec4a401ca7c26cfe6a48e641d8f30af76673bad3b06a1b4504594a960","affectsGlobalScope":true},{"version":"816ad2e607a96de5bcac7d437f843f5afd8957f1fa5eefa6bba8e4ed7ca8fd84","affectsGlobalScope":true},"80473bd0dd90ca1e166514c2dfead9d5803f9c51418864ca35abbeec6e6847e1","1c84b46267610a34028edfd0d035509341751262bac1062857f3c8df7aff7153","e6c86d83bd526c8bdb5d0bf935b8e72ce983763d600743f74d812fdf4abf4df6","a3d541d303ee505053f5dcbf9fafb65cac3d5631037501cd616195863a6c5740","8d3c583a07e0c37e876908c2d5da575019f689df8d9fa4c081d99119d53dba22","2c828a5405191d006115ab34e191b8474bc6c86ffdc401d1a9864b1b6e088a58",{"version":"e630e5528e899219ae319e83bef54bf3bcb91b01d76861ecf881e8e614b167f0","affectsGlobalScope":true},"bcebb922784739bdb34c18ee51095d25a92b560c78ccd2eaacd6bd00f7443d83","7ee6ed878c4528215c82b664fe0cfe80e8b4da6c0d4cc80869367868774db8b1","b0973c3cbcdc59b37bf477731d468696ecaf442593ec51bab497a613a580fe30",{"version":"4989e92ba5b69b182d2caaea6295af52b7dc73a4f7a2e336a676722884e7139d","affectsGlobalScope":true},{"version":"0715e4cd28ad471b2a93f3e552ff51a3ae423417a01a10aa1d3bc7c6b95059d6","affectsGlobalScope":true},"5153a2fd150e46ce57bb3f8db1318d33f6ad3261ed70ceeff92281c0608c74a3","210d54cd652ec0fec8c8916e4af59bb341065576ecda039842f9ffb2e908507c","36b03690b628eab08703d63f04eaa89c5df202e5f1edf3989f13ad389cd2c091","0effadd232a20498b11308058e334d3339cc5bf8c4c858393e38d9d4c0013dcf","25846d43937c672bab7e8195f3d881f93495df712ee901860effc109918938cc","7d55d78cd47cf5280643b53434b16c2d9d11d144126932759fbdd51da525eec4","1b952304137851e45bc009785de89ada562d9376177c97e37702e39e60c2f1ff","69ee23dd0d215b09907ad30d23f88b7790c93329d1faf31d7835552a10cf7cbf","44b8b584a338b190a59f4f6929d072431950c7bd92ec2694821c11bce180c8a5","23b89798789dffbd437c0c423f5d02d11f9736aea73d6abf16db4f812ff36eda","f69ff39996a61a0dd10f4bce73272b52e8024a4d58b13ab32bf4712909d0a2b7",{"version":"3c4ba1dd9b12ffa284b565063108f2f031d150ea15b8fafbdc17f5d2a07251f3","affectsGlobalScope":true},"e10177274a35a9d07c825615340b2fcde2f610f53f3fb40269fd196b4288dda6","c4577fb855ca259bdbf3ea663ca73988ce5f84251a92b4aef80a1f4122b6f98e","3c13ef48634e7b5012fcf7e8fce7496352c2d779a7201389ca96a2a81ee4314d","5d0a25ec910fa36595f85a67ac992d7a53dd4064a1ba6aea1c9f14ab73a023f2",{"version":"f0900cd5d00fe1263ff41201fb8073dbeb984397e4af3b8002a5c207a30bdc33","affectsGlobalScope":true},{"version":"ff07a9a03c65732ccc59b3c65bc584173da093bd563a6565411c01f5703bd3cb","affectsGlobalScope":true},"6de4a219df57d2b27274d59b67708f13c2cbf7ed211abe57d8f9ab8b25cde776","0fe8985a28f82c450a04a6edf1279d7181c0893f37da7d2a27f8efd4fd5edb03","e59a892d87e72733e2a9ca21611b9beb52977be2696c7ba4b216cbbb9a48f5aa",{"version":"da26af7362f53d122283bc69fed862b9a9fe27e01bc6a69d1d682e0e5a4df3e6","affectsGlobalScope":true},"8a300fa9b698845a1f9c41ecbe2c5966634582a8e2020d51abcace9b55aa959e",{"version":"ab9b9a36e5284fd8d3bf2f7d5fcbc60052f25f27e4d20954782099282c60d23e","affectsGlobalScope":true},"d8d555f3d607ecaa18d55de6995ea8f206342ecc93305919eac945c7c78c78c6","6e037a885b94caf06b3dd8146ad3f46fdffb8b5aca11e3de6a6a930266b4a460",{"version":"c7c4d2674da156b5cc5c4a42cbd527a4ad91c6f8866ff892328186bac6a8bcb5","signature":"7a3e9aebca3ef227511ddb3be8df61be6427ab791a8fc8a236d5fd431c64133f"},"ee93f3313289b31afd1544da65086607942df227eb61aedf488b7c072aa1128f","b6d189963f04bd06137fe46fb8db1dca958aa65a15cc3aa210a3b2f9a2641c2a","41faca5faa6859bbe93224fdd4007353393807527d2fb674fbd83b2edfd16af3","77411d10dad0e74a86ce28dd0f720cce2947421e42f3fb5d1849bc14520f9b5b","ea86fe238f679714f2b3662d9d932bc3b47a0500894985718243167043f2bda8","667c9ac7c2f61c4a36220c2fa02f848a170aa96d3a58be32a5831aad86330da2","eb15dfd1f8b6da5f546fe29a6a0f0de4ae6dbd4a5577af4eba4c8a54548ef0a2","01443e5da049881a99f223c72617d4bb1d8854930d03deceb628e4be83df1e4a","a380f922477db0b9b4a17cde7d29585e2280036fd62ac4564814d4844b64717a","a0263cc045540023e72c993a26fd1bef3adf8674b9719272009134c56ecfc336","df162b6f89985144d8aedccc36dfc366ab5e562ba8615125b2bfa25273f3006b",{"version":"d28d470c2ad98a6c8a311dee028e330414b2d5fb8929a8273f2d49d97edb4306","signature":"1e14f5130ca1e7084d87d6ce216595cfce894542e5545fcf47f9a999bb858f82"},{"version":"b203b43d6fa6a3e4f0df310d57ca7bb00f5a451ea3db50dac7c80e25ddd72e2e","signature":"df8e482c1b6128d94042d64423f1cc5804c5802e32695f505485d17512b92361"},{"version":"0641e7f6fa369fae8236c03ef5c831002894e5323e2baaf068da9c242fb4f595","signature":"9ff59cce7bd2fd9ca2e8870a9d66ffbd78c5572dcf28e1af2d2ecbc9ec4304d0"},{"version":"ca1aaa8a0d13ce98ed20906d8397cd2769d891674bbe65ada8eb60a53f58b0e7","signature":"bc236f73ba82a070e91a55b2a256727a46a573ec6409336ff6617d3418f6cb1a"},"147b16a7da1cef5e7c1ce5f6e3c1559b786f86d504d1151d94221a578f8ff533","7735c3681e614d7e967a935f397210fedbd987243456206f697202cb7c266a41","9dffe4acb382f1232e9eaeda23ed7f07c934acb9ef06aa528f75799d12d35343","7f8f6d3576ead7698d78d3849b5cd55b79f923e5589e14a2cc5270b4d0c9fe96","a807c0a82557d68f6f0464d6af0a6566d1ef708f57c7d1d7dd8dde28879635bc","4a5612eb59f581a5b8e05d22e668b4199787751266a0291e3e07113fc52abf2a","16c594cd8a44be9f5398d3fc7dbc9575f0b67d91a6553f35bd3576136862b32b","5d055d8b54e2dec3fe4aa417f5f664658b78123e83e8735047285f99a1d24065","42b5333564fef3c9becbe8daf55b1ea124514cd86c2f8bed401d2a3f0037b3b1","109970171acb66c4c03fa6ba9d0a3bc2bf43c12540db2b0842d25d54fbe11f65","edb50eace77052203c3bc6eb251fe31f44ab0107e2b6d949ec983a918726aaf4","70cbb43b1e838bb77b16e1085115494c8b6925a954edf7fbdd494ad56a88adb8","ad716342f559ff88871c01a351dbf89fe72c8313f329cd2a714f09f532c50eab","866f0c4f16380a56653adc6cbeac08c58c626dabb431f0fa6cc2ba07874836d8","e8c5b68c1182684e8cfc177430b80fef003976d1dbde326087c28f5125fe4b5d","6666d48a46dbfd565490e7f8789093e2392c5bdcc3a380dfdd91c77237e43101","a2023e18c62b1109f17241fb1f90a84e75fffcb3ee9265d2e9bc0fa40b6ede42","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","9080b537cd4fa24273477f33faf5f983e5f10aa386c2de8fcb6de837c9cc9763","272cd5e6428b68d973ce707329c3f621ac6b3eb4bf5bd4421b1106299600ddde","d34a8917095f11006957bed03e1e60dacc0b82906f5d0ddc87b959e283fbb5cc","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","bffe8a5db9410d2f3320df7016f83e9de47328e377aa78b9aaed1fe6d5db9d66","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","14b8a1dd226271e6b045d91262602b15820ff871b3dab24510a15e6989d05a5d","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","0fc1e0effc8ea83ceca9a1ff36c2696489fefea040d33fc5cbe244111333fcd4","1217c84b164e559b2371aea1b8c11eea9f95e123dab98942c8a5a4aacc2ad252","28092d5b5aea82adc509a3d522d265d9d5a8a0ddf92f94c8fb336c5787893030","1104c3d427c1cd94c53b14c09dc27d342a1cc1b0070ef95423bc3732940360e0","6c2d1a830c44b810afbc51d9c6e24acc69bba27bcd8f635142ebdfbe3e8512a3","86aa8428ca8e1061ca36c4d3d62add983e16b01c003b8644ad10e3baaa7fac22","975bbb148ebe1290081bb0f643d70aa4c5e4b09ef9121eb60dd78ec262042dac","d61d22e1b77ff3242e3ebdc209b1567edbf573fa619ef10841f282705124254c","1738ee2a1396aff81a52e43d32ac60ffd203d20ffccab11418d116be2fc5b876","0b8b1130956872ca47bca072483e8091d6f2a82a5d12a487ba5823c02fe86f2c","f74cefbbb1ebd84a1a124e9e433fb5d5ca1f0196bc8b863fff32f144bca7b6d0",{"version":"cd8301c383190417018a9610d3041893c5911cf68e413984ff5dc446e31f1791","signature":"b4374e50591dd2a55a2183128276da874427283c9d8c52ce913f77dd0c3ed5f9"},"f83ca4c2157040bc3dc3edc59900f83cb4ca98c08357b8547401119cac667f57","d9b9c8643cc9909046a2c4f9786362549372172cbf2b5dd64af91bb0cb428f07","1e696d3bb095bc56363c69d6799302fdde67ab28d629d93efdd04182207ebc84",{"version":"c2e0562d9ae0f6e24b0982067b76e5370de740e449f650f85d9e6a9e328cd292","signature":"9b4e2e8e74287ca4e992c3dd63b299a5c25757afe25304af631479e0d0bc3ae8"},"d491ddcef62d13d93bf4a4b9e1223f8fb1ca628dbd7c871c34398f2d291f26ce","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","4c5e54a2d502770a63859a00fbf77e8b91ce76b18080278f62866e7cdb582798","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","71dfda7df8d05d2d54627963af1c3c675ef99363d421b7ff42ae237d038db4ce","6666d48a46dbfd565490e7f8789093e2392c5bdcc3a380dfdd91c77237e43101","6377354dd753557d479933e0bec6ca6836f839c87394ecb071e85f062b708058","0dd67171a4a3fa82044faec51befa11ab96f9205fd8cc96be09de275b65d36ab","42570779c28480ae0d1fa0695974a888305ee2b2efd37bacdeb57204dec843db","dc35c5340756418041da9f388103218ead65f57397f40d5674672c216b008126","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","2596013e7e3f002455e29bad0a70e0ae1a1364cac8584d2590b73133e63d6073","b9f2a8333ccac1e6037afd66dbba82bdeea00f1ed011f741ce4f006ad4eb8b01","8ad13afb5324460426b210f7c5040d3d19375accd24e22bb52a534c728aca73e","e1fe04ff1ffecfb18420f0895d0cd2652f98a27def5c33aae5ef328f186c905b","87b44430497cae7542bbd5ac2fb6663df6a465dea7a46be58a49cd9416530439","32b67d761db3999f1e482d0add405b695d3ec5607e07ae4c963a96334c331814","8747571dae434deca4847b49e09b5421d7068b0956a1df841756812645d4e1ed","474ab86e676e0c1b664bfcd21b1e58bed351f3390ba1d892e8da703f371b7a4e","fb7a601066e19b5d0c173b564bd46b358cf00c9040e79fb6fd427b7aa223eed1","8b097e48fdeabcee00e2aacd4d009dff135c2cd51675a272d74ec25dd853dfee","28235440c6b330eb66df3a7badfc11e32cf7e08fbdb17b518a6b775fb269170f","247a5bebf668df6d3bb7e0b297ed5a6b6913d9343dcfea5bf77ce4662ab102bf","531556008024c69163c0d120823a69e7a6a5be1279ea87fc725a63dc386278b7","e2e44effbf7b4b1fb5111ef7a4443a733aff4cace7875fafa86bc41130dfdb84","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","78599ccb7640bea7bc64e8fddf33e97b8cf512c1b2be2c8851655a66980e4268","cd5ab2f30a27d53001804b7ef51758a79b73e4ccb7716b8e2ab8e17d69a7183b","a9dc4418352bc4a8d1e9314aba1e29327b17d06c604b397c6140d6488c5b022a","6adcf362e079c177ea4730c8b7beb3e9848b3f970ef08b497a641e034b0a0ece","341331b97a90ac435664e68b81f116f1f622283f3de523c5425b67eb0a58cad1","5e76b98d51f23f9d9563ac7002139d43fd6543eb66646928bf2e9df6a468ace5","e0b109ec8368bbb8943bf7943af9fbcf0e895160d1363cf93dacd43bcc747794","f569da0d6f4c6fb153811dd6b7d34afb4511c7d85f5089e30a1db78004975ec1","537b1070107a0454a2fe365a633555700fff55a4b3e15d55520633b93dbf96d1","8571610b2e190937f6fcf0c626ad415ec9b02a4ff550d8881812d2b9efdd2847","8dac050016c78a797699221c95d569c47ea4176e403b47f9f5a2e95afe26cdd6","d8a63ecc9188f8ef5fce8c82ea2c691acce9a152b8bd07d75a6531c7d4c07df9","cf86d880d95988555dd6ac5d1d3c9aa99054df217f0a7ec1acf39b9d56f6445f","6426748248e4065207bda1892b18426f1c9072800edc015119d4c907f62af51d","4ce46cbc89a24ce3d0a00dec230826cefee2514181e790932230705db3f0849d","f7b2f9a0ffd520805cdf2440d48f45bd9074c905aea1a365b91de9170ccc9d58","8432e40770dd9f642c682661fea75226189e5b701b06189a98c6bcd3764d796b","8f0d013f819b91abf6b355e510e1bc039ff10699932d726ba7b3a4f447c031bc","4f7f48524408301ae348e9d310f9ca718210cc2ac1c2c6697eee1e0d487c7d00","34999b05c3aa15b73ab99dc1bd9a2d17b7f24cbf229a45b0850c7cd9e138ffe7","91fe7b33847d945b1ad3a816c397ca4cddf5005dc36f5bea4ab11e1ca7b256f1","fe968d845c846a7b92645287133ba0b8e9f84fcfd31834993e77330a95e6e40c","a054d5318c7a96f630b21d0ecbbec6a5adf97f8d697f11dc1e7892f87be5ad02","a5e5b361a88c70f95156c17dadb55b39f658103e28f16d7a3158be79809b09fd","d40b8ae5d3a678fc5542430da94fc918f1c6859c214e899040c3df4c51742f2e","677634e24d8933e8820eac9ca51b590a63618d297f202cf0751777d2563c74c6","06d62ca3f63cc0a07f525f0df010713c02d0b3a12eff7e7c393641b36ec070cc",{"version":"91298c569ddea0c2eb69d87b6cd29d0589393e4303f405e9461321e1f4840a94","signature":"f04841b945e88e83a31e47aee7c08ebb310c09f6552029520c7c3c0e9fb31ee6"},"a3729108e0d2e5b9f634b3d8d1e5b73960ef367cc77ae597eee87fcbda9442a0","5fc52eff32c75afed919d4518e57e3e3c424f79b1a280c3c9f1d0cc5bd6ba7d9","c2fc1482fdfd2d87e8ca806ef1139b2c7824efee6cc1230b0aff88087528f5d7",{"version":"ad099f15366e0d9a462b5bd7a2a6d678812d28b1e44549adc7c6329fe65b0351","signature":"d2fa075ca2f9ba295773da850487ce6a9b96dbceda87039be23a46d756ca9587"},"05ba2b0bff03530b208e72fedcc7e343161bdfc4d061ea159b189b8ba4d69ea9",{"version":"932a9bc425a7a8474f0c6ba4c1db72aea074da6957594f8ba80e427d5a854906","signature":"a87ad0491ff93f1588480cbcf1bbceaff6dfc4ede03fdbee1fa87000bfb7e6c5"},{"version":"c4edaa545469fa15aa633522707d6c834e476d7dcd03354224fab6489eea2ee8","signature":"2362c75b628cfb1872679b1b7ad18b9cb20e12617c1d78df2ecc3a29e2cf6394"},{"version":"9124738ec25434e256056e497059e2338c6c128c899b6e05b83412c716688078","signature":"819b09ed9ec43215b9ddb2e9452a6ea0307564db8fe8fb46d6976bcc875e9deb"},{"version":"23614e113e12e7dbf0f548a53f7cb89a4931078d6beca64e08adbf0284afa66a","signature":"e86e5fb7d53550c4b209a29769a3eaa7c4aca393f11e0cd6e6e2500c9909993c"},"04cbb5c8ae98f513211203d01c5b6ff8197ea756ecc490c81e7c9fae8447754e",{"version":"0f39bed75a41966c6bf31a5560f6da1f91cfd1e12a7f74d325c5e63d8fe22787","signature":"f528c5b981cccf0a0f6938c5b122e056b3b4b83bc94fdd93dd674942a705c4c3"},{"version":"4a60bfb087a1f9cd8f351879ee2e5e3ef5f678d9439665d5cf4f9b334bb9b756","signature":"ca5f0b96f8efa2a4f951b41092122b2df8313df078536c521ad3abb51e6cc54e"},{"version":"81ee83ad0855c3978f27a6359ee54d974905691dbd6040bfda6634f22d72c9be","signature":"8600f518fb55b95cc297e01dcd69244caa8562dc262dd0e619ba763fc40a4252"},{"version":"70803c7bfc11f4fb9dd790de32aad3e04458cedd67e2705eca040f041be1aea1","signature":"d0b089607ffee9a6d65615fa63ee15753c51017501397ef7d2247a7404a42623"},{"version":"b0834965af1c3626049bed5da0b50fd950611a1f9067894ea9559dbe081a0518","signature":"59d4e5449440c3e8a7ad10bbdf682c80e332c607bf1583251e61394d59d205ce"},{"version":"08f529198e3f741cef564a05f31b5d3645770bc8327d44950fc1cb67cd29afe7","signature":"524c270b4218ceeb0de13055a14790a8796a8c0263163f04bf0837bd3085c7d6"},{"version":"9312d1eab301ab5e5149be77ec740f263a2f0fb3099fb5e7751c012e062b07d8","signature":"626c363aa0c9838f69171aafaed274fbefcce9016a26a43e8f6b0c7983a4b0e1"},{"version":"13d4dbf89a1c537dfe3b8b0bf424e1243ab35e3da431fa075f6dd0b5a1f26e73","signature":"597a88000c8f0f6646e67b2dd718333eba96bc2bfd7f677edfb8e6f589d32369"},"04e6fc01ec88336d8d03d3f115bf38600207a363b01f30461fa0304b1b964804","d33ce9358de6447d71146be26bd735890a8c2b3f08a6f4dc2962d5d76ad308d5",{"version":"bb14d9c0cc759b54c6eebad3a613e2c54942fb6115fd076d3ee90eaf5de4de43","signature":"51e1bb6379d54600c028292b8e796a1cf65091cb9873834e8c5c815e8a22cc3b"},{"version":"b9734142a4b241cfb505be4a2eb0261d211647df7c73043f817f4fdd8d96c846","affectsGlobalScope":true},{"version":"63e2182615c513e89bb8a3e749d08f7c379e86490fcdbf6d35f2c14b3507a6e8","affectsGlobalScope":true},{"version":"c1f79c6d85cd84518fd7349588b3c61bdc189f58e3866f925cbf4631c81e31f9","affectsGlobalScope":true},{"version":"f4c0db3a49cea9babd5d224ba14243a6a6119bf65a65198994033aaea3a60a71","affectsGlobalScope":true},{"version":"42f28f4cfca4a70bd89c1d55d76c7978275030b894f6793f36890265c11a83a4","affectsGlobalScope":true},{"version":"41071d2f1a39386d10bf36d1ba4712ad42a900047f16a109936df9e48f13673e","affectsGlobalScope":true},"961e669569be9491c20108cda7db74e91d9ceafde708d3db10603af69aef7e23","4c7fb1f4c57f3cd9d571c5e4cae33503530273a45579fa0babaf36b64a776eaa","3b65ca51bc8915ae230bb40cb6a9662bcdcde83c402f57d7f8b8c803d497d0af","e9ac10dc565b57bbcb6d134321f3a1fa2fd9c9c886d00455c0f2cf8631e37b34","89f3cdbbf9cb7b86ef859cefea8f2b669dbe0610d942a3a38e1fde983907a762","ed42a3b734edf70e551f833095d39fc7ec977e57408aa59639f88a5f97c096b4","495e96e2e15ef27419b115b9874b644dce848c2ecb7dfbc1d0bffc3f767c777c","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","97002bbdee99ce5e895daab7608d0bb5a92d1fcabeb0ef26f959a135645ab760","2c45e8c5856d9e68da38da9df7d2e76418ba70d619af172722140147881a2662","86ef3c0f13b861966c3f8a594c4042df6f3b2945fae733ba011b16dc2836453e","634383ecece44671e25939c8a6710e8a9f1f02ea51424e9752c81c0c3f3ae6d5","594f11fc10f5fa50df7e09c3c7d3e925bf0bd5f10af78fa715b809a847cba718","63ad4205a06d0f4529ea385815c51ebb32ce68fc52ae4e650e51e866e5578ec5","ce8d5b83e00a61eb0b931ca091036266565ae8c730a0276c3687bf079f33b44b","25005fd1c08300ea0aced86760109ebc99ae29400f90163bbe1ee4a0fc57ed1d","c622790571b9723df8f1175ce4deb073728b55bef81f1c4c12ec4967249b53c6","c55719987df25500caf575194e75c0f249758f8a7cbc1eac25541faa49d18eab","6fe8555e7cff8fb4b1c4ee9c759e3ad0e205f1d20c302ccd47cd5c05dd3f67f5","940fd6ac43a78cbe1ed17db09ff8f93dcf7f9703cebaaea53071a6b448f25466","b80c780c52524beb13488942543972c8b0e54400e8b59cee0169f38d0fabb968","a77fbecee25688f568e18b43f8f54195d6c278a2a9a687ada5ab3d2f726524eb","e29f2b3a93ca3392fe29fa8e7b93985e854b44fe28e2b5c113f08296095bd6b7","d27956c8b392088a06d882e1edb58aab4d5cf5ab1229b73f99329ab21f352147","90dab905b7ea5ab629b62ec5a4153b3f44469aff5b1f6132edb2802537e5d8a7","3ccf65e2230413ab1facbad92a2fb77b8e2bcd314618d0ebc12f6cb7aaa21619","164a5f7d876c1c34be273cdc3c7f8b7619729010cc4350e0f58d2624b7f66610","9b65fed5eefae75fe8b47f0ec66e958910c07a397a0bea486e29a0a1ede9bd59","75614d08e0829e2cdaf0f11ea77678210782e9460aa65d507ec1500ff14cbbaa","9044d1e9327294a169fb02ff20ce04db42bdc11ea771bcbe229ff7233fc27912","d9794ac6f56649c85740cbd2acfab019959e96c95b352418eda3be50a9b507bf","3dfdb0a87095463b35bc2776e30255bc8334c17903d617388e80b4c241f4e2d1","00297049e5c15c995373d5dd0e9144fd20eb4ecfb8757f0ebc3a3d889d709807","2b6a4ce9c496d80c9e3e0be81d4e708c53b5576b463b215c16f9b9cdffd9e085","e76a8353e31ab7720941ef98e0f541a4d55cff6e70db99fb4bdc524d55d1ee41","509dcc5428613ee5c3214715a62f96d14c66a4aa247da7414b7f29501ffeead7","5433ea8c939ff483d06f5b67841eb2084849b1323021e2b14e39f384393b50ff","aa0a53e66dd47479acca758d17d713c249f50eec1c3894e6de1113e2d07010ce","381561ca646fbf1cd1667ce707e92a87dd6f72ca0c3d397964073e0e21a9cecd","5860618432214072761b1bbc2df4fa2466005d0644fadbbdbe961b6c226339bc",{"version":"09ef1b7ad18a73905918711482ffcd1392dc2cf64266cc1156ab7f1be95cad2f","signature":"b1f5d24e6a9ad2e00eb493b46a1e21e54aab34ec348d862bafe5c247c0c6e853"},"558b9c398ce6f03df00e76eca31d239960977a6c3f06c5fa067e7f176fd5e6be",{"version":"2b31a9262694ff1d62ebdbd49d5ce22e28ca6261c768def7f580f6be26aa7c35","signature":"f6b58374b7f1e7e2321b61d018b8f466b9aa72008caeba637fdd50cacefb213a"},{"version":"f20cccfb5627da167936e226d5ae24253bb64a52b021dedfb315321bfe72ca6a","signature":"3c49d76d1f6709b97d3017746279bdc9f97a5a00a0a52091b1dbd52561cb4ad8"},"9ec4f7b64a4efdae7039397c79e6826d29284bf91e7fc63574c65881f68cee3c",{"version":"1f38d7f8d07e880ae8bde665135505eb6de3cd6d401a948c6b7687c6f35afaa2","signature":"baebc7794d496341b7cc103be88686d3cc321fdff779d06b2f585ada66192d55"},{"version":"2a21130cd006cfc719d58c8d37e8d8d589d394f75993ff7a18ff66e5196f1499","signature":"fa07aafdf8def8a8cfe757cc2838e9a9b3bb53079bf3f050c4a06f32de3b1ebc"},{"version":"3cacf516f7abf8b79d78fdec66e14c6fa97d5744fb52a8114418a0d067ad8839","signature":"b00026164be9ca0d5d0ebf8959d6cfd1da6fc29b134db4c8f70857f00d8ef2df"},{"version":"c8d11aeb9b419da12593fb3f49afc5d93ced8788546a394ef39c651419caddd5","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"286211de937e01a946a011c9b2e3239acec1d810f7cde6240e31a8cc203b700b","3438e820e6c690814bd00de7df9b645cbb4889ebfb29eab0aed65fa3247621e1",{"version":"842dbc6d3f594df1abc01d76b15ba64fb4333e2b64ffb0872535d249ba645d1a","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"f83b320cceccfc48457a818d18fc9a006ab18d0bdd727aa2c2e73dc1b4a45e98","354abbae08f72ea982b1a767a8908f1b3efe8bbe53955c64f9c0c249c8832d5d","39e79b923b74c9fca4f9ca3bae7c363d225efca70476883593543a1cbb3991b7","adb5ad16c19ff8dbfa9daa3a7dc8e1b039c381a2b94383144a53368681ad8ca0",{"version":"0332788828957f7bcb9f4291fb10439c98bf06a2218c19f69d37b78aca1d0310","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"acd5d501223e3a7cdd229b501fce5fb071937b72bd05fa33e543eb21c8ee0aba",{"version":"163178e13d325fc4a76596a42c7bc2dcdf20ac632233f3ab4ca27cd76d31b684","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"e4d67da1c664d0a6ff176cf42ee31a44f86e804cc769f722d74a15a2765ff1d6","signature":"69b30e660ed2960155d8d5157d665a176dd384f31a74e65766f452598f386822"},{"version":"9460893bafa9bbdae04bee68fe2da87e692b67798f107c4a56621cd0f09eb739","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"bdc5b4b1b813ba7078a951429536389d58ccb0e4e1772a9357827bbe68893bce","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"6a3816094633a8e76b1f3d7d3834b6ed2dc9dd08c8e996a74c118284468c6e7b",{"version":"3c084863032c954391d9b6b42fca68f40c6488d887b6d0c5a10bf492eaaf1eed","signature":"114d891ae559bc488ba0c3ed112fb88caa47c0050bdd079251aedb601100c75d"},{"version":"a70b1818601f1b84463df0d31f36a21f79f4f68d7048bb9c2f853ecb841bb6f2","signature":"8e76443c3b74f5d050f7cbab44d4b6f8f8b7cc28c4d58421f711ad78898f16fc"},{"version":"5e85a5d84409b462b36f9e72de987604dae996dd5630efc9927222a4a3a1021c","signature":"9ebd48df2bda26c6b4efc73e5239a82f3148319fc60f31fb95bce1d1a1432a08"},{"version":"cc0774b79256216281fec62337dc8686014d44b970270bc69257acad529ba7b3","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"c4c7ee93c17711273a36b00093977a51f312af35e90832cbbb1419f9b6b8ca60","signature":"262209045764c29b050897da900672b07b8572b572ad330e0d244ee87592603a"},"bff0e5b78911a9a743b80b83ca989765b2036ac5b3423a07f9a5d172ba0771ab",{"version":"6350ea1e0a08c1627d178ac4aa55c96a67c46ad073057a7426d703549b1c1a98","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"ef4256805042988fa183b9994f1871a433421788f29fb66bc45edce3c1cf0e81","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"a33d98728092bfe6c0eccbd38b714a618ab340f1bf975596234af30939d7ead4","signature":"eb42bc5267f461f8744bbb6aebab29d9b6cd4f68dea6580114c427134faed436"},{"version":"f5651a01bab07880e215d3ef1c4207495281bc10d24c90d60f5cfce02e5708a7","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"3d1c959c452163b7f62470091d245786758ca36190330b3b20c68188c8f3367f","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"b3bd50e2a103ab7b874a2d0a0242db639a07780a394f291a4f05af76f72e7952","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"874413f18d1740d386fd8d0b5a91c2a66dc773ccac2eed1b8529ff45c735ed6f","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"de3ba4fafdea18e37beed5924f34b180e32793e34669e311031ec39ded7b84fe","a236a784cc81a8b83aa0684721bcda0812aef7a06f15fdefd7e08a7a3f9980a0",{"version":"22f5baafb40a1437cc3da6447ce3ab989c5f0406ee5720d8920b560af330f135","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"cb746dcf66a45ed75f87b5dfdd4d5f43311a95799fe244300d2ef258e7f45174","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"da45ee6fbc1ae3e13be063bf57aa5f71435c6602dca66de97bd500f15d9333cb","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},{"version":"5b383753383e8776993a075ebb46cba9b2078e04e3f97f5b70f2258a90298ef8","signature":"8e609bb71c20b858c77f0e9f90bb1319db8477b13f9f965f1a1e18524bf50881"},"92edb6e257fa64d3baae647490e041912684f5dc1f243d0aedd60b4b383ff50b","cab425b5559edac18327eb2c3c0f47e7e9f71b667290b7689faafd28aac69eae","3cfb0cb51cc2c2e1b313d7c4df04dbf7e5bda0a133c6b309bf6af77cf614b971","f992cd6cc0bcbaa4e6c810468c90f2d8595f8c6c3cf050c806397d3de8585562","6a9c5127096b35264eb7cd21b2417bfc1d42cceca9ba4ce2bb0c3410b7816042","78828b06c0d3b586954015e9ebde5480b009e166c71244763bda328ec0920f41","80d50bca45b12deb542118e51aa1c5e6c779f2b387e589d475297c07de0b342d","8b06ac3faeacb8484d84ddb44571d8f410697f98d7bfa86c0fda60373a9f5215","f3e604694b624fa3f83f6684185452992088f5efb2cf136b62474aa106d6f1b6","96d14f21b7652903852eef49379d04dbda28c16ed36468f8c9fa08f7c14c9538","fec943fdb3275eb6e006b35e04a8e2e99e9adf3f4b969ddf15315ac7575a93e4","6503fb6addf62f9b10f8564d9869ad824565a914ec1ac3dd7d13da14a3f57036","f313731860257325f13351575f381fef333d4dfe30daf5a2e72f894208feea08","951b37f7d86f6012f09e6b35f1de57c69d75f16908cb0adaa56b93675ea0b853","3816fc03ffd9cbd1a7a3362a264756a4a1d547caabea50ca68303046be40e376","0c417b4ec46b88fb62a43ec00204700b560d01eb5677c7faa8ecd34610f096a8","13d29cdeb64e8496424edf42749bbb47de5e42d201cf958911a4638cbcffbd3f","0f9e381eecc5860f693c31fe463b3ca20a64ca9b8db0cf6208cd4a053f064809","95902d5561c6aac5dfc40568a12b0aca324037749dcd32a81f23423bfde69bab","5dfb2aca4136abdc5a2740f14be8134a6e6b66fd53470bb2e954e40f8abfaf3e","577463167dd69bd81f76697dfc3f7b22b77a6152f60a602a9218e52e3183ad67","b8396e9024d554b611cbe31a024b176ba7116063d19354b5a02dccd8f0118989","4b28e1c5bf88d891e07a1403358b81a51b3ba2eae1ffada51cca7476b5ac6407","7150ad575d28bf98fae321a1c0f10ad17b127927811f488ded6ff1d88d4244e5","8b155c4757d197969553de3762c8d23d5866710301de41e1b66b97c9ed867003","93733466609dd8bf72eace502a24ca7574bd073d934216e628f1b615c8d3cb3c","45e9228761aabcadb79c82fb3008523db334491525bdb8e74e0f26eaf7a4f7f4","aeacac2778c9821512b6b889da79ac31606a863610c8f28da1e483579627bf90","569fdb354062fc098a6a3ba93a029edf22d6fe480cf72b231b3c07832b2e7c97","bf9876e62fb7f4237deafab8c7444770ef6e82b4cad2d5dc768664ff340feeb2","6cf60e76d37faf0fbc2f80a873eab0fd545f6b1bf300e7f0823f956ddb3083e9","6adaa6103086f931e3eee20f0987e86e8879e9d13aa6bd6075ccfc58b9c5681c","ee0af0f2b8d3b4d0baf669f2ff6fcef4a8816a473c894cc7c905029f7505fed0","cddf5c26907c0b8378bc05543161c11637b830da9fadf59e02a11e675d11e180","5774751340e987a6a9e4a5dcc03ff68a6515adc2b91423e1af2f660fc8f30e81","8841e2aa774b89bd23302dede20663306dc1b9902431ac64b24be8b8d0e3f649","209e814e8e71aec74f69686a9506dd7610b97ab59dcee9446266446f72a76d05",{"version":"677646e2620795c98a539fb12fb531f10331c217cef1492132b2518f894fa92d","affectsGlobalScope":true},"6fa0008bf91a4cc9c8963bace4bba0bd6865cbfa29c3e3ccc461155660fb113a","2b8264b2fefd7367e0f20e2c04eed5d3038831fe00f5efbc110ff0131aab899b","58a3914b1cce4560d9ad6eee2b716caaa030eda0a90b21ca2457ea9e2783eaa3","2b93035328f7778d200252681c1d86285d501ed424825a18f81e4c3028aa51d9","2ac9c8332c5f8510b8bdd571f8271e0f39b0577714d5e95c1e79a12b2616f069","42c21aa963e7b86fa00801d96e88b36803188018d5ad91db2a9101bccd40b3ff","d31eb848cdebb4c55b4893b335a7c0cca95ad66dee13cbb7d0893810c0a9c301","77c1d91a129ba60b8c405f9f539e42df834afb174fe0785f89d92a2c7c16b77a","7a9e0a564fee396cacf706523b5aeed96e04c6b871a8bebefad78499fbffc5bc","906c751ef5822ec0dadcea2f0e9db64a33fb4ee926cc9f7efa38afe5d5371b2a","5387c049e9702f2d2d7ece1a74836a14b47fbebe9bbeb19f94c580a37c855351","c68391fb9efad5d99ff332c65b1606248c4e4a9f1dd9a087204242b56c7126d6","e9cf02252d3a0ced987d24845dcb1f11c1be5541f17e5daa44c6de2d18138d0c","e8b02b879754d85f48489294f99147aeccc352c760d95a6fe2b6e49cd400b2fe","9f6908ab3d8a86c68b86e38578afc7095114e66b2fc36a2a96e9252aac3998e0","0eedb2344442b143ddcd788f87096961cd8572b64f10b4afc3356aa0460171c6","71405cc70f183d029cc5018375f6c35117ffdaf11846c35ebf85ee3956b1b2a6","c68baff4d8ba346130e9753cefe2e487a16731bf17e05fdacc81e8c9a26aae9d","2cd15528d8bb5d0453aa339b4b52e0696e8b07e790c153831c642c3dea5ac8af","479d622e66283ffa9883fbc33e441f7fc928b2277ff30aacbec7b7761b4e9579","ade307876dc5ca267ca308d09e737b611505e015c535863f22420a11fffc1c54","f8cdefa3e0dee639eccbe9794b46f90291e5fd3989fcba60d2f08fde56179fb9","86c5a62f99aac7053976e317dbe9acb2eaf903aaf3d2e5bb1cafe5c2df7b37a8","2b300954ce01a8343866f737656e13243e86e5baef51bd0631b21dcef1f6e954","a2d409a9ffd872d6b9d78ead00baa116bbc73cfa959fce9a2f29d3227876b2a1","b288936f560cd71f4a6002953290de9ff8dfbfbf37f5a9391be5c83322324898","61178a781ef82e0ff54f9430397e71e8f365fc1e3725e0e5346f2de7b0d50dfa","6a6ccb37feb3aad32d9be026a3337db195979cd5727a616fc0f557e974101a54","c649ea79205c029a02272ef55b7ab14ada0903db26144d2205021f24727ac7a3","38e2b02897c6357bbcff729ef84c736727b45cc152abe95a7567caccdfad2a1d","d6610ea7e0b1a7686dba062a1e5544dd7d34140f4545305b7c6afaebfb348341","3dee35db743bdba2c8d19aece7ac049bde6fa587e195d86547c882784e6ba34c","b15e55c5fa977c2f25ca0b1db52cfa2d1fd4bf0baf90a8b90d4a7678ca462ff1","f41d30972724714763a2698ae949fbc463afb203b5fa7c4ad7e4de0871129a17","843dd7b6a7c6269fd43827303f5cbe65c1fecabc30b4670a50d5a15d57daeeb9","f06d8b8567ee9fd799bf7f806efe93b67683ef24f4dea5b23ef12edff4434d9d","6017384f697ff38bc3ef6a546df5b230c3c31329db84cbfe686c83bec011e2b2","e1a5b30d9248549ca0c0bb1d653bafae20c64c4aa5928cc4cd3017b55c2177b0","a593632d5878f17295bd53e1c77f27bf4c15212822f764a2bfc1702f4b413fa0","a868a534ba1c2ca9060b8a13b0ffbbbf78b4be7b0ff80d8c75b02773f7192c29","da7545aba8f54a50fde23e2ede00158dc8112560d934cee58098dfb03aae9b9d","34baf65cfee92f110d6653322e2120c2d368ee64b3c7981dff08ed105c4f19b0","6aee496bf0ecfbf6731aa8cca32f4b6e92cdc0a444911a7d88410408a45ecc5d","4006c872e38a2c4e09c593bc0cdd32b7b4f5c4843910bea0def631c483fff6c5","ab6aa3a65d473871ee093e3b7b71ed0f9c69e07d1d4295f45c9efd91a771241d","70e9a18da08294f75bf23e46c7d69e67634c0765d355887b9b41f0d959e1426e","e9eb1b173aa166892f3eddab182e49cfe59aa2e14d33aedb6b49d175ed6a3750","65dfa4bc49ccd1355789abb6ae215b302a5b050fdee9651124fe7e826f33113c","6d829824ead8999f87b6df21200df3c6150391b894b4e80662caa462bd48d073","afc559c1b93df37c25aef6b3dfa2d64325b0e112e887ee18bf7e6f4ec383fc90","d78e5898c8de5e0f934eee83f680262de005caa268d137101b833fd932f95e07","16d51f964ec125ad2024cf03f0af444b3bc3ec3614d9345cc54d09bab45c9a4c","ba601641fac98c229ccd4a303f747de376d761babb33229bb7153bed9356c9cc",{"version":"c5dd1fef4cd4aaffc78786047bed5ae6fc1200d19a1946cbc4e2d3ed4d62c8fa","affectsGlobalScope":true},"56cbe80e6c42d7e6e66b6f048add8b01c663797b843a074d9f19c4a3d63a269a",{"version":"64d4b35c5456adf258d2cf56c341e203a073253f229ef3208fc0d5020253b241","affectsGlobalScope":true},"a1c79f857f5c7754e14c93949dad8cfefcd7df2ecc0dc9dd79a30fd493e28449","f3e604694b624fa3f83f6684185452992088f5efb2cf136b62474aa106d6f1b6","e793f85164d47950e32731e98897e3e6b285339c5fa1b3a3ddd1711a54f371b1","e050a0afcdbb269720a900c85076d18e0c1ab73e580202a2bf6964978181222a","5b9ecf7da4d71cf3832dbb8336150fa924631811f488ad4690c2dfec2b4fb1d7","951c85f75aac041dddbedfedf565886a7b494e29ec1532e2a9b4a6180560b50e","e6f0cb9d8cb2e38bec66e032e73caa3e7c6671f21ed7196acb821aec462051f2","43cdd474c5aa3340da4816bb8f1ae7f3b1bcf9e70d997afc36a0f2c432378c84","ee65fe452abe1309389c5f50710f24114e08a302d40708101c4aa950a2a7d044","54c9959f2d8ba97a5fcc4345ac2fca6f1bc20fe5764570b7fef37bea107bc70b","6a386ff939f180ae8ef064699d8b7b6e62bc2731a62d7fbf5e02589383838dea",{"version":"bbdf156fea2fabed31a569445835aeedcc33643d404fcbaa54541f06c109df3f","affectsGlobalScope":true},"1c29793071152b207c01ea1954e343be9a44d85234447b2b236acae9e709a383","f5a8b384f182b3851cec3596ccc96cb7464f8d3469f48c74bf2befb782a19de5",{"version":"45e702668a69a742682ccc153d6159a8817fa6387b6d1d91a447e3e4534518b3","affectsGlobalScope":true},"74b0245c42990ed8a849df955db3f4362c81b13f799ebc981b7bec2d5b414a57","acebfe99678cf7cddcddc3435222cf132052b1226e902daac9fbb495c321a9b5","82b1f9a6eefef7386aebe22ac49f23b806421e82dbf35c6e5b7132d79e4165da","77c5c7f8578d139c74102a29384f5f4f0792a12d819ddcdcaf8307185ff2d45d"],"options":{"composite":true,"declaration":true,"declarationMap":true,"emitDeclarationOnly":false,"esModuleInterop":true,"importsNotUsedAsValues":2,"module":6,"noEmitOnError":true,"noFallthroughCasesInSwitch":true,"noImplicitReturns":false,"noUnusedLocals":true,"noUnusedParameters":false,"outDir":"./","removeComments":false,"skipLibCheck":true,"sourceMap":true,"strict":true,"stripInternal":true,"target":7},"fileIdsList":[[79,106,113,422],[70,106,113],[105,106,113,427],[79,106,113],[106,430,432],[106],[106,344,429,430],[76,79,106,113,425,426],[106,423,426,427,436],[76,79,81,84,94,105,106,113],[106,434],[106,435],[106,440,441,442,443],[77,106,437],[79,106,113,435],[76,79,81,94,102,105,106,111,113],[106,265,267,268],[106,200,265,266],[106,265,267,269],[106,270],[106,200,266,270,271,272],[106,116,147,157,200,265,266,267,270],[106,265],[106,120,126],[106,136,140],[106,116,147],[106,116,140,148],[106,116,120,135,140,146,147],[106,116,135,136,140,148,215],[106,116,120,135,140,147,178],[54,106,135,141],[54,106,116,135,141,142],[51,106,116],[106,116,135,136,137,140,141,143,145,148,149,150,153,155,157,158],[106,148],[106,136,141],[50,54,106],[106,116,140],[106,116,135,141],[106,116,136,140,141,144],[106,116,120,136,148,151],[106,116,120],[106,116,148],[106,135,147,148],[106,135,136,140,147,148,175],[106,116,135,136,142,143,190,291,293],[106,116,143,145,155,157,180,197,280,290,292],[54,106,116,136,141,142,143,281,286,289,290,293],[106,120,141,283,284],[106,116,120,135,136,137,141,143,147,285,293],[106,116,135,141,143,281,286,288,293],[106,116,137,190,197],[106,116,137,143,157,287],[106,116,143],[106,116,137,145,157,278,280],[106,116,158,197],[106,175],[106,212,213,214],[106,116],[106,116,256],[50,51,54,106,116],[106,120,282],[106,140,157,177,262],[106,136,140,148,157,177,263],[106,155],[106,157],[106,120],[106,140],[106,138,139],[76,79,105,106,113,336,337,338],[106,248],[106,340],[76,106,113],[106,367],[106,352],[106,356,357,358],[106,355],[106,357],[106,347,353,354,359,362,364,365,366],[106,354,360,361,367],[106,360,363],[106,354,355,360,367],[106,354,367],[106,369],[106,348,349,350,351],[60,106],[63,106],[64,69,97,106],[65,76,77,84,94,105,106],[65,66,76,84,106],[67,106],[68,69,77,85,106],[69,94,102,106],[70,72,76,84,106],[71,106],[72,73,106],[76,106],[74,76,106],[76,77,78,94,105,106],[76,77,78,91,94,97,106],[106,110],[72,79,84,94,105,106],[76,77,79,80,84,94,102,105,106],[79,81,94,102,105,106],[60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112],[76,82,106],[83,105,106],[72,76,84,94,106],[85,106],[86,106],[63,87,106],[88,104,106,110],[89,106],[90,106],[76,91,92,106],[91,93,106,108],[64,76,94,95,96,97,106],[64,94,96,106],[94,95,106],[97,106],[98,106],[76,100,101,106],[100,101,106],[69,84,94,102,106],[103,106],[84,104,106],[64,79,90,105,106],[69,106],[94,106,107],[106,108],[106,109],[64,69,76,78,87,94,105,106,108,110],[94,106,111],[79,94,106,113],[106,377,416],[106,377,401,416],[106,416],[106,377],[106,377,402,416],[106,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415],[106,402,416],[106,306],[106,113],[106,419],[76,94,106,113],[106,147,170],[106,248,249,250,251,252,253],[54,106,132,133],[54,106,132,133,258],[106,248,249],[54,106,132],[106,132,196],[106,195],[106,120,147,162,164],[106,120,147,164],[106,120,161,163],[106,165],[106,120,147],[106,116,136,140,177,180],[106,116,137,149,155,177,180,184],[106,136,140,215,216,220,223],[106,136,137,150],[106,116,145,155,179,180,184,199,216,217,218,219,224],[106,116,135,137,140,215,216,224],[106,116,136,137,145,150,155,177,184],[106,116,145,150,155,177,180,184,199,221,222],[106,116,136,137,145,177,184],[106,116,137,143,145,149,150,153,155,157,177,179,180,184,197,199],[106,116,135,136,137,140,145,157,177,179,184,210],[106,136],[106,116,135,137,155,179,184],[106,116,135,137,140,145,155,179,180,182,184],[106,116,135,141,142,143,145,149,150,153,157,159,175,177,179,181,185,197,199,200,201,202,203,204,205,207,208,209,211,224],[106,116,137,177,180,206],[106,116,135,137,141,145,149],[106,116,135,137,155,184],[106,135,136,137,140,157,177,179,180],[106,116,135,136,140,148],[51,106],[58,106],[58,106,190,191,192],[53,54,106],[53,106],[52,106],[106,186],[50,106],[50,55,106],[56,106],[54,55,56,106,187,188,189],[50,51,52,53,106,186],[50,51,52,106],[106,303],[106,274,275,276,277],[106,275],[106,275,276],[106,308],[106,126],[106,119],[106,119,126],[106,119,120],[106,119,121,122,123,124,125],[106,194],[106,190,193],[54,106,116,117,130,132,133,140,159,160,226,230,233,234,238,243,244,245,246],[54,59,106,116,117,127,128,129,130,133,159,173,226,230,234,235,239,241,242],[54,106,116,127,128,235],[106,116,240,243],[106,243],[106,116,133,135,160,190,225,230,231,233],[50,54,106,116,127,133,134,135,137,159,160,230,232,247],[54,59,106,127,128],[54,57,59,106,115,127,129,130,131,233],[54,106,116,117,130,135,140,141,155,159,160,164,166,167,168,169,171,179,226,227,228,229,233,234,247],[54,76,106,116,117,130,135,160,168,195,233],[76,106,116,134,172,173,225],[76,106,134],[106,116,117,118,129],[106,114],[54,59,106,116,117,130,140,159,160,168,173,226,230,233,234,235,237],[54,106,116,117,130,160,168,230,233,234,236],[54,59,106,127],[54,59,106,127,128,159,173,226],[76,106,319,325],[76,106,316],[54,59,106,116,133,228,230,233,234,247,254,255,257,259,296,297,299,300,301],[54,106,116,159,234,247,254,259,294,299,300,304],[54,106,159,228,234,247,254,257,259,294,299,301,307,309],[106,302,312],[54,57,59,106,116,133,195,226,228,230,234,243,254,257,259,295,296,299,300,311],[106,116,239,254,257],[106,116,241,254,257],[106,116,241,242,254,257],[106,254,296,299],[54,106,159,164,166,226,230,234,247,254,255,294,299,307,311],[106,302,305,310,312,314,315,320],[54,106,116,195,244,254,299,300,322],[76,106,316,319],[54,59,106,115,127,234,254,295,299,322,330,331],[54,57,59,106,234,235,254,299,330],[54,57,106,115,129,130,234,240,254,295],[106,247,259,294,296],[106,159,225,257,263,264,273,293],[106,254,296,299,317,318],[106,254],[54,57,106,295,298],[106,116,257],[54,76,106,116,133,140,159,179,226,230,233,234,247,257,259,260,294,295],[54,106,133,234,254],[106,168,226,234,238,254,296,299,300],[54,106,116,234,237,254,296,299,300,311],[54,116,132,133,140,159,160,226,230,233,234,238,243,244],[54,116,127,128,129,133,159,226,230,234,239,241],[54,116,127,128,235],[116,240,243],[243],[116,133,135,160,190,225,230,233],[50,54,116,127,133,134,135,137,159,160,230,232],[54,127,128],[54,127,129,233],[120,126],[54,116,135,140,141,155,159,160,179,226,233,234,247],[54,76,116,135,160,233],[76,116,134,172,225],[76,134],[116,117,129],[54,116,140,159,160,226,230,233,235,237],[54,116,160,230,233,234],[54,127],[54,127,128,159,226],[76],[302,312],[302,305,310,312,314,315,320],[296],[159,225],[54],[116],[116,133,140,159,230,233,234,247],[133,234]],"referencedMap":[[423,1],[424,2],[428,3],[422,4],[433,5],[429,6],[432,7],[430,6],[427,8],[437,9],[438,6],[439,10],[431,6],[435,11],[434,12],[440,6],[426,6],[425,6],[441,6],[444,13],[445,6],[443,6],[446,14],[436,15],[447,4],[448,16],[442,6],[206,6],[265,6],[269,17],[267,18],[270,19],[272,20],[273,21],[271,22],[268,23],[266,24],[180,25],[200,26],[199,27],[198,28],[280,29],[279,28],[179,30],[178,6],[150,31],[143,32],[158,33],[256,6],[159,34],[148,28],[146,6],[157,35],[156,28],[142,36],[116,37],[141,38],[149,39],[145,40],[153,41],[152,28],[144,42],[155,43],[154,28],[175,44],[174,28],[177,45],[176,28],[131,6],[136,6],[135,6],[137,6],[292,46],[293,47],[291,48],[284,24],[285,49],[286,50],[289,51],[290,52],[288,53],[287,54],[281,55],[205,56],[117,6],[264,57],[215,58],[214,59],[212,59],[213,59],[257,60],[260,61],[283,62],[282,24],[263,63],[262,64],[261,28],[167,65],[173,66],[231,67],[139,68],[140,69],[138,68],[339,70],[249,71],[253,71],[251,71],[248,6],[341,72],[342,6],[337,6],[343,6],[344,6],[345,6],[346,73],[347,6],[368,74],[353,75],[359,76],[357,6],[356,77],[358,78],[367,79],[362,80],[364,81],[365,82],[366,83],[360,6],[361,83],[363,83],[355,83],[354,6],[370,84],[349,6],[348,6],[351,75],[352,85],[350,75],[371,6],[372,6],[373,6],[340,6],[60,86],[61,86],[63,87],[64,88],[65,89],[66,90],[67,91],[68,92],[69,93],[70,94],[71,95],[72,96],[73,96],[75,97],[74,98],[76,97],[77,99],[78,100],[62,101],[112,6],[79,102],[80,103],[81,104],[113,105],[82,106],[83,107],[84,108],[85,109],[86,110],[87,111],[88,112],[89,113],[90,114],[91,115],[92,115],[93,116],[94,117],[96,118],[95,119],[97,120],[98,121],[99,6],[100,122],[101,123],[102,124],[103,125],[104,126],[105,127],[106,128],[107,129],[108,130],[109,131],[110,132],[111,133],[374,6],[375,6],[338,134],[376,6],[401,135],[402,136],[377,137],[380,137],[399,135],[400,135],[390,135],[389,138],[387,135],[382,135],[395,135],[393,135],[397,135],[381,135],[394,135],[398,135],[383,135],[384,135],[396,135],[378,135],[385,135],[386,135],[388,135],[392,135],[403,139],[391,135],[379,135],[416,140],[415,6],[410,139],[412,141],[411,139],[404,139],[405,139],[407,139],[409,139],[413,141],[414,141],[406,141],[408,141],[307,142],[306,6],[316,6],[417,6],[418,6],[369,6],[114,143],[419,6],[420,144],[421,145],[134,6],[170,6],[171,146],[254,147],[331,6],[245,6],[258,148],[259,149],[252,71],[250,150],[255,6],[274,6],[133,151],[197,152],[196,153],[132,6],[298,6],[228,6],[246,6],[163,154],[161,155],[164,156],[229,6],[219,155],[166,157],[165,6],[151,6],[162,158],[147,6],[227,6],[236,6],[336,97],[208,159],[203,160],[224,161],[216,24],[218,162],[220,163],[217,164],[222,165],[223,166],[221,167],[204,168],[211,169],[210,170],[202,171],[185,172],[182,24],[225,173],[207,174],[209,175],[201,176],[181,177],[184,178],[183,28],[58,179],[322,180],[59,180],[330,180],[51,6],[193,181],[52,182],[189,6],[54,183],[186,184],[192,185],[191,185],[55,186],[56,187],[50,6],[57,188],[190,189],[187,190],[53,191],[188,6],[311,6],[304,192],[278,193],[276,194],[277,195],[275,6],[303,6],[309,196],[308,6],[160,6],[119,197],[123,198],[124,199],[121,200],[122,198],[126,201],[125,197],[169,6],[9,6],[10,6],[13,6],[12,6],[2,6],[14,6],[15,6],[16,6],[17,6],[18,6],[19,6],[20,6],[21,6],[3,6],[4,6],[25,6],[22,6],[23,6],[24,6],[26,6],[27,6],[28,6],[5,6],[29,6],[30,6],[31,6],[32,6],[6,6],[36,6],[33,6],[34,6],[35,6],[37,6],[7,6],[38,6],[43,6],[44,6],[39,6],[40,6],[41,6],[42,6],[8,6],[48,6],[45,6],[46,6],[47,6],[1,6],[49,6],[11,6],[120,6],[118,6],[295,202],[195,202],[194,203],[247,204],[168,6],[243,205],[239,206],[241,207],[242,208],[232,209],[233,210],[129,211],[234,212],[127,24],[230,213],[244,214],[226,215],[172,216],[130,217],[240,6],[115,218],[238,219],[237,220],[128,221],[235,222],[326,223],[325,224],[302,225],[305,226],[310,227],[313,228],[312,229],[327,230],[328,231],[329,232],[315,233],[314,234],[321,235],[323,236],[320,237],[332,238],[333,239],[324,240],[318,6],[317,241],[294,242],[319,243],[301,244],[299,245],[300,246],[296,247],[297,248],[334,249],[335,250]],"exportedModulesMap":[[423,1],[424,2],[428,3],[422,4],[433,5],[429,6],[432,7],[430,6],[427,8],[437,9],[438,6],[439,10],[431,6],[435,11],[434,12],[440,6],[426,6],[425,6],[441,6],[444,13],[445,6],[443,6],[446,14],[436,15],[447,4],[448,16],[442,6],[206,6],[265,6],[269,17],[267,18],[270,19],[272,20],[273,21],[271,22],[268,23],[266,24],[180,25],[200,26],[199,27],[198,28],[280,29],[279,28],[179,30],[178,6],[150,31],[143,32],[158,33],[256,6],[159,34],[148,28],[146,6],[157,35],[156,28],[142,36],[116,37],[141,38],[149,39],[145,40],[153,41],[152,28],[144,42],[155,43],[154,28],[175,44],[174,28],[177,45],[176,28],[131,6],[136,6],[135,6],[137,6],[292,46],[293,47],[291,48],[284,24],[285,49],[286,50],[289,51],[290,52],[288,53],[287,54],[281,55],[205,56],[117,6],[264,57],[215,58],[214,59],[212,59],[213,59],[257,60],[260,61],[283,62],[282,24],[263,63],[262,64],[261,28],[167,65],[173,66],[231,67],[139,68],[140,69],[138,68],[339,70],[249,71],[253,71],[251,71],[248,6],[341,72],[342,6],[337,6],[343,6],[344,6],[345,6],[346,73],[347,6],[368,74],[353,75],[359,76],[357,6],[356,77],[358,78],[367,79],[362,80],[364,81],[365,82],[366,83],[360,6],[361,83],[363,83],[355,83],[354,6],[370,84],[349,6],[348,6],[351,75],[352,85],[350,75],[371,6],[372,6],[373,6],[340,6],[60,86],[61,86],[63,87],[64,88],[65,89],[66,90],[67,91],[68,92],[69,93],[70,94],[71,95],[72,96],[73,96],[75,97],[74,98],[76,97],[77,99],[78,100],[62,101],[112,6],[79,102],[80,103],[81,104],[113,105],[82,106],[83,107],[84,108],[85,109],[86,110],[87,111],[88,112],[89,113],[90,114],[91,115],[92,115],[93,116],[94,117],[96,118],[95,119],[97,120],[98,121],[99,6],[100,122],[101,123],[102,124],[103,125],[104,126],[105,127],[106,128],[107,129],[108,130],[109,131],[110,132],[111,133],[374,6],[375,6],[338,134],[376,6],[401,135],[402,136],[377,137],[380,137],[399,135],[400,135],[390,135],[389,138],[387,135],[382,135],[395,135],[393,135],[397,135],[381,135],[394,135],[398,135],[383,135],[384,135],[396,135],[378,135],[385,135],[386,135],[388,135],[392,135],[403,139],[391,135],[379,135],[416,140],[415,6],[410,139],[412,141],[411,139],[404,139],[405,139],[407,139],[409,139],[413,141],[414,141],[406,141],[408,141],[307,142],[306,6],[316,6],[417,6],[418,6],[369,6],[114,143],[419,6],[420,144],[421,145],[134,6],[170,6],[171,146],[254,147],[331,6],[245,6],[258,148],[259,149],[252,71],[250,150],[255,6],[274,6],[133,151],[197,152],[196,153],[132,6],[298,6],[228,6],[246,6],[163,154],[161,155],[164,156],[229,6],[219,155],[166,157],[165,6],[151,6],[162,158],[147,6],[227,6],[236,6],[336,97],[208,159],[203,160],[224,161],[216,24],[218,162],[220,163],[217,164],[222,165],[223,166],[221,167],[204,168],[211,169],[210,170],[202,171],[185,172],[182,24],[225,173],[207,174],[209,175],[201,176],[181,177],[184,178],[183,28],[58,179],[322,180],[59,180],[330,180],[51,6],[193,181],[52,182],[189,6],[54,183],[186,184],[192,185],[191,185],[55,186],[56,187],[50,6],[57,188],[190,189],[187,190],[53,191],[188,6],[311,6],[304,192],[278,193],[276,194],[277,195],[275,6],[303,6],[309,196],[308,6],[160,6],[119,197],[123,198],[124,199],[121,200],[122,198],[126,201],[125,197],[169,6],[9,6],[10,6],[13,6],[12,6],[2,6],[14,6],[15,6],[16,6],[17,6],[18,6],[19,6],[20,6],[21,6],[3,6],[4,6],[25,6],[22,6],[23,6],[24,6],[26,6],[27,6],[28,6],[5,6],[29,6],[30,6],[31,6],[32,6],[6,6],[36,6],[33,6],[34,6],[35,6],[37,6],[7,6],[38,6],[43,6],[44,6],[39,6],[40,6],[41,6],[42,6],[8,6],[48,6],[45,6],[46,6],[47,6],[1,6],[49,6],[11,6],[120,6],[118,6],[295,202],[195,202],[194,203],[247,251],[243,252],[239,253],[241,254],[242,255],[232,256],[233,257],[129,258],[234,259],[127,260],[230,261],[244,262],[226,263],[172,264],[130,265],[238,266],[237,267],[128,268],[235,269],[325,270],[313,271],[321,272],[317,273],[294,274],[299,275],[300,276],[296,277],[297,278]],"semanticDiagnosticsPerFile":[423,424,428,422,433,429,432,430,427,437,438,439,431,435,434,440,426,425,441,444,445,443,446,436,447,448,442,206,265,269,267,270,272,273,271,268,266,180,200,199,198,280,279,179,178,150,143,158,256,159,148,146,157,156,142,116,141,149,145,153,152,144,155,154,175,174,177,176,131,136,135,137,292,293,291,284,285,286,289,290,288,287,281,205,117,264,215,214,212,213,257,260,283,282,263,262,261,167,173,231,139,140,138,339,249,253,251,248,341,342,337,343,344,345,346,347,368,353,359,357,356,358,367,362,364,365,366,360,361,363,355,354,370,349,348,351,352,350,371,372,373,340,60,61,63,64,65,66,67,68,69,70,71,72,73,75,74,76,77,78,62,112,79,80,81,113,82,83,84,85,86,87,88,89,90,91,92,93,94,96,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,374,375,338,376,401,402,377,380,399,400,390,389,387,382,395,393,397,381,394,398,383,384,396,378,385,386,388,392,403,391,379,416,415,410,412,411,404,405,407,409,413,414,406,408,307,306,316,417,418,369,114,419,420,421,134,170,171,254,331,245,258,259,252,250,255,274,133,197,196,132,298,228,246,163,161,164,229,219,166,165,151,162,147,227,236,336,208,203,224,216,218,220,217,222,223,221,204,211,210,202,185,182,225,207,209,201,181,184,183,58,322,59,330,51,193,52,189,54,186,192,191,55,56,50,57,190,187,53,188,311,304,278,276,277,275,303,309,308,160,119,123,124,121,122,126,125,169,9,10,13,12,2,14,15,16,17,18,19,20,21,3,4,25,22,23,24,26,27,28,5,29,30,31,32,6,36,33,34,35,37,7,38,43,44,39,40,41,42,8,48,45,46,47,1,49,11,120,118,295,195,194,247,168,243,239,241,242,232,233,129,234,127,230,244,226,172,130,240,115,238,237,128,235,326,325,302,305,310,313,312,327,328,329,315,314,321,323,320,332,333,324,318,317,294,319,301,299,300,296,297,334,335],"latestChangedDtsFile":"./test/wantmanager/msg-queue.spec.d.ts"},"version":"4.9.5"}
\ No newline at end of file
diff --git a/node_modules/ipfs-bitswap/src/http-bitswap.ts b/node_modules/ipfs-bitswap/src/http-bitswap.ts
new file mode 100644
index 0000000..feb3257
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/http-bitswap.ts
@@ -0,0 +1,207 @@
+
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { AbortOptions } from '@libp2p/interfaces'
+import type { CID, Version } from 'multiformats'
+import type { ProgressOptions } from 'progress-events'
+import type { Bitswap, WantListEntry, BitswapWantBlockProgressEvents, Ledger, Stats, BitswapOptions } from './index.js'
+import type { Blockstore } from 'interface-blockstore'
+import type { BitswapNetworkNotifyProgressEvents } from './network.js'
+import { fetchViaDuplex } from '@marcopolo_/libp2p-fetch'
+import type { Libp2p } from 'libp2p'
+
+// TODO: this should be a different protocol id
+const IPFS_GATEWAY_PROTOCOL = '/libp2p-http'
+
+interface WithTimestamp<T> { val: T, timestamp: number }
+
+export interface HttpBitswapOptions {
+  httpOverLibp2pPeersLimit?: number
+  bootstrapHttpOnlyPeers?: string[]
+  bitswapOptions?: BitswapOptions
+}
+
+export const defaultOptions = {
+  httpOverLibp2pPeersLimit: 5,
+  bootstrapHttpOnlyPeers: [],
+  bitswapOptions: {}
+}
+
+export class HttpBitswap implements Bitswap {
+  stats: Stats = this.innerBitswap.stats
+  peers: PeerId[] = this.innerBitswap.peers
+  httpOverLibp2pPeersLimit: number
+  httpOverLibp2pPeers: Array<WithTimestamp<PeerId>> = []
+  httpOnlyPeers: string[] = []
+
+  constructor (private readonly libp2p: Libp2p, private readonly innerBitswap: Bitswap, private readonly blockstore: Blockstore, options: HttpBitswapOptions = defaultOptions) {
+    this.httpOverLibp2pPeersLimit = options.httpOverLibp2pPeersLimit ?? defaultOptions.httpOverLibp2pPeersLimit
+    const bootstrapHttpOnlyPeers = options.bootstrapHttpOnlyPeers ?? defaultOptions.bootstrapHttpOnlyPeers
+
+    libp2p.peerStore.addEventListener('change:protocols', (event) => {
+      const { peerId, protocols } = event.detail
+      if (protocols.includes(IPFS_GATEWAY_PROTOCOL)) {
+        this.newHttpOverLibp2pPeer(peerId)
+      }
+    })
+
+    this.httpOnlyPeers = [...bootstrapHttpOnlyPeers]
+  }
+
+  public newHttpOnlyPeer (url: string): void {
+    this.httpOnlyPeers.push(url)
+  }
+
+  private newHttpOverLibp2pPeer (peerId: PeerId): void {
+    if (this.httpOverLibp2pPeers.length < this.httpOverLibp2pPeersLimit) {
+      this.httpOverLibp2pPeers.push({ val: peerId, timestamp: Date.now() })
+      return
+    }
+
+    let i = 0
+    let minTimestamp = this.httpOverLibp2pPeers[0].timestamp
+    let minIndex = 0
+    for (const { timestamp, val } of this.httpOverLibp2pPeers) {
+      if (val === peerId) {
+        return // Already have this peer
+      }
+      if (timestamp < minTimestamp) {
+        minTimestamp = timestamp
+        minIndex = i
+      }
+      i++
+    }
+    this.httpOverLibp2pPeers[minIndex] = { val: peerId, timestamp: Date.now() }
+  }
+
+  wantlistForPeer (peerId: PeerId): Map<string, WantListEntry> {
+    return this.innerBitswap.wantlistForPeer(peerId)
+  }
+
+  ledgerForPeer (peerId: PeerId): Ledger | undefined {
+    return this.innerBitswap.ledgerForPeer(peerId)
+  }
+
+  unwant (cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void {
+    this.innerBitswap.unwant(cids)
+  }
+
+  cancelWants (cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void {
+    this.innerBitswap.cancelWants(cids)
+  }
+
+  getWantlist (): IterableIterator<[string, WantListEntry]> {
+    return this.innerBitswap.getWantlist()
+  }
+
+  notify (cid: CID<unknown, number, number, Version>, block: Uint8Array, options?: ProgressOptions<BitswapNetworkNotifyProgressEvents>): void {
+    this.innerBitswap.notify(cid, block, options)
+  }
+
+  async want (
+    cid: CID<unknown, number, number, Version>,
+    options?: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents>
+  ): Promise<Uint8Array> {
+    // Start a bitswap req
+    const abortController = new AbortController()
+    if ((options?.signal) != null) {
+      options.signal.addEventListener('abort', () => { abortController.abort() })
+    }
+    const bitswapWantPromise = this.innerBitswap.want(cid, { ...options, signal: abortController.signal })
+
+    // Start a http req over libp2p
+    const httpOverLibp2pReqs = this.httpOverLibp2pPeers.map(async ({ val: peerId }) => {
+      try {
+        const conn = await this.libp2p.dial(peerId, { signal: options?.signal })
+        {
+          const s = await conn.newStream('/libp2p-http', { signal: options?.signal })
+          const fetch = fetchViaDuplex(s)
+          const resp: Response = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }))
+          if (!resp.ok) {
+          // We don't have the block here, block on the abort signal
+            throw new Error('Not found')
+          }
+        }
+
+        const s = await conn.newStream('/libp2p-http', { signal: options?.signal })
+        const fetch = fetchViaDuplex(s)
+        const resp: Response = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/?format=raw`))
+
+        if (resp.ok) {
+          const block = new Uint8Array(await resp.arrayBuffer())
+          await this.blockstore.put(cid, block)
+          return block
+        }
+        // Otherwise, do nothing and block on the abort signal
+        throw new Error('Not found')
+      } catch (err) {
+        // Wait for the abort so others can provide
+        await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve) })
+        throw err
+      }
+    })
+
+    const httpOnlyReqs = this.httpOnlyPeers.map(async (url) => {
+      try {
+        {
+          // We should be using the Cache-Control header, but this is not a CORS allowed header on some gateways
+          // const resp: Response = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }), { signal: options?.signal })
+          const resp: Response = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD' }), { signal: options?.signal })
+          if (!resp.ok) {
+            throw new Error('Not found')
+          }
+        }
+
+        const resp = await fetch(new Request(`${url}/ipfs/${cid.toString()}/?format=raw`), { signal: options?.signal })
+        if (resp.ok) {
+          const block = new Uint8Array(await resp.arrayBuffer())
+          await this.blockstore.put(cid, block)
+          return block
+        }
+        throw new Error('Not found')
+      } catch (err) {
+        // Wait for the abort so others can provide the block
+        await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve) })
+        throw err
+      }
+    })
+
+    // Wait for the first to finish
+    const block = await Promise.race([
+      bitswapWantPromise,
+      ...httpOverLibp2pReqs,
+      ...httpOnlyReqs
+    ])
+    this.innerBitswap.notify(cid, block)
+
+    abortController.abort()
+    return block
+  }
+
+  isStarted (): boolean {
+    return this.innerBitswap.isStarted()
+  }
+
+  beforeStart? (): void | Promise<void> {
+    return this.innerBitswap.beforeStart?.()
+  }
+
+  start (): void | Promise<void> {
+    return this.innerBitswap.start()
+  }
+
+  afterStart? (): void | Promise<void> {
+    return this.innerBitswap.afterStart?.()
+  }
+
+  beforeStop? (): void | Promise<void> {
+    return this.innerBitswap.beforeStop?.()
+  }
+
+  stop (): void | Promise<void> {
+    return this.innerBitswap.stop()
+  }
+
+  afterStop? (): void | Promise<void> {
+    return this.innerBitswap.afterStop?.()
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/index.ts b/node_modules/ipfs-bitswap/src/index.ts
index a830314..0fd1ad1 100644
--- a/node_modules/ipfs-bitswap/src/index.ts
+++ b/node_modules/ipfs-bitswap/src/index.ts
@@ -10,6 +10,7 @@ import type { AbortOptions } from '@libp2p/interfaces'
 import type { Startable } from '@libp2p/interfaces/startable'
 import type { ProgressEvent, ProgressOptions } from 'progress-events'
 import type { BitswapNetworkNotifyProgressEvents, BitswapNetworkWantProgressEvents } from './network.js'
+import { HttpBitswap, HttpBitswapOptions } from './http-bitswap.js'
 
 export interface WantListEntry {
   cid: CID
@@ -141,3 +142,8 @@ export interface BitswapOptions {
 export const createBitswap = (libp2p: Libp2p, blockstore: Blockstore, options: BitswapOptions = {}): Bitswap => {
   return new DefaultBitswap(libp2p, blockstore, options)
 }
+
+export const createBitswapWithHTTP = (libp2p: Libp2p, blockstore: Blockstore, options: HttpBitswapOptions = {}): Bitswap => {
+  const inner = new DefaultBitswap(libp2p, blockstore, options.bitswapOptions)
+  return new HttpBitswap(libp2p, inner, blockstore, options)
+}
diff --git a/node_modules/ipfs-bitswap/src/src/bitswap.ts b/node_modules/ipfs-bitswap/src/src/bitswap.ts
new file mode 100644
index 0000000..7d1c339
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/bitswap.ts
@@ -0,0 +1,375 @@
+import { WantManager } from './want-manager/index.js'
+import { Network } from './network.js'
+import { DecisionEngine, PeerLedger } from './decision-engine/index.js'
+import { Notifications } from './notifications.js'
+import { logger } from './utils/index.js'
+import { Stats } from './stats/index.js'
+import { anySignal } from 'any-signal'
+import { CID } from 'multiformats/cid'
+import forEach from 'it-foreach'
+import type { BitswapOptions, Bitswap, MultihashHasherLoader, WantListEntry, BitswapWantProgressEvents, BitswapNotifyProgressEvents } from './index.js'
+import type { Libp2p } from '@libp2p/interface-libp2p'
+import type { Blockstore, Pair } from 'interface-blockstore'
+import type { Logger } from '@libp2p/logger'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { BitswapMessage } from './message/index.js'
+import type { AbortOptions } from '@multiformats/multiaddr'
+import type { ProgressOptions } from 'progress-events'
+import type { AwaitIterable } from 'interface-store'
+
+const hashLoader: MultihashHasherLoader = {
+  async getHasher () {
+    throw new Error('Not implemented')
+  }
+}
+
+const defaultOptions: Required<BitswapOptions> = {
+  maxInboundStreams: 32,
+  maxOutboundStreams: 128,
+  incomingStreamTimeout: 30000,
+  hashLoader,
+  statsEnabled: false,
+  statsComputeThrottleTimeout: 1000,
+  statsComputeThrottleMaxQueueSize: 1000
+}
+const statsKeys = [
+  'blocksReceived',
+  'dataReceived',
+  'dupBlksReceived',
+  'dupDataReceived',
+  'blocksSent',
+  'dataSent',
+  'providesBufferLength',
+  'wantListLength',
+  'peerCount'
+]
+
+/**
+ * JavaScript implementation of the Bitswap 'data exchange' protocol
+ * used by IPFS.
+ */
+export class DefaultBitswap implements Bitswap {
+  private readonly _libp2p: Libp2p
+  private readonly _log: Logger
+  private readonly _options: Required<BitswapOptions>
+  public readonly stats: Stats
+  public network: Network
+  public blockstore: Blockstore
+  public engine: DecisionEngine
+  public wm: WantManager
+  public notifications: Notifications
+  private started: boolean
+
+  constructor (libp2p: Libp2p, blockstore: Blockstore, options: BitswapOptions = {}) {
+    this._libp2p = libp2p
+    this._log = logger(this.peerId)
+
+    this._options = Object.assign({}, defaultOptions, options)
+
+    // stats
+    this.stats = new Stats(libp2p, statsKeys, {
+      enabled: this._options.statsEnabled,
+      computeThrottleTimeout: this._options.statsComputeThrottleTimeout,
+      computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize
+    })
+
+    // the network delivers a messages
+    this.network = new Network(libp2p, this, this.stats, {
+      hashLoader: options.hashLoader,
+      maxInboundStreams: options.maxInboundStreams,
+      maxOutboundStreams: options.maxOutboundStreams,
+      incomingStreamTimeout: options.incomingStreamTimeout
+    })
+
+    // local database
+    this.blockstore = blockstore
+
+    this.engine = new DecisionEngine(this.peerId, blockstore, this.network, this.stats, libp2p)
+
+    // handle message sending
+    this.wm = new WantManager(this.peerId, this.network, this.stats, libp2p)
+    this.notifications = new Notifications(this.peerId)
+    this.started = false
+  }
+
+  isStarted (): boolean {
+    return this.started
+  }
+
+  get peerId (): PeerId {
+    return this._libp2p.peerId
+  }
+
+  /**
+   * handle messages received through the network
+   */
+  async _receiveMessage (peerId: PeerId, incoming: BitswapMessage): Promise<void> {
+    try {
+      // Note: this allows the engine to respond to any wants in the message.
+      // Processing of the blocks in the message happens below, after the
+      // blocks have been added to the blockstore.
+      await this.engine.messageReceived(peerId, incoming)
+    } catch (err) {
+      // Log instead of throwing an error so as to process as much as
+      // possible of the message. Currently `messageReceived` does not
+      // throw any errors, but this could change in the future.
+      this._log('failed to receive message', incoming)
+    }
+
+    if (incoming.blocks.size === 0) {
+      return
+    }
+
+    /** @type { { cid: CID, wasWanted: boolean, data: Uint8Array }[] } */
+    const received = []
+
+    for (const [cidStr, data] of incoming.blocks.entries()) {
+      const cid = CID.parse(cidStr)
+
+      received.push({
+        wasWanted: this.wm.wantlist.contains(cid),
+        cid,
+        data
+      })
+    }
+
+    // quickly send out cancels, reduces chances of duplicate block receives
+    this.wm.cancelWants(
+      received
+        .filter(({ wasWanted }) => wasWanted)
+        .map(({ cid }) => cid)
+    )
+
+    await Promise.all(
+      received.map(
+        async ({ cid, wasWanted, data }) => { await this._handleReceivedBlock(peerId, cid, data, wasWanted) }
+      )
+    )
+  }
+
+  async _handleReceivedBlock (peerId: PeerId, cid: CID, data: Uint8Array, wasWanted: boolean): Promise<void> {
+    this._log('received block')
+
+    const has = await this.blockstore.has(cid)
+
+    this._updateReceiveCounters(peerId.toString(), cid, data, has)
+
+    if (!wasWanted) {
+      return
+    }
+
+    await this.put(cid, data)
+  }
+
+  _updateReceiveCounters (peerIdStr: string, cid: CID, data: Uint8Array, exists: boolean): void {
+    this.stats.push(peerIdStr, 'blocksReceived', 1)
+    this.stats.push(peerIdStr, 'dataReceived', data.length)
+
+    if (exists) {
+      this.stats.push(peerIdStr, 'dupBlksReceived', 1)
+      this.stats.push(peerIdStr, 'dupDataReceived', data.length)
+    }
+  }
+
+  /**
+   * handle errors on the receiving channel
+   */
+  _receiveError (err: Error): void {
+    this._log.error('ReceiveError', err)
+  }
+
+  /**
+   * handle new peers
+   */
+  _onPeerConnected (peerId: PeerId): void {
+    this.wm.connected(peerId)
+  }
+
+  /**
+   * handle peers being disconnected
+   */
+  _onPeerDisconnected (peerId: PeerId): void {
+    this.wm.disconnected(peerId)
+    this.engine.peerDisconnected(peerId)
+    this.stats.disconnected(peerId)
+  }
+
+  enableStats (): void {
+    this.stats.enable()
+  }
+
+  disableStats (): void {
+    this.stats.disable()
+  }
+
+  /**
+   * Return the current wantlist for a given `peerId`
+   */
+  wantlistForPeer (peerId: PeerId, _options?: any): Map<string, WantListEntry> {
+    return this.engine.wantlistForPeer(peerId)
+  }
+
+  /**
+   * Return ledger information for a given `peerId`
+   */
+  ledgerForPeer (peerId: PeerId): PeerLedger | undefined {
+    return this.engine.ledgerForPeer(peerId)
+  }
+
+  /**
+   * Fetch a given block by cid. If the block is in the local
+   * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.
+   */
+  async want (cid: CID, options: AbortOptions & ProgressOptions<BitswapWantProgressEvents> = {}): Promise<Uint8Array> {
+    const fetchFromNetwork = async (cid: CID, options: AbortOptions & ProgressOptions<BitswapWantProgressEvents>): Promise<Uint8Array> => {
+      // add it to the want list - n.b. later we will abort the AbortSignal
+      // so no need to remove the blocks from the wantlist after we have it
+      this.wm.wantBlocks([cid], options)
+
+      return await this.notifications.wantBlock(cid, options)
+    }
+
+    let promptedNetwork = false
+
+    const loadOrFetchFromNetwork = async (cid: CID, options: AbortOptions & ProgressOptions<BitswapWantProgressEvents>): Promise<Uint8Array> => {
+      try {
+        // have to await here as we want to handle ERR_NOT_FOUND
+        const block = await this.blockstore.get(cid, options)
+
+        return block
+      } catch (err: any) {
+        if (err.code !== 'ERR_NOT_FOUND') {
+          throw err
+        }
+
+        if (!promptedNetwork) {
+          promptedNetwork = true
+
+          this.network.findAndConnect(cid, options)
+            .catch((err) => { this._log.error(err) })
+        }
+
+        // we don't have the block locally so fetch it from the network
+        return await fetchFromNetwork(cid, options)
+      }
+    }
+
+    // depending on implementation it's possible for blocks to come in while
+    // we do the async operations to get them from the blockstore leading to
+    // a race condition, so register for incoming block notifications as well
+    // as trying to get it from the datastore
+    const controller = new AbortController()
+    const signal = (options.signal != null)
+      ? anySignal([options.signal, controller.signal])
+      : controller.signal
+
+    try {
+      const block = await Promise.race([
+        this.notifications.wantBlock(cid, {
+          ...options,
+          signal
+        }),
+        loadOrFetchFromNetwork(cid, {
+          ...options,
+          signal
+        })
+      ])
+
+      return block
+    } finally {
+      // since we have the block we can now abort any outstanding attempts to
+      // fetch it
+      controller.abort()
+    }
+  }
+
+  /**
+   * Removes the given CIDs from the wantlist independent of any ref counts.
+   *
+   * This will cause all outstanding promises for a given block to reject.
+   *
+   * If you want to cancel the want for a block without doing that, pass an
+   * AbortSignal in to `.get` or `.getMany` and abort it.
+   */
+  unwant (cids: CID[] | CID): void {
+    const cidsArray = Array.isArray(cids) ? cids : [cids]
+
+    this.wm.unwantBlocks(cidsArray)
+    cidsArray.forEach((cid) => { this.notifications.unwantBlock(cid) })
+  }
+
+  /**
+   * Removes the given keys from the want list. This may cause pending promises
+   * for blocks to never resolve.  If you wish these promises to abort instead
+   * call `unwant(cids)` instead.
+   */
+  cancelWants (cids: CID[] | CID): void {
+    this.wm.cancelWants(Array.isArray(cids) ? cids : [cids])
+  }
+
+  /**
+   * Put the given block to the underlying blockstore and
+   * send it to nodes that have it in their wantlist.
+   */
+  async put (cid: CID, block: Uint8Array, _options?: any): Promise<void> {
+    await this.blockstore.put(cid, block)
+    this.notify(cid, block)
+  }
+
+  /**
+   * Put the given blocks to the underlying blockstore and
+   * send it to nodes that have it them their wantlist.
+   */
+  async * putMany (source: Iterable<Pair> | AsyncIterable<Pair>, options?: AbortOptions): AwaitIterable<CID> {
+    yield * this.blockstore.putMany(forEach(source, ({ cid, block }) => {
+      this.notify(cid, block)
+    }), options)
+  }
+
+  /**
+   * Sends notifications about the arrival of a block
+   */
+  notify (cid: CID, block: Uint8Array, options: ProgressOptions<BitswapNotifyProgressEvents> = {}): void {
+    this.notifications.hasBlock(cid, block)
+    this.engine.receivedBlocks([{ cid, block }])
+    // Note: Don't wait for provide to finish before returning
+    this.network.provide(cid, options).catch((err) => {
+      this._log.error('Failed to provide: %s', err.message)
+    })
+  }
+
+  /**
+   * Get the current list of wants
+   */
+  getWantlist (): IterableIterator<[string, WantListEntry]> {
+    return this.wm.wantlist.entries()
+  }
+
+  /**
+   * Get the current list of partners
+   */
+  get peers (): PeerId[] {
+    return this.engine.peers()
+  }
+
+  /**
+   * Start the bitswap node
+   */
+  async start (): Promise<void> {
+    this.wm.start()
+    await this.network.start()
+    this.engine.start()
+    this.started = true
+  }
+
+  /**
+   * Stop the bitswap node
+   */
+  async stop (): Promise<void> {
+    this.stats.stop()
+    this.wm.stop()
+    await this.network.stop()
+    this.engine.stop()
+    this.started = false
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/constants.ts b/node_modules/ipfs-bitswap/src/src/constants.ts
new file mode 100644
index 0000000..13ea31e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/constants.ts
@@ -0,0 +1,9 @@
+const SECOND = 1000
+
+export const maxProvidersPerRequest = 3
+export const providerRequestTimeout = 10 * SECOND
+export const hasBlockTimeout = 15 * SECOND
+export const provideTimeout = 15 * SECOND
+export const kMaxPriority = Math.pow(2, 31) - 1
+export const maxListeners = 1000
+export const wantlistSendDebounceMs = 1
diff --git a/node_modules/ipfs-bitswap/src/src/decision-engine/index.ts b/node_modules/ipfs-bitswap/src/src/decision-engine/index.ts
new file mode 100644
index 0000000..5b4d022
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/decision-engine/index.ts
@@ -0,0 +1,488 @@
+import { CID } from 'multiformats/cid'
+import { base58btc } from 'multiformats/bases/base58'
+import { BitswapMessage as Message } from '../message/index.js'
+import { Wantlist } from '../wantlist/index.js'
+import { Ledger } from './ledger.js'
+import { RequestQueue } from './req-queue.js'
+import { DefaultTaskMerger } from './task-merger.js'
+import { logger } from '../utils/index.js'
+import { trackedMap } from '@libp2p/tracked-map'
+import type { Message as PBMessage } from '../message/message.js'
+import type { BitswapMessageEntry } from '../message/entry.js'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { Blockstore } from 'interface-blockstore'
+import type { Network } from '../network.js'
+import type { Stats } from '../stats/index.js'
+import type { Libp2p } from '@libp2p/interface-libp2p'
+import type { Logger } from '@libp2p/logger'
+import type { WantListEntry } from '../wantlist/entry.js'
+
+export interface TaskMerger {
+  /**
+   * Given the existing tasks with the same topic, does the task add some new
+   * information? Used to decide whether to merge the task or ignore it.
+   */
+  hasNewInfo: (task: Task, tasksWithTopic: Task[]) => boolean
+
+  /**
+   * Merge the information from the task into the existing pending task.
+   */
+  merge: (newTask: Task, existingTask: Task) => void
+}
+
+export interface Task {
+  /**
+   * A name for the Task (like an id but not necessarily unique)
+   */
+  topic: string
+  /**
+   * Priority for the Task (tasks are ordered by priority per peer).
+   */
+  priority: number
+  /**
+   * The size of the task, e.g. the number of bytes in a block.
+   */
+  size: number
+
+  data: TaskData
+}
+
+export interface TaskData {
+  /**
+   * The size of the block, if known (if we don't have the block this is zero)
+   */
+  blockSize: number
+  /**
+   * Indicates if the request is for a block or for a HAVE.
+   */
+  isWantBlock: boolean
+  /**
+   * Indicates if we have the block.
+   */
+  haveBlock: boolean
+  /**
+   * Indicates whether to send a DONT_HAVE response if we don't have the block.
+   * If this is `false` and we don't have the block, we just ignore the
+   * want-block request (useful for discovery where we query lots of peers but
+   * don't want a response unless the peer has the block).
+   */
+  sendDontHave: boolean
+}
+
+const WantType = Message.WantType
+
+// The ideal size of the batched payload. We try to pop this much data off the
+// request queue, but
+// - if there isn't any more data in the queue we send whatever we have
+// - if there are several small items in the queue (eg HAVE response) followed
+//   by one big item (eg a block) that would exceed this target size, we
+//   include the big item in the message
+const TARGET_MESSAGE_SIZE = 16 * 1024
+
+// If the client sends a want-have, and the engine has the corresponding block,
+// we check the size of the block and if it's small enough we send the block
+// itself, rather than sending a HAVE.
+// This constant defines the maximum size up to which we replace a HAVE with
+// a block.
+const MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024
+
+export interface DecisionEngineOptions {
+  targetMessageSize?: number
+  maxSizeReplaceHasWithBlock?: number
+}
+
+export interface PeerLedger {
+  peer: PeerId
+  value: number
+  sent: number
+  recv: number
+  exchanged: number
+}
+
+export class DecisionEngine {
+  private readonly _log: Logger
+  public blockstore: Blockstore
+  public network: Network
+  private readonly _stats: Stats
+  private readonly _opts: Required<DecisionEngineOptions>
+  public ledgerMap: Map<string, Ledger>
+  private _running: boolean
+  public _requestQueue: RequestQueue
+
+  constructor (peerId: PeerId, blockstore: Blockstore, network: Network, stats: Stats, libp2p: Libp2p, opts: DecisionEngineOptions = {}) {
+    this._log = logger(peerId, 'engine')
+    this.blockstore = blockstore
+    this.network = network
+    this._stats = stats
+    this._opts = this._processOpts(opts)
+
+    // A list of of ledgers by their partner id
+    this.ledgerMap = trackedMap({
+      name: 'ipfs_bitswap_ledger_map',
+      metrics: libp2p.metrics
+    })
+    this._running = false
+
+    // Queue of want-have / want-block per peer
+    this._requestQueue = new RequestQueue(DefaultTaskMerger)
+  }
+
+  _processOpts (opts: DecisionEngineOptions): Required<DecisionEngineOptions> {
+    return {
+      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,
+      targetMessageSize: TARGET_MESSAGE_SIZE,
+      ...opts
+    }
+  }
+
+  _scheduleProcessTasks (): void {
+    setTimeout(() => {
+      this._processTasks().catch(err => {
+        this._log.error('error processing stats', err)
+      })
+    })
+  }
+
+  /**
+   * Pull tasks off the request queue and send a message to the corresponding
+   * peer
+   */
+  async _processTasks (): Promise<void> {
+    if (!this._running) {
+      return
+    }
+
+    const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize)
+
+    if (tasks.length === 0) {
+      return
+    }
+
+    // Create a new message
+    const msg = new Message(false)
+
+    // Amount of data in the request queue still waiting to be popped
+    msg.setPendingBytes(pendingSize)
+
+    // Split out want-blocks, want-haves and DONT_HAVEs
+    const blockCids = []
+    const blockTasks = new Map<string, TaskData>()
+    for (const task of tasks) {
+      const cid = CID.parse(task.topic)
+      if (task.data.haveBlock) {
+        if (task.data.isWantBlock) {
+          blockCids.push(cid)
+          blockTasks.set(task.topic, task.data)
+        } else {
+          // Add HAVES to the message
+          msg.addHave(cid)
+        }
+      } else {
+        // Add DONT_HAVEs to the message
+        msg.addDontHave(cid)
+      }
+    }
+
+    const blocks = await this._getBlocks(blockCids)
+    for (const [topic, taskData] of blockTasks) {
+      const cid = CID.parse(topic)
+      const blk = blocks.get(topic)
+      // If the block was found (it has not been removed)
+      if (blk != null) {
+        // Add the block to the message
+        msg.addBlock(cid, blk)
+      } else {
+        // The block was not found. If the client requested DONT_HAVE,
+        // add DONT_HAVE to the message.
+        if (taskData.sendDontHave) {
+          msg.addDontHave(cid)
+        }
+      }
+    }
+
+    // If there's nothing in the message, bail out
+    if (msg.empty) {
+      (peerId != null) && this._requestQueue.tasksDone(peerId, tasks)
+
+      // Trigger the next round of task processing
+      this._scheduleProcessTasks()
+
+      return
+    }
+
+    try {
+      // Send the message
+      (peerId != null) && await this.network.sendMessage(peerId, msg)
+
+      // Peform sent message accounting
+      for (const [cidStr, block] of blocks.entries()) {
+        (peerId != null) && this.messageSent(peerId, CID.parse(cidStr), block)
+      }
+    } catch (err) {
+      this._log.error(err)
+    }
+
+    // Free the tasks up from the request queue
+    (peerId != null) && this._requestQueue.tasksDone(peerId, tasks)
+
+    // Trigger the next round of task processing
+    this._scheduleProcessTasks()
+  }
+
+  wantlistForPeer (peerId: PeerId): Map<string, WantListEntry> {
+    const peerIdStr = peerId.toString()
+    const ledger = this.ledgerMap.get(peerIdStr)
+    return (ledger != null) ? ledger.wantlist.sortedEntries() : new Map()
+  }
+
+  ledgerForPeer (peerId: PeerId): PeerLedger | undefined {
+    const peerIdStr = peerId.toString()
+    const ledger = this.ledgerMap.get(peerIdStr)
+
+    if (ledger == null) {
+      return undefined
+    }
+
+    return {
+      peer: ledger.partner,
+      value: ledger.debtRatio(),
+      sent: ledger.accounting.bytesSent,
+      recv: ledger.accounting.bytesRecv,
+      exchanged: ledger.exchangeCount
+    }
+  }
+
+  peers (): PeerId[] {
+    return Array.from(this.ledgerMap.values()).map((l) => l.partner)
+  }
+
+  /**
+   * Receive blocks either from an incoming message from the network, or from
+   * blocks being added by the client on the localhost (eg IPFS add)
+   */
+  receivedBlocks (blocks: Array<{ cid: CID, block: Uint8Array }>): void {
+    if (blocks.length === 0) {
+      return
+    }
+
+    // For each connected peer, check if it wants the block we received
+    for (const ledger of this.ledgerMap.values()) {
+      for (const { cid, block } of blocks) {
+        // Filter out blocks that we don't want
+        const want = ledger.wantlistContains(cid)
+
+        if (want == null) {
+          continue
+        }
+
+        // If the block is small enough, just send the block, even if the
+        // client asked for a HAVE
+        const blockSize = block.length
+        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)
+
+        let entrySize = blockSize
+        if (!isWantBlock) {
+          entrySize = Message.blockPresenceSize(want.cid)
+        }
+
+        this._requestQueue.pushTasks(ledger.partner, [{
+          topic: want.cid.toString(base58btc),
+          priority: want.priority,
+          size: entrySize,
+          data: {
+            blockSize,
+            isWantBlock,
+            haveBlock: true,
+            sendDontHave: false
+          }
+        }])
+      }
+    }
+
+    this._scheduleProcessTasks()
+  }
+
+  /**
+   * Handle incoming messages
+   */
+  async messageReceived (peerId: PeerId, msg: Message): Promise<void> {
+    const ledger = this._findOrCreate(peerId)
+
+    if (msg.empty) {
+      return
+    }
+
+    // If the message has a full wantlist, clear the current wantlist
+    if (msg.full) {
+      ledger.wantlist = new Wantlist()
+    }
+
+    // Record the amount of block data received
+    this._updateBlockAccounting(msg.blocks, ledger)
+
+    if (msg.wantlist.size === 0) {
+      this._scheduleProcessTasks()
+      return
+    }
+
+    // Clear cancelled wants and add new wants to the ledger
+    const cancels: CID[] = []
+    const wants: BitswapMessageEntry[] = []
+    msg.wantlist.forEach((entry) => {
+      if (entry.cancel) {
+        ledger.cancelWant(entry.cid)
+        cancels.push(entry.cid)
+      } else {
+        ledger.wants(entry.cid, entry.priority, entry.wantType)
+        wants.push(entry)
+      }
+    })
+
+    this._cancelWants(peerId, cancels)
+    await this._addWants(peerId, wants)
+
+    this._scheduleProcessTasks()
+  }
+
+  _cancelWants (peerId: PeerId, cids: CID[]): void {
+    for (const c of cids) {
+      this._requestQueue.remove(c.toString(base58btc), peerId)
+    }
+  }
+
+  async _addWants (peerId: PeerId, wants: BitswapMessageEntry[]): Promise<void> {
+    // Get the size of each wanted block
+    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid))
+
+    const tasks = []
+    for (const want of wants) {
+      const id = want.cid.toString(base58btc)
+      const blockSize = blockSizes.get(id)
+
+      // If the block was not found
+      if (blockSize == null) {
+        // Only add the task to the queue if the requester wants a DONT_HAVE
+        if (want.sendDontHave) {
+          tasks.push({
+            topic: id,
+            priority: want.priority,
+            size: Message.blockPresenceSize(want.cid),
+            data: {
+              isWantBlock: want.wantType === WantType.Block,
+              blockSize: 0,
+              haveBlock: false,
+              sendDontHave: want.sendDontHave
+            }
+          })
+        }
+      } else {
+        // The block was found, add it to the queue
+
+        // If the block is small enough, just send the block, even if the
+        // client asked for a HAVE
+        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)
+
+        // entrySize is the amount of space the entry takes up in the
+        // message we send to the recipient. If we're sending a block, the
+        // entrySize is the size of the block. Otherwise it's the size of
+        // a block presence entry.
+        let entrySize = blockSize
+        if (!isWantBlock) {
+          entrySize = Message.blockPresenceSize(want.cid)
+        }
+
+        tasks.push({
+          topic: id,
+          priority: want.priority,
+          size: entrySize,
+          data: {
+            isWantBlock,
+            blockSize,
+            haveBlock: true,
+            sendDontHave: want.sendDontHave
+          }
+        })
+      }
+
+      this._requestQueue.pushTasks(peerId, tasks)
+    }
+  }
+
+  _sendAsBlock (wantType: PBMessage.Wantlist.WantType, blockSize: number): boolean {
+    return wantType === WantType.Block ||
+      blockSize <= this._opts.maxSizeReplaceHasWithBlock
+  }
+
+  async _getBlockSizes (cids: CID[]): Promise<Map<string, number>> {
+    const blocks = await this._getBlocks(cids)
+    return new Map([...blocks].map(([k, v]) => [k, v.length]))
+  }
+
+  async _getBlocks (cids: CID[]): Promise<Map<string, Uint8Array>> {
+    const res = new Map()
+    await Promise.all(cids.map(async (cid) => {
+      try {
+        const block = await this.blockstore.get(cid)
+        res.set(cid.toString(base58btc), block)
+      } catch (err: any) {
+        if (err.code !== 'ERR_NOT_FOUND') {
+          this._log.error('failed to query blockstore for %s: %s', cid, err)
+        }
+      }
+    }))
+    return res
+  }
+
+  _updateBlockAccounting (blocksMap: Map<string, Uint8Array>, ledger: Ledger): void {
+    for (const block of blocksMap.values()) {
+      this._log('got block (%s bytes)', block.length)
+      ledger.receivedBytes(block.length)
+    }
+  }
+
+  /**
+   * Clear up all accounting things after message was sent
+   */
+  messageSent (peerId: PeerId, cid: CID, block: Uint8Array): void {
+    const ledger = this._findOrCreate(peerId)
+    ledger.sentBytes(block.length)
+    ledger.wantlist.remove(cid)
+  }
+
+  numBytesSentTo (peerId: PeerId): number {
+    return this._findOrCreate(peerId).accounting.bytesSent
+  }
+
+  numBytesReceivedFrom (peerId: PeerId): number {
+    return this._findOrCreate(peerId).accounting.bytesRecv
+  }
+
+  peerDisconnected (peerId: PeerId): void {
+    this.ledgerMap.delete(peerId.toString())
+  }
+
+  _findOrCreate (peerId: PeerId): Ledger {
+    const peerIdStr = peerId.toString()
+    const ledger = this.ledgerMap.get(peerIdStr)
+    if (ledger != null) {
+      return ledger
+    }
+
+    const l = new Ledger(peerId)
+
+    this.ledgerMap.set(peerIdStr, l)
+    if (this._stats != null) {
+      this._stats.push(peerIdStr, 'peerCount', 1)
+    }
+
+    return l
+  }
+
+  start (): void {
+    this._running = true
+  }
+
+  stop (): void {
+    this._running = false
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/decision-engine/ledger.ts b/node_modules/ipfs-bitswap/src/src/decision-engine/ledger.ts
new file mode 100644
index 0000000..18733f4
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/decision-engine/ledger.ts
@@ -0,0 +1,58 @@
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { CID } from 'multiformats/cid'
+import type { Message } from '../message/message.js'
+import type { WantListEntry } from '../wantlist/entry.js'
+import { Wantlist } from '../wantlist/index.js'
+
+export class Ledger {
+  public partner: PeerId
+  public wantlist: Wantlist
+  public exchangeCount: number
+  public accounting: { bytesSent: number, bytesRecv: number }
+  public lastExchange?: number
+
+  constructor (peerId: PeerId) {
+    this.partner = peerId
+    this.wantlist = new Wantlist()
+
+    this.exchangeCount = 0
+
+    this.accounting = {
+      bytesSent: 0,
+      bytesRecv: 0
+    }
+  }
+
+  sentBytes (n: number): void {
+    this.exchangeCount++
+    this.lastExchange = (new Date()).getTime()
+    this.accounting.bytesSent += n
+  }
+
+  receivedBytes (n: number): void {
+    this.exchangeCount++
+    this.lastExchange = (new Date()).getTime()
+    this.accounting.bytesRecv += n
+  }
+
+  wants (cid: CID, priority: number, wantType: Message.Wantlist.WantType): void {
+    this.wantlist.add(cid, priority, wantType)
+  }
+
+  /**
+   * @param {CID} cid
+   * @returns {void}
+   */
+
+  cancelWant (cid: CID): void {
+    this.wantlist.remove(cid)
+  }
+
+  wantlistContains (cid: CID): WantListEntry | undefined {
+    return this.wantlist.get(cid)
+  }
+
+  debtRatio (): number {
+    return (this.accounting.bytesSent / (this.accounting.bytesRecv + 1)) // +1 is to prevent division by zero
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/decision-engine/req-queue.ts b/node_modules/ipfs-bitswap/src/src/decision-engine/req-queue.ts
new file mode 100644
index 0000000..19efc7b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/decision-engine/req-queue.ts
@@ -0,0 +1,352 @@
+import type { PeerId } from '@libp2p/interface-peer-id'
+import { SortedMap } from '../utils/sorted-map.js'
+import type { Task, TaskMerger } from './index.js'
+
+export interface PopTaskResult {
+  peerId?: PeerId
+  tasks: Task[]
+  pendingSize: number
+}
+
+export interface PendingTask {
+  created: number
+  task: Task
+}
+
+/**
+ * The task merger that is used by default.
+ * Assumes that new tasks do not add any information over existing tasks,
+ * and doesn't try to merge.
+ */
+const DefaultTaskMerger: TaskMerger = {
+  hasNewInfo () {
+    return false
+  },
+
+  merge () {}
+}
+
+/**
+ * Queue of requests to be processed by the engine.
+ * The requests from each peer are added to the peer's queue, sorted by
+ * priority.
+ * Tasks are popped in priority order from the best peer - see popTasks()
+ * for more details.
+ */
+export class RequestQueue {
+  private readonly _taskMerger: TaskMerger
+  public _byPeer: SortedMap<string, PeerTasks>
+
+  constructor (taskMerger: TaskMerger = DefaultTaskMerger) {
+    this._taskMerger = taskMerger
+    this._byPeer = new SortedMap([], PeerTasks.compare)
+  }
+
+  /**
+   * Push tasks onto the queue for the given peer
+   */
+  pushTasks (peerId: PeerId, tasks: Task[]): void {
+    let peerTasks = this._byPeer.get(peerId.toString())
+
+    if (peerTasks == null) {
+      peerTasks = new PeerTasks(peerId, this._taskMerger)
+    }
+
+    peerTasks.pushTasks(tasks)
+    this._byPeer.set(peerId.toString(), peerTasks)
+  }
+
+  /**
+   * Choose the peer with the least active work (or if all have the same active
+   * work, the most pending tasks) and pop off the highest priority tasks until
+   * the total size is at least targetMinBytes.
+   * This puts the popped tasks into the "active" state, meaning they are
+   * actively being processed (and cannot be modified).
+   */
+  popTasks (targetMinBytes: number): PopTaskResult {
+    // Get the queue of tasks for the best peer and pop off tasks up to
+    // targetMinBytes
+    const peerTasks = this._head()
+    if (peerTasks === undefined) {
+      return { tasks: [], pendingSize: 0 }
+    }
+
+    const { tasks, pendingSize } = peerTasks.popTasks(targetMinBytes)
+    if (tasks.length === 0) {
+      return { tasks, pendingSize }
+    }
+
+    const peerId = peerTasks.peerId
+    if (peerTasks.isIdle()) {
+      // If there are no more tasks for the peer, free up its memory
+      this._byPeer.delete(peerId.toString())
+    } else {
+      // If there are still tasks remaining, update the sort order of peerTasks
+      // (because it depends on the number of pending tasks)
+      this._byPeer.update(0)
+    }
+
+    return {
+      peerId, tasks, pendingSize
+    }
+  }
+
+  _head (): PeerTasks | undefined {
+    // Shortcut
+    if (this._byPeer.size === 0) {
+      return undefined
+    }
+
+    // eslint-disable-next-line no-unreachable-loop
+    for (const [, v] of this._byPeer) {
+      return v
+    }
+
+    return undefined
+  }
+
+  /**
+   * Remove the task with the given topic for the given peer.
+   */
+  remove (topic: string, peerId: PeerId): void {
+    const peerTasks = this._byPeer.get(peerId.toString())
+    peerTasks?.remove(topic)
+  }
+
+  /**
+   * Called when the tasks for the given peer complete.
+   */
+  tasksDone (peerId: PeerId, tasks: Task[]): void {
+    const peerTasks = this._byPeer.get(peerId.toString())
+    if (peerTasks == null) {
+      return
+    }
+
+    const i = this._byPeer.indexOf(peerId.toString())
+    for (const task of tasks) {
+      peerTasks.taskDone(task)
+    }
+
+    // Marking the tasks as done takes them out of the "active" state, and the
+    // sort order depends on the size of the active tasks, so we need to update
+    // the order.
+    this._byPeer.update(i)
+  }
+}
+
+/**
+ * Queue of tasks for a particular peer, sorted by priority.
+ */
+class PeerTasks {
+  public peerId: PeerId
+  private readonly _taskMerger: TaskMerger
+  private _activeTotalSize: number
+  private readonly _pending: PendingTasks
+  private readonly _active: Set<Task>
+
+  constructor (peerId: PeerId, taskMerger: TaskMerger) {
+    this.peerId = peerId
+    this._taskMerger = taskMerger
+    this._activeTotalSize = 0
+    this._pending = new PendingTasks()
+    this._active = new Set()
+  }
+
+  /**
+   * Push tasks onto the queue
+   */
+  pushTasks (tasks: Task[]): void {
+    for (const t of tasks) {
+      this._pushTask(t)
+    }
+  }
+
+  _pushTask (task: Task): void {
+    // If the new task doesn't add any more information over what we
+    // already have in the active queue, then we can skip the new task
+    if (!this._taskHasMoreInfoThanActiveTasks(task)) {
+      return
+    }
+
+    // If there is already a non-active (pending) task with this topic
+    const existingTask = this._pending.get(task.topic)
+    if (existingTask != null) {
+      // If the new task has a higher priority than the old task,
+      if (task.priority > existingTask.priority) {
+        // Update the priority and the task's position in the queue
+        this._pending.updatePriority(task.topic, task.priority)
+      }
+
+      // Merge the information from the new task into the existing task
+      this._taskMerger.merge(task, existingTask)
+
+      // A task with the topic exists, so we don't need to add
+      // the new task to the queue
+      return
+    }
+
+    // Push the new task onto the queue
+    this._pending.add(task)
+  }
+
+  /**
+   * Indicates whether the new task adds any more information over tasks that are
+   * already in the active task queue
+   */
+  _taskHasMoreInfoThanActiveTasks (task: Task): boolean {
+    const tasksWithTopic = []
+    for (const activeTask of this._active) {
+      if (activeTask.topic === task.topic) {
+        tasksWithTopic.push(activeTask)
+      }
+    }
+
+    // No tasks with that topic, so the new task adds information
+    if (tasksWithTopic.length === 0) {
+      return true
+    }
+
+    return this._taskMerger.hasNewInfo(task, tasksWithTopic)
+  }
+
+  /**
+   * Pop tasks off the queue such that the total size is at least targetMinBytes
+   */
+  popTasks (targetMinBytes: number): PopTaskResult {
+    let size = 0
+    const tasks = []
+
+    // Keep popping tasks until we get up to targetMinBytes (or one item over
+    // targetMinBytes)
+    const pendingTasks = this._pending.tasks()
+    for (let i = 0; i < pendingTasks.length && size < targetMinBytes; i++) {
+      const task = pendingTasks[i]
+      tasks.push(task)
+      size += task.size
+
+      // Move tasks from pending to active
+      this._pending.delete(task.topic)
+      this._activeTotalSize += task.size
+      this._active.add(task)
+    }
+
+    return {
+      tasks, pendingSize: this._pending.totalSize
+    }
+  }
+
+  /**
+   * Called when a task completes.
+   * Note: must be the same reference as returned from popTasks.
+   */
+  taskDone (task: Task): void {
+    if (this._active.has(task)) {
+      this._activeTotalSize -= task.size
+      this._active.delete(task)
+    }
+  }
+
+  /**
+   * Remove pending tasks with the given topic
+   */
+  remove (topic: string): void {
+    this._pending.delete(topic)
+  }
+
+  /**
+   * No work to be done, this PeerTasks object can be freed.
+   */
+  isIdle (): boolean {
+    return this._pending.length === 0 && this._active.size === 0
+  }
+
+  /**
+   * Compare PeerTasks
+   */
+  static compare <Key> (a: [Key, PeerTasks], b: [Key, PeerTasks]): number {
+    // Move peers with no pending tasks to the back of the queue
+    if (a[1]._pending.length === 0) {
+      return 1
+    }
+    if (b[1]._pending.length === 0) {
+      return -1
+    }
+
+    // If the amount of active work is the same
+    if (a[1]._activeTotalSize === b[1]._activeTotalSize) {
+      // Choose the peer with the most pending work
+      return b[1]._pending.length - a[1]._pending.length
+    }
+
+    // Choose the peer with the least amount of active work ("keep peers busy")
+    return a[1]._activeTotalSize - b[1]._activeTotalSize
+  }
+}
+
+/**
+ * Queue of pending tasks for a particular peer, sorted by priority.
+ */
+class PendingTasks {
+  private readonly _tasks: SortedMap<string, PendingTask>
+
+  constructor () {
+    this._tasks = new SortedMap([], this._compare)
+  }
+
+  get length (): number {
+    return this._tasks.size
+  }
+
+  /**
+   * Sum of the size of all pending tasks
+   **/
+  get totalSize (): number {
+    return [...this._tasks.values()].reduce((a, t) => a + t.task.size, 0)
+  }
+
+  get (topic: string): Task | undefined {
+    return this._tasks?.get(topic)?.task
+  }
+
+  add (task: Task): void {
+    this._tasks.set(task.topic, {
+      created: Date.now(),
+      task
+    })
+  }
+
+  delete (topic: string): void {
+    this._tasks.delete(topic)
+  }
+
+  // All pending tasks, in priority order
+  tasks (): Task[] {
+    return [...this._tasks.values()].map(i => i.task)
+  }
+
+  /**
+   * Update the priority of the task with the given topic, and update the order
+   **/
+  updatePriority (topic: string, priority: number): void {
+    const obj = this._tasks.get(topic)
+    if (obj == null) {
+      return
+    }
+
+    const i = this._tasks.indexOf(topic)
+    obj.task.priority = priority
+    this._tasks.update(i)
+  }
+
+  /**
+   * Sort by priority desc then FIFO
+   */
+  _compare (a: [string, PendingTask], b: [string, PendingTask]): number {
+    if (a[1].task.priority === b[1].task.priority) {
+      // FIFO
+      return a[1].created - b[1].created
+    }
+    // Priority high -> low
+    return b[1].task.priority - a[1].task.priority
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/decision-engine/task-merger.ts b/node_modules/ipfs-bitswap/src/src/decision-engine/task-merger.ts
new file mode 100644
index 0000000..0d0a52a
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/decision-engine/task-merger.ts
@@ -0,0 +1,92 @@
+import type { Task } from './index.js'
+
+export const DefaultTaskMerger = {
+  /**
+   * Indicates whether the given task has newer information than the active
+   * tasks with the same topic.
+   *
+   * @param {Task} task
+   * @param {Task[]} tasksWithTopic
+   * @returns {boolean}
+   */
+  hasNewInfo (task: Task, tasksWithTopic: Task[]): boolean {
+    let haveBlock = false
+    let isWantBlock = false
+    for (const existing of tasksWithTopic) {
+      if (existing.data.haveBlock) {
+        haveBlock = true
+      }
+
+      if (existing.data.isWantBlock) {
+        isWantBlock = true
+      }
+    }
+
+    // If there is no active want-block and the new task is a want-block,
+    // the new task is better
+    if (!isWantBlock && task.data.isWantBlock) {
+      return true
+    }
+
+    // If we didn't have the block, and the new task indicates that we now
+    // do have the block, then we must also have size information for the
+    // block, so the new task has new information.
+    if (!haveBlock && task.data.haveBlock) {
+      return true
+    }
+
+    return false
+  },
+
+  /**
+   * Merge the information from the given task into the existing task (with the
+   * same topic)
+   */
+  merge (newTask: Task, existingTask: Task) {
+    // The merge function ignores the topic and priority as these don't change.
+    //
+    // We may receive new information about a want before the want has been
+    // popped from the queue in the following scenarios:
+    //
+    // - Replace want type:
+    //   1. Client sends want-have CID1
+    //   2. Client sends want-block CID1
+    //   In this case we should replace want-have with want-block, including
+    //   updating the task size to be the block size.
+    //
+    // - Replace DONT_HAVE with want:
+    //   1. Client sends want-have CID1 or want-block CID1
+    //   2. Local node doesn't have block for CID1
+    //   3. Local node receives block for CID1 from peer
+    //   In this case we should replace DONT_HAVE with the want, including
+    //   updating the task size and block size.
+    const taskData = newTask.data
+    const existingData = existingTask.data
+
+    // If we didn't have block size information (because we didn't have the
+    // block) and we receive the block from a peer, update the task with the
+    // new block size
+    if (!existingData.haveBlock && taskData.haveBlock) {
+      existingData.haveBlock = taskData.haveBlock
+      existingData.blockSize = taskData.blockSize
+    }
+
+    // If replacing a want-have with a want-block
+    if (!existingData.isWantBlock && taskData.isWantBlock) {
+      // Change the type from want-have to want-block
+      existingData.isWantBlock = true
+      // If the want-have was a DONT_HAVE, or the want-block has a size
+      if (!existingData.haveBlock || taskData.haveBlock) {
+        // Update the entry size
+        existingData.haveBlock = taskData.haveBlock
+        existingTask.size = newTask.size
+      }
+    }
+
+    // If the task is a want-block, make sure the entry size is equal
+    // to the block size (because we will send the whole block)
+    if (existingData.isWantBlock && existingData.haveBlock) {
+      existingTask.size = existingData.blockSize
+    }
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/http-bitswap.ts b/node_modules/ipfs-bitswap/src/src/http-bitswap.ts
new file mode 100644
index 0000000..feb3257
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/http-bitswap.ts
@@ -0,0 +1,207 @@
+
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { AbortOptions } from '@libp2p/interfaces'
+import type { CID, Version } from 'multiformats'
+import type { ProgressOptions } from 'progress-events'
+import type { Bitswap, WantListEntry, BitswapWantBlockProgressEvents, Ledger, Stats, BitswapOptions } from './index.js'
+import type { Blockstore } from 'interface-blockstore'
+import type { BitswapNetworkNotifyProgressEvents } from './network.js'
+import { fetchViaDuplex } from '@marcopolo_/libp2p-fetch'
+import type { Libp2p } from 'libp2p'
+
+// TODO: this should be a different protocol id
+const IPFS_GATEWAY_PROTOCOL = '/libp2p-http'
+
+interface WithTimestamp<T> { val: T, timestamp: number }
+
+export interface HttpBitswapOptions {
+  httpOverLibp2pPeersLimit?: number
+  bootstrapHttpOnlyPeers?: string[]
+  bitswapOptions?: BitswapOptions
+}
+
+export const defaultOptions = {
+  httpOverLibp2pPeersLimit: 5,
+  bootstrapHttpOnlyPeers: [],
+  bitswapOptions: {}
+}
+
+export class HttpBitswap implements Bitswap {
+  stats: Stats = this.innerBitswap.stats
+  peers: PeerId[] = this.innerBitswap.peers
+  httpOverLibp2pPeersLimit: number
+  httpOverLibp2pPeers: Array<WithTimestamp<PeerId>> = []
+  httpOnlyPeers: string[] = []
+
+  constructor (private readonly libp2p: Libp2p, private readonly innerBitswap: Bitswap, private readonly blockstore: Blockstore, options: HttpBitswapOptions = defaultOptions) {
+    this.httpOverLibp2pPeersLimit = options.httpOverLibp2pPeersLimit ?? defaultOptions.httpOverLibp2pPeersLimit
+    const bootstrapHttpOnlyPeers = options.bootstrapHttpOnlyPeers ?? defaultOptions.bootstrapHttpOnlyPeers
+
+    libp2p.peerStore.addEventListener('change:protocols', (event) => {
+      const { peerId, protocols } = event.detail
+      if (protocols.includes(IPFS_GATEWAY_PROTOCOL)) {
+        this.newHttpOverLibp2pPeer(peerId)
+      }
+    })
+
+    this.httpOnlyPeers = [...bootstrapHttpOnlyPeers]
+  }
+
+  public newHttpOnlyPeer (url: string): void {
+    this.httpOnlyPeers.push(url)
+  }
+
+  private newHttpOverLibp2pPeer (peerId: PeerId): void {
+    if (this.httpOverLibp2pPeers.length < this.httpOverLibp2pPeersLimit) {
+      this.httpOverLibp2pPeers.push({ val: peerId, timestamp: Date.now() })
+      return
+    }
+
+    let i = 0
+    let minTimestamp = this.httpOverLibp2pPeers[0].timestamp
+    let minIndex = 0
+    for (const { timestamp, val } of this.httpOverLibp2pPeers) {
+      if (val === peerId) {
+        return // Already have this peer
+      }
+      if (timestamp < minTimestamp) {
+        minTimestamp = timestamp
+        minIndex = i
+      }
+      i++
+    }
+    this.httpOverLibp2pPeers[minIndex] = { val: peerId, timestamp: Date.now() }
+  }
+
+  wantlistForPeer (peerId: PeerId): Map<string, WantListEntry> {
+    return this.innerBitswap.wantlistForPeer(peerId)
+  }
+
+  ledgerForPeer (peerId: PeerId): Ledger | undefined {
+    return this.innerBitswap.ledgerForPeer(peerId)
+  }
+
+  unwant (cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void {
+    this.innerBitswap.unwant(cids)
+  }
+
+  cancelWants (cids: CID<unknown, number, number, Version> | Array<CID<unknown, number, number, Version>>): void {
+    this.innerBitswap.cancelWants(cids)
+  }
+
+  getWantlist (): IterableIterator<[string, WantListEntry]> {
+    return this.innerBitswap.getWantlist()
+  }
+
+  notify (cid: CID<unknown, number, number, Version>, block: Uint8Array, options?: ProgressOptions<BitswapNetworkNotifyProgressEvents>): void {
+    this.innerBitswap.notify(cid, block, options)
+  }
+
+  async want (
+    cid: CID<unknown, number, number, Version>,
+    options?: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents>
+  ): Promise<Uint8Array> {
+    // Start a bitswap req
+    const abortController = new AbortController()
+    if ((options?.signal) != null) {
+      options.signal.addEventListener('abort', () => { abortController.abort() })
+    }
+    const bitswapWantPromise = this.innerBitswap.want(cid, { ...options, signal: abortController.signal })
+
+    // Start a http req over libp2p
+    const httpOverLibp2pReqs = this.httpOverLibp2pPeers.map(async ({ val: peerId }) => {
+      try {
+        const conn = await this.libp2p.dial(peerId, { signal: options?.signal })
+        {
+          const s = await conn.newStream('/libp2p-http', { signal: options?.signal })
+          const fetch = fetchViaDuplex(s)
+          const resp: Response = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }))
+          if (!resp.ok) {
+          // We don't have the block here, block on the abort signal
+            throw new Error('Not found')
+          }
+        }
+
+        const s = await conn.newStream('/libp2p-http', { signal: options?.signal })
+        const fetch = fetchViaDuplex(s)
+        const resp: Response = await fetch(new Request(`https://example.com/ipfs/${cid.toString()}/?format=raw`))
+
+        if (resp.ok) {
+          const block = new Uint8Array(await resp.arrayBuffer())
+          await this.blockstore.put(cid, block)
+          return block
+        }
+        // Otherwise, do nothing and block on the abort signal
+        throw new Error('Not found')
+      } catch (err) {
+        // Wait for the abort so others can provide
+        await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve) })
+        throw err
+      }
+    })
+
+    const httpOnlyReqs = this.httpOnlyPeers.map(async (url) => {
+      try {
+        {
+          // We should be using the Cache-Control header, but this is not a CORS allowed header on some gateways
+          // const resp: Response = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD', headers: { 'Cache-Control': 'only-if-cached' } }), { signal: options?.signal })
+          const resp: Response = await fetch(new Request(`${url}/ipfs/${cid.toString()}/`, { method: 'HEAD' }), { signal: options?.signal })
+          if (!resp.ok) {
+            throw new Error('Not found')
+          }
+        }
+
+        const resp = await fetch(new Request(`${url}/ipfs/${cid.toString()}/?format=raw`), { signal: options?.signal })
+        if (resp.ok) {
+          const block = new Uint8Array(await resp.arrayBuffer())
+          await this.blockstore.put(cid, block)
+          return block
+        }
+        throw new Error('Not found')
+      } catch (err) {
+        // Wait for the abort so others can provide the block
+        await new Promise((resolve) => { options?.signal?.addEventListener('abort', resolve) })
+        throw err
+      }
+    })
+
+    // Wait for the first to finish
+    const block = await Promise.race([
+      bitswapWantPromise,
+      ...httpOverLibp2pReqs,
+      ...httpOnlyReqs
+    ])
+    this.innerBitswap.notify(cid, block)
+
+    abortController.abort()
+    return block
+  }
+
+  isStarted (): boolean {
+    return this.innerBitswap.isStarted()
+  }
+
+  beforeStart? (): void | Promise<void> {
+    return this.innerBitswap.beforeStart?.()
+  }
+
+  start (): void | Promise<void> {
+    return this.innerBitswap.start()
+  }
+
+  afterStart? (): void | Promise<void> {
+    return this.innerBitswap.afterStart?.()
+  }
+
+  beforeStop? (): void | Promise<void> {
+    return this.innerBitswap.beforeStop?.()
+  }
+
+  stop (): void | Promise<void> {
+    return this.innerBitswap.stop()
+  }
+
+  afterStop? (): void | Promise<void> {
+    return this.innerBitswap.afterStop?.()
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/index.ts b/node_modules/ipfs-bitswap/src/src/index.ts
new file mode 100644
index 0000000..0fd1ad1
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/index.ts
@@ -0,0 +1,149 @@
+import { DefaultBitswap } from './bitswap.js'
+import type { Blockstore } from 'interface-blockstore'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { CID } from 'multiformats/cid'
+import type { Message } from './message/message'
+import type { IMovingAverage } from '@vascosantos/moving-average'
+import type { MultihashHasher } from 'multiformats/hashes/interface'
+import type { Libp2p } from '@libp2p/interface-libp2p'
+import type { AbortOptions } from '@libp2p/interfaces'
+import type { Startable } from '@libp2p/interfaces/startable'
+import type { ProgressEvent, ProgressOptions } from 'progress-events'
+import type { BitswapNetworkNotifyProgressEvents, BitswapNetworkWantProgressEvents } from './network.js'
+import { HttpBitswap, HttpBitswapOptions } from './http-bitswap.js'
+
+export interface WantListEntry {
+  cid: CID
+  priority: number
+  wantType: Message.Wantlist.WantType
+  inc: () => void
+  dec: () => void
+  hasRefs: () => boolean
+}
+
+export interface Wantlist {
+  length: number
+  add: (cid: CID, priority: number, wantType: Message.Wantlist.WantType) => void
+  remove: (cid: CID) => void
+  removeForce: (cid: string) => void
+  forEach: (fn: (entry: WantListEntry, key: string) => void) => void
+  sortedEntries: () => Map<string, WantListEntry>
+  contains: (cid: CID) => boolean
+  get: (cid: CID) => WantListEntry
+}
+
+export interface Ledger {
+  peer: PeerId
+  value: number
+  sent: number
+  recv: number
+  exchanged: number
+}
+
+export interface Stat {
+  enable: () => void
+  disable: () => void
+  stop: () => void
+  snapshot: Record<string, bigint>
+  movingAverages: Record<string, Record<number, IMovingAverage>>
+  push: (counter: string, inc: number) => void
+}
+
+export interface Stats {
+  snapshot: Record<string, bigint>
+  movingAverages: Record<string, Record<number, IMovingAverage>>
+  enable: () => void
+  disable: () => void
+  stop: () => void
+  forPeer: (peerId: PeerId | string) => Stat | undefined
+  push: (peer: string, counter: string, inc: number) => void
+}
+
+export type BitswapWantProgressEvents =
+  BitswapWantBlockProgressEvents
+
+export type BitswapNotifyProgressEvents =
+  BitswapNetworkNotifyProgressEvents
+
+export type BitswapWantBlockProgressEvents =
+  ProgressEvent<'bitswap:want-block:unwant', CID> |
+  ProgressEvent<'bitswap:want-block:block', CID> |
+  BitswapNetworkWantProgressEvents
+
+export interface Bitswap extends Startable {
+  /**
+   * Bitswap statistics
+   */
+  stats: Stats
+
+  /**
+   * The peers that we are tracking a ledger for
+   */
+  peers: PeerId[]
+
+  wantlistForPeer: (peerId: PeerId) => Map<string, WantListEntry>
+  ledgerForPeer: (peerId: PeerId) => Ledger | undefined
+  unwant: (cids: CID | CID[]) => void
+  cancelWants: (cids: CID | CID[]) => void
+  getWantlist: () => IterableIterator<[string, WantListEntry]>
+
+  /**
+   * Notify bitswap that a new block is available
+   */
+  notify: (cid: CID, block: Uint8Array, options?: ProgressOptions<BitswapNotifyProgressEvents>) => void
+
+  /**
+   * Retrieve a block from the network
+   */
+  want: (cid: CID, options?: AbortOptions & ProgressOptions<BitswapWantProgressEvents>) => Promise<Uint8Array>
+}
+
+export interface MultihashHasherLoader {
+  getHasher: (codeOrName: number | string) => Promise<MultihashHasher>
+}
+
+export interface BitswapOptions {
+  /**
+   * Whether stats are enabled. Default: false
+   */
+  statsEnabled?: boolean
+
+  /**
+   * Default: 1000
+   */
+  statsComputeThrottleTimeout?: number
+
+  /**
+   * Default: 1000
+   */
+  statsComputeThrottleMaxQueueSize?: number
+
+  /**
+   * Default: 32
+   */
+  maxInboundStreams?: number
+
+  /**
+   * Default: 128
+   */
+  maxOutboundStreams?: number
+
+  /**
+   * Default: 30000
+   */
+  incomingStreamTimeout?: number
+
+  /**
+   * Enables loading esoteric hash functions
+   */
+  hashLoader?: MultihashHasherLoader
+}
+
+export const createBitswap = (libp2p: Libp2p, blockstore: Blockstore, options: BitswapOptions = {}): Bitswap => {
+  return new DefaultBitswap(libp2p, blockstore, options)
+}
+
+export const createBitswapWithHTTP = (libp2p: Libp2p, blockstore: Blockstore, options: HttpBitswapOptions = {}): Bitswap => {
+  const inner = new DefaultBitswap(libp2p, blockstore, options.bitswapOptions)
+  return new HttpBitswap(libp2p, inner, blockstore, options)
+}
diff --git a/node_modules/ipfs-bitswap/src/src/message/entry.ts b/node_modules/ipfs-bitswap/src/src/message/entry.ts
new file mode 100644
index 0000000..2c7e2bd
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/message/entry.ts
@@ -0,0 +1,52 @@
+import { base58btc } from 'multiformats/bases/base58'
+import type { CID } from 'multiformats/cid'
+import type { Message } from './message.js'
+import { WantListEntry } from '../wantlist/entry.js'
+
+export class BitswapMessageEntry {
+  public entry: WantListEntry
+  public cancel: boolean
+  public sendDontHave: boolean
+
+  constructor (cid: CID, priority: number, wantType: Message.Wantlist.WantType, cancel?: boolean, sendDontHave?: boolean) {
+    this.entry = new WantListEntry(cid, priority, wantType)
+    this.cancel = Boolean(cancel)
+    this.sendDontHave = Boolean(sendDontHave)
+  }
+
+  get cid (): CID {
+    return this.entry.cid
+  }
+
+  set cid (cid) {
+    this.entry.cid = cid
+  }
+
+  get priority (): number {
+    return this.entry.priority
+  }
+
+  set priority (val) {
+    this.entry.priority = val
+  }
+
+  get wantType (): Message.Wantlist.WantType {
+    return this.entry.wantType
+  }
+
+  set wantType (val) {
+    this.entry.wantType = val
+  }
+
+  get [Symbol.toStringTag] (): string {
+    const cidStr = this.cid.toString(base58btc)
+    return `BitswapMessageEntry ${cidStr} <cancel: ${this.cancel}, priority: ${this.priority}>`
+  }
+
+  equals (other: BitswapMessageEntry): boolean {
+    return (this.cancel === other.cancel) &&
+           (this.sendDontHave === other.sendDontHave) &&
+           (this.wantType === other.wantType) &&
+           this.entry.equals(other.entry)
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/message/index.ts b/node_modules/ipfs-bitswap/src/src/message/index.ts
new file mode 100644
index 0000000..ad2f29d
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/message/index.ts
@@ -0,0 +1,276 @@
+import { CID } from 'multiformats/cid'
+import { sha256 } from 'multiformats/hashes/sha2'
+import { base58btc } from 'multiformats/bases/base58'
+// @ts-expect-error no types
+import vd from 'varint-decoder'
+import ve from '../utils/varint-encoder.js'
+import { isMapEqual } from '../utils/index.js'
+import { Message } from './message.js'
+import { BitswapMessageEntry as Entry } from './entry.js'
+import { CodeError } from '@libp2p/interfaces/errors'
+import type { MultihashHasherLoader } from '../index.js'
+
+export class BitswapMessage {
+  static Entry = Entry
+
+  static WantType = {
+    Block: Message.Wantlist.WantType.Block,
+    Have: Message.Wantlist.WantType.Have
+  }
+
+  static BlockPresenceType = {
+    Have: Message.BlockPresenceType.Have,
+    DontHave: Message.BlockPresenceType.DontHave
+  }
+
+  static deserialize = async (raw: Uint8Array, hashLoader?: MultihashHasherLoader): Promise<BitswapMessage> => {
+    const decoded = Message.decode(raw)
+
+    const isFull = decoded.wantlist?.full === true
+    const msg = new BitswapMessage(isFull)
+
+    decoded.wantlist?.entries.forEach((entry) => {
+      if (entry.block == null) {
+        return
+      }
+      // note: entry.block is the CID here
+      const cid = CID.decode(entry.block)
+      msg.addEntry(cid, entry.priority ?? 0, entry.wantType, Boolean(entry.cancel), Boolean(entry.sendDontHave))
+    })
+
+    decoded.blockPresences.forEach((blockPresence) => {
+      if (blockPresence.cid == null) {
+        return
+      }
+
+      const cid = CID.decode(blockPresence.cid)
+
+      if (blockPresence.type === BitswapMessage.BlockPresenceType.Have) {
+        msg.addHave(cid)
+      } else {
+        msg.addDontHave(cid)
+      }
+    })
+
+    // Bitswap 1.0.0
+    // decoded.blocks are just the byte arrays
+    if (decoded.blocks.length > 0) {
+      await Promise.all(decoded.blocks.map(async (b) => {
+        const hash = await sha256.digest(b)
+        const cid = CID.createV0(hash)
+        msg.addBlock(cid, b)
+      }))
+      return msg
+    }
+
+    // Bitswap 1.1.0
+    if (decoded.payload.length > 0) {
+      await Promise.all(decoded.payload.map(async (p) => {
+        if (p.prefix == null || p.data == null) {
+          return
+        }
+        const values = vd(p.prefix)
+        const cidVersion = values[0]
+        const multicodec = values[1]
+        const hashAlg = values[2]
+        const hasher = hashAlg === sha256.code ? sha256 : await hashLoader?.getHasher(hashAlg)
+
+        if (hasher == null) {
+          throw new CodeError('Unknown hash algorithm', 'ERR_UNKNOWN_HASH_ALG')
+        }
+
+        // const hashLen = values[3] // We haven't need to use this so far
+        const hash = await hasher.digest(p.data)
+        const cid = CID.create(cidVersion, multicodec, hash)
+        msg.addBlock(cid, p.data)
+      }))
+      msg.setPendingBytes(decoded.pendingBytes)
+      return msg
+    }
+
+    return msg
+  }
+
+  static blockPresenceSize = (cid: CID): number => {
+    // It's ok if this is not exactly right: it's used to estimate the size of
+    // the HAVE / DONT_HAVE on the wire, but when doing that calculation we leave
+    // plenty of padding under the maximum message size.
+    // (It's more important for this to be fast).
+    return cid.bytes.length + 1
+  }
+
+  public full: boolean
+  public wantlist: Map<string, Entry>
+  public blocks: Map<string, Uint8Array>
+  public blockPresences: Map<string, Message.BlockPresenceType>
+  public pendingBytes: number
+
+  constructor (full: boolean) {
+    this.full = full
+    this.wantlist = new Map()
+    this.blocks = new Map()
+    this.blockPresences = new Map()
+    this.pendingBytes = 0
+  }
+
+  get empty (): boolean {
+    return this.blocks.size === 0 &&
+           this.wantlist.size === 0 &&
+           this.blockPresences.size === 0
+  }
+
+  addEntry (cid: CID, priority: number, wantType?: Message.Wantlist.WantType, cancel?: boolean, sendDontHave?: boolean): void {
+    if (wantType == null) {
+      wantType = BitswapMessage.WantType.Block
+    }
+
+    const cidStr = cid.toString(base58btc)
+    const entry = this.wantlist.get(cidStr)
+    if (entry != null) {
+      // Only change priority if want is of the same type
+      if (entry.wantType === wantType) {
+        entry.priority = priority
+      }
+      // Only change from "dont cancel" to "do cancel"
+      if (cancel === true) {
+        entry.cancel = Boolean(cancel)
+      }
+      // Only change from "dont send" to "do send" DONT_HAVE
+      if (sendDontHave === true) {
+        entry.sendDontHave = Boolean(sendDontHave)
+      }
+      // want-block overrides existing want-have
+      if (wantType === BitswapMessage.WantType.Block && entry.wantType === BitswapMessage.WantType.Have) {
+        entry.wantType = wantType
+      }
+    } else {
+      this.wantlist.set(cidStr, new Entry(cid, priority, wantType, cancel, sendDontHave))
+    }
+  }
+
+  addBlock (cid: CID, block: Uint8Array): void {
+    const cidStr = cid.toString(base58btc)
+    this.blocks.set(cidStr, block)
+  }
+
+  addHave (cid: CID): void {
+    const cidStr = cid.toString(base58btc)
+    if (!this.blockPresences.has(cidStr)) {
+      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.Have)
+    }
+  }
+
+  addDontHave (cid: CID): void {
+    const cidStr = cid.toString(base58btc)
+    if (!this.blockPresences.has(cidStr)) {
+      this.blockPresences.set(cidStr, BitswapMessage.BlockPresenceType.DontHave)
+    }
+  }
+
+  cancel (cid: CID): void {
+    const cidStr = cid.toString(base58btc)
+    this.wantlist.delete(cidStr)
+    this.addEntry(cid, 0, BitswapMessage.WantType.Block, true, false)
+  }
+
+  setPendingBytes (size: number): void {
+    this.pendingBytes = size
+  }
+
+  /**
+   * Serializes to Bitswap Message protobuf of
+   * version 1.0.0
+   */
+  serializeToBitswap100 (): Uint8Array {
+    return Message.encode({
+      wantlist: {
+        entries: Array.from(this.wantlist.values()).map((entry) => {
+          return {
+            block: entry.cid.bytes, // cid
+            priority: Number(entry.priority),
+            cancel: Boolean(entry.cancel),
+            wantType: Message.Wantlist.WantType.Block,
+            sendDontHave: false
+          }
+        }),
+        full: Boolean(this.full)
+      },
+      blocks: Array.from(this.blocks.values())
+    })
+  }
+
+  /**
+   * Serializes to Bitswap Message protobuf of
+   * version 1.1.0
+   */
+  serializeToBitswap110 (): Uint8Array {
+    const msg: Message = {
+      wantlist: {
+        entries: Array.from(this.wantlist.values()).map((entry) => {
+          return {
+            block: entry.cid.bytes, // cid
+            priority: Number(entry.priority),
+            wantType: entry.wantType,
+            cancel: Boolean(entry.cancel),
+            sendDontHave: Boolean(entry.sendDontHave)
+          }
+        }),
+        full: Boolean(this.full)
+      },
+      blockPresences: [],
+      payload: [],
+      pendingBytes: this.pendingBytes,
+      blocks: []
+    }
+
+    for (const [cidStr, data] of this.blocks.entries()) {
+      const cid = CID.parse(cidStr)
+      const version = cid.version
+      const codec = cid.code
+      const multihash = cid.multihash.code
+      const digestLength = cid.multihash.digest.length
+      const prefix = ve([
+        version, codec, multihash, digestLength
+      ])
+
+      msg.payload.push({
+        prefix,
+        data
+      })
+    }
+
+    for (const [cidStr, bpType] of this.blockPresences) {
+      msg.blockPresences.push({
+        cid: CID.parse(cidStr).bytes,
+        type: bpType
+      })
+    }
+
+    if (this.pendingBytes > 0) {
+      msg.pendingBytes = this.pendingBytes
+    }
+
+    return Message.encode(msg)
+  }
+
+  equals (other: BitswapMessage): boolean {
+    if (this.full !== other.full ||
+        this.pendingBytes !== other.pendingBytes ||
+        !isMapEqual(this.wantlist, other.wantlist) ||
+        !isMapEqual(this.blocks, other.blocks) ||
+        // @TODO - Is this a bug ?
+        // @ts-expect-error - isMap equals map values to be objects not numbers
+        !isMapEqual(this.blockPresences, other.blockPresences)
+    ) {
+      return false
+    }
+
+    return true
+  }
+
+  get [Symbol.toStringTag] (): string {
+    const list = Array.from(this.wantlist.keys())
+    const blocks = Array.from(this.blocks.keys())
+    return `BitswapMessage <full: ${this.full}, list: ${list}, blocks: ${blocks}>`
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/message/message.proto b/node_modules/ipfs-bitswap/src/src/message/message.proto
new file mode 100644
index 0000000..ea7f165
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/message/message.proto
@@ -0,0 +1,43 @@
+// from https://github.com/ipfs/go-bitswap/blob/master/message/pb/message.proto
+syntax = "proto3";
+
+message Message {
+
+  message Wantlist {
+    enum WantType {
+      Block = 0;
+      Have = 1;
+    }
+
+    message Entry {
+      bytes block = 1;           // the block cid (cidV0 in bitswap 1.0.0, cidV1 in bitswap 1.1.0)
+      int32 priority = 2;        // the priority (normalized). default to 1
+      bool cancel = 3;           // whether this revokes an entry
+      WantType wantType = 4;     // Note: defaults to enum 0, ie Block
+      bool sendDontHave = 5;     // Note: defaults to false
+    }
+
+    repeated Entry entries = 1;  // a list of wantlist entries
+    bool full = 2;               // whether this is the full wantlist. default to false
+  }
+
+  message Block {
+    bytes prefix = 1;            // CID prefix (cid version, multicodec and multihash prefix (type + length)
+    bytes data = 2;
+  }
+
+  enum BlockPresenceType {
+    Have = 0;
+    DontHave = 1;
+  }
+  message BlockPresence {
+    bytes cid = 1;
+    BlockPresenceType type = 2;
+  }
+
+  Wantlist wantlist = 1;
+  repeated bytes blocks = 2;     // used to send Blocks in bitswap 1.0.0
+  repeated Block payload = 3;    // used to send Blocks in bitswap 1.1.0
+  repeated BlockPresence blockPresences = 4;
+  int32 pendingBytes = 5;
+}
diff --git a/node_modules/ipfs-bitswap/src/src/message/message.ts b/node_modules/ipfs-bitswap/src/src/message/message.ts
new file mode 100644
index 0000000..0e7703b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/message/message.ts
@@ -0,0 +1,448 @@
+/* eslint-disable import/export */
+/* eslint-disable complexity */
+/* eslint-disable @typescript-eslint/no-namespace */
+/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */
+/* eslint-disable @typescript-eslint/no-empty-interface */
+
+import { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime'
+import type { Codec } from 'protons-runtime'
+import type { Uint8ArrayList } from 'uint8arraylist'
+
+export interface Message {
+  wantlist?: Message.Wantlist
+  blocks: Uint8Array[]
+  payload: Message.Block[]
+  blockPresences: Message.BlockPresence[]
+  pendingBytes: number
+}
+
+export namespace Message {
+  export interface Wantlist {
+    entries: Message.Wantlist.Entry[]
+    full: boolean
+  }
+
+  export namespace Wantlist {
+    export enum WantType {
+      Block = 'Block',
+      Have = 'Have'
+    }
+
+    enum __WantTypeValues {
+      Block = 0,
+      Have = 1
+    }
+
+    export namespace WantType {
+      export const codec = (): Codec<WantType> => {
+        return enumeration<WantType>(__WantTypeValues)
+      }
+    }
+
+    export interface Entry {
+      block: Uint8Array
+      priority: number
+      cancel: boolean
+      wantType: Message.Wantlist.WantType
+      sendDontHave: boolean
+    }
+
+    export namespace Entry {
+      let _codec: Codec<Entry>
+
+      export const codec = (): Codec<Entry> => {
+        if (_codec == null) {
+          _codec = message<Entry>((obj, w, opts = {}) => {
+            if (opts.lengthDelimited !== false) {
+              w.fork()
+            }
+
+            if ((obj.block != null && obj.block.byteLength > 0)) {
+              w.uint32(10)
+              w.bytes(obj.block)
+            }
+
+            if ((obj.priority != null && obj.priority !== 0)) {
+              w.uint32(16)
+              w.int32(obj.priority)
+            }
+
+            if ((obj.cancel != null && obj.cancel !== false)) {
+              w.uint32(24)
+              w.bool(obj.cancel)
+            }
+
+            if (obj.wantType != null && __WantTypeValues[obj.wantType] !== 0) {
+              w.uint32(32)
+              Message.Wantlist.WantType.codec().encode(obj.wantType, w)
+            }
+
+            if ((obj.sendDontHave != null && obj.sendDontHave !== false)) {
+              w.uint32(40)
+              w.bool(obj.sendDontHave)
+            }
+
+            if (opts.lengthDelimited !== false) {
+              w.ldelim()
+            }
+          }, (reader, length) => {
+            const obj: any = {
+              block: new Uint8Array(0),
+              priority: 0,
+              cancel: false,
+              wantType: WantType.Block,
+              sendDontHave: false
+            }
+
+            const end = length == null ? reader.len : reader.pos + length
+
+            while (reader.pos < end) {
+              const tag = reader.uint32()
+
+              switch (tag >>> 3) {
+                case 1:
+                  obj.block = reader.bytes()
+                  break
+                case 2:
+                  obj.priority = reader.int32()
+                  break
+                case 3:
+                  obj.cancel = reader.bool()
+                  break
+                case 4:
+                  obj.wantType = Message.Wantlist.WantType.codec().decode(reader)
+                  break
+                case 5:
+                  obj.sendDontHave = reader.bool()
+                  break
+                default:
+                  reader.skipType(tag & 7)
+                  break
+              }
+            }
+
+            return obj
+          })
+        }
+
+        return _codec
+      }
+
+      export const encode = (obj: Partial<Entry>): Uint8Array => {
+        return encodeMessage(obj, Entry.codec())
+      }
+
+      export const decode = (buf: Uint8Array | Uint8ArrayList): Entry => {
+        return decodeMessage(buf, Entry.codec())
+      }
+    }
+
+    let _codec: Codec<Wantlist>
+
+    export const codec = (): Codec<Wantlist> => {
+      if (_codec == null) {
+        _codec = message<Wantlist>((obj, w, opts = {}) => {
+          if (opts.lengthDelimited !== false) {
+            w.fork()
+          }
+
+          if (obj.entries != null) {
+            for (const value of obj.entries) {
+              w.uint32(10)
+              Message.Wantlist.Entry.codec().encode(value, w)
+            }
+          }
+
+          if ((obj.full != null && obj.full !== false)) {
+            w.uint32(16)
+            w.bool(obj.full)
+          }
+
+          if (opts.lengthDelimited !== false) {
+            w.ldelim()
+          }
+        }, (reader, length) => {
+          const obj: any = {
+            entries: [],
+            full: false
+          }
+
+          const end = length == null ? reader.len : reader.pos + length
+
+          while (reader.pos < end) {
+            const tag = reader.uint32()
+
+            switch (tag >>> 3) {
+              case 1:
+                obj.entries.push(Message.Wantlist.Entry.codec().decode(reader, reader.uint32()))
+                break
+              case 2:
+                obj.full = reader.bool()
+                break
+              default:
+                reader.skipType(tag & 7)
+                break
+            }
+          }
+
+          return obj
+        })
+      }
+
+      return _codec
+    }
+
+    export const encode = (obj: Partial<Wantlist>): Uint8Array => {
+      return encodeMessage(obj, Wantlist.codec())
+    }
+
+    export const decode = (buf: Uint8Array | Uint8ArrayList): Wantlist => {
+      return decodeMessage(buf, Wantlist.codec())
+    }
+  }
+
+  export interface Block {
+    prefix: Uint8Array
+    data: Uint8Array
+  }
+
+  export namespace Block {
+    let _codec: Codec<Block>
+
+    export const codec = (): Codec<Block> => {
+      if (_codec == null) {
+        _codec = message<Block>((obj, w, opts = {}) => {
+          if (opts.lengthDelimited !== false) {
+            w.fork()
+          }
+
+          if ((obj.prefix != null && obj.prefix.byteLength > 0)) {
+            w.uint32(10)
+            w.bytes(obj.prefix)
+          }
+
+          if ((obj.data != null && obj.data.byteLength > 0)) {
+            w.uint32(18)
+            w.bytes(obj.data)
+          }
+
+          if (opts.lengthDelimited !== false) {
+            w.ldelim()
+          }
+        }, (reader, length) => {
+          const obj: any = {
+            prefix: new Uint8Array(0),
+            data: new Uint8Array(0)
+          }
+
+          const end = length == null ? reader.len : reader.pos + length
+
+          while (reader.pos < end) {
+            const tag = reader.uint32()
+
+            switch (tag >>> 3) {
+              case 1:
+                obj.prefix = reader.bytes()
+                break
+              case 2:
+                obj.data = reader.bytes()
+                break
+              default:
+                reader.skipType(tag & 7)
+                break
+            }
+          }
+
+          return obj
+        })
+      }
+
+      return _codec
+    }
+
+    export const encode = (obj: Partial<Block>): Uint8Array => {
+      return encodeMessage(obj, Block.codec())
+    }
+
+    export const decode = (buf: Uint8Array | Uint8ArrayList): Block => {
+      return decodeMessage(buf, Block.codec())
+    }
+  }
+
+  export enum BlockPresenceType {
+    Have = 'Have',
+    DontHave = 'DontHave'
+  }
+
+  enum __BlockPresenceTypeValues {
+    Have = 0,
+    DontHave = 1
+  }
+
+  export namespace BlockPresenceType {
+    export const codec = (): Codec<BlockPresenceType> => {
+      return enumeration<BlockPresenceType>(__BlockPresenceTypeValues)
+    }
+  }
+
+  export interface BlockPresence {
+    cid: Uint8Array
+    type: Message.BlockPresenceType
+  }
+
+  export namespace BlockPresence {
+    let _codec: Codec<BlockPresence>
+
+    export const codec = (): Codec<BlockPresence> => {
+      if (_codec == null) {
+        _codec = message<BlockPresence>((obj, w, opts = {}) => {
+          if (opts.lengthDelimited !== false) {
+            w.fork()
+          }
+
+          if ((obj.cid != null && obj.cid.byteLength > 0)) {
+            w.uint32(10)
+            w.bytes(obj.cid)
+          }
+
+          if (obj.type != null && __BlockPresenceTypeValues[obj.type] !== 0) {
+            w.uint32(16)
+            Message.BlockPresenceType.codec().encode(obj.type, w)
+          }
+
+          if (opts.lengthDelimited !== false) {
+            w.ldelim()
+          }
+        }, (reader, length) => {
+          const obj: any = {
+            cid: new Uint8Array(0),
+            type: BlockPresenceType.Have
+          }
+
+          const end = length == null ? reader.len : reader.pos + length
+
+          while (reader.pos < end) {
+            const tag = reader.uint32()
+
+            switch (tag >>> 3) {
+              case 1:
+                obj.cid = reader.bytes()
+                break
+              case 2:
+                obj.type = Message.BlockPresenceType.codec().decode(reader)
+                break
+              default:
+                reader.skipType(tag & 7)
+                break
+            }
+          }
+
+          return obj
+        })
+      }
+
+      return _codec
+    }
+
+    export const encode = (obj: Partial<BlockPresence>): Uint8Array => {
+      return encodeMessage(obj, BlockPresence.codec())
+    }
+
+    export const decode = (buf: Uint8Array | Uint8ArrayList): BlockPresence => {
+      return decodeMessage(buf, BlockPresence.codec())
+    }
+  }
+
+  let _codec: Codec<Message>
+
+  export const codec = (): Codec<Message> => {
+    if (_codec == null) {
+      _codec = message<Message>((obj, w, opts = {}) => {
+        if (opts.lengthDelimited !== false) {
+          w.fork()
+        }
+
+        if (obj.wantlist != null) {
+          w.uint32(10)
+          Message.Wantlist.codec().encode(obj.wantlist, w)
+        }
+
+        if (obj.blocks != null) {
+          for (const value of obj.blocks) {
+            w.uint32(18)
+            w.bytes(value)
+          }
+        }
+
+        if (obj.payload != null) {
+          for (const value of obj.payload) {
+            w.uint32(26)
+            Message.Block.codec().encode(value, w)
+          }
+        }
+
+        if (obj.blockPresences != null) {
+          for (const value of obj.blockPresences) {
+            w.uint32(34)
+            Message.BlockPresence.codec().encode(value, w)
+          }
+        }
+
+        if ((obj.pendingBytes != null && obj.pendingBytes !== 0)) {
+          w.uint32(40)
+          w.int32(obj.pendingBytes)
+        }
+
+        if (opts.lengthDelimited !== false) {
+          w.ldelim()
+        }
+      }, (reader, length) => {
+        const obj: any = {
+          blocks: [],
+          payload: [],
+          blockPresences: [],
+          pendingBytes: 0
+        }
+
+        const end = length == null ? reader.len : reader.pos + length
+
+        while (reader.pos < end) {
+          const tag = reader.uint32()
+
+          switch (tag >>> 3) {
+            case 1:
+              obj.wantlist = Message.Wantlist.codec().decode(reader, reader.uint32())
+              break
+            case 2:
+              obj.blocks.push(reader.bytes())
+              break
+            case 3:
+              obj.payload.push(Message.Block.codec().decode(reader, reader.uint32()))
+              break
+            case 4:
+              obj.blockPresences.push(Message.BlockPresence.codec().decode(reader, reader.uint32()))
+              break
+            case 5:
+              obj.pendingBytes = reader.int32()
+              break
+            default:
+              reader.skipType(tag & 7)
+              break
+          }
+        }
+
+        return obj
+      })
+    }
+
+    return _codec
+  }
+
+  export const encode = (obj: Partial<Message>): Uint8Array => {
+    return encodeMessage(obj, Message.codec())
+  }
+
+  export const decode = (buf: Uint8Array | Uint8ArrayList): Message => {
+    return decodeMessage(buf, Message.codec())
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/network.ts b/node_modules/ipfs-bitswap/src/src/network.ts
new file mode 100644
index 0000000..74b6dde
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/network.ts
@@ -0,0 +1,300 @@
+import * as lp from 'it-length-prefixed'
+import { pipe } from 'it-pipe'
+import { createTopology } from '@libp2p/topology'
+import { BitswapMessage as Message } from './message/index.js'
+import * as CONSTANTS from './constants.js'
+import { logger } from './utils/index.js'
+import { TimeoutController } from 'timeout-abort-controller'
+import { abortableSource } from 'abortable-iterator'
+import type { Libp2p } from '@libp2p/interface-libp2p'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { Multiaddr } from '@multiformats/multiaddr'
+import type { MultihashHasherLoader } from './index.js'
+import type { DefaultBitswap } from './bitswap.js'
+import type { Stats } from './stats/index.js'
+import type { Logger } from '@libp2p/logger'
+import type { IncomingStreamData } from '@libp2p/interface-registrar'
+import type { CID } from 'multiformats/cid'
+import type { AbortOptions } from '@libp2p/interfaces'
+import type { Connection } from '@libp2p/interface-connection'
+import type { PeerInfo } from '@libp2p/interface-peer-info'
+import { ProgressEvent, CustomProgressEvent, ProgressOptions } from 'progress-events'
+import take from 'it-take'
+import drain from 'it-drain'
+import map from 'it-map'
+
+export interface Provider {
+  id: PeerId
+  multiaddrs: Multiaddr[]
+}
+
+export type BitswapNetworkProgressEvents =
+  ProgressEvent<'bitswap:network:dial', PeerId>
+
+export type BitswapNetworkWantProgressEvents =
+  ProgressEvent<'bitswap:network:send-wantlist', PeerId> |
+  ProgressEvent<'bitswap:network:send-wantlist:error', { peer: PeerId, error: Error }> |
+  ProgressEvent<'bitswap:network:find-providers', CID> |
+  BitswapNetworkProgressEvents
+
+export type BitswapNetworkNotifyProgressEvents =
+  ProgressEvent<'bitswap:network:provide', CID> |
+  BitswapNetworkProgressEvents
+
+const BITSWAP100 = '/ipfs/bitswap/1.0.0'
+const BITSWAP110 = '/ipfs/bitswap/1.1.0'
+const BITSWAP120 = '/ipfs/bitswap/1.2.0'
+
+const DEFAULT_MAX_INBOUND_STREAMS = 32
+const DEFAULT_MAX_OUTBOUND_STREAMS = 128
+const DEFAULT_INCOMING_STREAM_TIMEOUT = 30000
+
+export interface NetworkOptions {
+  b100Only?: boolean
+  hashLoader?: MultihashHasherLoader
+  maxInboundStreams?: number
+  maxOutboundStreams?: number
+  incomingStreamTimeout?: number
+}
+
+export class Network {
+  private readonly _log: Logger
+  private readonly _libp2p: Libp2p
+  private readonly _bitswap: DefaultBitswap
+  public _protocols: string[]
+  private readonly _stats: Stats
+  private _running: boolean
+  private readonly _hashLoader: MultihashHasherLoader
+  private readonly _maxInboundStreams: number
+  private readonly _maxOutboundStreams: number
+  private readonly _incomingStreamTimeout: number
+  private _registrarIds?: string[]
+
+  constructor (libp2p: Libp2p, bitswap: DefaultBitswap, stats: Stats, options: NetworkOptions = {}) {
+    this._log = logger(libp2p.peerId, 'network')
+    this._libp2p = libp2p
+    this._bitswap = bitswap
+    this._protocols = [BITSWAP100]
+
+    if (options.b100Only !== true) {
+      // Latest bitswap first
+      this._protocols.unshift(BITSWAP110)
+      this._protocols.unshift(BITSWAP120)
+    }
+
+    this._stats = stats
+    this._running = false
+
+    // bind event listeners
+    this._onPeerConnect = this._onPeerConnect.bind(this)
+    this._onPeerDisconnect = this._onPeerDisconnect.bind(this)
+    this._onConnection = this._onConnection.bind(this)
+    this._hashLoader = options.hashLoader ?? {
+      async getHasher () {
+        throw new Error('Not implemented')
+      }
+    }
+    this._maxInboundStreams = options.maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS
+    this._maxOutboundStreams = options.maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS
+    this._incomingStreamTimeout = options.incomingStreamTimeout ?? DEFAULT_INCOMING_STREAM_TIMEOUT
+  }
+
+  async start (): Promise<void> {
+    this._running = true
+    await this._libp2p.handle(this._protocols, this._onConnection, {
+      maxInboundStreams: this._maxInboundStreams,
+      maxOutboundStreams: this._maxOutboundStreams
+    })
+
+    // register protocol with topology
+    const topology = createTopology({
+      onConnect: this._onPeerConnect,
+      onDisconnect: this._onPeerDisconnect
+    })
+
+    /** @type {string[]} */
+    this._registrarIds = []
+
+    for (const protocol of this._protocols) {
+      this._registrarIds.push(await this._libp2p.register(protocol, topology))
+    }
+
+    // All existing connections are like new ones for us
+    this._libp2p.getConnections().forEach(conn => {
+      this._onPeerConnect(conn.remotePeer)
+    })
+  }
+
+  async stop (): Promise<void> {
+    this._running = false
+
+    // Unhandle both, libp2p doesn't care if it's not already handled
+    await this._libp2p.unhandle(this._protocols)
+
+    // unregister protocol and handlers
+    if (this._registrarIds != null) {
+      for (const id of this._registrarIds) {
+        this._libp2p.unregister(id)
+      }
+
+      this._registrarIds = []
+    }
+  }
+
+  /**
+   * Handles both types of incoming bitswap messages
+   */
+  _onConnection (info: IncomingStreamData): void {
+    if (!this._running) {
+      return
+    }
+
+    const { stream, connection } = info
+    const controller = new TimeoutController(this._incomingStreamTimeout)
+
+    Promise.resolve().then(async () => {
+      this._log('incoming new bitswap %s connection from %p', stream.stat.protocol, connection.remotePeer)
+
+      await pipe(
+        abortableSource(stream.source, controller.signal),
+        (source) => lp.decode(source),
+        async (source) => {
+          for await (const data of source) {
+            try {
+              const message = await Message.deserialize(data.subarray(), this._hashLoader)
+              await this._bitswap._receiveMessage(connection.remotePeer, message)
+            } catch (err: any) {
+              this._bitswap._receiveError(err)
+              break
+            }
+
+            // we have received some data so reset the timeout controller
+            controller.reset()
+          }
+        }
+      )
+    })
+      .catch(err => {
+        this._log(err)
+        stream.abort(err)
+      })
+      .finally(() => {
+        controller.clear()
+        stream.close()
+      })
+  }
+
+  _onPeerConnect (peerId: PeerId): void {
+    this._bitswap._onPeerConnected(peerId)
+  }
+
+  _onPeerDisconnect (peerId: PeerId): void {
+    this._bitswap._onPeerDisconnected(peerId)
+  }
+
+  /**
+   * Find providers given a `cid`.
+   */
+  findProviders (cid: CID, options: AbortOptions & ProgressOptions<BitswapNetworkWantProgressEvents> = {}): AsyncIterable<PeerInfo> {
+    options.onProgress?.(new CustomProgressEvent<PeerId>('bitswap:network:find-providers', cid))
+    return this._libp2p.contentRouting.findProviders(cid, options)
+  }
+
+  /**
+   * Find the providers of a given `cid` and connect to them.
+   */
+  async findAndConnect (cid: CID, options?: AbortOptions & ProgressOptions<BitswapNetworkWantProgressEvents>): Promise<void> {
+    await drain(
+      take(
+        map(this.findProviders(cid, options), async provider => await this.connectTo(provider.id, options)
+          .catch(err => {
+            // Prevent unhandled promise rejection
+            this._log.error(err)
+          })),
+        CONSTANTS.maxProvidersPerRequest
+      )
+    )
+      .catch(err => {
+        this._log.error(err)
+      })
+  }
+
+  /**
+   * Tell the network we can provide content for the passed CID
+   */
+  async provide (cid: CID, options: AbortOptions & ProgressOptions<BitswapNetworkNotifyProgressEvents> = {}): Promise<void> {
+    options.onProgress?.(new CustomProgressEvent<PeerId>('bitswap:network:provide', cid))
+    await this._libp2p.contentRouting.provide(cid, options)
+  }
+
+  /**
+   * Connect to the given peer
+   * Send the given msg (instance of Message) to the given peer
+   */
+  async sendMessage (peer: PeerId, msg: Message, options: ProgressOptions<BitswapNetworkWantProgressEvents> = {}): Promise<void> {
+    if (!this._running) throw new Error('network isn\'t running')
+
+    const stringId = peer.toString()
+    this._log('sendMessage to %s', stringId, msg)
+
+    options.onProgress?.(new CustomProgressEvent<PeerId>('bitswap:network:send-wantlist', peer))
+    await this._writeMessage(peer, msg, options)
+
+    this._updateSentStats(peer, msg.blocks)
+  }
+
+  /**
+   * Connects to another peer
+   */
+  async connectTo (peer: PeerId, options: AbortOptions & ProgressOptions<BitswapNetworkProgressEvents> = {}): Promise<Connection> { // eslint-disable-line require-await
+    if (!this._running) {
+      throw new Error('network isn\'t running')
+    }
+
+    options.onProgress?.(new CustomProgressEvent<PeerId>('bitswap:network:dial', peer))
+    return await this._libp2p.dial(peer, options)
+  }
+
+  _updateSentStats (peer: PeerId, blocks: Map<string, Uint8Array>): void {
+    const peerId = peer.toString()
+
+    if (this._stats != null) {
+      for (const block of blocks.values()) {
+        this._stats.push(peerId, 'dataSent', block.length)
+      }
+
+      this._stats.push(peerId, 'blocksSent', blocks.size)
+    }
+  }
+
+  async _writeMessage (peerId: PeerId, msg: Message, options: ProgressOptions<BitswapNetworkWantProgressEvents> = {}): Promise<void> {
+    const stream = await this._libp2p.dialProtocol(peerId, [BITSWAP120, BITSWAP110, BITSWAP100])
+
+    try {
+      /** @type {Uint8Array} */
+      let serialized
+      switch (stream.stat.protocol) {
+        case BITSWAP100:
+          serialized = msg.serializeToBitswap100()
+          break
+        case BITSWAP110:
+        case BITSWAP120:
+          serialized = msg.serializeToBitswap110()
+          break
+        default:
+          throw new Error(`Unknown protocol: ${stream.stat.protocol}`)
+      }
+
+      await pipe(
+        [serialized],
+        (source) => lp.encode(source),
+        stream
+      )
+    } catch (err: any) {
+      options.onProgress?.(new CustomProgressEvent<{ peer: PeerId, error: Error }>('bitswap:network:send-wantlist:error', { peer: peerId, error: err }))
+      this._log(err)
+    } finally {
+      stream.close()
+    }
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/notifications.ts b/node_modules/ipfs-bitswap/src/src/notifications.ts
new file mode 100644
index 0000000..9fbee0e
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/notifications.ts
@@ -0,0 +1,91 @@
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { AbortOptions } from '@libp2p/interfaces'
+import type { Logger } from '@libp2p/logger'
+import { EventEmitter } from 'events'
+import type { CID } from 'multiformats/cid'
+import { CustomProgressEvent, ProgressOptions } from 'progress-events'
+import { toString as uint8ArrayToString } from 'uint8arrays/to-string'
+import * as CONSTANTS from './constants.js'
+import type { BitswapWantBlockProgressEvents } from './index.js'
+import { logger } from './utils/index.js'
+
+const unwantEvent = (cid: CID): string => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`
+
+const blockEvent = (cid: CID): string => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`
+
+export class Notifications extends EventEmitter {
+  private readonly _log: Logger
+
+  /**
+   * Internal module used to track events about incoming blocks,
+   * wants and unwants.
+   */
+  constructor (peerId: PeerId) {
+    super()
+
+    this.setMaxListeners(CONSTANTS.maxListeners)
+
+    this._log = logger(peerId, 'notif')
+  }
+
+  /**
+   * Signal the system that we received `block`.
+   */
+  hasBlock (cid: CID, block: Uint8Array): void {
+    const event = blockEvent(cid)
+    this._log(event)
+    this.emit(event, block)
+  }
+
+  /**
+   * Signal the system that we are waiting to receive the
+   * block associated with the given `cid`.
+   * Returns a Promise that resolves to the block when it is received,
+   * or undefined when the block is unwanted.
+   */
+  async wantBlock (cid: CID, options: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents> = {}): Promise<Uint8Array> {
+    if (cid == null) {
+      throw new Error('Not a valid cid')
+    }
+
+    const blockEvt = blockEvent(cid)
+    const unwantEvt = unwantEvent(cid)
+
+    this._log(`wantBlock:${cid}`)
+
+    return await new Promise((resolve, reject) => {
+      const onUnwant = (): void => {
+        this.removeListener(blockEvt, onBlock)
+
+        options.onProgress?.(new CustomProgressEvent<CID>('bitswap:want-block:unwant', cid))
+        reject(new Error(`Block for ${cid} unwanted`))
+      }
+
+      const onBlock = (data: Uint8Array): void => {
+        this.removeListener(unwantEvt, onUnwant)
+
+        options.onProgress?.(new CustomProgressEvent<CID>('bitswap:want-block:block', cid))
+        resolve(data)
+      }
+
+      this.once(unwantEvt, onUnwant)
+      this.once(blockEvt, onBlock)
+
+      options.signal?.addEventListener('abort', () => {
+        this.removeListener(blockEvt, onBlock)
+        this.removeListener(unwantEvt, onUnwant)
+
+        reject(new Error(`Want for ${cid} aborted`))
+      })
+    })
+  }
+
+  /**
+   * Signal that the block is not wanted anymore
+   */
+  unwantBlock (cid: CID): void {
+    const event = unwantEvent(cid)
+    this._log(event)
+    this.emit(event)
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/stats/index.ts b/node_modules/ipfs-bitswap/src/src/stats/index.ts
new file mode 100644
index 0000000..eb49745
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/stats/index.ts
@@ -0,0 +1,122 @@
+import { EventEmitter } from 'events'
+import { Stat } from './stat.js'
+import { trackedMap } from '@libp2p/tracked-map'
+import type { Libp2p } from 'libp2p'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { IMovingAverage } from '@vascosantos/moving-average'
+
+/**
+ * @typedef {import('multiformats').CID} CID
+ * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId
+ */
+
+export interface StatsOptions {
+  enabled?: boolean
+  computeThrottleTimeout?: number
+  computeThrottleMaxQueueSize?: number
+  movingAverageIntervals?: number[]
+}
+
+const defaultOptions: Required<StatsOptions> = {
+  enabled: false,
+  computeThrottleTimeout: 1000,
+  computeThrottleMaxQueueSize: 1000,
+  movingAverageIntervals: [
+    60 * 1000, // 1 minute
+    5 * 60 * 1000, // 5 minutes
+    15 * 60 * 1000 // 15 minutes
+  ]
+}
+
+export class Stats extends EventEmitter {
+  private readonly _initialCounters: string[]
+  private readonly _options: Required<StatsOptions>
+  private _enabled: boolean
+  private readonly _global: Stat
+  private readonly _peers: Map<string, Stat>
+
+  constructor (libp2p: Libp2p, initialCounters: string[] = [], _options: StatsOptions = defaultOptions) {
+    super()
+
+    const options = Object.assign({}, defaultOptions, _options)
+
+    if (typeof options.computeThrottleTimeout !== 'number') {
+      throw new Error('need computeThrottleTimeout')
+    }
+
+    if (typeof options.computeThrottleMaxQueueSize !== 'number') {
+      throw new Error('need computeThrottleMaxQueueSize')
+    }
+
+    this._initialCounters = initialCounters
+    this._options = options
+    this._enabled = this._options.enabled
+
+    this._global = new Stat(initialCounters, options)
+    this._global.on('update', (stats) => this.emit('update', stats))
+
+    this._peers = trackedMap({
+      name: 'ipfs_bitswap_stats_peers',
+      metrics: libp2p.metrics
+    })
+  }
+
+  enable (): void {
+    this._enabled = true
+    this._options.enabled = true
+    this._global.enable()
+  }
+
+  disable (): void {
+    this._enabled = false
+    this._options.enabled = false
+    this._global.disable()
+  }
+
+  stop (): void {
+    this._enabled = false
+    this._global.stop()
+    for (const peerStat of this._peers) {
+      peerStat[1].stop()
+    }
+  }
+
+  get snapshot (): Record<string, bigint> {
+    return this._global.snapshot
+  }
+
+  get movingAverages (): Record<string, Record<number, IMovingAverage>> {
+    return this._global.movingAverages
+  }
+
+  forPeer (peerId: PeerId | string): Stat | undefined {
+    const peerIdStr = peerId.toString()
+
+    return this._peers.get(peerIdStr)
+  }
+
+  push (peer: string | undefined, counter: string, inc: number): void {
+    if (this._enabled) {
+      this._global.push(counter, inc)
+
+      if (peer != null) {
+        let peerStats = this._peers.get(peer)
+        if (peerStats == null) {
+          peerStats = new Stat(this._initialCounters, this._options)
+          this._peers.set(peer, peerStats)
+        }
+
+        peerStats.push(counter, inc)
+      }
+    }
+  }
+
+  disconnected (peer: PeerId): void {
+    const peerId = peer.toString()
+    const peerStats = this._peers.get(peerId)
+    if (peerStats != null) {
+      peerStats.stop()
+      this._peers.delete(peerId)
+    }
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/stats/stat.ts b/node_modules/ipfs-bitswap/src/src/stats/stat.ts
new file mode 100644
index 0000000..a170d69
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/stats/stat.ts
@@ -0,0 +1,154 @@
+import { EventEmitter } from 'events'
+import MovingAverage, { IMovingAverage } from '@vascosantos/moving-average'
+
+export type Op = [string, number, number]
+
+export interface StatOptions {
+  enabled: boolean
+  computeThrottleTimeout: number
+  computeThrottleMaxQueueSize: number
+  movingAverageIntervals: number[]
+}
+
+export class Stat extends EventEmitter {
+  private readonly _options: StatOptions
+  private readonly _queue: Op[]
+  private _stats: Record<string, bigint>
+  private _frequencyLastTime: number
+  private _frequencyAccumulators: Record<string, number>
+  private _movingAverages: Record<string, Record<number, IMovingAverage>>
+  private _enabled: boolean
+  private _timeout?: ReturnType<typeof setTimeout>
+
+  constructor (initialCounters: string[], options: StatOptions) {
+    super()
+
+    this._options = options
+    this._queue = []
+    this._stats = {}
+    this._frequencyLastTime = Date.now()
+    this._frequencyAccumulators = {}
+    this._movingAverages = {}
+
+    this._update = this._update.bind(this)
+
+    initialCounters.forEach((key) => {
+      this._stats[key] = BigInt(0)
+      this._movingAverages[key] = {}
+      this._options.movingAverageIntervals.forEach((interval) => {
+        const ma = this._movingAverages[key][interval] = MovingAverage(interval)
+        ma.push(this._frequencyLastTime, 0)
+      })
+    })
+
+    this._enabled = this._options.enabled
+  }
+
+  enable (): void {
+    this._enabled = true
+  }
+
+  disable (): void {
+    this._enabled = false
+  }
+
+  stop (): void {
+    if (this._timeout != null) {
+      clearTimeout(this._timeout)
+    }
+  }
+
+  get snapshot (): Record<string, bigint> {
+    return Object.assign({}, this._stats)
+  }
+
+  get movingAverages (): Record<string, Record<number, IMovingAverage>> {
+    return Object.assign({}, this._movingAverages)
+  }
+
+  push (counter: string, inc: number): void {
+    if (this._enabled) {
+      this._queue.push([counter, inc, Date.now()])
+      this._resetComputeTimeout()
+    }
+  }
+
+  _resetComputeTimeout (): void {
+    if (this._timeout != null) {
+      clearTimeout(this._timeout)
+    }
+    this._timeout = setTimeout(this._update, this._nextTimeout())
+  }
+
+  _nextTimeout (): number {
+    // calculate the need for an update, depending on the queue length
+    const urgency = this._queue.length / this._options.computeThrottleMaxQueueSize
+    return Math.max(this._options.computeThrottleTimeout * (1 - urgency), 0)
+  }
+
+  _update (): void {
+    this._timeout = undefined
+
+    if (this._queue.length > 0) {
+      let last
+      while (this._queue.length > 0) {
+        const op = last = this._queue.shift()
+        ;(op != null) && this._applyOp(op)
+      }
+
+      (last != null) && this._updateFrequency(last[2]) // contains timestamp of last op
+
+      this.emit('update', this._stats)
+    }
+  }
+
+  _updateFrequency (latestTime: number): void {
+    const timeDiff = latestTime - this._frequencyLastTime
+
+    if (timeDiff > 0) {
+      Object.keys(this._stats).forEach((key) => {
+        this._updateFrequencyFor(key, timeDiff, latestTime)
+      })
+    }
+
+    this._frequencyLastTime = latestTime
+  }
+
+  _updateFrequencyFor (key: string, timeDiffMS: number, latestTime: number): void {
+    const count = this._frequencyAccumulators[key] ?? 0
+    this._frequencyAccumulators[key] = 0
+    const hz = (count / timeDiffMS) * 1000
+
+    let movingAverages = this._movingAverages[key]
+    if (movingAverages == null) {
+      movingAverages = this._movingAverages[key] = {}
+    }
+    this._options.movingAverageIntervals.forEach((movingAverageInterval) => {
+      let movingAverage = movingAverages[movingAverageInterval]
+      if (movingAverage == null) {
+        movingAverage = movingAverages[movingAverageInterval] = MovingAverage(movingAverageInterval)
+      }
+      movingAverage.push(latestTime, hz)
+    })
+  }
+
+  _applyOp (op: Op): void {
+    const key = op[0]
+    const inc = op[1]
+
+    if (typeof inc !== 'number') {
+      throw new Error(`invalid increment number: ${inc}`)
+    }
+
+    if (!Object.prototype.hasOwnProperty.call(this._stats, key)) {
+      this._stats[key] = BigInt(0)
+    }
+
+    this._stats[key] = BigInt(this._stats[key]) + BigInt(inc)
+
+    if (this._frequencyAccumulators[key] == null) {
+      this._frequencyAccumulators[key] = 0
+    }
+    this._frequencyAccumulators[key] += inc
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/utils/index.ts b/node_modules/ipfs-bitswap/src/src/utils/index.ts
new file mode 100644
index 0000000..5f091f5
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/utils/index.ts
@@ -0,0 +1,108 @@
+import type { PeerId } from '@libp2p/interface-peer-id'
+import { logger as createLogger, Logger } from '@libp2p/logger'
+import { equals as uint8ArrayEquals } from 'uint8arrays/equals'
+import { BitswapMessageEntry } from '../message/entry.js'
+
+/**
+ * Creates a logger for the given subsystem
+ */
+export const logger = (id: PeerId, subsystem?: string): Logger => {
+  const name = ['bitswap']
+  if (subsystem != null) {
+    name.push(subsystem)
+  }
+  if (id != null) {
+    name.push(`${id.toString().slice(0, 8)}`)
+  }
+
+  return createLogger(name.join(':'))
+}
+
+export const includesWith = <X, T> (pred: (x: X, t: T) => boolean, x: X, list: T[]): boolean => {
+  let idx = 0
+  const len = list.length
+  while (idx < len) {
+    if (pred(x, list[idx])) {
+      return true
+    }
+    idx += 1
+  }
+  return false
+}
+
+export const uniqWith = <T> (pred: (x: T, t: T) => boolean, list: T[]): T[] => {
+  let idx = 0
+  const len = list.length
+  const result = []
+  let item
+
+  while (idx < len) {
+    item = list[idx]
+    if (!includesWith(pred, item, result)) {
+      result[result.length] = item
+    }
+    idx += 1
+  }
+  return result
+}
+
+export const groupBy = <K extends string | number | symbol, V> (pred: (v: V) => K, list: V[]): Record<K, V[]> => {
+  // @ts-expect-error cannot use {} as record with these key types?
+  const output: Record<K, V[]> = {}
+
+  return list.reduce((acc, v) => {
+    const k = pred(v)
+
+    if (acc[k] != null) {
+      acc[k].push(v)
+    } else {
+      acc[k] = [v]
+    }
+    return acc
+  }, output)
+}
+
+export const pullAllWith = <T, E> (pred: (a: T, b: E) => boolean, list: T[], values: E[]): T[] => {
+  return list.filter(i => {
+    return !includesWith(pred, i, values)
+  })
+}
+
+export const sortBy = <T> (fn: (v: T) => number, list: T[]): T[] => {
+  return Array.prototype.slice.call(list, 0).sort((a, b) => {
+    const aa = fn(a)
+    const bb = fn(b)
+    return aa < bb ? -1 : aa > bb ? 1 : 0
+  })
+}
+
+/**
+ * Is equal for Maps of BitswapMessageEntry or Uint8Arrays
+ */
+export const isMapEqual = (a: Map<string, Uint8Array | BitswapMessageEntry>, b: Map<string, Uint8Array | BitswapMessageEntry>): boolean => {
+  if (a.size !== b.size) {
+    return false
+  }
+
+  for (const [key, valueA] of a) {
+    const valueB = b.get(key)
+
+    if (valueB === undefined) {
+      return false
+    }
+
+    // TODO: revisit this
+
+    // Support Blocks
+    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {
+      return false
+    }
+
+    // Support BitswapMessageEntry
+    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {
+      return false
+    }
+  }
+
+  return true
+}
diff --git a/node_modules/ipfs-bitswap/src/src/utils/sorted-map.ts b/node_modules/ipfs-bitswap/src/src/utils/sorted-map.ts
new file mode 100644
index 0000000..824a23f
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/utils/sorted-map.ts
@@ -0,0 +1,173 @@
+
+/**
+ * SortedMap is a Map whose iterator order can be defined by the user
+ */
+export class SortedMap<Key, Value> extends Map<Key, Value> {
+  private readonly _cmp: (a: [Key, Value], b: [Key, Value]) => number
+  private _keys: Key[]
+
+  constructor (entries?: Array<[Key, Value]>, cmp?: (a: [Key, Value], b: [Key, Value]) => number) {
+    super()
+
+    this._cmp = cmp ?? this._defaultSort
+    this._keys = []
+
+    for (const [k, v] of entries ?? []) {
+      this.set(k, v)
+    }
+  }
+
+  /**
+   * Call update to update the position of the key when it should change.
+   * For example if the compare function sorts by the priority field, and the
+   * priority changes, call update.
+   * Call indexOf() to get the index _before_ the change happens.
+   */
+  update (i: number): void {
+    if (i < 0 || i >= this._keys.length) {
+      return
+    }
+
+    const k = this._keys[i]
+    this._keys.splice(i, 1)
+    const newIdx = this._find(k)
+    this._keys.splice(newIdx, 0, k)
+  }
+
+  set (k: Key, v: Value): this {
+    // If the key is already in the map, remove it from the ordering and
+    // re-insert it below
+    if (this.has(k)) {
+      const i = this.indexOf(k)
+      this._keys.splice(i, 1)
+    }
+
+    // Update / insert the k/v into the map
+    super.set(k, v)
+
+    // Find the correct position of the newly inserted k/v in the order
+    const i = this._find(k)
+    this._keys.splice(i, 0, k)
+
+    return this
+  }
+
+  clear (): void {
+    super.clear()
+    this._keys = []
+  }
+
+  delete (k: Key): boolean {
+    if (!this.has(k)) {
+      return false
+    }
+
+    const i = this.indexOf(k)
+    this._keys.splice(i, 1)
+    return super.delete(k)
+  }
+
+  indexOf (k: Key): number {
+    if (!this.has(k)) {
+      return -1
+    }
+
+    const i = this._find(k)
+    if (this._keys[i] === k) {
+      return i
+    }
+
+    // There may be more than one key with the same ordering
+    // eg { k1: <priority 5>, k2: <priority 5> }
+    // so scan outwards until the key matches
+    for (let j = 1; j < this._keys.length; j++) {
+      if (this._keys[i + j] === k) return i + j
+      if (this._keys[i - j] === k) return i - j
+    }
+
+    return -1 // should never happen for existing key
+  }
+
+  _find (k: Key): number {
+    let lower = 0
+    let upper = this._keys.length
+    while (lower < upper) {
+      const pivot = (lower + upper) >>> 1 // lower + (upper - lower) / 2
+      const cmp = this._kCmp(this._keys[pivot], k)
+      // console.log(`  _find ${lower}:${upper}[${pivot}] ${cmp}`)
+      if (cmp < 0) { // pivot < k
+        lower = pivot + 1
+      } else if (cmp > 0) { // pivot > k
+        upper = pivot
+      } else { // pivot == k
+        return pivot
+      }
+    }
+    return lower
+  }
+
+  * keys (): IterableIterator<Key> {
+    for (const k of this._keys) {
+      yield k
+    }
+
+    return undefined
+  }
+
+  * values (): IterableIterator<Value> {
+    for (const k of this._keys) {
+      // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is
+      // incompatible with `Value`. Typechecker can't that this contains values
+      // for all the `_keys`. ts(2322)
+      yield this.get(k)
+    }
+
+    return undefined
+  }
+
+  * entries (): IterableIterator<[Key, Value]> {
+    for (const k of this._keys) {
+      // @ts-expect-error - return of `this.get(k)` is `Value|undefined` which is
+      // incompatible with `Value`. Typechecker can't that this contains values
+      // for all the `_keys`. ts(2322)
+      yield [k, this.get(k)]
+    }
+
+    return undefined
+  }
+
+  * [Symbol.iterator] (): IterableIterator<[Key, Value]> {
+    yield * this.entries()
+  }
+
+  // @ts-expect-error - Callback in Map forEach is (V, K, Map<K, V>) => void
+  forEach (cb: (entry: [Key, Value]) => void, thisArg: SortedMap<Key, Value> = this): void {
+    if (cb == null) {
+      return
+    }
+
+    for (const k of this._keys) {
+      const val = this.get(k)
+
+      if (val == null) {
+        throw new Error('Value cannot be undefined')
+      }
+
+      cb.apply(thisArg, [[k, val]])
+    }
+  }
+
+  _defaultSort (a: [Key, Value], b: [Key, Value]): 0 | 1 | -1 {
+    if (a[0] < b[0]) return -1
+    if (b[0] < a[0]) return 1
+    return 0
+  }
+
+  _kCmp (a: Key, b: Key): number {
+    return this._cmp(
+      // @ts-expect-error - get may return undefined
+      [a, this.get(a)],
+      [b, this.get(b)]
+    )
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/utils/varint-encoder.ts b/node_modules/ipfs-bitswap/src/src/utils/varint-encoder.ts
new file mode 100644
index 0000000..3fd6f8b
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/utils/varint-encoder.ts
@@ -0,0 +1,20 @@
+import * as varint from 'varint'
+
+function varintEncoder (buf: number[]): Uint8Array {
+  let out = new Uint8Array(buf.reduce((acc, curr) => {
+    // @ts-expect-error types are wrong
+    return acc + varint.default.encodingLength(curr) // eslint-disable-line @typescript-eslint/restrict-plus-operands
+  }, 0))
+  let offset = 0
+
+  for (const num of buf) {
+    out = varint.encode(num, out, offset)
+
+    // @ts-expect-error types are wrong
+    offset += varint.default.encodingLength(num) // eslint-disable-line @typescript-eslint/restrict-plus-operands
+  }
+
+  return out
+}
+
+export default varintEncoder
diff --git a/node_modules/ipfs-bitswap/src/src/want-manager/index.ts b/node_modules/ipfs-bitswap/src/src/want-manager/index.ts
new file mode 100644
index 0000000..4f0207c
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/want-manager/index.ts
@@ -0,0 +1,150 @@
+
+import { BitswapMessage as Message } from '../message/index.js'
+import { Wantlist } from '../wantlist/index.js'
+import * as CONSTANTS from '../constants.js'
+import { MsgQueue } from './msg-queue.js'
+import { logger } from '../utils/index.js'
+import { base58btc } from 'multiformats/bases/base58'
+import { trackedMap } from '@libp2p/tracked-map'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { Network } from '../network.js'
+import type { Stats } from '../stats/index.js'
+import type { Libp2p } from '@libp2p/interface-libp2p'
+import type { Logger } from '@libp2p/logger'
+import type { CID } from 'multiformats/cid'
+import type { AbortOptions } from '@multiformats/multiaddr'
+import type { ProgressOptions } from 'progress-events'
+import type { BitswapWantBlockProgressEvents } from '../index.js'
+
+export class WantManager {
+  private readonly peers: Map<string, MsgQueue>
+  public wantlist: Wantlist
+  public network: Network
+  private readonly _peerId: PeerId
+  private readonly _log: Logger
+
+  constructor (peerId: PeerId, network: Network, stats: Stats, libp2p: Libp2p) {
+    this.peers = trackedMap({
+      name: 'ipfs_bitswap_want_manager_peers',
+      metrics: libp2p.metrics
+    })
+    this.wantlist = new Wantlist(stats, libp2p)
+    this.network = network
+    this._peerId = peerId
+    this._log = logger(peerId, 'want')
+  }
+
+  _addEntries (cids: CID[], cancel: boolean, force?: boolean, options: ProgressOptions<BitswapWantBlockProgressEvents> = {}): void {
+    const entries = cids.map((cid, i) => {
+      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)
+    })
+
+    entries.forEach((e) => {
+      // add changes to our wantlist
+      if (e.cancel) {
+        if (force === true) {
+          this.wantlist.removeForce(e.cid.toString(base58btc))
+        } else {
+          this.wantlist.remove(e.cid)
+        }
+      } else {
+        this._log('adding to wantlist')
+        // TODO: Figure out the wantType
+        // @ts-expect-error - requires wantType
+        this.wantlist.add(e.cid, e.priority)
+      }
+    })
+
+    // broadcast changes
+    for (const p of this.peers.values()) {
+      p.addEntries(entries, options)
+    }
+  }
+
+  _startPeerHandler (peerId: PeerId): MsgQueue | undefined {
+    let mq = this.peers.get(peerId.toString())
+
+    if (mq != null) {
+      mq.refcnt++
+      return
+    }
+
+    mq = new MsgQueue(this._peerId, peerId, this.network)
+
+    // new peer, give them the full wantlist
+    const fullwantlist = new Message(true)
+
+    for (const entry of this.wantlist.entries()) {
+      fullwantlist.addEntry(entry[1].cid, entry[1].priority)
+    }
+
+    mq.addMessage(fullwantlist)
+
+    this.peers.set(peerId.toString(), mq)
+    return mq
+  }
+
+  _stopPeerHandler (peerId: PeerId): void {
+    const mq = this.peers.get(peerId.toString())
+
+    if (mq == null) {
+      return
+    }
+
+    mq.refcnt--
+    if (mq.refcnt > 0) {
+      return
+    }
+
+    this.peers.delete(peerId.toString())
+  }
+
+  /**
+   * add all the cids to the wantlist
+   */
+  wantBlocks (cids: CID[], options: AbortOptions & ProgressOptions<BitswapWantBlockProgressEvents> = {}): void {
+    this._addEntries(cids, false, false, options)
+
+    options.signal?.addEventListener('abort', () => {
+      this.cancelWants(cids)
+    })
+  }
+
+  /**
+   * Remove blocks of all the given keys without respecting refcounts
+   */
+  unwantBlocks (cids: CID[]): void {
+    this._log('unwant blocks: %s', cids.length)
+    this._addEntries(cids, true, true)
+  }
+
+  /**
+   * Cancel wanting all of the given keys
+   */
+  cancelWants (cids: CID[]): void {
+    this._log('cancel wants: %s', cids.length)
+    this._addEntries(cids, true)
+  }
+
+  /**
+   * Returns a list of all currently connected peers
+   */
+  connectedPeers (): string[] {
+    return Array.from(this.peers.keys())
+  }
+
+  connected (peerId: PeerId): void {
+    this._startPeerHandler(peerId)
+  }
+
+  disconnected (peerId: PeerId): void {
+    this._stopPeerHandler(peerId)
+  }
+
+  start (): void {
+  }
+
+  stop (): void {
+    this.peers.forEach((mq) => { this.disconnected(mq.peerId) })
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/want-manager/msg-queue.ts b/node_modules/ipfs-bitswap/src/src/want-manager/msg-queue.ts
new file mode 100644
index 0000000..62f9822
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/want-manager/msg-queue.ts
@@ -0,0 +1,73 @@
+import debounce from 'just-debounce-it'
+import { BitswapMessage as Message } from '../message/index.js'
+import { logger } from '../utils/index.js'
+import { wantlistSendDebounceMs } from '../constants.js'
+import type { PeerId } from '@libp2p/interface-peer-id'
+import type { BitswapNetworkWantProgressEvents, Network } from '../network.js'
+import type { CID } from 'multiformats/cid'
+import type { Logger } from '@libp2p/logger'
+import type { ProgressOptions } from 'progress-events'
+import type { BitswapWantBlockProgressEvents } from '../index.js'
+
+export class MsgQueue {
+  public peerId: PeerId
+  public refcnt: number
+  private readonly network: Network
+  private _entries: Array<{ cid: CID, priority: number, cancel?: boolean }>
+  private readonly _log: Logger
+
+  constructor (selfPeerId: PeerId, otherPeerId: PeerId, network: Network) {
+    this.peerId = otherPeerId
+    this.network = network
+    this.refcnt = 1
+    this._entries = []
+    this._log = logger(selfPeerId, 'msgqueue')
+    this.sendEntries = debounce(this.sendEntries.bind(this), wantlistSendDebounceMs)
+  }
+
+  addMessage (msg: Message, options: ProgressOptions<BitswapNetworkWantProgressEvents> = {}): void {
+    if (msg.empty) {
+      return
+    }
+
+    void this.send(msg, options)
+  }
+
+  addEntries (entries: Array<{ cid: CID, priority: number }>, options: ProgressOptions<BitswapWantBlockProgressEvents> = {}): void {
+    this._entries = this._entries.concat(entries)
+    this.sendEntries(options)
+  }
+
+  sendEntries (options: ProgressOptions<BitswapWantBlockProgressEvents> = {}): void {
+    if (this._entries.length === 0) {
+      return
+    }
+
+    const msg = new Message(false)
+    this._entries.forEach((entry) => {
+      if (entry.cancel === true) {
+        msg.cancel(entry.cid)
+      } else {
+        msg.addEntry(entry.cid, entry.priority)
+      }
+    })
+    this._entries = []
+    this.addMessage(msg, options)
+  }
+
+  async send (msg: Message, options: ProgressOptions<BitswapNetworkWantProgressEvents> = {}): Promise<void> {
+    try {
+      await this.network.connectTo(this.peerId, options)
+    } catch (err: any) {
+      this._log.error('cant connect to peer %p: %s', this.peerId, err.message)
+      return
+    }
+
+    this._log('sending message to peer %p', this.peerId)
+
+    // Note: Don't wait for sendMessage() to complete
+    this.network.sendMessage(this.peerId, msg, options).catch((err) => {
+      this._log.error('send error', err)
+    })
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/wantlist/entry.ts b/node_modules/ipfs-bitswap/src/src/wantlist/entry.ts
new file mode 100644
index 0000000..f1ed039
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/wantlist/entry.ts
@@ -0,0 +1,45 @@
+
+import { base58btc } from 'multiformats/bases/base58'
+import type { CID } from 'multiformats/cid'
+import type { Message } from '../message/message'
+
+export class WantListEntry {
+  private _refCounter: number
+  public cid: CID
+  public priority: number
+  public wantType: Message.Wantlist.WantType
+
+  constructor (cid: CID, priority: number, wantType: Message.Wantlist.WantType) {
+    // Keep track of how many requests we have for this key
+    this._refCounter = 1
+
+    this.cid = cid
+    this.priority = priority ?? 1
+    this.wantType = wantType
+  }
+
+  inc (): void {
+    this._refCounter += 1
+  }
+
+  dec (): void {
+    this._refCounter = Math.max(0, this._refCounter - 1)
+  }
+
+  hasRefs (): boolean {
+    return this._refCounter > 0
+  }
+
+  // So that console.log prints a nice description of this object
+  get [Symbol.toStringTag] (): string {
+    const cidStr = this.cid.toString(base58btc)
+    return `WantlistEntry <key: ${cidStr}, priority: ${this.priority}, refs: ${this._refCounter}>`
+  }
+
+  equals (other: any): boolean {
+    return (this._refCounter === other._refCounter) &&
+      this.cid.equals(other.cid) &&
+      this.priority === other.priority &&
+      this.wantType === other.wantType
+  }
+}
diff --git a/node_modules/ipfs-bitswap/src/src/wantlist/index.ts b/node_modules/ipfs-bitswap/src/src/wantlist/index.ts
new file mode 100644
index 0000000..4e14822
--- /dev/null
+++ b/node_modules/ipfs-bitswap/src/src/wantlist/index.ts
@@ -0,0 +1,113 @@
+
+import { WantListEntry as Entry } from './entry.js'
+import { base58btc } from 'multiformats/bases/base58'
+import { Message } from '../message/message.js'
+import { trackedMap } from '@libp2p/tracked-map'
+import type { Stats } from '../stats/index.js'
+import type { Libp2p } from '@libp2p/interface-libp2p'
+import type { CID } from 'multiformats/cid'
+
+const WantType = {
+  Block: Message.Wantlist.WantType.Block,
+  Have: Message.Wantlist.WantType.Have
+}
+
+const sortBy = <T> (fn: (v: T) => number, list: T[]): T[] => {
+  return Array.prototype.slice.call(list, 0).sort((a, b) => {
+    const aa = fn(a)
+    const bb = fn(b)
+    return aa < bb ? -1 : aa > bb ? 1 : 0
+  })
+}
+
+export class Wantlist {
+  static Entry = Entry
+
+  private readonly set: Map<string, Entry>
+  private readonly _stats?: Stats
+
+  constructor (stats?: Stats, libp2p?: Libp2p) {
+    this.set = (libp2p != null)
+      ? trackedMap({
+        name: 'ipfs_bitswap_wantlist',
+        metrics: libp2p.metrics
+      })
+      : new Map()
+    this._stats = stats
+  }
+
+  get length (): number {
+    return this.set.size
+  }
+
+  add (cid: CID, priority: number, wantType: Message.Wantlist.WantType): void {
+    const cidStr = cid.toString(base58btc)
+    const entry = this.set.get(cidStr)
+
+    if (entry != null) {
+      entry.inc()
+      entry.priority = priority
+
+      // We can only overwrite want-have with want-block
+      if (entry.wantType === WantType.Have && wantType === WantType.Block) {
+        entry.wantType = wantType
+      }
+    } else {
+      this.set.set(cidStr, new Entry(cid, priority, wantType))
+      if (this._stats != null) {
+        this._stats.push(undefined, 'wantListSize', 1)
+      }
+    }
+  }
+
+  remove (cid: CID): void {
+    const cidStr = cid.toString(base58btc)
+    const entry = this.set.get(cidStr)
+
+    if (entry == null) {
+      return
+    }
+
+    entry.dec()
+
+    // only delete when no refs are held
+    if (entry.hasRefs()) {
+      return
+    }
+
+    this.set.delete(cidStr)
+    if (this._stats != null) {
+      this._stats.push(undefined, 'wantListSize', -1)
+    }
+  }
+
+  removeForce (cidStr: string): void {
+    if (this.set.has(cidStr)) {
+      this.set.delete(cidStr)
+    }
+  }
+
+  forEach (fn: (entry: Entry, key: string) => void): void {
+    this.set.forEach(fn)
+  }
+
+  entries (): IterableIterator<[string, Entry]> {
+    return this.set.entries()
+  }
+
+  sortedEntries (): Map<string, Entry> {
+    // TODO: Figure out if this is an actual bug.
+    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'
+    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))
+  }
+
+  contains (cid: CID): boolean {
+    const cidStr = cid.toString(base58btc)
+    return this.set.has(cidStr)
+  }
+
+  get (cid: CID): Entry | undefined {
+    const cidStr = cid.toString(base58btc)
+    return this.set.get(cidStr)
+  }
+}
